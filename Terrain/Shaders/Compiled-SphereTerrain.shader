Shader "Sphere/Terrain" {
	Properties {
		_Color ("Color Tint", Color) = (1,1,1,1)
		_MainTex ("Main (RGB)", 2D) = "white" {}
		_BumpMap ("Normalmap", 2D) = "bump" {}
		_MainTexHandoverDist ("Handover Distance", Float) = 1
		_DetailTex ("Detail (RGB)", 2D) = "white" {}
		_DetailVertTex ("Detail for Vertical Surfaces (RGB)", 2D) = "white" {}
		_DetailScale ("Detail Scale", Range(0,1000)) = 200
		_DetailVertScale ("Detail Scale", Range(0,1000)) = 200
		_DetailDist ("Detail Distance", Range(0,1)) = 0.00875
		_MinLight ("Minimum Light", Range(0,1)) = .5
		_Albedo ("Albedo Index", Range(0,5)) = 1.2
		_CityOverlayTex ("Overlay (RGB)", 2D) = "white" {}
		_CityOverlayDetailScale ("Overlay Detail Scale", Range(0,1000)) = 80
		_CityDarkOverlayDetailTex ("Overlay Detail (RGB) (A)", 2D) = "white" {}
		_CityLightOverlayDetailTex ("Overlay Detail (RGB) (A)", 2D) = "white" {}
		_SunDir ("Sun Direction", Vector) = (1,1,1,1)
		_PlanetOpacity ("PlanetOpacity", Float) = 1
	}


	
SubShader {

Tags { "Queue"="Geometry" "RenderType"="Opaque" }
	Fog { Mode Global}
	ColorMask RGB
	Cull Back Lighting On ZWrite On
	
	Pass {

		Lighting On
		Tags { "LightMode"="ForwardBase"}
		
		Program "vp" {
// Vertex combos: 60
//   d3d9 - ALU: 27 to 36
SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec4 tmpvar_3;
  tmpvar_3.x = gl_MultiTexCoord0.x;
  tmpvar_3.y = gl_MultiTexCoord0.y;
  tmpvar_3.z = gl_MultiTexCoord1.x;
  tmpvar_3.w = gl_MultiTexCoord1.y;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_3).xyz);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec3 norm_1;
  vec2 localCoords_2;
  vec2 uv_3;
  vec4 color_4;
  float r_5;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_6;
    y_over_x_6 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * r_5));
  uv_3.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_9;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_10;
    y_over_x_10 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_11;
    float x_12;
    x_12 = (y_over_x_10 * inversesqrt(((y_over_x_10 * y_over_x_10) + 1.0)));
    s_11 = (sign(x_12) * (1.5708 - (sqrt((1.0 - abs(x_12))) * (1.5708 + (abs(x_12) * (-0.214602 + (abs(x_12) * (0.0865667 + (abs(x_12) * -0.0310296)))))))));
    r_9 = s_11;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_9 = (s_11 + 3.14159);
      } else {
        r_9 = (r_9 - 3.14159);
      };
    };
  } else {
    r_9 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_13;
  tmpvar_13 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_14;
  tmpvar_14 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_15;
  tmpvar_15 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(tmpvar_13);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(tmpvar_13);
  vec4 tmpvar_17;
  tmpvar_17 = texture2DGradARB (_MainTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  float tmpvar_18;
  tmpvar_18 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec2 tmpvar_19;
  tmpvar_19 = (texture2DGradARB (_BumpMap, uv_3, tmpvar_16.xy, tmpvar_16.zw).wy - vec2(0.5, 0.5));
  localCoords_2.x = (tmpvar_19.x * 0.25);
  localCoords_2.y = (tmpvar_19.y * 0.5);
  uv_3.x = (uv_3.x - 0.5);
  vec2 tmpvar_20;
  tmpvar_20 = (uv_3 + localCoords_2);
  uv_3 = tmpvar_20;
  norm_1.z = cos((6.28319 * tmpvar_20.x));
  norm_1.x = sin((6.28319 * tmpvar_20.x));
  norm_1.y = cos((3.14159 * tmpvar_20.y));
  vec3 tmpvar_21;
  tmpvar_21 = -(norm_1);
  norm_1 = tmpvar_21;
  vec3 tmpvar_22;
  tmpvar_22 = abs(xlv_TEXCOORD6);
  float tmpvar_23;
  tmpvar_23 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  vec4 tmpvar_24;
  tmpvar_24 = (mix ((xlv_TEXCOORD1 + mix ((0.25 * (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_18)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_18)), tmpvar_22.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_18)), tmpvar_22.yyyy) - 0.5)), vec4(0.0, 0.0, 0.0, 0.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))), tmpvar_17, vec4(tmpvar_23)) * _Color);
  color_4.w = tmpvar_24.w;
  vec3 tmpvar_25;
  tmpvar_25 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * mix (clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), clamp (dot (tmpvar_21, -(_SunDir)), 0.0, 1.0), tmpvar_23)) * 4.0) * texture2D (_LightTexture0, vec2(dot (xlv_TEXCOORD3, xlv_TEXCOORD3))).w), 0.0, 1.0))), 0.0, 1.0) * clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0));
  color_4.xyz = (tmpvar_24.xyz + (_Albedo * tmpvar_25));
  color_4.xyz = (color_4.xyz * tmpvar_25);
  color_4.w = 1.0;
  gl_FragData[0] = color_4;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 31 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord5 o5
dcl_texcoord6 o6
def c13, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
mov r1.xyz, v2
mov r1.w, c13.x
dp4 r2.z, r1, c6
dp4 r2.x, r1, c4
dp4 r2.y, r1, c5
mov r0.zw, v4.xyxy
mov r0.xy, v3
dp4 r2.w, r0, r0
rsq r1.x, r2.w
mul r0.xyz, r1.x, r0
mov o6.xyz, -r0
dp3 r0.w, r2, r2
rsq r0.w, r0.w
mul o5.xyz, r0.w, r2
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
dp4 r0.w, v0, c7
add r1.xyz, -r0, c12
dp3 r1.x, r1, r1
rsq r1.x, r1.x
mov o2, v1
dp4 o4.z, r0, c10
dp4 o4.y, r0, c9
dp4 o4.x, r0, c8
rcp o1.x, r1.x
mov o3.xyz, v2
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  highp vec3 p_2;
  p_2 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_1;
  highp vec4 tmpvar_4;
  tmpvar_4.x = _glesMultiTexCoord0.x;
  tmpvar_4.y = _glesMultiTexCoord0.y;
  tmpvar_4.z = _glesMultiTexCoord1.x;
  tmpvar_4.w = _glesMultiTexCoord1.y;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_4).xyz);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float terminator_2;
  mediump vec3 light_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float handoff_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec3 norm_10;
  highp vec2 localCoords_11;
  mediump vec4 encnorm_12;
  mediump float vertLerp_13;
  mediump vec4 main_14;
  highp vec2 uv_15;
  mediump vec4 color_16;
  highp float r_17;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_18;
    y_over_x_18 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_19;
    highp float x_20;
    x_20 = (y_over_x_18 * inversesqrt(((y_over_x_18 * y_over_x_18) + 1.0)));
    s_19 = (sign(x_20) * (1.5708 - (sqrt((1.0 - abs(x_20))) * (1.5708 + (abs(x_20) * (-0.214602 + (abs(x_20) * (0.0865667 + (abs(x_20) * -0.0310296)))))))));
    r_17 = s_19;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_17 = (s_19 + 3.14159);
      } else {
        r_17 = (r_17 - 3.14159);
      };
    };
  } else {
    r_17 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_15.x = (0.5 + (0.159155 * r_17));
  uv_15.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_21;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_22;
    y_over_x_22 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_23;
    highp float x_24;
    x_24 = (y_over_x_22 * inversesqrt(((y_over_x_22 * y_over_x_22) + 1.0)));
    s_23 = (sign(x_24) * (1.5708 - (sqrt((1.0 - abs(x_24))) * (1.5708 + (abs(x_24) * (-0.214602 + (abs(x_24) * (0.0865667 + (abs(x_24) * -0.0310296)))))))));
    r_21 = s_23;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_21 = (s_23 + 3.14159);
      } else {
        r_21 = (r_21 - 3.14159);
      };
    };
  } else {
    r_21 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_25;
  tmpvar_25 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_26;
  tmpvar_26 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_28;
  tmpvar_28.x = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_28.y = dFdx(tmpvar_25);
  tmpvar_28.z = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_28.w = dFdy(tmpvar_25);
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2DGradEXT (_MainTex, uv_15, tmpvar_28.xy, tmpvar_28.zw);
  main_14 = tmpvar_29;
  highp vec2 tmpvar_30;
  tmpvar_30 = (xlv_TEXCOORD6.zy * _DetailScale);
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD6.zx * _DetailScale);
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.xy * _DetailScale);
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  highp float tmpvar_36;
  tmpvar_36 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_13 = tmpvar_36;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_DetailVertTex, tmpvar_33);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailTex, tmpvar_30);
  mediump vec4 tmpvar_39;
  tmpvar_39 = mix (tmpvar_37, tmpvar_38, vec4(vertLerp_13));
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailVertTex, tmpvar_34);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailTex, tmpvar_31);
  mediump vec4 tmpvar_42;
  tmpvar_42 = mix (tmpvar_40, tmpvar_41, vec4(vertLerp_13));
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailVertTex, tmpvar_35);
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailTex, tmpvar_32);
  mediump vec4 tmpvar_45;
  tmpvar_45 = mix (tmpvar_43, tmpvar_44, vec4(vertLerp_13));
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2DGradEXT (_BumpMap, uv_15, tmpvar_28.xy, tmpvar_28.zw);
  encnorm_12 = tmpvar_46;
  mediump vec2 tmpvar_47;
  tmpvar_47 = encnorm_12.wy;
  localCoords_11 = tmpvar_47;
  highp vec2 tmpvar_48;
  tmpvar_48 = (localCoords_11 - vec2(0.5, 0.5));
  localCoords_11.x = (tmpvar_48.x * 0.25);
  localCoords_11.y = (tmpvar_48.y * 0.5);
  uv_15.x = (uv_15.x - 0.5);
  highp vec2 tmpvar_49;
  tmpvar_49 = (uv_15 + localCoords_11);
  uv_15 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = cos((6.28319 * tmpvar_49.x));
  norm_10.z = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = sin((6.28319 * tmpvar_49.x));
  norm_10.x = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = cos((3.14159 * tmpvar_49.y));
  norm_10.y = tmpvar_52;
  mediump vec3 tmpvar_53;
  tmpvar_53 = -(norm_10);
  norm_10 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_55;
  tmpvar_55 = mix (tmpvar_45, tmpvar_39, tmpvar_54.xxxx);
  detail_9 = tmpvar_55;
  highp vec4 tmpvar_56;
  tmpvar_56 = (0.25 * (mix (detail_9, tmpvar_42, tmpvar_54.yyyy) - 0.5));
  detail_9 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_57;
  mediump vec4 tmpvar_58;
  tmpvar_58 = mix (detail_9, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_8));
  highp vec4 tmpvar_59;
  tmpvar_59 = (xlv_TEXCOORD1 + tmpvar_58);
  color_16 = tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_7 = tmpvar_60;
  mediump vec4 tmpvar_61;
  tmpvar_61 = (mix (color_16, main_14, vec4(handoff_7)) * _Color);
  color_16.w = tmpvar_61.w;
  highp vec3 tmpvar_62;
  tmpvar_62 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp float tmpvar_66;
  tmpvar_66 = texture2D (_LightTexture0, vec2(tmpvar_65)).w;
  mediump float tmpvar_67;
  tmpvar_67 = clamp ((((_LightColor0.w * mix (TNdotL_4, clamp (dot (tmpvar_53, -(_SunDir)), 0.0, 1.0), handoff_7)) * 4.0) * tmpvar_66), 0.0, 1.0);
  highp vec3 tmpvar_68;
  tmpvar_68 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_67)), 0.0, 1.0);
  light_3 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0);
  terminator_2 = tmpvar_69;
  mediump vec3 tmpvar_70;
  tmpvar_70 = (light_3 * terminator_2);
  light_3 = tmpvar_70;
  highp vec3 tmpvar_71;
  tmpvar_71 = (tmpvar_61.xyz + (_Albedo * tmpvar_70));
  color_16.xyz = tmpvar_71;
  color_16.xyz = (color_16.xyz * tmpvar_70);
  color_16.w = 1.0;
  tmpvar_1 = color_16;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  highp vec3 p_2;
  p_2 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_1;
  highp vec4 tmpvar_4;
  tmpvar_4.x = _glesMultiTexCoord0.x;
  tmpvar_4.y = _glesMultiTexCoord0.y;
  tmpvar_4.z = _glesMultiTexCoord1.x;
  tmpvar_4.w = _glesMultiTexCoord1.y;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_4).xyz);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float terminator_2;
  mediump vec3 light_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float handoff_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec3 norm_10;
  highp vec2 localCoords_11;
  mediump vec4 encnorm_12;
  mediump float vertLerp_13;
  mediump vec4 main_14;
  highp vec2 uv_15;
  mediump vec4 color_16;
  highp float r_17;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_18;
    y_over_x_18 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_19;
    highp float x_20;
    x_20 = (y_over_x_18 * inversesqrt(((y_over_x_18 * y_over_x_18) + 1.0)));
    s_19 = (sign(x_20) * (1.5708 - (sqrt((1.0 - abs(x_20))) * (1.5708 + (abs(x_20) * (-0.214602 + (abs(x_20) * (0.0865667 + (abs(x_20) * -0.0310296)))))))));
    r_17 = s_19;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_17 = (s_19 + 3.14159);
      } else {
        r_17 = (r_17 - 3.14159);
      };
    };
  } else {
    r_17 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_15.x = (0.5 + (0.159155 * r_17));
  uv_15.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_21;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_22;
    y_over_x_22 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_23;
    highp float x_24;
    x_24 = (y_over_x_22 * inversesqrt(((y_over_x_22 * y_over_x_22) + 1.0)));
    s_23 = (sign(x_24) * (1.5708 - (sqrt((1.0 - abs(x_24))) * (1.5708 + (abs(x_24) * (-0.214602 + (abs(x_24) * (0.0865667 + (abs(x_24) * -0.0310296)))))))));
    r_21 = s_23;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_21 = (s_23 + 3.14159);
      } else {
        r_21 = (r_21 - 3.14159);
      };
    };
  } else {
    r_21 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_25;
  tmpvar_25 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_26;
  tmpvar_26 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_28;
  tmpvar_28.x = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_28.y = dFdx(tmpvar_25);
  tmpvar_28.z = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_28.w = dFdy(tmpvar_25);
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2DGradEXT (_MainTex, uv_15, tmpvar_28.xy, tmpvar_28.zw);
  main_14 = tmpvar_29;
  highp vec2 tmpvar_30;
  tmpvar_30 = (xlv_TEXCOORD6.zy * _DetailScale);
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD6.zx * _DetailScale);
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.xy * _DetailScale);
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  highp float tmpvar_36;
  tmpvar_36 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_13 = tmpvar_36;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_DetailVertTex, tmpvar_33);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailTex, tmpvar_30);
  mediump vec4 tmpvar_39;
  tmpvar_39 = mix (tmpvar_37, tmpvar_38, vec4(vertLerp_13));
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailVertTex, tmpvar_34);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailTex, tmpvar_31);
  mediump vec4 tmpvar_42;
  tmpvar_42 = mix (tmpvar_40, tmpvar_41, vec4(vertLerp_13));
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailVertTex, tmpvar_35);
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailTex, tmpvar_32);
  mediump vec4 tmpvar_45;
  tmpvar_45 = mix (tmpvar_43, tmpvar_44, vec4(vertLerp_13));
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2DGradEXT (_BumpMap, uv_15, tmpvar_28.xy, tmpvar_28.zw);
  encnorm_12 = tmpvar_46;
  mediump vec2 tmpvar_47;
  tmpvar_47 = encnorm_12.wy;
  localCoords_11 = tmpvar_47;
  highp vec2 tmpvar_48;
  tmpvar_48 = (localCoords_11 - vec2(0.5, 0.5));
  localCoords_11.x = (tmpvar_48.x * 0.25);
  localCoords_11.y = (tmpvar_48.y * 0.5);
  uv_15.x = (uv_15.x - 0.5);
  highp vec2 tmpvar_49;
  tmpvar_49 = (uv_15 + localCoords_11);
  uv_15 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = cos((6.28319 * tmpvar_49.x));
  norm_10.z = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = sin((6.28319 * tmpvar_49.x));
  norm_10.x = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = cos((3.14159 * tmpvar_49.y));
  norm_10.y = tmpvar_52;
  mediump vec3 tmpvar_53;
  tmpvar_53 = -(norm_10);
  norm_10 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_55;
  tmpvar_55 = mix (tmpvar_45, tmpvar_39, tmpvar_54.xxxx);
  detail_9 = tmpvar_55;
  highp vec4 tmpvar_56;
  tmpvar_56 = (0.25 * (mix (detail_9, tmpvar_42, tmpvar_54.yyyy) - 0.5));
  detail_9 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_57;
  mediump vec4 tmpvar_58;
  tmpvar_58 = mix (detail_9, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_8));
  highp vec4 tmpvar_59;
  tmpvar_59 = (xlv_TEXCOORD1 + tmpvar_58);
  color_16 = tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_7 = tmpvar_60;
  mediump vec4 tmpvar_61;
  tmpvar_61 = (mix (color_16, main_14, vec4(handoff_7)) * _Color);
  color_16.w = tmpvar_61.w;
  highp vec3 tmpvar_62;
  tmpvar_62 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp float tmpvar_66;
  tmpvar_66 = texture2D (_LightTexture0, vec2(tmpvar_65)).w;
  mediump float tmpvar_67;
  tmpvar_67 = clamp ((((_LightColor0.w * mix (TNdotL_4, clamp (dot (tmpvar_53, -(_SunDir)), 0.0, 1.0), handoff_7)) * 4.0) * tmpvar_66), 0.0, 1.0);
  highp vec3 tmpvar_68;
  tmpvar_68 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_67)), 0.0, 1.0);
  light_3 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0);
  terminator_2 = tmpvar_69;
  mediump vec3 tmpvar_70;
  tmpvar_70 = (light_3 * terminator_2);
  light_3 = tmpvar_70;
  highp vec3 tmpvar_71;
  tmpvar_71 = (tmpvar_61.xyz + (_Albedo * tmpvar_70));
  color_16.xyz = tmpvar_71;
  color_16.xyz = (color_16.xyz * tmpvar_70);
  color_16.w = 1.0;
  tmpvar_1 = color_16;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 418
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 objnormal;
    highp vec3 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
};
#line 408
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 395
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 399
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 403
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp mat4 _Rotation;
#line 407
uniform highp mat4 _InvRotation;
#line 429
#line 454
#line 429
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 433
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    #line 437
    o.color = v.color;
    o.objnormal = v.normal;
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    #line 441
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.objnormal);
    xlv_TEXCOORD3 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereCoords);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 418
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 objnormal;
    highp vec3 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
};
#line 408
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 395
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 399
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 403
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp mat4 _Rotation;
#line 407
uniform highp mat4 _InvRotation;
#line 429
#line 454
#line 443
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 445
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 449
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 454
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    #line 458
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 462
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    highp vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    highp vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    highp vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    #line 466
    highp vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    highp vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    highp vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, (-IN.sphereCoords))) - 0.95)) + 0.5));
    #line 470
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    #line 474
    highp vec2 localCoords = encnorm.wy;
    localCoords -= vec2( 0.5);
    localCoords.x *= 0.25;
    localCoords.y *= 0.5;
    #line 478
    uv.x -= 0.5;
    uv += localCoords;
    mediump vec3 norm;
    norm.z = cos((6.28319 * uv.x));
    #line 482
    norm.x = sin((6.28319 * uv.x));
    norm.y = cos((3.14159 * uv.y));
    norm = (-norm);
    sphereNrm = abs(sphereNrm);
    #line 486
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = (0.25 * (mix( detail, detailY, vec4( sphereNrm.y)) - 0.5));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (IN.color + mix( detail.xyzw, vec4( 0.0), vec4( detailLevel)));
    #line 490
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    color = mix( color, main, vec4( handoff));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 494
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    #line 498
    lowp float atten = (texture( _LightTexture0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * 1.0);
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    mediump float terminator = xll_saturate_f(floor((1.01 + dot( IN.sphereCoords, _SunDir))));
    #line 502
    light *= terminator;
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    color.w = 1.0;
    #line 506
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.objnormal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec4 tmpvar_3;
  tmpvar_3.x = gl_MultiTexCoord0.x;
  tmpvar_3.y = gl_MultiTexCoord0.y;
  tmpvar_3.z = gl_MultiTexCoord1.x;
  tmpvar_3.w = gl_MultiTexCoord1.y;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_3).xyz);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec3 norm_1;
  vec2 localCoords_2;
  vec2 uv_3;
  vec4 color_4;
  float r_5;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_6;
    y_over_x_6 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * r_5));
  uv_3.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_9;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_10;
    y_over_x_10 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_11;
    float x_12;
    x_12 = (y_over_x_10 * inversesqrt(((y_over_x_10 * y_over_x_10) + 1.0)));
    s_11 = (sign(x_12) * (1.5708 - (sqrt((1.0 - abs(x_12))) * (1.5708 + (abs(x_12) * (-0.214602 + (abs(x_12) * (0.0865667 + (abs(x_12) * -0.0310296)))))))));
    r_9 = s_11;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_9 = (s_11 + 3.14159);
      } else {
        r_9 = (r_9 - 3.14159);
      };
    };
  } else {
    r_9 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_13;
  tmpvar_13 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_14;
  tmpvar_14 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_15;
  tmpvar_15 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(tmpvar_13);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(tmpvar_13);
  vec4 tmpvar_17;
  tmpvar_17 = texture2DGradARB (_MainTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  float tmpvar_18;
  tmpvar_18 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec2 tmpvar_19;
  tmpvar_19 = (texture2DGradARB (_BumpMap, uv_3, tmpvar_16.xy, tmpvar_16.zw).wy - vec2(0.5, 0.5));
  localCoords_2.x = (tmpvar_19.x * 0.25);
  localCoords_2.y = (tmpvar_19.y * 0.5);
  uv_3.x = (uv_3.x - 0.5);
  vec2 tmpvar_20;
  tmpvar_20 = (uv_3 + localCoords_2);
  uv_3 = tmpvar_20;
  norm_1.z = cos((6.28319 * tmpvar_20.x));
  norm_1.x = sin((6.28319 * tmpvar_20.x));
  norm_1.y = cos((3.14159 * tmpvar_20.y));
  vec3 tmpvar_21;
  tmpvar_21 = -(norm_1);
  norm_1 = tmpvar_21;
  vec3 tmpvar_22;
  tmpvar_22 = abs(xlv_TEXCOORD6);
  float tmpvar_23;
  tmpvar_23 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  vec4 tmpvar_24;
  tmpvar_24 = (mix ((xlv_TEXCOORD1 + mix ((0.25 * (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_18)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_18)), tmpvar_22.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_18)), tmpvar_22.yyyy) - 0.5)), vec4(0.0, 0.0, 0.0, 0.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))), tmpvar_17, vec4(tmpvar_23)) * _Color);
  color_4.w = tmpvar_24.w;
  vec3 tmpvar_25;
  tmpvar_25 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * mix (clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), clamp (dot (tmpvar_21, -(_SunDir)), 0.0, 1.0), tmpvar_23)) * 4.0), 0.0, 1.0))), 0.0, 1.0) * clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0));
  color_4.xyz = (tmpvar_24.xyz + (_Albedo * tmpvar_25));
  color_4.xyz = (color_4.xyz * tmpvar_25);
  color_4.w = 1.0;
  gl_FragData[0] = color_4;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
"vs_3_0
; 27 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord5 o4
dcl_texcoord6 o5
def c9, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
mov r0.xyz, v2
mov r0.w, c9.x
dp4 r1.z, r0, c6
dp4 r1.x, r0, c4
dp4 r1.y, r0, c5
dp3 r0.x, r1, r1
rsq r1.w, r0.x
mul o4.xyz, r1.w, r1
mov r0.zw, v4.xyxy
mov r0.xy, v3
dp4 r0.w, r0, r0
rsq r0.w, r0.w
mul r0.xyz, r0.w, r0
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
add r1.xyz, -r1, c8
dp3 r0.w, r1, r1
mov o5.xyz, -r0
rsq r0.x, r0.w
mov o2, v1
rcp o1.x, r0.x
mov o3.xyz, v2
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  highp vec3 p_2;
  p_2 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_1;
  highp vec4 tmpvar_4;
  tmpvar_4.x = _glesMultiTexCoord0.x;
  tmpvar_4.y = _glesMultiTexCoord0.y;
  tmpvar_4.z = _glesMultiTexCoord1.x;
  tmpvar_4.w = _glesMultiTexCoord1.y;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_4).xyz);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float terminator_2;
  mediump vec3 light_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float handoff_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec3 norm_10;
  highp vec2 localCoords_11;
  mediump vec4 encnorm_12;
  mediump float vertLerp_13;
  mediump vec4 main_14;
  highp vec2 uv_15;
  mediump vec4 color_16;
  highp float r_17;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_18;
    y_over_x_18 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_19;
    highp float x_20;
    x_20 = (y_over_x_18 * inversesqrt(((y_over_x_18 * y_over_x_18) + 1.0)));
    s_19 = (sign(x_20) * (1.5708 - (sqrt((1.0 - abs(x_20))) * (1.5708 + (abs(x_20) * (-0.214602 + (abs(x_20) * (0.0865667 + (abs(x_20) * -0.0310296)))))))));
    r_17 = s_19;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_17 = (s_19 + 3.14159);
      } else {
        r_17 = (r_17 - 3.14159);
      };
    };
  } else {
    r_17 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_15.x = (0.5 + (0.159155 * r_17));
  uv_15.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_21;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_22;
    y_over_x_22 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_23;
    highp float x_24;
    x_24 = (y_over_x_22 * inversesqrt(((y_over_x_22 * y_over_x_22) + 1.0)));
    s_23 = (sign(x_24) * (1.5708 - (sqrt((1.0 - abs(x_24))) * (1.5708 + (abs(x_24) * (-0.214602 + (abs(x_24) * (0.0865667 + (abs(x_24) * -0.0310296)))))))));
    r_21 = s_23;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_21 = (s_23 + 3.14159);
      } else {
        r_21 = (r_21 - 3.14159);
      };
    };
  } else {
    r_21 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_25;
  tmpvar_25 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_26;
  tmpvar_26 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_28;
  tmpvar_28.x = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_28.y = dFdx(tmpvar_25);
  tmpvar_28.z = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_28.w = dFdy(tmpvar_25);
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2DGradEXT (_MainTex, uv_15, tmpvar_28.xy, tmpvar_28.zw);
  main_14 = tmpvar_29;
  highp vec2 tmpvar_30;
  tmpvar_30 = (xlv_TEXCOORD6.zy * _DetailScale);
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD6.zx * _DetailScale);
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.xy * _DetailScale);
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  highp float tmpvar_36;
  tmpvar_36 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_13 = tmpvar_36;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_DetailVertTex, tmpvar_33);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailTex, tmpvar_30);
  mediump vec4 tmpvar_39;
  tmpvar_39 = mix (tmpvar_37, tmpvar_38, vec4(vertLerp_13));
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailVertTex, tmpvar_34);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailTex, tmpvar_31);
  mediump vec4 tmpvar_42;
  tmpvar_42 = mix (tmpvar_40, tmpvar_41, vec4(vertLerp_13));
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailVertTex, tmpvar_35);
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailTex, tmpvar_32);
  mediump vec4 tmpvar_45;
  tmpvar_45 = mix (tmpvar_43, tmpvar_44, vec4(vertLerp_13));
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2DGradEXT (_BumpMap, uv_15, tmpvar_28.xy, tmpvar_28.zw);
  encnorm_12 = tmpvar_46;
  mediump vec2 tmpvar_47;
  tmpvar_47 = encnorm_12.wy;
  localCoords_11 = tmpvar_47;
  highp vec2 tmpvar_48;
  tmpvar_48 = (localCoords_11 - vec2(0.5, 0.5));
  localCoords_11.x = (tmpvar_48.x * 0.25);
  localCoords_11.y = (tmpvar_48.y * 0.5);
  uv_15.x = (uv_15.x - 0.5);
  highp vec2 tmpvar_49;
  tmpvar_49 = (uv_15 + localCoords_11);
  uv_15 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = cos((6.28319 * tmpvar_49.x));
  norm_10.z = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = sin((6.28319 * tmpvar_49.x));
  norm_10.x = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = cos((3.14159 * tmpvar_49.y));
  norm_10.y = tmpvar_52;
  mediump vec3 tmpvar_53;
  tmpvar_53 = -(norm_10);
  norm_10 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_55;
  tmpvar_55 = mix (tmpvar_45, tmpvar_39, tmpvar_54.xxxx);
  detail_9 = tmpvar_55;
  highp vec4 tmpvar_56;
  tmpvar_56 = (0.25 * (mix (detail_9, tmpvar_42, tmpvar_54.yyyy) - 0.5));
  detail_9 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_57;
  mediump vec4 tmpvar_58;
  tmpvar_58 = mix (detail_9, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_8));
  highp vec4 tmpvar_59;
  tmpvar_59 = (xlv_TEXCOORD1 + tmpvar_58);
  color_16 = tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_7 = tmpvar_60;
  mediump vec4 tmpvar_61;
  tmpvar_61 = (mix (color_16, main_14, vec4(handoff_7)) * _Color);
  color_16.w = tmpvar_61.w;
  highp vec3 tmpvar_62;
  tmpvar_62 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_62;
  lowp vec3 tmpvar_63;
  tmpvar_63 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_64;
  mediump float tmpvar_65;
  tmpvar_65 = clamp (((_LightColor0.w * mix (TNdotL_4, clamp (dot (tmpvar_53, -(_SunDir)), 0.0, 1.0), handoff_7)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_66;
  tmpvar_66 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_65)), 0.0, 1.0);
  light_3 = tmpvar_66;
  highp float tmpvar_67;
  tmpvar_67 = clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0);
  terminator_2 = tmpvar_67;
  mediump vec3 tmpvar_68;
  tmpvar_68 = (light_3 * terminator_2);
  light_3 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = (tmpvar_61.xyz + (_Albedo * tmpvar_68));
  color_16.xyz = tmpvar_69;
  color_16.xyz = (color_16.xyz * tmpvar_68);
  color_16.w = 1.0;
  tmpvar_1 = color_16;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  highp vec3 p_2;
  p_2 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_1;
  highp vec4 tmpvar_4;
  tmpvar_4.x = _glesMultiTexCoord0.x;
  tmpvar_4.y = _glesMultiTexCoord0.y;
  tmpvar_4.z = _glesMultiTexCoord1.x;
  tmpvar_4.w = _glesMultiTexCoord1.y;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_4).xyz);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float terminator_2;
  mediump vec3 light_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float handoff_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec3 norm_10;
  highp vec2 localCoords_11;
  mediump vec4 encnorm_12;
  mediump float vertLerp_13;
  mediump vec4 main_14;
  highp vec2 uv_15;
  mediump vec4 color_16;
  highp float r_17;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_18;
    y_over_x_18 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_19;
    highp float x_20;
    x_20 = (y_over_x_18 * inversesqrt(((y_over_x_18 * y_over_x_18) + 1.0)));
    s_19 = (sign(x_20) * (1.5708 - (sqrt((1.0 - abs(x_20))) * (1.5708 + (abs(x_20) * (-0.214602 + (abs(x_20) * (0.0865667 + (abs(x_20) * -0.0310296)))))))));
    r_17 = s_19;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_17 = (s_19 + 3.14159);
      } else {
        r_17 = (r_17 - 3.14159);
      };
    };
  } else {
    r_17 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_15.x = (0.5 + (0.159155 * r_17));
  uv_15.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_21;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_22;
    y_over_x_22 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_23;
    highp float x_24;
    x_24 = (y_over_x_22 * inversesqrt(((y_over_x_22 * y_over_x_22) + 1.0)));
    s_23 = (sign(x_24) * (1.5708 - (sqrt((1.0 - abs(x_24))) * (1.5708 + (abs(x_24) * (-0.214602 + (abs(x_24) * (0.0865667 + (abs(x_24) * -0.0310296)))))))));
    r_21 = s_23;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_21 = (s_23 + 3.14159);
      } else {
        r_21 = (r_21 - 3.14159);
      };
    };
  } else {
    r_21 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_25;
  tmpvar_25 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_26;
  tmpvar_26 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_28;
  tmpvar_28.x = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_28.y = dFdx(tmpvar_25);
  tmpvar_28.z = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_28.w = dFdy(tmpvar_25);
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2DGradEXT (_MainTex, uv_15, tmpvar_28.xy, tmpvar_28.zw);
  main_14 = tmpvar_29;
  highp vec2 tmpvar_30;
  tmpvar_30 = (xlv_TEXCOORD6.zy * _DetailScale);
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD6.zx * _DetailScale);
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.xy * _DetailScale);
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  highp float tmpvar_36;
  tmpvar_36 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_13 = tmpvar_36;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_DetailVertTex, tmpvar_33);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailTex, tmpvar_30);
  mediump vec4 tmpvar_39;
  tmpvar_39 = mix (tmpvar_37, tmpvar_38, vec4(vertLerp_13));
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailVertTex, tmpvar_34);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailTex, tmpvar_31);
  mediump vec4 tmpvar_42;
  tmpvar_42 = mix (tmpvar_40, tmpvar_41, vec4(vertLerp_13));
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailVertTex, tmpvar_35);
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailTex, tmpvar_32);
  mediump vec4 tmpvar_45;
  tmpvar_45 = mix (tmpvar_43, tmpvar_44, vec4(vertLerp_13));
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2DGradEXT (_BumpMap, uv_15, tmpvar_28.xy, tmpvar_28.zw);
  encnorm_12 = tmpvar_46;
  mediump vec2 tmpvar_47;
  tmpvar_47 = encnorm_12.wy;
  localCoords_11 = tmpvar_47;
  highp vec2 tmpvar_48;
  tmpvar_48 = (localCoords_11 - vec2(0.5, 0.5));
  localCoords_11.x = (tmpvar_48.x * 0.25);
  localCoords_11.y = (tmpvar_48.y * 0.5);
  uv_15.x = (uv_15.x - 0.5);
  highp vec2 tmpvar_49;
  tmpvar_49 = (uv_15 + localCoords_11);
  uv_15 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = cos((6.28319 * tmpvar_49.x));
  norm_10.z = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = sin((6.28319 * tmpvar_49.x));
  norm_10.x = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = cos((3.14159 * tmpvar_49.y));
  norm_10.y = tmpvar_52;
  mediump vec3 tmpvar_53;
  tmpvar_53 = -(norm_10);
  norm_10 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_55;
  tmpvar_55 = mix (tmpvar_45, tmpvar_39, tmpvar_54.xxxx);
  detail_9 = tmpvar_55;
  highp vec4 tmpvar_56;
  tmpvar_56 = (0.25 * (mix (detail_9, tmpvar_42, tmpvar_54.yyyy) - 0.5));
  detail_9 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_57;
  mediump vec4 tmpvar_58;
  tmpvar_58 = mix (detail_9, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_8));
  highp vec4 tmpvar_59;
  tmpvar_59 = (xlv_TEXCOORD1 + tmpvar_58);
  color_16 = tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_7 = tmpvar_60;
  mediump vec4 tmpvar_61;
  tmpvar_61 = (mix (color_16, main_14, vec4(handoff_7)) * _Color);
  color_16.w = tmpvar_61.w;
  highp vec3 tmpvar_62;
  tmpvar_62 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_62;
  lowp vec3 tmpvar_63;
  tmpvar_63 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_64;
  mediump float tmpvar_65;
  tmpvar_65 = clamp (((_LightColor0.w * mix (TNdotL_4, clamp (dot (tmpvar_53, -(_SunDir)), 0.0, 1.0), handoff_7)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_66;
  tmpvar_66 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_65)), 0.0, 1.0);
  light_3 = tmpvar_66;
  highp float tmpvar_67;
  tmpvar_67 = clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0);
  terminator_2 = tmpvar_67;
  mediump vec3 tmpvar_68;
  tmpvar_68 = (light_3 * terminator_2);
  light_3 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = (tmpvar_61.xyz + (_Albedo * tmpvar_68));
  color_16.xyz = tmpvar_69;
  color_16.xyz = (color_16.xyz * tmpvar_68);
  color_16.w = 1.0;
  tmpvar_1 = color_16;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 416
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 objnormal;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
};
#line 406
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 393
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 397
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 401
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp mat4 _Rotation;
#line 405
uniform highp mat4 _InvRotation;
#line 426
#line 439
#line 426
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 430
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    #line 434
    o.color = v.color;
    o.objnormal = v.normal;
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.objnormal);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereCoords);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 416
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 objnormal;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
};
#line 406
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 393
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 397
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 401
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp mat4 _Rotation;
#line 405
uniform highp mat4 _InvRotation;
#line 426
#line 439
#line 439
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 443
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 447
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 450
lowp vec4 frag( in v2f IN ) {
    #line 452
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 456
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    highp vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 460
    highp vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    highp vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    highp vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    highp vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 464
    highp vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, (-IN.sphereCoords))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 468
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    highp vec2 localCoords = encnorm.wy;
    localCoords -= vec2( 0.5);
    #line 472
    localCoords.x *= 0.25;
    localCoords.y *= 0.5;
    uv.x -= 0.5;
    uv += localCoords;
    #line 476
    mediump vec3 norm;
    norm.z = cos((6.28319 * uv.x));
    norm.x = sin((6.28319 * uv.x));
    norm.y = cos((3.14159 * uv.y));
    #line 480
    norm = (-norm);
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = (0.25 * (mix( detail, detailY, vec4( sphereNrm.y)) - 0.5));
    #line 484
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (IN.color + mix( detail.xyzw, vec4( 0.0), vec4( detailLevel)));
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    color = mix( color, main, vec4( handoff));
    #line 488
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    #line 492
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    lowp float atten = 1.0;
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    #line 496
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    mediump float terminator = xll_saturate_f(floor((1.01 + dot( IN.sphereCoords, _SunDir))));
    light *= terminator;
    color.xyz += (_Albedo * light);
    #line 500
    color.xyz *= light;
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.objnormal = vec3(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec4 tmpvar_3;
  tmpvar_3.x = gl_MultiTexCoord0.x;
  tmpvar_3.y = gl_MultiTexCoord0.y;
  tmpvar_3.z = gl_MultiTexCoord1.x;
  tmpvar_3.w = gl_MultiTexCoord1.y;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_3).xyz);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec3 norm_1;
  vec2 localCoords_2;
  vec2 uv_3;
  vec4 color_4;
  float r_5;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_6;
    y_over_x_6 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * r_5));
  uv_3.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_9;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_10;
    y_over_x_10 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_11;
    float x_12;
    x_12 = (y_over_x_10 * inversesqrt(((y_over_x_10 * y_over_x_10) + 1.0)));
    s_11 = (sign(x_12) * (1.5708 - (sqrt((1.0 - abs(x_12))) * (1.5708 + (abs(x_12) * (-0.214602 + (abs(x_12) * (0.0865667 + (abs(x_12) * -0.0310296)))))))));
    r_9 = s_11;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_9 = (s_11 + 3.14159);
      } else {
        r_9 = (r_9 - 3.14159);
      };
    };
  } else {
    r_9 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_13;
  tmpvar_13 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_14;
  tmpvar_14 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_15;
  tmpvar_15 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(tmpvar_13);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(tmpvar_13);
  vec4 tmpvar_17;
  tmpvar_17 = texture2DGradARB (_MainTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  float tmpvar_18;
  tmpvar_18 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec2 tmpvar_19;
  tmpvar_19 = (texture2DGradARB (_BumpMap, uv_3, tmpvar_16.xy, tmpvar_16.zw).wy - vec2(0.5, 0.5));
  localCoords_2.x = (tmpvar_19.x * 0.25);
  localCoords_2.y = (tmpvar_19.y * 0.5);
  uv_3.x = (uv_3.x - 0.5);
  vec2 tmpvar_20;
  tmpvar_20 = (uv_3 + localCoords_2);
  uv_3 = tmpvar_20;
  norm_1.z = cos((6.28319 * tmpvar_20.x));
  norm_1.x = sin((6.28319 * tmpvar_20.x));
  norm_1.y = cos((3.14159 * tmpvar_20.y));
  vec3 tmpvar_21;
  tmpvar_21 = -(norm_1);
  norm_1 = tmpvar_21;
  vec3 tmpvar_22;
  tmpvar_22 = abs(xlv_TEXCOORD6);
  float tmpvar_23;
  tmpvar_23 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  vec4 tmpvar_24;
  tmpvar_24 = (mix ((xlv_TEXCOORD1 + mix ((0.25 * (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_18)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_18)), tmpvar_22.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_18)), tmpvar_22.yyyy) - 0.5)), vec4(0.0, 0.0, 0.0, 0.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))), tmpvar_17, vec4(tmpvar_23)) * _Color);
  color_4.w = tmpvar_24.w;
  vec3 tmpvar_25;
  tmpvar_25 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * mix (clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), clamp (dot (tmpvar_21, -(_SunDir)), 0.0, 1.0), tmpvar_23)) * 4.0) * ((float((xlv_TEXCOORD3.z > 0.0)) * texture2D (_LightTexture0, ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5)).w) * texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz))).w)), 0.0, 1.0))), 0.0, 1.0) * clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0));
  color_4.xyz = (tmpvar_24.xyz + (_Albedo * tmpvar_25));
  color_4.xyz = (color_4.xyz * tmpvar_25);
  color_4.w = 1.0;
  gl_FragData[0] = color_4;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 32 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord5 o5
dcl_texcoord6 o6
def c13, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
mov r1.xyz, v2
mov r1.w, c13.x
dp4 r2.z, r1, c6
dp4 r2.x, r1, c4
dp4 r2.y, r1, c5
mov r0.zw, v4.xyxy
mov r0.xy, v3
dp4 r2.w, r0, r0
rsq r1.x, r2.w
mul r0.xyz, r1.x, r0
mov o6.xyz, -r0
dp3 r0.w, r2, r2
rsq r0.w, r0.w
mul o5.xyz, r0.w, r2
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
dp4 r0.w, v0, c7
add r1.xyz, -r0, c12
dp3 r1.x, r1, r1
rsq r1.x, r1.x
mov o2, v1
dp4 o4.w, r0, c11
dp4 o4.z, r0, c10
dp4 o4.y, r0, c9
dp4 o4.x, r0, c8
rcp o1.x, r1.x
mov o3.xyz, v2
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  highp vec3 p_2;
  p_2 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_1;
  highp vec4 tmpvar_4;
  tmpvar_4.x = _glesMultiTexCoord0.x;
  tmpvar_4.y = _glesMultiTexCoord0.y;
  tmpvar_4.z = _glesMultiTexCoord1.x;
  tmpvar_4.w = _glesMultiTexCoord1.y;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_4).xyz);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float terminator_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float TNdotL_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump float handoff_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec3 norm_11;
  highp vec2 localCoords_12;
  mediump vec4 encnorm_13;
  mediump float vertLerp_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD6.zy * _DetailScale);
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zx * _DetailScale);
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.xy * _DetailScale);
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  highp float tmpvar_37;
  tmpvar_37 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_14 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailVertTex, tmpvar_34);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailTex, tmpvar_31);
  mediump vec4 tmpvar_40;
  tmpvar_40 = mix (tmpvar_38, tmpvar_39, vec4(vertLerp_14));
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailVertTex, tmpvar_35);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailTex, tmpvar_32);
  mediump vec4 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41, tmpvar_42, vec4(vertLerp_14));
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailVertTex, tmpvar_36);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, tmpvar_33);
  mediump vec4 tmpvar_46;
  tmpvar_46 = mix (tmpvar_44, tmpvar_45, vec4(vertLerp_14));
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2DGradEXT (_BumpMap, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  encnorm_13 = tmpvar_47;
  mediump vec2 tmpvar_48;
  tmpvar_48 = encnorm_13.wy;
  localCoords_12 = tmpvar_48;
  highp vec2 tmpvar_49;
  tmpvar_49 = (localCoords_12 - vec2(0.5, 0.5));
  localCoords_12.x = (tmpvar_49.x * 0.25);
  localCoords_12.y = (tmpvar_49.y * 0.5);
  uv_16.x = (uv_16.x - 0.5);
  highp vec2 tmpvar_50;
  tmpvar_50 = (uv_16 + localCoords_12);
  uv_16 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = cos((6.28319 * tmpvar_50.x));
  norm_11.z = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = sin((6.28319 * tmpvar_50.x));
  norm_11.x = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = cos((3.14159 * tmpvar_50.y));
  norm_11.y = tmpvar_53;
  mediump vec3 tmpvar_54;
  tmpvar_54 = -(norm_11);
  norm_11 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_56;
  tmpvar_56 = mix (tmpvar_46, tmpvar_40, tmpvar_55.xxxx);
  detail_10 = tmpvar_56;
  highp vec4 tmpvar_57;
  tmpvar_57 = (0.25 * (mix (detail_10, tmpvar_43, tmpvar_55.yyyy) - 0.5));
  detail_10 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_9 = tmpvar_58;
  mediump vec4 tmpvar_59;
  tmpvar_59 = mix (detail_10, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_9));
  highp vec4 tmpvar_60;
  tmpvar_60 = (xlv_TEXCOORD1 + tmpvar_59);
  color_17 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_8 = tmpvar_61;
  mediump vec4 tmpvar_62;
  tmpvar_62 = (mix (color_17, main_15, vec4(handoff_8)) * _Color);
  color_17.w = tmpvar_62.w;
  highp vec3 tmpvar_63;
  tmpvar_63 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = clamp (dot (xlv_TEXCOORD5, lightDirection_6), 0.0, 1.0);
  TNdotL_5 = tmpvar_65;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_66 = texture2D (_LightTexture0, P_67);
  highp float tmpvar_68;
  tmpvar_68 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_69;
  tmpvar_69 = texture2D (_LightTextureB0, vec2(tmpvar_68));
  highp float tmpvar_70;
  tmpvar_70 = ((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_66.w) * tmpvar_69.w);
  atten_4 = tmpvar_70;
  mediump float tmpvar_71;
  tmpvar_71 = clamp ((((_LightColor0.w * mix (TNdotL_5, clamp (dot (tmpvar_54, -(_SunDir)), 0.0, 1.0), handoff_8)) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_72;
  tmpvar_72 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_71)), 0.0, 1.0);
  light_3 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0);
  terminator_2 = tmpvar_73;
  mediump vec3 tmpvar_74;
  tmpvar_74 = (light_3 * terminator_2);
  light_3 = tmpvar_74;
  highp vec3 tmpvar_75;
  tmpvar_75 = (tmpvar_62.xyz + (_Albedo * tmpvar_74));
  color_17.xyz = tmpvar_75;
  color_17.xyz = (color_17.xyz * tmpvar_74);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  highp vec3 p_2;
  p_2 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_1;
  highp vec4 tmpvar_4;
  tmpvar_4.x = _glesMultiTexCoord0.x;
  tmpvar_4.y = _glesMultiTexCoord0.y;
  tmpvar_4.z = _glesMultiTexCoord1.x;
  tmpvar_4.w = _glesMultiTexCoord1.y;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_4).xyz);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float terminator_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float TNdotL_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump float handoff_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec3 norm_11;
  highp vec2 localCoords_12;
  mediump vec4 encnorm_13;
  mediump float vertLerp_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD6.zy * _DetailScale);
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zx * _DetailScale);
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.xy * _DetailScale);
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  highp float tmpvar_37;
  tmpvar_37 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_14 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailVertTex, tmpvar_34);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailTex, tmpvar_31);
  mediump vec4 tmpvar_40;
  tmpvar_40 = mix (tmpvar_38, tmpvar_39, vec4(vertLerp_14));
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailVertTex, tmpvar_35);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailTex, tmpvar_32);
  mediump vec4 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41, tmpvar_42, vec4(vertLerp_14));
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailVertTex, tmpvar_36);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, tmpvar_33);
  mediump vec4 tmpvar_46;
  tmpvar_46 = mix (tmpvar_44, tmpvar_45, vec4(vertLerp_14));
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2DGradEXT (_BumpMap, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  encnorm_13 = tmpvar_47;
  mediump vec2 tmpvar_48;
  tmpvar_48 = encnorm_13.wy;
  localCoords_12 = tmpvar_48;
  highp vec2 tmpvar_49;
  tmpvar_49 = (localCoords_12 - vec2(0.5, 0.5));
  localCoords_12.x = (tmpvar_49.x * 0.25);
  localCoords_12.y = (tmpvar_49.y * 0.5);
  uv_16.x = (uv_16.x - 0.5);
  highp vec2 tmpvar_50;
  tmpvar_50 = (uv_16 + localCoords_12);
  uv_16 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = cos((6.28319 * tmpvar_50.x));
  norm_11.z = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = sin((6.28319 * tmpvar_50.x));
  norm_11.x = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = cos((3.14159 * tmpvar_50.y));
  norm_11.y = tmpvar_53;
  mediump vec3 tmpvar_54;
  tmpvar_54 = -(norm_11);
  norm_11 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_56;
  tmpvar_56 = mix (tmpvar_46, tmpvar_40, tmpvar_55.xxxx);
  detail_10 = tmpvar_56;
  highp vec4 tmpvar_57;
  tmpvar_57 = (0.25 * (mix (detail_10, tmpvar_43, tmpvar_55.yyyy) - 0.5));
  detail_10 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_9 = tmpvar_58;
  mediump vec4 tmpvar_59;
  tmpvar_59 = mix (detail_10, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_9));
  highp vec4 tmpvar_60;
  tmpvar_60 = (xlv_TEXCOORD1 + tmpvar_59);
  color_17 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_8 = tmpvar_61;
  mediump vec4 tmpvar_62;
  tmpvar_62 = (mix (color_17, main_15, vec4(handoff_8)) * _Color);
  color_17.w = tmpvar_62.w;
  highp vec3 tmpvar_63;
  tmpvar_63 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = clamp (dot (xlv_TEXCOORD5, lightDirection_6), 0.0, 1.0);
  TNdotL_5 = tmpvar_65;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_66 = texture2D (_LightTexture0, P_67);
  highp float tmpvar_68;
  tmpvar_68 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_69;
  tmpvar_69 = texture2D (_LightTextureB0, vec2(tmpvar_68));
  highp float tmpvar_70;
  tmpvar_70 = ((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_66.w) * tmpvar_69.w);
  atten_4 = tmpvar_70;
  mediump float tmpvar_71;
  tmpvar_71 = clamp ((((_LightColor0.w * mix (TNdotL_5, clamp (dot (tmpvar_54, -(_SunDir)), 0.0, 1.0), handoff_8)) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_72;
  tmpvar_72 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_71)), 0.0, 1.0);
  light_3 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0);
  terminator_2 = tmpvar_73;
  mediump vec3 tmpvar_74;
  tmpvar_74 = (light_3 * terminator_2);
  light_3 = tmpvar_74;
  highp vec3 tmpvar_75;
  tmpvar_75 = (tmpvar_62.xyz + (_Albedo * tmpvar_74));
  color_17.xyz = tmpvar_75;
  color_17.xyz = (color_17.xyz * tmpvar_74);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 326
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 427
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 objnormal;
    highp vec4 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
};
#line 417
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 336
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 349
#line 357
#line 371
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 404
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 408
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 412
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp mat4 _Rotation;
#line 416
uniform highp mat4 _InvRotation;
#line 438
#line 463
#line 438
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 442
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    #line 446
    o.color = v.color;
    o.objnormal = v.normal;
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    #line 450
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.objnormal);
    xlv_TEXCOORD3 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereCoords);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 326
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 427
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 objnormal;
    highp vec4 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
};
#line 417
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 336
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 349
#line 357
#line 371
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 404
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 408
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 412
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp mat4 _Rotation;
#line 416
uniform highp mat4 _InvRotation;
#line 438
#line 463
#line 452
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 454
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 458
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 322
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    #line 324
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 318
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    #line 320
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 463
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    #line 467
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 471
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    highp vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    highp vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    highp vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    #line 475
    highp vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    highp vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    highp vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, (-IN.sphereCoords))) - 0.95)) + 0.5));
    #line 479
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    #line 483
    highp vec2 localCoords = encnorm.wy;
    localCoords -= vec2( 0.5);
    localCoords.x *= 0.25;
    localCoords.y *= 0.5;
    #line 487
    uv.x -= 0.5;
    uv += localCoords;
    mediump vec3 norm;
    norm.z = cos((6.28319 * uv.x));
    #line 491
    norm.x = sin((6.28319 * uv.x));
    norm.y = cos((3.14159 * uv.y));
    norm = (-norm);
    sphereNrm = abs(sphereNrm);
    #line 495
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = (0.25 * (mix( detail, detailY, vec4( sphereNrm.y)) - 0.5));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (IN.color + mix( detail.xyzw, vec4( 0.0), vec4( detailLevel)));
    #line 499
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    color = mix( color, main, vec4( handoff));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 503
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    #line 507
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * 1.0);
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    mediump float terminator = xll_saturate_f(floor((1.01 + dot( IN.sphereCoords, _SunDir))));
    #line 511
    light *= terminator;
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    color.w = 1.0;
    #line 515
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.objnormal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec4 tmpvar_3;
  tmpvar_3.x = gl_MultiTexCoord0.x;
  tmpvar_3.y = gl_MultiTexCoord0.y;
  tmpvar_3.z = gl_MultiTexCoord1.x;
  tmpvar_3.w = gl_MultiTexCoord1.y;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_3).xyz);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec3 norm_1;
  vec2 localCoords_2;
  vec2 uv_3;
  vec4 color_4;
  float r_5;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_6;
    y_over_x_6 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * r_5));
  uv_3.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_9;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_10;
    y_over_x_10 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_11;
    float x_12;
    x_12 = (y_over_x_10 * inversesqrt(((y_over_x_10 * y_over_x_10) + 1.0)));
    s_11 = (sign(x_12) * (1.5708 - (sqrt((1.0 - abs(x_12))) * (1.5708 + (abs(x_12) * (-0.214602 + (abs(x_12) * (0.0865667 + (abs(x_12) * -0.0310296)))))))));
    r_9 = s_11;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_9 = (s_11 + 3.14159);
      } else {
        r_9 = (r_9 - 3.14159);
      };
    };
  } else {
    r_9 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_13;
  tmpvar_13 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_14;
  tmpvar_14 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_15;
  tmpvar_15 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(tmpvar_13);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(tmpvar_13);
  vec4 tmpvar_17;
  tmpvar_17 = texture2DGradARB (_MainTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  float tmpvar_18;
  tmpvar_18 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec2 tmpvar_19;
  tmpvar_19 = (texture2DGradARB (_BumpMap, uv_3, tmpvar_16.xy, tmpvar_16.zw).wy - vec2(0.5, 0.5));
  localCoords_2.x = (tmpvar_19.x * 0.25);
  localCoords_2.y = (tmpvar_19.y * 0.5);
  uv_3.x = (uv_3.x - 0.5);
  vec2 tmpvar_20;
  tmpvar_20 = (uv_3 + localCoords_2);
  uv_3 = tmpvar_20;
  norm_1.z = cos((6.28319 * tmpvar_20.x));
  norm_1.x = sin((6.28319 * tmpvar_20.x));
  norm_1.y = cos((3.14159 * tmpvar_20.y));
  vec3 tmpvar_21;
  tmpvar_21 = -(norm_1);
  norm_1 = tmpvar_21;
  vec3 tmpvar_22;
  tmpvar_22 = abs(xlv_TEXCOORD6);
  float tmpvar_23;
  tmpvar_23 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  vec4 tmpvar_24;
  tmpvar_24 = (mix ((xlv_TEXCOORD1 + mix ((0.25 * (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_18)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_18)), tmpvar_22.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_18)), tmpvar_22.yyyy) - 0.5)), vec4(0.0, 0.0, 0.0, 0.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))), tmpvar_17, vec4(tmpvar_23)) * _Color);
  color_4.w = tmpvar_24.w;
  vec3 tmpvar_25;
  tmpvar_25 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * mix (clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), clamp (dot (tmpvar_21, -(_SunDir)), 0.0, 1.0), tmpvar_23)) * 4.0) * (texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3, xlv_TEXCOORD3))).w * textureCube (_LightTexture0, xlv_TEXCOORD3).w)), 0.0, 1.0))), 0.0, 1.0) * clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0));
  color_4.xyz = (tmpvar_24.xyz + (_Albedo * tmpvar_25));
  color_4.xyz = (color_4.xyz * tmpvar_25);
  color_4.w = 1.0;
  gl_FragData[0] = color_4;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 31 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord5 o5
dcl_texcoord6 o6
def c13, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
mov r1.xyz, v2
mov r1.w, c13.x
dp4 r2.z, r1, c6
dp4 r2.x, r1, c4
dp4 r2.y, r1, c5
mov r0.zw, v4.xyxy
mov r0.xy, v3
dp4 r2.w, r0, r0
rsq r1.x, r2.w
mul r0.xyz, r1.x, r0
mov o6.xyz, -r0
dp3 r0.w, r2, r2
rsq r0.w, r0.w
mul o5.xyz, r0.w, r2
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
dp4 r0.w, v0, c7
add r1.xyz, -r0, c12
dp3 r1.x, r1, r1
rsq r1.x, r1.x
mov o2, v1
dp4 o4.z, r0, c10
dp4 o4.y, r0, c9
dp4 o4.x, r0, c8
rcp o1.x, r1.x
mov o3.xyz, v2
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  highp vec3 p_2;
  p_2 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_1;
  highp vec4 tmpvar_4;
  tmpvar_4.x = _glesMultiTexCoord0.x;
  tmpvar_4.y = _glesMultiTexCoord0.y;
  tmpvar_4.z = _glesMultiTexCoord1.x;
  tmpvar_4.w = _glesMultiTexCoord1.y;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_4).xyz);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float terminator_2;
  mediump vec3 light_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float handoff_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec3 norm_10;
  highp vec2 localCoords_11;
  mediump vec4 encnorm_12;
  mediump float vertLerp_13;
  mediump vec4 main_14;
  highp vec2 uv_15;
  mediump vec4 color_16;
  highp float r_17;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_18;
    y_over_x_18 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_19;
    highp float x_20;
    x_20 = (y_over_x_18 * inversesqrt(((y_over_x_18 * y_over_x_18) + 1.0)));
    s_19 = (sign(x_20) * (1.5708 - (sqrt((1.0 - abs(x_20))) * (1.5708 + (abs(x_20) * (-0.214602 + (abs(x_20) * (0.0865667 + (abs(x_20) * -0.0310296)))))))));
    r_17 = s_19;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_17 = (s_19 + 3.14159);
      } else {
        r_17 = (r_17 - 3.14159);
      };
    };
  } else {
    r_17 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_15.x = (0.5 + (0.159155 * r_17));
  uv_15.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_21;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_22;
    y_over_x_22 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_23;
    highp float x_24;
    x_24 = (y_over_x_22 * inversesqrt(((y_over_x_22 * y_over_x_22) + 1.0)));
    s_23 = (sign(x_24) * (1.5708 - (sqrt((1.0 - abs(x_24))) * (1.5708 + (abs(x_24) * (-0.214602 + (abs(x_24) * (0.0865667 + (abs(x_24) * -0.0310296)))))))));
    r_21 = s_23;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_21 = (s_23 + 3.14159);
      } else {
        r_21 = (r_21 - 3.14159);
      };
    };
  } else {
    r_21 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_25;
  tmpvar_25 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_26;
  tmpvar_26 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_28;
  tmpvar_28.x = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_28.y = dFdx(tmpvar_25);
  tmpvar_28.z = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_28.w = dFdy(tmpvar_25);
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2DGradEXT (_MainTex, uv_15, tmpvar_28.xy, tmpvar_28.zw);
  main_14 = tmpvar_29;
  highp vec2 tmpvar_30;
  tmpvar_30 = (xlv_TEXCOORD6.zy * _DetailScale);
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD6.zx * _DetailScale);
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.xy * _DetailScale);
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  highp float tmpvar_36;
  tmpvar_36 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_13 = tmpvar_36;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_DetailVertTex, tmpvar_33);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailTex, tmpvar_30);
  mediump vec4 tmpvar_39;
  tmpvar_39 = mix (tmpvar_37, tmpvar_38, vec4(vertLerp_13));
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailVertTex, tmpvar_34);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailTex, tmpvar_31);
  mediump vec4 tmpvar_42;
  tmpvar_42 = mix (tmpvar_40, tmpvar_41, vec4(vertLerp_13));
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailVertTex, tmpvar_35);
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailTex, tmpvar_32);
  mediump vec4 tmpvar_45;
  tmpvar_45 = mix (tmpvar_43, tmpvar_44, vec4(vertLerp_13));
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2DGradEXT (_BumpMap, uv_15, tmpvar_28.xy, tmpvar_28.zw);
  encnorm_12 = tmpvar_46;
  mediump vec2 tmpvar_47;
  tmpvar_47 = encnorm_12.wy;
  localCoords_11 = tmpvar_47;
  highp vec2 tmpvar_48;
  tmpvar_48 = (localCoords_11 - vec2(0.5, 0.5));
  localCoords_11.x = (tmpvar_48.x * 0.25);
  localCoords_11.y = (tmpvar_48.y * 0.5);
  uv_15.x = (uv_15.x - 0.5);
  highp vec2 tmpvar_49;
  tmpvar_49 = (uv_15 + localCoords_11);
  uv_15 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = cos((6.28319 * tmpvar_49.x));
  norm_10.z = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = sin((6.28319 * tmpvar_49.x));
  norm_10.x = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = cos((3.14159 * tmpvar_49.y));
  norm_10.y = tmpvar_52;
  mediump vec3 tmpvar_53;
  tmpvar_53 = -(norm_10);
  norm_10 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_55;
  tmpvar_55 = mix (tmpvar_45, tmpvar_39, tmpvar_54.xxxx);
  detail_9 = tmpvar_55;
  highp vec4 tmpvar_56;
  tmpvar_56 = (0.25 * (mix (detail_9, tmpvar_42, tmpvar_54.yyyy) - 0.5));
  detail_9 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_57;
  mediump vec4 tmpvar_58;
  tmpvar_58 = mix (detail_9, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_8));
  highp vec4 tmpvar_59;
  tmpvar_59 = (xlv_TEXCOORD1 + tmpvar_58);
  color_16 = tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_7 = tmpvar_60;
  mediump vec4 tmpvar_61;
  tmpvar_61 = (mix (color_16, main_14, vec4(handoff_7)) * _Color);
  color_16.w = tmpvar_61.w;
  highp vec3 tmpvar_62;
  tmpvar_62 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp float tmpvar_66;
  tmpvar_66 = (texture2D (_LightTextureB0, vec2(tmpvar_65)).w * textureCube (_LightTexture0, xlv_TEXCOORD3).w);
  mediump float tmpvar_67;
  tmpvar_67 = clamp ((((_LightColor0.w * mix (TNdotL_4, clamp (dot (tmpvar_53, -(_SunDir)), 0.0, 1.0), handoff_7)) * 4.0) * tmpvar_66), 0.0, 1.0);
  highp vec3 tmpvar_68;
  tmpvar_68 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_67)), 0.0, 1.0);
  light_3 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0);
  terminator_2 = tmpvar_69;
  mediump vec3 tmpvar_70;
  tmpvar_70 = (light_3 * terminator_2);
  light_3 = tmpvar_70;
  highp vec3 tmpvar_71;
  tmpvar_71 = (tmpvar_61.xyz + (_Albedo * tmpvar_70));
  color_16.xyz = tmpvar_71;
  color_16.xyz = (color_16.xyz * tmpvar_70);
  color_16.w = 1.0;
  tmpvar_1 = color_16;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  highp vec3 p_2;
  p_2 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_1;
  highp vec4 tmpvar_4;
  tmpvar_4.x = _glesMultiTexCoord0.x;
  tmpvar_4.y = _glesMultiTexCoord0.y;
  tmpvar_4.z = _glesMultiTexCoord1.x;
  tmpvar_4.w = _glesMultiTexCoord1.y;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_4).xyz);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float terminator_2;
  mediump vec3 light_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float handoff_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec3 norm_10;
  highp vec2 localCoords_11;
  mediump vec4 encnorm_12;
  mediump float vertLerp_13;
  mediump vec4 main_14;
  highp vec2 uv_15;
  mediump vec4 color_16;
  highp float r_17;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_18;
    y_over_x_18 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_19;
    highp float x_20;
    x_20 = (y_over_x_18 * inversesqrt(((y_over_x_18 * y_over_x_18) + 1.0)));
    s_19 = (sign(x_20) * (1.5708 - (sqrt((1.0 - abs(x_20))) * (1.5708 + (abs(x_20) * (-0.214602 + (abs(x_20) * (0.0865667 + (abs(x_20) * -0.0310296)))))))));
    r_17 = s_19;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_17 = (s_19 + 3.14159);
      } else {
        r_17 = (r_17 - 3.14159);
      };
    };
  } else {
    r_17 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_15.x = (0.5 + (0.159155 * r_17));
  uv_15.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_21;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_22;
    y_over_x_22 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_23;
    highp float x_24;
    x_24 = (y_over_x_22 * inversesqrt(((y_over_x_22 * y_over_x_22) + 1.0)));
    s_23 = (sign(x_24) * (1.5708 - (sqrt((1.0 - abs(x_24))) * (1.5708 + (abs(x_24) * (-0.214602 + (abs(x_24) * (0.0865667 + (abs(x_24) * -0.0310296)))))))));
    r_21 = s_23;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_21 = (s_23 + 3.14159);
      } else {
        r_21 = (r_21 - 3.14159);
      };
    };
  } else {
    r_21 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_25;
  tmpvar_25 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_26;
  tmpvar_26 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_28;
  tmpvar_28.x = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_28.y = dFdx(tmpvar_25);
  tmpvar_28.z = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_28.w = dFdy(tmpvar_25);
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2DGradEXT (_MainTex, uv_15, tmpvar_28.xy, tmpvar_28.zw);
  main_14 = tmpvar_29;
  highp vec2 tmpvar_30;
  tmpvar_30 = (xlv_TEXCOORD6.zy * _DetailScale);
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD6.zx * _DetailScale);
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.xy * _DetailScale);
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  highp float tmpvar_36;
  tmpvar_36 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_13 = tmpvar_36;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_DetailVertTex, tmpvar_33);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailTex, tmpvar_30);
  mediump vec4 tmpvar_39;
  tmpvar_39 = mix (tmpvar_37, tmpvar_38, vec4(vertLerp_13));
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailVertTex, tmpvar_34);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailTex, tmpvar_31);
  mediump vec4 tmpvar_42;
  tmpvar_42 = mix (tmpvar_40, tmpvar_41, vec4(vertLerp_13));
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailVertTex, tmpvar_35);
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailTex, tmpvar_32);
  mediump vec4 tmpvar_45;
  tmpvar_45 = mix (tmpvar_43, tmpvar_44, vec4(vertLerp_13));
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2DGradEXT (_BumpMap, uv_15, tmpvar_28.xy, tmpvar_28.zw);
  encnorm_12 = tmpvar_46;
  mediump vec2 tmpvar_47;
  tmpvar_47 = encnorm_12.wy;
  localCoords_11 = tmpvar_47;
  highp vec2 tmpvar_48;
  tmpvar_48 = (localCoords_11 - vec2(0.5, 0.5));
  localCoords_11.x = (tmpvar_48.x * 0.25);
  localCoords_11.y = (tmpvar_48.y * 0.5);
  uv_15.x = (uv_15.x - 0.5);
  highp vec2 tmpvar_49;
  tmpvar_49 = (uv_15 + localCoords_11);
  uv_15 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = cos((6.28319 * tmpvar_49.x));
  norm_10.z = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = sin((6.28319 * tmpvar_49.x));
  norm_10.x = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = cos((3.14159 * tmpvar_49.y));
  norm_10.y = tmpvar_52;
  mediump vec3 tmpvar_53;
  tmpvar_53 = -(norm_10);
  norm_10 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_55;
  tmpvar_55 = mix (tmpvar_45, tmpvar_39, tmpvar_54.xxxx);
  detail_9 = tmpvar_55;
  highp vec4 tmpvar_56;
  tmpvar_56 = (0.25 * (mix (detail_9, tmpvar_42, tmpvar_54.yyyy) - 0.5));
  detail_9 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_57;
  mediump vec4 tmpvar_58;
  tmpvar_58 = mix (detail_9, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_8));
  highp vec4 tmpvar_59;
  tmpvar_59 = (xlv_TEXCOORD1 + tmpvar_58);
  color_16 = tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_7 = tmpvar_60;
  mediump vec4 tmpvar_61;
  tmpvar_61 = (mix (color_16, main_14, vec4(handoff_7)) * _Color);
  color_16.w = tmpvar_61.w;
  highp vec3 tmpvar_62;
  tmpvar_62 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp float tmpvar_66;
  tmpvar_66 = (texture2D (_LightTextureB0, vec2(tmpvar_65)).w * textureCube (_LightTexture0, xlv_TEXCOORD3).w);
  mediump float tmpvar_67;
  tmpvar_67 = clamp ((((_LightColor0.w * mix (TNdotL_4, clamp (dot (tmpvar_53, -(_SunDir)), 0.0, 1.0), handoff_7)) * 4.0) * tmpvar_66), 0.0, 1.0);
  highp vec3 tmpvar_68;
  tmpvar_68 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_67)), 0.0, 1.0);
  light_3 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0);
  terminator_2 = tmpvar_69;
  mediump vec3 tmpvar_70;
  tmpvar_70 = (light_3 * terminator_2);
  light_3 = tmpvar_70;
  highp vec3 tmpvar_71;
  tmpvar_71 = (tmpvar_61.xyz + (_Albedo * tmpvar_70));
  color_16.xyz = tmpvar_71;
  color_16.xyz = (color_16.xyz * tmpvar_70);
  color_16.w = 1.0;
  tmpvar_1 = color_16;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 318
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 419
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 objnormal;
    highp vec3 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
};
#line 409
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 328
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 341
#line 349
#line 363
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 396
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 400
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 404
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp mat4 _Rotation;
#line 408
uniform highp mat4 _InvRotation;
#line 430
#line 455
#line 430
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 434
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    #line 438
    o.color = v.color;
    o.objnormal = v.normal;
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    #line 442
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.objnormal);
    xlv_TEXCOORD3 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereCoords);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 318
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 419
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 objnormal;
    highp vec3 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
};
#line 409
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 328
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 341
#line 349
#line 363
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 396
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 400
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 404
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp mat4 _Rotation;
#line 408
uniform highp mat4 _InvRotation;
#line 430
#line 455
#line 444
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 446
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 450
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 455
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    #line 459
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 463
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    highp vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    highp vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    highp vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    #line 467
    highp vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    highp vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    highp vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, (-IN.sphereCoords))) - 0.95)) + 0.5));
    #line 471
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    #line 475
    highp vec2 localCoords = encnorm.wy;
    localCoords -= vec2( 0.5);
    localCoords.x *= 0.25;
    localCoords.y *= 0.5;
    #line 479
    uv.x -= 0.5;
    uv += localCoords;
    mediump vec3 norm;
    norm.z = cos((6.28319 * uv.x));
    #line 483
    norm.x = sin((6.28319 * uv.x));
    norm.y = cos((3.14159 * uv.y));
    norm = (-norm);
    sphereNrm = abs(sphereNrm);
    #line 487
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = (0.25 * (mix( detail, detailY, vec4( sphereNrm.y)) - 0.5));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (IN.color + mix( detail.xyzw, vec4( 0.0), vec4( detailLevel)));
    #line 491
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    color = mix( color, main, vec4( handoff));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 495
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    #line 499
    lowp float atten = ((texture( _LightTextureB0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * texture( _LightTexture0, IN._LightCoord).w) * 1.0);
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    mediump float terminator = xll_saturate_f(floor((1.01 + dot( IN.sphereCoords, _SunDir))));
    #line 503
    light *= terminator;
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    color.w = 1.0;
    #line 507
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.objnormal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec2 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec4 tmpvar_3;
  tmpvar_3.x = gl_MultiTexCoord0.x;
  tmpvar_3.y = gl_MultiTexCoord0.y;
  tmpvar_3.z = gl_MultiTexCoord1.x;
  tmpvar_3.w = gl_MultiTexCoord1.y;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xy;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_3).xyz);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec2 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec3 norm_1;
  vec2 localCoords_2;
  vec2 uv_3;
  vec4 color_4;
  float r_5;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_6;
    y_over_x_6 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * r_5));
  uv_3.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_9;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_10;
    y_over_x_10 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_11;
    float x_12;
    x_12 = (y_over_x_10 * inversesqrt(((y_over_x_10 * y_over_x_10) + 1.0)));
    s_11 = (sign(x_12) * (1.5708 - (sqrt((1.0 - abs(x_12))) * (1.5708 + (abs(x_12) * (-0.214602 + (abs(x_12) * (0.0865667 + (abs(x_12) * -0.0310296)))))))));
    r_9 = s_11;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_9 = (s_11 + 3.14159);
      } else {
        r_9 = (r_9 - 3.14159);
      };
    };
  } else {
    r_9 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_13;
  tmpvar_13 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_14;
  tmpvar_14 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_15;
  tmpvar_15 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(tmpvar_13);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(tmpvar_13);
  vec4 tmpvar_17;
  tmpvar_17 = texture2DGradARB (_MainTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  float tmpvar_18;
  tmpvar_18 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec2 tmpvar_19;
  tmpvar_19 = (texture2DGradARB (_BumpMap, uv_3, tmpvar_16.xy, tmpvar_16.zw).wy - vec2(0.5, 0.5));
  localCoords_2.x = (tmpvar_19.x * 0.25);
  localCoords_2.y = (tmpvar_19.y * 0.5);
  uv_3.x = (uv_3.x - 0.5);
  vec2 tmpvar_20;
  tmpvar_20 = (uv_3 + localCoords_2);
  uv_3 = tmpvar_20;
  norm_1.z = cos((6.28319 * tmpvar_20.x));
  norm_1.x = sin((6.28319 * tmpvar_20.x));
  norm_1.y = cos((3.14159 * tmpvar_20.y));
  vec3 tmpvar_21;
  tmpvar_21 = -(norm_1);
  norm_1 = tmpvar_21;
  vec3 tmpvar_22;
  tmpvar_22 = abs(xlv_TEXCOORD6);
  float tmpvar_23;
  tmpvar_23 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  vec4 tmpvar_24;
  tmpvar_24 = (mix ((xlv_TEXCOORD1 + mix ((0.25 * (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_18)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_18)), tmpvar_22.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_18)), tmpvar_22.yyyy) - 0.5)), vec4(0.0, 0.0, 0.0, 0.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))), tmpvar_17, vec4(tmpvar_23)) * _Color);
  color_4.w = tmpvar_24.w;
  vec3 tmpvar_25;
  tmpvar_25 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * mix (clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), clamp (dot (tmpvar_21, -(_SunDir)), 0.0, 1.0), tmpvar_23)) * 4.0) * texture2D (_LightTexture0, xlv_TEXCOORD3).w), 0.0, 1.0))), 0.0, 1.0) * clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0));
  color_4.xyz = (tmpvar_24.xyz + (_Albedo * tmpvar_25));
  color_4.xyz = (color_4.xyz * tmpvar_25);
  color_4.w = 1.0;
  gl_FragData[0] = color_4;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 30 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord5 o5
dcl_texcoord6 o6
def c13, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
mov r1.xyz, v2
mov r1.w, c13.x
dp4 r2.z, r1, c6
dp4 r2.x, r1, c4
dp4 r2.y, r1, c5
mov r0.zw, v4.xyxy
mov r0.xy, v3
dp4 r2.w, r0, r0
rsq r1.x, r2.w
mul r0.xyz, r1.x, r0
mov o6.xyz, -r0
dp3 r0.w, r2, r2
rsq r0.w, r0.w
mul o5.xyz, r0.w, r2
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
dp4 r0.w, v0, c7
add r1.xyz, -r0, c12
dp3 r1.x, r1, r1
rsq r1.x, r1.x
mov o2, v1
dp4 o4.y, r0, c9
dp4 o4.x, r0, c8
rcp o1.x, r1.x
mov o3.xyz, v2
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  highp vec3 p_2;
  p_2 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_1;
  highp vec4 tmpvar_4;
  tmpvar_4.x = _glesMultiTexCoord0.x;
  tmpvar_4.y = _glesMultiTexCoord0.y;
  tmpvar_4.z = _glesMultiTexCoord1.x;
  tmpvar_4.w = _glesMultiTexCoord1.y;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_4).xyz);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float terminator_2;
  mediump vec3 light_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float handoff_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec3 norm_10;
  highp vec2 localCoords_11;
  mediump vec4 encnorm_12;
  mediump float vertLerp_13;
  mediump vec4 main_14;
  highp vec2 uv_15;
  mediump vec4 color_16;
  highp float r_17;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_18;
    y_over_x_18 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_19;
    highp float x_20;
    x_20 = (y_over_x_18 * inversesqrt(((y_over_x_18 * y_over_x_18) + 1.0)));
    s_19 = (sign(x_20) * (1.5708 - (sqrt((1.0 - abs(x_20))) * (1.5708 + (abs(x_20) * (-0.214602 + (abs(x_20) * (0.0865667 + (abs(x_20) * -0.0310296)))))))));
    r_17 = s_19;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_17 = (s_19 + 3.14159);
      } else {
        r_17 = (r_17 - 3.14159);
      };
    };
  } else {
    r_17 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_15.x = (0.5 + (0.159155 * r_17));
  uv_15.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_21;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_22;
    y_over_x_22 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_23;
    highp float x_24;
    x_24 = (y_over_x_22 * inversesqrt(((y_over_x_22 * y_over_x_22) + 1.0)));
    s_23 = (sign(x_24) * (1.5708 - (sqrt((1.0 - abs(x_24))) * (1.5708 + (abs(x_24) * (-0.214602 + (abs(x_24) * (0.0865667 + (abs(x_24) * -0.0310296)))))))));
    r_21 = s_23;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_21 = (s_23 + 3.14159);
      } else {
        r_21 = (r_21 - 3.14159);
      };
    };
  } else {
    r_21 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_25;
  tmpvar_25 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_26;
  tmpvar_26 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_28;
  tmpvar_28.x = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_28.y = dFdx(tmpvar_25);
  tmpvar_28.z = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_28.w = dFdy(tmpvar_25);
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2DGradEXT (_MainTex, uv_15, tmpvar_28.xy, tmpvar_28.zw);
  main_14 = tmpvar_29;
  highp vec2 tmpvar_30;
  tmpvar_30 = (xlv_TEXCOORD6.zy * _DetailScale);
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD6.zx * _DetailScale);
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.xy * _DetailScale);
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  highp float tmpvar_36;
  tmpvar_36 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_13 = tmpvar_36;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_DetailVertTex, tmpvar_33);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailTex, tmpvar_30);
  mediump vec4 tmpvar_39;
  tmpvar_39 = mix (tmpvar_37, tmpvar_38, vec4(vertLerp_13));
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailVertTex, tmpvar_34);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailTex, tmpvar_31);
  mediump vec4 tmpvar_42;
  tmpvar_42 = mix (tmpvar_40, tmpvar_41, vec4(vertLerp_13));
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailVertTex, tmpvar_35);
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailTex, tmpvar_32);
  mediump vec4 tmpvar_45;
  tmpvar_45 = mix (tmpvar_43, tmpvar_44, vec4(vertLerp_13));
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2DGradEXT (_BumpMap, uv_15, tmpvar_28.xy, tmpvar_28.zw);
  encnorm_12 = tmpvar_46;
  mediump vec2 tmpvar_47;
  tmpvar_47 = encnorm_12.wy;
  localCoords_11 = tmpvar_47;
  highp vec2 tmpvar_48;
  tmpvar_48 = (localCoords_11 - vec2(0.5, 0.5));
  localCoords_11.x = (tmpvar_48.x * 0.25);
  localCoords_11.y = (tmpvar_48.y * 0.5);
  uv_15.x = (uv_15.x - 0.5);
  highp vec2 tmpvar_49;
  tmpvar_49 = (uv_15 + localCoords_11);
  uv_15 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = cos((6.28319 * tmpvar_49.x));
  norm_10.z = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = sin((6.28319 * tmpvar_49.x));
  norm_10.x = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = cos((3.14159 * tmpvar_49.y));
  norm_10.y = tmpvar_52;
  mediump vec3 tmpvar_53;
  tmpvar_53 = -(norm_10);
  norm_10 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_55;
  tmpvar_55 = mix (tmpvar_45, tmpvar_39, tmpvar_54.xxxx);
  detail_9 = tmpvar_55;
  highp vec4 tmpvar_56;
  tmpvar_56 = (0.25 * (mix (detail_9, tmpvar_42, tmpvar_54.yyyy) - 0.5));
  detail_9 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_57;
  mediump vec4 tmpvar_58;
  tmpvar_58 = mix (detail_9, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_8));
  highp vec4 tmpvar_59;
  tmpvar_59 = (xlv_TEXCOORD1 + tmpvar_58);
  color_16 = tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_7 = tmpvar_60;
  mediump vec4 tmpvar_61;
  tmpvar_61 = (mix (color_16, main_14, vec4(handoff_7)) * _Color);
  color_16.w = tmpvar_61.w;
  highp vec3 tmpvar_62;
  tmpvar_62 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_62;
  lowp vec3 tmpvar_63;
  tmpvar_63 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_64;
  lowp float tmpvar_65;
  tmpvar_65 = texture2D (_LightTexture0, xlv_TEXCOORD3).w;
  mediump float tmpvar_66;
  tmpvar_66 = clamp ((((_LightColor0.w * mix (TNdotL_4, clamp (dot (tmpvar_53, -(_SunDir)), 0.0, 1.0), handoff_7)) * 4.0) * tmpvar_65), 0.0, 1.0);
  highp vec3 tmpvar_67;
  tmpvar_67 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_66)), 0.0, 1.0);
  light_3 = tmpvar_67;
  highp float tmpvar_68;
  tmpvar_68 = clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0);
  terminator_2 = tmpvar_68;
  mediump vec3 tmpvar_69;
  tmpvar_69 = (light_3 * terminator_2);
  light_3 = tmpvar_69;
  highp vec3 tmpvar_70;
  tmpvar_70 = (tmpvar_61.xyz + (_Albedo * tmpvar_69));
  color_16.xyz = tmpvar_70;
  color_16.xyz = (color_16.xyz * tmpvar_69);
  color_16.w = 1.0;
  tmpvar_1 = color_16;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  highp vec3 p_2;
  p_2 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_1;
  highp vec4 tmpvar_4;
  tmpvar_4.x = _glesMultiTexCoord0.x;
  tmpvar_4.y = _glesMultiTexCoord0.y;
  tmpvar_4.z = _glesMultiTexCoord1.x;
  tmpvar_4.w = _glesMultiTexCoord1.y;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_4).xyz);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float terminator_2;
  mediump vec3 light_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float handoff_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec3 norm_10;
  highp vec2 localCoords_11;
  mediump vec4 encnorm_12;
  mediump float vertLerp_13;
  mediump vec4 main_14;
  highp vec2 uv_15;
  mediump vec4 color_16;
  highp float r_17;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_18;
    y_over_x_18 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_19;
    highp float x_20;
    x_20 = (y_over_x_18 * inversesqrt(((y_over_x_18 * y_over_x_18) + 1.0)));
    s_19 = (sign(x_20) * (1.5708 - (sqrt((1.0 - abs(x_20))) * (1.5708 + (abs(x_20) * (-0.214602 + (abs(x_20) * (0.0865667 + (abs(x_20) * -0.0310296)))))))));
    r_17 = s_19;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_17 = (s_19 + 3.14159);
      } else {
        r_17 = (r_17 - 3.14159);
      };
    };
  } else {
    r_17 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_15.x = (0.5 + (0.159155 * r_17));
  uv_15.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_21;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_22;
    y_over_x_22 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_23;
    highp float x_24;
    x_24 = (y_over_x_22 * inversesqrt(((y_over_x_22 * y_over_x_22) + 1.0)));
    s_23 = (sign(x_24) * (1.5708 - (sqrt((1.0 - abs(x_24))) * (1.5708 + (abs(x_24) * (-0.214602 + (abs(x_24) * (0.0865667 + (abs(x_24) * -0.0310296)))))))));
    r_21 = s_23;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_21 = (s_23 + 3.14159);
      } else {
        r_21 = (r_21 - 3.14159);
      };
    };
  } else {
    r_21 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_25;
  tmpvar_25 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_26;
  tmpvar_26 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_28;
  tmpvar_28.x = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_28.y = dFdx(tmpvar_25);
  tmpvar_28.z = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_28.w = dFdy(tmpvar_25);
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2DGradEXT (_MainTex, uv_15, tmpvar_28.xy, tmpvar_28.zw);
  main_14 = tmpvar_29;
  highp vec2 tmpvar_30;
  tmpvar_30 = (xlv_TEXCOORD6.zy * _DetailScale);
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD6.zx * _DetailScale);
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.xy * _DetailScale);
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  highp float tmpvar_36;
  tmpvar_36 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_13 = tmpvar_36;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_DetailVertTex, tmpvar_33);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailTex, tmpvar_30);
  mediump vec4 tmpvar_39;
  tmpvar_39 = mix (tmpvar_37, tmpvar_38, vec4(vertLerp_13));
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailVertTex, tmpvar_34);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailTex, tmpvar_31);
  mediump vec4 tmpvar_42;
  tmpvar_42 = mix (tmpvar_40, tmpvar_41, vec4(vertLerp_13));
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailVertTex, tmpvar_35);
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailTex, tmpvar_32);
  mediump vec4 tmpvar_45;
  tmpvar_45 = mix (tmpvar_43, tmpvar_44, vec4(vertLerp_13));
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2DGradEXT (_BumpMap, uv_15, tmpvar_28.xy, tmpvar_28.zw);
  encnorm_12 = tmpvar_46;
  mediump vec2 tmpvar_47;
  tmpvar_47 = encnorm_12.wy;
  localCoords_11 = tmpvar_47;
  highp vec2 tmpvar_48;
  tmpvar_48 = (localCoords_11 - vec2(0.5, 0.5));
  localCoords_11.x = (tmpvar_48.x * 0.25);
  localCoords_11.y = (tmpvar_48.y * 0.5);
  uv_15.x = (uv_15.x - 0.5);
  highp vec2 tmpvar_49;
  tmpvar_49 = (uv_15 + localCoords_11);
  uv_15 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = cos((6.28319 * tmpvar_49.x));
  norm_10.z = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = sin((6.28319 * tmpvar_49.x));
  norm_10.x = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = cos((3.14159 * tmpvar_49.y));
  norm_10.y = tmpvar_52;
  mediump vec3 tmpvar_53;
  tmpvar_53 = -(norm_10);
  norm_10 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_55;
  tmpvar_55 = mix (tmpvar_45, tmpvar_39, tmpvar_54.xxxx);
  detail_9 = tmpvar_55;
  highp vec4 tmpvar_56;
  tmpvar_56 = (0.25 * (mix (detail_9, tmpvar_42, tmpvar_54.yyyy) - 0.5));
  detail_9 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_57;
  mediump vec4 tmpvar_58;
  tmpvar_58 = mix (detail_9, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_8));
  highp vec4 tmpvar_59;
  tmpvar_59 = (xlv_TEXCOORD1 + tmpvar_58);
  color_16 = tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_7 = tmpvar_60;
  mediump vec4 tmpvar_61;
  tmpvar_61 = (mix (color_16, main_14, vec4(handoff_7)) * _Color);
  color_16.w = tmpvar_61.w;
  highp vec3 tmpvar_62;
  tmpvar_62 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_62;
  lowp vec3 tmpvar_63;
  tmpvar_63 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_64;
  lowp float tmpvar_65;
  tmpvar_65 = texture2D (_LightTexture0, xlv_TEXCOORD3).w;
  mediump float tmpvar_66;
  tmpvar_66 = clamp ((((_LightColor0.w * mix (TNdotL_4, clamp (dot (tmpvar_53, -(_SunDir)), 0.0, 1.0), handoff_7)) * 4.0) * tmpvar_65), 0.0, 1.0);
  highp vec3 tmpvar_67;
  tmpvar_67 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_66)), 0.0, 1.0);
  light_3 = tmpvar_67;
  highp float tmpvar_68;
  tmpvar_68 = clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0);
  terminator_2 = tmpvar_68;
  mediump vec3 tmpvar_69;
  tmpvar_69 = (light_3 * terminator_2);
  light_3 = tmpvar_69;
  highp vec3 tmpvar_70;
  tmpvar_70 = (tmpvar_61.xyz + (_Albedo * tmpvar_69));
  color_16.xyz = tmpvar_70;
  color_16.xyz = (color_16.xyz * tmpvar_69);
  color_16.w = 1.0;
  tmpvar_1 = color_16;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 418
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 objnormal;
    highp vec2 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
};
#line 408
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 395
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 399
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 403
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp mat4 _Rotation;
#line 407
uniform highp mat4 _InvRotation;
#line 429
#line 454
#line 429
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 433
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    #line 437
    o.color = v.color;
    o.objnormal = v.normal;
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xy;
    #line 441
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec2 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.objnormal);
    xlv_TEXCOORD3 = vec2(xl_retval._LightCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereCoords);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 418
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 objnormal;
    highp vec2 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
};
#line 408
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 395
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 399
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 403
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp mat4 _Rotation;
#line 407
uniform highp mat4 _InvRotation;
#line 429
#line 454
#line 443
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 445
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 449
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 454
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    #line 458
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 462
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    highp vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    highp vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    highp vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    #line 466
    highp vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    highp vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    highp vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, (-IN.sphereCoords))) - 0.95)) + 0.5));
    #line 470
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    #line 474
    highp vec2 localCoords = encnorm.wy;
    localCoords -= vec2( 0.5);
    localCoords.x *= 0.25;
    localCoords.y *= 0.5;
    #line 478
    uv.x -= 0.5;
    uv += localCoords;
    mediump vec3 norm;
    norm.z = cos((6.28319 * uv.x));
    #line 482
    norm.x = sin((6.28319 * uv.x));
    norm.y = cos((3.14159 * uv.y));
    norm = (-norm);
    sphereNrm = abs(sphereNrm);
    #line 486
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = (0.25 * (mix( detail, detailY, vec4( sphereNrm.y)) - 0.5));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (IN.color + mix( detail.xyzw, vec4( 0.0), vec4( detailLevel)));
    #line 490
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    color = mix( color, main, vec4( handoff));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 494
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    #line 498
    lowp float atten = (texture( _LightTexture0, IN._LightCoord).w * 1.0);
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    mediump float terminator = xll_saturate_f(floor((1.01 + dot( IN.sphereCoords, _SunDir))));
    #line 502
    light *= terminator;
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    color.w = 1.0;
    #line 506
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec2 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.objnormal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec2(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform mat4 unity_World2Shadow[4];
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec4 tmpvar_3;
  tmpvar_3.x = gl_MultiTexCoord0.x;
  tmpvar_3.y = gl_MultiTexCoord0.y;
  tmpvar_3.z = gl_MultiTexCoord1.x;
  tmpvar_3.w = gl_MultiTexCoord1.y;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * gl_Vertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_3).xyz);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec3 norm_1;
  vec2 localCoords_2;
  vec2 uv_3;
  vec4 color_4;
  float r_5;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_6;
    y_over_x_6 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * r_5));
  uv_3.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_9;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_10;
    y_over_x_10 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_11;
    float x_12;
    x_12 = (y_over_x_10 * inversesqrt(((y_over_x_10 * y_over_x_10) + 1.0)));
    s_11 = (sign(x_12) * (1.5708 - (sqrt((1.0 - abs(x_12))) * (1.5708 + (abs(x_12) * (-0.214602 + (abs(x_12) * (0.0865667 + (abs(x_12) * -0.0310296)))))))));
    r_9 = s_11;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_9 = (s_11 + 3.14159);
      } else {
        r_9 = (r_9 - 3.14159);
      };
    };
  } else {
    r_9 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_13;
  tmpvar_13 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_14;
  tmpvar_14 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_15;
  tmpvar_15 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(tmpvar_13);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(tmpvar_13);
  vec4 tmpvar_17;
  tmpvar_17 = texture2DGradARB (_MainTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  float tmpvar_18;
  tmpvar_18 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec2 tmpvar_19;
  tmpvar_19 = (texture2DGradARB (_BumpMap, uv_3, tmpvar_16.xy, tmpvar_16.zw).wy - vec2(0.5, 0.5));
  localCoords_2.x = (tmpvar_19.x * 0.25);
  localCoords_2.y = (tmpvar_19.y * 0.5);
  uv_3.x = (uv_3.x - 0.5);
  vec2 tmpvar_20;
  tmpvar_20 = (uv_3 + localCoords_2);
  uv_3 = tmpvar_20;
  norm_1.z = cos((6.28319 * tmpvar_20.x));
  norm_1.x = sin((6.28319 * tmpvar_20.x));
  norm_1.y = cos((3.14159 * tmpvar_20.y));
  vec3 tmpvar_21;
  tmpvar_21 = -(norm_1);
  norm_1 = tmpvar_21;
  vec3 tmpvar_22;
  tmpvar_22 = abs(xlv_TEXCOORD6);
  float tmpvar_23;
  tmpvar_23 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  vec4 tmpvar_24;
  tmpvar_24 = (mix ((xlv_TEXCOORD1 + mix ((0.25 * (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_18)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_18)), tmpvar_22.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_18)), tmpvar_22.yyyy) - 0.5)), vec4(0.0, 0.0, 0.0, 0.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))), tmpvar_17, vec4(tmpvar_23)) * _Color);
  color_4 = tmpvar_24;
  float tmpvar_25;
  tmpvar_25 = mix (clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), clamp (dot (tmpvar_21, -(_SunDir)), 0.0, 1.0), tmpvar_23);
  vec4 tmpvar_26;
  tmpvar_26 = texture2D (_LightTexture0, ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5));
  vec4 tmpvar_27;
  tmpvar_27 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz)));
  vec4 tmpvar_28;
  tmpvar_28 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD4);
  float tmpvar_29;
  if ((tmpvar_28.x < (xlv_TEXCOORD4.z / xlv_TEXCOORD4.w))) {
    tmpvar_29 = _LightShadowData.x;
  } else {
    tmpvar_29 = 1.0;
  };
  vec3 tmpvar_30;
  tmpvar_30 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_25) * 4.0) * (((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_26.w) * tmpvar_27.w) * tmpvar_29)), 0.0, 1.0))), 0.0, 1.0) * clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0));
  color_4.xyz = (tmpvar_24.xyz + (_Albedo * tmpvar_30));
  color_4.xyz = (color_4.xyz * tmpvar_30);
  color_4.w = 1.0;
  gl_FragData[0] = color_4;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Matrix 4 [unity_World2Shadow0]
Matrix 8 [_Object2World]
Matrix 12 [_LightMatrix0]
"vs_3_0
; 36 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
def c17, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
mov r1.xyz, v2
mov r1.w, c17.x
dp4 r2.z, r1, c10
dp4 r2.x, r1, c8
dp4 r2.y, r1, c9
mov r0.zw, v4.xyxy
mov r0.xy, v3
dp4 r2.w, r0, r0
rsq r1.x, r2.w
mul r0.xyz, r1.x, r0
mov o7.xyz, -r0
dp3 r0.w, r2, r2
rsq r0.w, r0.w
mul o6.xyz, r0.w, r2
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
dp4 r0.w, v0, c11
add r1.xyz, -r0, c16
dp3 r1.x, r1, r1
rsq r1.x, r1.x
mov o2, v1
dp4 o4.w, r0, c15
dp4 o4.z, r0, c14
dp4 o4.y, r0, c13
dp4 o4.x, r0, c12
dp4 o5.w, r0, c7
dp4 o5.z, r0, c6
dp4 o5.y, r0, c5
dp4 o5.x, r0, c4
rcp o1.x, r1.x
mov o3.xyz, v2
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  highp vec3 p_2;
  p_2 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_1;
  highp vec4 tmpvar_4;
  tmpvar_4.x = _glesMultiTexCoord0.x;
  tmpvar_4.y = _glesMultiTexCoord0.y;
  tmpvar_4.z = _glesMultiTexCoord1.x;
  tmpvar_4.w = _glesMultiTexCoord1.y;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_4).xyz);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float terminator_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float TNdotL_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump float handoff_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec3 norm_11;
  highp vec2 localCoords_12;
  mediump vec4 encnorm_13;
  mediump float vertLerp_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD6.zy * _DetailScale);
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zx * _DetailScale);
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.xy * _DetailScale);
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  highp float tmpvar_37;
  tmpvar_37 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_14 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailVertTex, tmpvar_34);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailTex, tmpvar_31);
  mediump vec4 tmpvar_40;
  tmpvar_40 = mix (tmpvar_38, tmpvar_39, vec4(vertLerp_14));
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailVertTex, tmpvar_35);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailTex, tmpvar_32);
  mediump vec4 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41, tmpvar_42, vec4(vertLerp_14));
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailVertTex, tmpvar_36);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, tmpvar_33);
  mediump vec4 tmpvar_46;
  tmpvar_46 = mix (tmpvar_44, tmpvar_45, vec4(vertLerp_14));
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2DGradEXT (_BumpMap, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  encnorm_13 = tmpvar_47;
  mediump vec2 tmpvar_48;
  tmpvar_48 = encnorm_13.wy;
  localCoords_12 = tmpvar_48;
  highp vec2 tmpvar_49;
  tmpvar_49 = (localCoords_12 - vec2(0.5, 0.5));
  localCoords_12.x = (tmpvar_49.x * 0.25);
  localCoords_12.y = (tmpvar_49.y * 0.5);
  uv_16.x = (uv_16.x - 0.5);
  highp vec2 tmpvar_50;
  tmpvar_50 = (uv_16 + localCoords_12);
  uv_16 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = cos((6.28319 * tmpvar_50.x));
  norm_11.z = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = sin((6.28319 * tmpvar_50.x));
  norm_11.x = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = cos((3.14159 * tmpvar_50.y));
  norm_11.y = tmpvar_53;
  mediump vec3 tmpvar_54;
  tmpvar_54 = -(norm_11);
  norm_11 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_56;
  tmpvar_56 = mix (tmpvar_46, tmpvar_40, tmpvar_55.xxxx);
  detail_10 = tmpvar_56;
  highp vec4 tmpvar_57;
  tmpvar_57 = (0.25 * (mix (detail_10, tmpvar_43, tmpvar_55.yyyy) - 0.5));
  detail_10 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_9 = tmpvar_58;
  mediump vec4 tmpvar_59;
  tmpvar_59 = mix (detail_10, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_9));
  highp vec4 tmpvar_60;
  tmpvar_60 = (xlv_TEXCOORD1 + tmpvar_59);
  color_17 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_8 = tmpvar_61;
  mediump vec4 tmpvar_62;
  tmpvar_62 = (mix (color_17, main_15, vec4(handoff_8)) * _Color);
  color_17 = tmpvar_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = clamp (dot (xlv_TEXCOORD5, lightDirection_6), 0.0, 1.0);
  TNdotL_5 = tmpvar_65;
  mediump float tmpvar_66;
  tmpvar_66 = mix (TNdotL_5, clamp (dot (tmpvar_54, -(_SunDir)), 0.0, 1.0), handoff_8);
  lowp vec4 tmpvar_67;
  highp vec2 P_68;
  P_68 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_67 = texture2D (_LightTexture0, P_68);
  highp float tmpvar_69;
  tmpvar_69 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_70;
  tmpvar_70 = texture2D (_LightTextureB0, vec2(tmpvar_69));
  lowp float tmpvar_71;
  mediump float shadow_72;
  lowp vec4 tmpvar_73;
  tmpvar_73 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD4);
  highp float tmpvar_74;
  if ((tmpvar_73.x < (xlv_TEXCOORD4.z / xlv_TEXCOORD4.w))) {
    tmpvar_74 = _LightShadowData.x;
  } else {
    tmpvar_74 = 1.0;
  };
  shadow_72 = tmpvar_74;
  tmpvar_71 = shadow_72;
  highp float tmpvar_75;
  tmpvar_75 = (((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_67.w) * tmpvar_70.w) * tmpvar_71);
  atten_4 = tmpvar_75;
  mediump float tmpvar_76;
  tmpvar_76 = clamp ((((_LightColor0.w * tmpvar_66) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_77;
  tmpvar_77 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_76)), 0.0, 1.0);
  light_3 = tmpvar_77;
  highp float tmpvar_78;
  tmpvar_78 = clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0);
  terminator_2 = tmpvar_78;
  mediump vec3 tmpvar_79;
  tmpvar_79 = (light_3 * terminator_2);
  light_3 = tmpvar_79;
  highp vec3 tmpvar_80;
  tmpvar_80 = (tmpvar_62.xyz + (_Albedo * tmpvar_79));
  color_17.xyz = tmpvar_80;
  color_17.xyz = (color_17.xyz * tmpvar_79);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  highp vec3 p_2;
  p_2 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_1;
  highp vec4 tmpvar_4;
  tmpvar_4.x = _glesMultiTexCoord0.x;
  tmpvar_4.y = _glesMultiTexCoord0.y;
  tmpvar_4.z = _glesMultiTexCoord1.x;
  tmpvar_4.w = _glesMultiTexCoord1.y;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_4).xyz);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float terminator_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float TNdotL_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump float handoff_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec3 norm_11;
  highp vec2 localCoords_12;
  mediump vec4 encnorm_13;
  mediump float vertLerp_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD6.zy * _DetailScale);
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zx * _DetailScale);
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.xy * _DetailScale);
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  highp float tmpvar_37;
  tmpvar_37 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_14 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailVertTex, tmpvar_34);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailTex, tmpvar_31);
  mediump vec4 tmpvar_40;
  tmpvar_40 = mix (tmpvar_38, tmpvar_39, vec4(vertLerp_14));
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailVertTex, tmpvar_35);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailTex, tmpvar_32);
  mediump vec4 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41, tmpvar_42, vec4(vertLerp_14));
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailVertTex, tmpvar_36);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, tmpvar_33);
  mediump vec4 tmpvar_46;
  tmpvar_46 = mix (tmpvar_44, tmpvar_45, vec4(vertLerp_14));
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2DGradEXT (_BumpMap, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  encnorm_13 = tmpvar_47;
  mediump vec2 tmpvar_48;
  tmpvar_48 = encnorm_13.wy;
  localCoords_12 = tmpvar_48;
  highp vec2 tmpvar_49;
  tmpvar_49 = (localCoords_12 - vec2(0.5, 0.5));
  localCoords_12.x = (tmpvar_49.x * 0.25);
  localCoords_12.y = (tmpvar_49.y * 0.5);
  uv_16.x = (uv_16.x - 0.5);
  highp vec2 tmpvar_50;
  tmpvar_50 = (uv_16 + localCoords_12);
  uv_16 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = cos((6.28319 * tmpvar_50.x));
  norm_11.z = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = sin((6.28319 * tmpvar_50.x));
  norm_11.x = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = cos((3.14159 * tmpvar_50.y));
  norm_11.y = tmpvar_53;
  mediump vec3 tmpvar_54;
  tmpvar_54 = -(norm_11);
  norm_11 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_56;
  tmpvar_56 = mix (tmpvar_46, tmpvar_40, tmpvar_55.xxxx);
  detail_10 = tmpvar_56;
  highp vec4 tmpvar_57;
  tmpvar_57 = (0.25 * (mix (detail_10, tmpvar_43, tmpvar_55.yyyy) - 0.5));
  detail_10 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_9 = tmpvar_58;
  mediump vec4 tmpvar_59;
  tmpvar_59 = mix (detail_10, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_9));
  highp vec4 tmpvar_60;
  tmpvar_60 = (xlv_TEXCOORD1 + tmpvar_59);
  color_17 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_8 = tmpvar_61;
  mediump vec4 tmpvar_62;
  tmpvar_62 = (mix (color_17, main_15, vec4(handoff_8)) * _Color);
  color_17 = tmpvar_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = clamp (dot (xlv_TEXCOORD5, lightDirection_6), 0.0, 1.0);
  TNdotL_5 = tmpvar_65;
  mediump float tmpvar_66;
  tmpvar_66 = mix (TNdotL_5, clamp (dot (tmpvar_54, -(_SunDir)), 0.0, 1.0), handoff_8);
  lowp vec4 tmpvar_67;
  highp vec2 P_68;
  P_68 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_67 = texture2D (_LightTexture0, P_68);
  highp float tmpvar_69;
  tmpvar_69 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_70;
  tmpvar_70 = texture2D (_LightTextureB0, vec2(tmpvar_69));
  lowp float tmpvar_71;
  mediump float shadow_72;
  lowp vec4 tmpvar_73;
  tmpvar_73 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD4);
  highp float tmpvar_74;
  if ((tmpvar_73.x < (xlv_TEXCOORD4.z / xlv_TEXCOORD4.w))) {
    tmpvar_74 = _LightShadowData.x;
  } else {
    tmpvar_74 = 1.0;
  };
  shadow_72 = tmpvar_74;
  tmpvar_71 = shadow_72;
  highp float tmpvar_75;
  tmpvar_75 = (((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_67.w) * tmpvar_70.w) * tmpvar_71);
  atten_4 = tmpvar_75;
  mediump float tmpvar_76;
  tmpvar_76 = clamp ((((_LightColor0.w * tmpvar_66) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_77;
  tmpvar_77 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_76)), 0.0, 1.0);
  light_3 = tmpvar_77;
  highp float tmpvar_78;
  tmpvar_78 = clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0);
  terminator_2 = tmpvar_78;
  mediump vec3 tmpvar_79;
  tmpvar_79 = (light_3 * terminator_2);
  light_3 = tmpvar_79;
  highp vec3 tmpvar_80;
  tmpvar_80 = (tmpvar_62.xyz + (_Albedo * tmpvar_79));
  color_17.xyz = tmpvar_80;
  color_17.xyz = (color_17.xyz * tmpvar_79);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 332
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 433
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 objnormal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
};
#line 423
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 323
uniform sampler2D _LightTextureB0;
#line 328
#line 342
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 355
#line 363
#line 377
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 410
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 414
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 418
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp mat4 _Rotation;
#line 422
uniform highp mat4 _InvRotation;
#line 445
#line 471
#line 445
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 449
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    #line 453
    o.color = v.color;
    o.objnormal = v.normal;
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    #line 458
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.objnormal);
    xlv_TEXCOORD3 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereCoords);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 332
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 433
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 objnormal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
};
#line 423
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 323
uniform sampler2D _LightTextureB0;
#line 328
#line 342
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 355
#line 363
#line 377
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 410
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 414
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 418
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp mat4 _Rotation;
#line 422
uniform highp mat4 _InvRotation;
#line 445
#line 471
#line 460
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 462
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 466
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 328
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 324
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 316
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    mediump float shadow = (( (textureProj( _ShadowMapTexture, shadowCoord).x < (shadowCoord.z / shadowCoord.w)) ) ? ( _LightShadowData.x ) : ( 1.0 ));
    #line 319
    return shadow;
}
#line 471
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    #line 475
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 479
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    highp vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    highp vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    highp vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    #line 483
    highp vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    highp vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    highp vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, (-IN.sphereCoords))) - 0.95)) + 0.5));
    #line 487
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    #line 491
    highp vec2 localCoords = encnorm.wy;
    localCoords -= vec2( 0.5);
    localCoords.x *= 0.25;
    localCoords.y *= 0.5;
    #line 495
    uv.x -= 0.5;
    uv += localCoords;
    mediump vec3 norm;
    norm.z = cos((6.28319 * uv.x));
    #line 499
    norm.x = sin((6.28319 * uv.x));
    norm.y = cos((3.14159 * uv.y));
    norm = (-norm);
    sphereNrm = abs(sphereNrm);
    #line 503
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = (0.25 * (mix( detail, detailY, vec4( sphereNrm.y)) - 0.5));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (IN.color + mix( detail.xyzw, vec4( 0.0), vec4( detailLevel)));
    #line 507
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    color = mix( color, main, vec4( handoff));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 511
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    #line 515
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * unitySampleShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    mediump float terminator = xll_saturate_f(floor((1.01 + dot( IN.sphereCoords, _SunDir))));
    #line 519
    light *= terminator;
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    color.w = 1.0;
    #line 523
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.objnormal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform mat4 unity_World2Shadow[4];
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec4 tmpvar_3;
  tmpvar_3.x = gl_MultiTexCoord0.x;
  tmpvar_3.y = gl_MultiTexCoord0.y;
  tmpvar_3.z = gl_MultiTexCoord1.x;
  tmpvar_3.w = gl_MultiTexCoord1.y;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * gl_Vertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_3).xyz);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform sampler2DShadow _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec3 norm_1;
  vec2 localCoords_2;
  vec2 uv_3;
  vec4 color_4;
  float r_5;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_6;
    y_over_x_6 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * r_5));
  uv_3.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_9;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_10;
    y_over_x_10 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_11;
    float x_12;
    x_12 = (y_over_x_10 * inversesqrt(((y_over_x_10 * y_over_x_10) + 1.0)));
    s_11 = (sign(x_12) * (1.5708 - (sqrt((1.0 - abs(x_12))) * (1.5708 + (abs(x_12) * (-0.214602 + (abs(x_12) * (0.0865667 + (abs(x_12) * -0.0310296)))))))));
    r_9 = s_11;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_9 = (s_11 + 3.14159);
      } else {
        r_9 = (r_9 - 3.14159);
      };
    };
  } else {
    r_9 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_13;
  tmpvar_13 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_14;
  tmpvar_14 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_15;
  tmpvar_15 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(tmpvar_13);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(tmpvar_13);
  vec4 tmpvar_17;
  tmpvar_17 = texture2DGradARB (_MainTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  float tmpvar_18;
  tmpvar_18 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec2 tmpvar_19;
  tmpvar_19 = (texture2DGradARB (_BumpMap, uv_3, tmpvar_16.xy, tmpvar_16.zw).wy - vec2(0.5, 0.5));
  localCoords_2.x = (tmpvar_19.x * 0.25);
  localCoords_2.y = (tmpvar_19.y * 0.5);
  uv_3.x = (uv_3.x - 0.5);
  vec2 tmpvar_20;
  tmpvar_20 = (uv_3 + localCoords_2);
  uv_3 = tmpvar_20;
  norm_1.z = cos((6.28319 * tmpvar_20.x));
  norm_1.x = sin((6.28319 * tmpvar_20.x));
  norm_1.y = cos((3.14159 * tmpvar_20.y));
  vec3 tmpvar_21;
  tmpvar_21 = -(norm_1);
  norm_1 = tmpvar_21;
  vec3 tmpvar_22;
  tmpvar_22 = abs(xlv_TEXCOORD6);
  float tmpvar_23;
  tmpvar_23 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  vec4 tmpvar_24;
  tmpvar_24 = (mix ((xlv_TEXCOORD1 + mix ((0.25 * (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_18)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_18)), tmpvar_22.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_18)), tmpvar_22.yyyy) - 0.5)), vec4(0.0, 0.0, 0.0, 0.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))), tmpvar_17, vec4(tmpvar_23)) * _Color);
  color_4.w = tmpvar_24.w;
  vec3 tmpvar_25;
  tmpvar_25 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * mix (clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), clamp (dot (tmpvar_21, -(_SunDir)), 0.0, 1.0), tmpvar_23)) * 4.0) * (((float((xlv_TEXCOORD3.z > 0.0)) * texture2D (_LightTexture0, ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5)).w) * texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz))).w) * (_LightShadowData.x + (shadow2DProj (_ShadowMapTexture, xlv_TEXCOORD4).x * (1.0 - _LightShadowData.x))))), 0.0, 1.0))), 0.0, 1.0) * clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0));
  color_4.xyz = (tmpvar_24.xyz + (_Albedo * tmpvar_25));
  color_4.xyz = (color_4.xyz * tmpvar_25);
  color_4.w = 1.0;
  gl_FragData[0] = color_4;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Matrix 4 [unity_World2Shadow0]
Matrix 8 [_Object2World]
Matrix 12 [_LightMatrix0]
"vs_3_0
; 36 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
def c17, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
mov r1.xyz, v2
mov r1.w, c17.x
dp4 r2.z, r1, c10
dp4 r2.x, r1, c8
dp4 r2.y, r1, c9
mov r0.zw, v4.xyxy
mov r0.xy, v3
dp4 r2.w, r0, r0
rsq r1.x, r2.w
mul r0.xyz, r1.x, r0
mov o7.xyz, -r0
dp3 r0.w, r2, r2
rsq r0.w, r0.w
mul o6.xyz, r0.w, r2
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
dp4 r0.w, v0, c11
add r1.xyz, -r0, c16
dp3 r1.x, r1, r1
rsq r1.x, r1.x
mov o2, v1
dp4 o4.w, r0, c15
dp4 o4.z, r0, c14
dp4 o4.y, r0, c13
dp4 o4.x, r0, c12
dp4 o5.w, r0, c7
dp4 o5.z, r0, c6
dp4 o5.y, r0, c5
dp4 o5.x, r0, c4
rcp o1.x, r1.x
mov o3.xyz, v2
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  highp vec3 p_2;
  p_2 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_1;
  highp vec4 tmpvar_4;
  tmpvar_4.x = _glesMultiTexCoord0.x;
  tmpvar_4.y = _glesMultiTexCoord0.y;
  tmpvar_4.z = _glesMultiTexCoord1.x;
  tmpvar_4.w = _glesMultiTexCoord1.y;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_4).xyz);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shadow_samplers : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float terminator_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float TNdotL_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump float handoff_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec3 norm_11;
  highp vec2 localCoords_12;
  mediump vec4 encnorm_13;
  mediump float vertLerp_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD6.zy * _DetailScale);
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zx * _DetailScale);
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.xy * _DetailScale);
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  highp float tmpvar_37;
  tmpvar_37 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_14 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailVertTex, tmpvar_34);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailTex, tmpvar_31);
  mediump vec4 tmpvar_40;
  tmpvar_40 = mix (tmpvar_38, tmpvar_39, vec4(vertLerp_14));
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailVertTex, tmpvar_35);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailTex, tmpvar_32);
  mediump vec4 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41, tmpvar_42, vec4(vertLerp_14));
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailVertTex, tmpvar_36);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, tmpvar_33);
  mediump vec4 tmpvar_46;
  tmpvar_46 = mix (tmpvar_44, tmpvar_45, vec4(vertLerp_14));
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2DGradEXT (_BumpMap, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  encnorm_13 = tmpvar_47;
  mediump vec2 tmpvar_48;
  tmpvar_48 = encnorm_13.wy;
  localCoords_12 = tmpvar_48;
  highp vec2 tmpvar_49;
  tmpvar_49 = (localCoords_12 - vec2(0.5, 0.5));
  localCoords_12.x = (tmpvar_49.x * 0.25);
  localCoords_12.y = (tmpvar_49.y * 0.5);
  uv_16.x = (uv_16.x - 0.5);
  highp vec2 tmpvar_50;
  tmpvar_50 = (uv_16 + localCoords_12);
  uv_16 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = cos((6.28319 * tmpvar_50.x));
  norm_11.z = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = sin((6.28319 * tmpvar_50.x));
  norm_11.x = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = cos((3.14159 * tmpvar_50.y));
  norm_11.y = tmpvar_53;
  mediump vec3 tmpvar_54;
  tmpvar_54 = -(norm_11);
  norm_11 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_56;
  tmpvar_56 = mix (tmpvar_46, tmpvar_40, tmpvar_55.xxxx);
  detail_10 = tmpvar_56;
  highp vec4 tmpvar_57;
  tmpvar_57 = (0.25 * (mix (detail_10, tmpvar_43, tmpvar_55.yyyy) - 0.5));
  detail_10 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_9 = tmpvar_58;
  mediump vec4 tmpvar_59;
  tmpvar_59 = mix (detail_10, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_9));
  highp vec4 tmpvar_60;
  tmpvar_60 = (xlv_TEXCOORD1 + tmpvar_59);
  color_17 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_8 = tmpvar_61;
  mediump vec4 tmpvar_62;
  tmpvar_62 = (mix (color_17, main_15, vec4(handoff_8)) * _Color);
  color_17.w = tmpvar_62.w;
  highp vec3 tmpvar_63;
  tmpvar_63 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = clamp (dot (xlv_TEXCOORD5, lightDirection_6), 0.0, 1.0);
  TNdotL_5 = tmpvar_65;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_66 = texture2D (_LightTexture0, P_67);
  highp float tmpvar_68;
  tmpvar_68 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_69;
  tmpvar_69 = texture2D (_LightTextureB0, vec2(tmpvar_68));
  lowp float tmpvar_70;
  mediump float shadow_71;
  lowp float tmpvar_72;
  tmpvar_72 = shadow2DProjEXT (_ShadowMapTexture, xlv_TEXCOORD4);
  shadow_71 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = (_LightShadowData.x + (shadow_71 * (1.0 - _LightShadowData.x)));
  shadow_71 = tmpvar_73;
  tmpvar_70 = shadow_71;
  highp float tmpvar_74;
  tmpvar_74 = (((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_66.w) * tmpvar_69.w) * tmpvar_70);
  atten_4 = tmpvar_74;
  mediump float tmpvar_75;
  tmpvar_75 = clamp ((((_LightColor0.w * mix (TNdotL_5, clamp (dot (tmpvar_54, -(_SunDir)), 0.0, 1.0), handoff_8)) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_76;
  tmpvar_76 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_75)), 0.0, 1.0);
  light_3 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0);
  terminator_2 = tmpvar_77;
  mediump vec3 tmpvar_78;
  tmpvar_78 = (light_3 * terminator_2);
  light_3 = tmpvar_78;
  highp vec3 tmpvar_79;
  tmpvar_79 = (tmpvar_62.xyz + (_Albedo * tmpvar_78));
  color_17.xyz = tmpvar_79;
  color_17.xyz = (color_17.xyz * tmpvar_78);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 333
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 434
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 objnormal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
};
#line 424
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 323
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 343
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 356
#line 364
#line 378
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 411
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 415
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 419
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp mat4 _Rotation;
#line 423
uniform highp mat4 _InvRotation;
#line 446
#line 472
#line 446
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 450
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    #line 454
    o.color = v.color;
    o.objnormal = v.normal;
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    #line 459
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.objnormal);
    xlv_TEXCOORD3 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereCoords);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_shadow2Dproj(mediump sampler2DShadow s, vec4 coord) { return textureProj (s, coord); }
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 333
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 434
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 objnormal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
};
#line 424
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 323
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 343
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 356
#line 364
#line 378
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 411
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 415
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 419
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp mat4 _Rotation;
#line 423
uniform highp mat4 _InvRotation;
#line 446
#line 472
#line 461
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 463
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 467
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 329
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    #line 331
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 325
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    #line 327
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 316
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    mediump float shadow = xll_shadow2Dproj( _ShadowMapTexture, shadowCoord);
    #line 319
    shadow = (_LightShadowData.x + (shadow * (1.0 - _LightShadowData.x)));
    return shadow;
}
#line 472
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    #line 476
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 480
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    highp vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    highp vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    highp vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    #line 484
    highp vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    highp vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    highp vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, (-IN.sphereCoords))) - 0.95)) + 0.5));
    #line 488
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    #line 492
    highp vec2 localCoords = encnorm.wy;
    localCoords -= vec2( 0.5);
    localCoords.x *= 0.25;
    localCoords.y *= 0.5;
    #line 496
    uv.x -= 0.5;
    uv += localCoords;
    mediump vec3 norm;
    norm.z = cos((6.28319 * uv.x));
    #line 500
    norm.x = sin((6.28319 * uv.x));
    norm.y = cos((3.14159 * uv.y));
    norm = (-norm);
    sphereNrm = abs(sphereNrm);
    #line 504
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = (0.25 * (mix( detail, detailY, vec4( sphereNrm.y)) - 0.5));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (IN.color + mix( detail.xyzw, vec4( 0.0), vec4( detailLevel)));
    #line 508
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    color = mix( color, main, vec4( handoff));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 512
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    #line 516
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * unitySampleShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    mediump float terminator = xll_saturate_f(floor((1.01 + dot( IN.sphereCoords, _SunDir))));
    #line 520
    light *= terminator;
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    color.w = 1.0;
    #line 524
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.objnormal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _Object2World;

uniform vec4 _ProjectionParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec3 p_2;
  p_2 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = gl_Normal;
  vec4 tmpvar_4;
  tmpvar_4.x = gl_MultiTexCoord0.x;
  tmpvar_4.y = gl_MultiTexCoord0.y;
  tmpvar_4.z = gl_MultiTexCoord1.x;
  tmpvar_4.w = gl_MultiTexCoord1.y;
  vec4 o_5;
  vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_1 * 0.5);
  vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_1.zw;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD3 = o_5;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_4).xyz);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec3 norm_1;
  vec2 localCoords_2;
  vec2 uv_3;
  vec4 color_4;
  float r_5;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_6;
    y_over_x_6 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * r_5));
  uv_3.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_9;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_10;
    y_over_x_10 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_11;
    float x_12;
    x_12 = (y_over_x_10 * inversesqrt(((y_over_x_10 * y_over_x_10) + 1.0)));
    s_11 = (sign(x_12) * (1.5708 - (sqrt((1.0 - abs(x_12))) * (1.5708 + (abs(x_12) * (-0.214602 + (abs(x_12) * (0.0865667 + (abs(x_12) * -0.0310296)))))))));
    r_9 = s_11;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_9 = (s_11 + 3.14159);
      } else {
        r_9 = (r_9 - 3.14159);
      };
    };
  } else {
    r_9 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_13;
  tmpvar_13 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_14;
  tmpvar_14 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_15;
  tmpvar_15 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(tmpvar_13);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(tmpvar_13);
  vec4 tmpvar_17;
  tmpvar_17 = texture2DGradARB (_MainTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  float tmpvar_18;
  tmpvar_18 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec2 tmpvar_19;
  tmpvar_19 = (texture2DGradARB (_BumpMap, uv_3, tmpvar_16.xy, tmpvar_16.zw).wy - vec2(0.5, 0.5));
  localCoords_2.x = (tmpvar_19.x * 0.25);
  localCoords_2.y = (tmpvar_19.y * 0.5);
  uv_3.x = (uv_3.x - 0.5);
  vec2 tmpvar_20;
  tmpvar_20 = (uv_3 + localCoords_2);
  uv_3 = tmpvar_20;
  norm_1.z = cos((6.28319 * tmpvar_20.x));
  norm_1.x = sin((6.28319 * tmpvar_20.x));
  norm_1.y = cos((3.14159 * tmpvar_20.y));
  vec3 tmpvar_21;
  tmpvar_21 = -(norm_1);
  norm_1 = tmpvar_21;
  vec3 tmpvar_22;
  tmpvar_22 = abs(xlv_TEXCOORD6);
  float tmpvar_23;
  tmpvar_23 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  vec4 tmpvar_24;
  tmpvar_24 = (mix ((xlv_TEXCOORD1 + mix ((0.25 * (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_18)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_18)), tmpvar_22.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_18)), tmpvar_22.yyyy) - 0.5)), vec4(0.0, 0.0, 0.0, 0.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))), tmpvar_17, vec4(tmpvar_23)) * _Color);
  color_4.w = tmpvar_24.w;
  vec3 tmpvar_25;
  tmpvar_25 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * mix (clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), clamp (dot (tmpvar_21, -(_SunDir)), 0.0, 1.0), tmpvar_23)) * 4.0) * texture2DProj (_ShadowMapTexture, xlv_TEXCOORD3).x), 0.0, 1.0))), 0.0, 1.0) * clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0));
  color_4.xyz = (tmpvar_24.xyz + (_Albedo * tmpvar_25));
  color_4.xyz = (color_4.xyz * tmpvar_25);
  color_4.w = 1.0;
  gl_FragData[0] = color_4;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_WorldSpaceCameraPos]
Vector 9 [_ProjectionParams]
Vector 10 [_ScreenParams]
Matrix 4 [_Object2World]
"vs_3_0
; 32 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord5 o5
dcl_texcoord6 o6
def c11, 0.00000000, 0.50000000, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
mov r1.xyz, v2
mov r1.w, c11.x
dp4 r0.z, r1, c6
dp4 r0.x, r1, c4
dp4 r0.y, r1, c5
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o5.xyz, r0.w, r0
dp4 r0.w, v0, c3
dp4 r0.x, v0, c0
dp4 r0.y, v0, c1
mul r2.xyz, r0.xyww, c11.y
mul r2.y, r2, c9.x
mov r1.zw, v4.xyxy
mov r1.xy, v3
dp4 r1.w, r1, r1
rsq r0.z, r1.w
mul r1.xyz, r0.z, r1
mov o6.xyz, -r1
dp4 r0.z, v0, c2
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
add r1.xyz, -r1, c8
mov o0, r0
dp3 r0.x, r1, r1
rsq r0.x, r0.x
mad o4.xy, r2.z, c10.zwzw, r2
mov o2, v1
mov o4.zw, r0
rcp o1.x, r0.x
mov o3.xyz, v2
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  highp vec3 p_2;
  p_2 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_1;
  highp vec4 tmpvar_4;
  tmpvar_4.x = _glesMultiTexCoord0.x;
  tmpvar_4.y = _glesMultiTexCoord0.y;
  tmpvar_4.z = _glesMultiTexCoord1.x;
  tmpvar_4.w = _glesMultiTexCoord1.y;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_4).xyz);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float terminator_2;
  mediump vec3 light_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float handoff_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec3 norm_10;
  highp vec2 localCoords_11;
  mediump vec4 encnorm_12;
  mediump float vertLerp_13;
  mediump vec4 main_14;
  highp vec2 uv_15;
  mediump vec4 color_16;
  highp float r_17;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_18;
    y_over_x_18 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_19;
    highp float x_20;
    x_20 = (y_over_x_18 * inversesqrt(((y_over_x_18 * y_over_x_18) + 1.0)));
    s_19 = (sign(x_20) * (1.5708 - (sqrt((1.0 - abs(x_20))) * (1.5708 + (abs(x_20) * (-0.214602 + (abs(x_20) * (0.0865667 + (abs(x_20) * -0.0310296)))))))));
    r_17 = s_19;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_17 = (s_19 + 3.14159);
      } else {
        r_17 = (r_17 - 3.14159);
      };
    };
  } else {
    r_17 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_15.x = (0.5 + (0.159155 * r_17));
  uv_15.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_21;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_22;
    y_over_x_22 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_23;
    highp float x_24;
    x_24 = (y_over_x_22 * inversesqrt(((y_over_x_22 * y_over_x_22) + 1.0)));
    s_23 = (sign(x_24) * (1.5708 - (sqrt((1.0 - abs(x_24))) * (1.5708 + (abs(x_24) * (-0.214602 + (abs(x_24) * (0.0865667 + (abs(x_24) * -0.0310296)))))))));
    r_21 = s_23;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_21 = (s_23 + 3.14159);
      } else {
        r_21 = (r_21 - 3.14159);
      };
    };
  } else {
    r_21 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_25;
  tmpvar_25 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_26;
  tmpvar_26 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_28;
  tmpvar_28.x = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_28.y = dFdx(tmpvar_25);
  tmpvar_28.z = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_28.w = dFdy(tmpvar_25);
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2DGradEXT (_MainTex, uv_15, tmpvar_28.xy, tmpvar_28.zw);
  main_14 = tmpvar_29;
  highp vec2 tmpvar_30;
  tmpvar_30 = (xlv_TEXCOORD6.zy * _DetailScale);
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD6.zx * _DetailScale);
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.xy * _DetailScale);
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  highp float tmpvar_36;
  tmpvar_36 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_13 = tmpvar_36;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_DetailVertTex, tmpvar_33);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailTex, tmpvar_30);
  mediump vec4 tmpvar_39;
  tmpvar_39 = mix (tmpvar_37, tmpvar_38, vec4(vertLerp_13));
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailVertTex, tmpvar_34);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailTex, tmpvar_31);
  mediump vec4 tmpvar_42;
  tmpvar_42 = mix (tmpvar_40, tmpvar_41, vec4(vertLerp_13));
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailVertTex, tmpvar_35);
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailTex, tmpvar_32);
  mediump vec4 tmpvar_45;
  tmpvar_45 = mix (tmpvar_43, tmpvar_44, vec4(vertLerp_13));
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2DGradEXT (_BumpMap, uv_15, tmpvar_28.xy, tmpvar_28.zw);
  encnorm_12 = tmpvar_46;
  mediump vec2 tmpvar_47;
  tmpvar_47 = encnorm_12.wy;
  localCoords_11 = tmpvar_47;
  highp vec2 tmpvar_48;
  tmpvar_48 = (localCoords_11 - vec2(0.5, 0.5));
  localCoords_11.x = (tmpvar_48.x * 0.25);
  localCoords_11.y = (tmpvar_48.y * 0.5);
  uv_15.x = (uv_15.x - 0.5);
  highp vec2 tmpvar_49;
  tmpvar_49 = (uv_15 + localCoords_11);
  uv_15 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = cos((6.28319 * tmpvar_49.x));
  norm_10.z = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = sin((6.28319 * tmpvar_49.x));
  norm_10.x = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = cos((3.14159 * tmpvar_49.y));
  norm_10.y = tmpvar_52;
  mediump vec3 tmpvar_53;
  tmpvar_53 = -(norm_10);
  norm_10 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_55;
  tmpvar_55 = mix (tmpvar_45, tmpvar_39, tmpvar_54.xxxx);
  detail_9 = tmpvar_55;
  highp vec4 tmpvar_56;
  tmpvar_56 = (0.25 * (mix (detail_9, tmpvar_42, tmpvar_54.yyyy) - 0.5));
  detail_9 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_57;
  mediump vec4 tmpvar_58;
  tmpvar_58 = mix (detail_9, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_8));
  highp vec4 tmpvar_59;
  tmpvar_59 = (xlv_TEXCOORD1 + tmpvar_58);
  color_16 = tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_7 = tmpvar_60;
  mediump vec4 tmpvar_61;
  tmpvar_61 = (mix (color_16, main_14, vec4(handoff_7)) * _Color);
  color_16.w = tmpvar_61.w;
  highp vec3 tmpvar_62;
  tmpvar_62 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_62;
  lowp vec3 tmpvar_63;
  tmpvar_63 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_64;
  lowp float tmpvar_65;
  mediump float lightShadowDataX_66;
  highp float dist_67;
  lowp float tmpvar_68;
  tmpvar_68 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD3).x;
  dist_67 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = _LightShadowData.x;
  lightShadowDataX_66 = tmpvar_69;
  highp float tmpvar_70;
  tmpvar_70 = max (float((dist_67 > (xlv_TEXCOORD3.z / xlv_TEXCOORD3.w))), lightShadowDataX_66);
  tmpvar_65 = tmpvar_70;
  mediump float tmpvar_71;
  tmpvar_71 = clamp ((((_LightColor0.w * mix (TNdotL_4, clamp (dot (tmpvar_53, -(_SunDir)), 0.0, 1.0), handoff_7)) * 4.0) * tmpvar_65), 0.0, 1.0);
  highp vec3 tmpvar_72;
  tmpvar_72 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_71)), 0.0, 1.0);
  light_3 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0);
  terminator_2 = tmpvar_73;
  mediump vec3 tmpvar_74;
  tmpvar_74 = (light_3 * terminator_2);
  light_3 = tmpvar_74;
  highp vec3 tmpvar_75;
  tmpvar_75 = (tmpvar_61.xyz + (_Albedo * tmpvar_74));
  color_16.xyz = tmpvar_75;
  color_16.xyz = (color_16.xyz * tmpvar_74);
  color_16.w = 1.0;
  tmpvar_1 = color_16;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  highp vec4 tmpvar_5;
  tmpvar_5.x = _glesMultiTexCoord0.x;
  tmpvar_5.y = _glesMultiTexCoord0.y;
  tmpvar_5.z = _glesMultiTexCoord1.x;
  tmpvar_5.w = _glesMultiTexCoord1.y;
  highp vec4 o_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_8;
  tmpvar_8.x = tmpvar_7.x;
  tmpvar_8.y = (tmpvar_7.y * _ProjectionParams.x);
  o_6.xy = (tmpvar_8 + tmpvar_7.w);
  o_6.zw = tmpvar_2.zw;
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_6;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_5).xyz);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float terminator_2;
  mediump vec3 light_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float handoff_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec3 norm_10;
  highp vec2 localCoords_11;
  mediump vec4 encnorm_12;
  mediump float vertLerp_13;
  mediump vec4 main_14;
  highp vec2 uv_15;
  mediump vec4 color_16;
  highp float r_17;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_18;
    y_over_x_18 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_19;
    highp float x_20;
    x_20 = (y_over_x_18 * inversesqrt(((y_over_x_18 * y_over_x_18) + 1.0)));
    s_19 = (sign(x_20) * (1.5708 - (sqrt((1.0 - abs(x_20))) * (1.5708 + (abs(x_20) * (-0.214602 + (abs(x_20) * (0.0865667 + (abs(x_20) * -0.0310296)))))))));
    r_17 = s_19;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_17 = (s_19 + 3.14159);
      } else {
        r_17 = (r_17 - 3.14159);
      };
    };
  } else {
    r_17 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_15.x = (0.5 + (0.159155 * r_17));
  uv_15.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_21;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_22;
    y_over_x_22 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_23;
    highp float x_24;
    x_24 = (y_over_x_22 * inversesqrt(((y_over_x_22 * y_over_x_22) + 1.0)));
    s_23 = (sign(x_24) * (1.5708 - (sqrt((1.0 - abs(x_24))) * (1.5708 + (abs(x_24) * (-0.214602 + (abs(x_24) * (0.0865667 + (abs(x_24) * -0.0310296)))))))));
    r_21 = s_23;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_21 = (s_23 + 3.14159);
      } else {
        r_21 = (r_21 - 3.14159);
      };
    };
  } else {
    r_21 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_25;
  tmpvar_25 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_26;
  tmpvar_26 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_28;
  tmpvar_28.x = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_28.y = dFdx(tmpvar_25);
  tmpvar_28.z = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_28.w = dFdy(tmpvar_25);
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2DGradEXT (_MainTex, uv_15, tmpvar_28.xy, tmpvar_28.zw);
  main_14 = tmpvar_29;
  highp vec2 tmpvar_30;
  tmpvar_30 = (xlv_TEXCOORD6.zy * _DetailScale);
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD6.zx * _DetailScale);
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.xy * _DetailScale);
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  highp float tmpvar_36;
  tmpvar_36 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_13 = tmpvar_36;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_DetailVertTex, tmpvar_33);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailTex, tmpvar_30);
  mediump vec4 tmpvar_39;
  tmpvar_39 = mix (tmpvar_37, tmpvar_38, vec4(vertLerp_13));
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailVertTex, tmpvar_34);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailTex, tmpvar_31);
  mediump vec4 tmpvar_42;
  tmpvar_42 = mix (tmpvar_40, tmpvar_41, vec4(vertLerp_13));
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailVertTex, tmpvar_35);
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailTex, tmpvar_32);
  mediump vec4 tmpvar_45;
  tmpvar_45 = mix (tmpvar_43, tmpvar_44, vec4(vertLerp_13));
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2DGradEXT (_BumpMap, uv_15, tmpvar_28.xy, tmpvar_28.zw);
  encnorm_12 = tmpvar_46;
  mediump vec2 tmpvar_47;
  tmpvar_47 = encnorm_12.wy;
  localCoords_11 = tmpvar_47;
  highp vec2 tmpvar_48;
  tmpvar_48 = (localCoords_11 - vec2(0.5, 0.5));
  localCoords_11.x = (tmpvar_48.x * 0.25);
  localCoords_11.y = (tmpvar_48.y * 0.5);
  uv_15.x = (uv_15.x - 0.5);
  highp vec2 tmpvar_49;
  tmpvar_49 = (uv_15 + localCoords_11);
  uv_15 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = cos((6.28319 * tmpvar_49.x));
  norm_10.z = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = sin((6.28319 * tmpvar_49.x));
  norm_10.x = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = cos((3.14159 * tmpvar_49.y));
  norm_10.y = tmpvar_52;
  mediump vec3 tmpvar_53;
  tmpvar_53 = -(norm_10);
  norm_10 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_55;
  tmpvar_55 = mix (tmpvar_45, tmpvar_39, tmpvar_54.xxxx);
  detail_9 = tmpvar_55;
  highp vec4 tmpvar_56;
  tmpvar_56 = (0.25 * (mix (detail_9, tmpvar_42, tmpvar_54.yyyy) - 0.5));
  detail_9 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_57;
  mediump vec4 tmpvar_58;
  tmpvar_58 = mix (detail_9, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_8));
  highp vec4 tmpvar_59;
  tmpvar_59 = (xlv_TEXCOORD1 + tmpvar_58);
  color_16 = tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_7 = tmpvar_60;
  mediump vec4 tmpvar_61;
  tmpvar_61 = (mix (color_16, main_14, vec4(handoff_7)) * _Color);
  color_16.w = tmpvar_61.w;
  highp vec3 tmpvar_62;
  tmpvar_62 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_62;
  lowp vec3 tmpvar_63;
  tmpvar_63 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_64;
  lowp vec4 tmpvar_65;
  tmpvar_65 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD3);
  mediump float tmpvar_66;
  tmpvar_66 = clamp ((((_LightColor0.w * mix (TNdotL_4, clamp (dot (tmpvar_53, -(_SunDir)), 0.0, 1.0), handoff_7)) * 4.0) * tmpvar_65.x), 0.0, 1.0);
  highp vec3 tmpvar_67;
  tmpvar_67 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_66)), 0.0, 1.0);
  light_3 = tmpvar_67;
  highp float tmpvar_68;
  tmpvar_68 = clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0);
  terminator_2 = tmpvar_68;
  mediump vec3 tmpvar_69;
  tmpvar_69 = (light_3 * terminator_2);
  light_3 = tmpvar_69;
  highp vec3 tmpvar_70;
  tmpvar_70 = (tmpvar_61.xyz + (_Albedo * tmpvar_69));
  color_16.xyz = tmpvar_70;
  color_16.xyz = (color_16.xyz * tmpvar_69);
  color_16.w = 1.0;
  tmpvar_1 = color_16;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 323
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 424
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 objnormal;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
};
#line 414
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 333
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 346
#line 354
#line 368
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 401
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 405
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 409
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp mat4 _Rotation;
#line 413
uniform highp mat4 _InvRotation;
#line 435
#line 460
#line 435
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 439
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    #line 443
    o.color = v.color;
    o.objnormal = v.normal;
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    #line 447
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.objnormal);
    xlv_TEXCOORD3 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereCoords);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 323
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 424
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 objnormal;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
};
#line 414
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 333
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 346
#line 354
#line 368
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 401
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 405
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 409
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp mat4 _Rotation;
#line 413
uniform highp mat4 _InvRotation;
#line 435
#line 460
#line 449
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 451
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 455
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 317
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    #line 319
    highp float dist = textureProj( _ShadowMapTexture, shadowCoord).x;
    mediump float lightShadowDataX = _LightShadowData.x;
    return max( float((dist > (shadowCoord.z / shadowCoord.w))), lightShadowDataX);
}
#line 460
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    #line 464
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 468
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    highp vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    highp vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    highp vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    #line 472
    highp vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    highp vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    highp vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, (-IN.sphereCoords))) - 0.95)) + 0.5));
    #line 476
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    #line 480
    highp vec2 localCoords = encnorm.wy;
    localCoords -= vec2( 0.5);
    localCoords.x *= 0.25;
    localCoords.y *= 0.5;
    #line 484
    uv.x -= 0.5;
    uv += localCoords;
    mediump vec3 norm;
    norm.z = cos((6.28319 * uv.x));
    #line 488
    norm.x = sin((6.28319 * uv.x));
    norm.y = cos((3.14159 * uv.y));
    norm = (-norm);
    sphereNrm = abs(sphereNrm);
    #line 492
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = (0.25 * (mix( detail, detailY, vec4( sphereNrm.y)) - 0.5));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (IN.color + mix( detail.xyzw, vec4( 0.0), vec4( detailLevel)));
    #line 496
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    color = mix( color, main, vec4( handoff));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 500
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    #line 504
    lowp float atten = unitySampleShadow( IN._ShadowCoord);
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    mediump float terminator = xll_saturate_f(floor((1.01 + dot( IN.sphereCoords, _SunDir))));
    #line 508
    light *= terminator;
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    color.w = 1.0;
    #line 512
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.objnormal = vec3(xlv_TEXCOORD2);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec2 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec4 _ProjectionParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec3 p_2;
  p_2 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = gl_Normal;
  vec4 tmpvar_4;
  tmpvar_4.x = gl_MultiTexCoord0.x;
  tmpvar_4.y = gl_MultiTexCoord0.y;
  tmpvar_4.z = gl_MultiTexCoord1.x;
  tmpvar_4.w = gl_MultiTexCoord1.y;
  vec4 o_5;
  vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_1 * 0.5);
  vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_1.zw;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xy;
  xlv_TEXCOORD4 = o_5;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_4).xyz);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec2 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec3 norm_1;
  vec2 localCoords_2;
  vec2 uv_3;
  vec4 color_4;
  float r_5;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_6;
    y_over_x_6 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * r_5));
  uv_3.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_9;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_10;
    y_over_x_10 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_11;
    float x_12;
    x_12 = (y_over_x_10 * inversesqrt(((y_over_x_10 * y_over_x_10) + 1.0)));
    s_11 = (sign(x_12) * (1.5708 - (sqrt((1.0 - abs(x_12))) * (1.5708 + (abs(x_12) * (-0.214602 + (abs(x_12) * (0.0865667 + (abs(x_12) * -0.0310296)))))))));
    r_9 = s_11;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_9 = (s_11 + 3.14159);
      } else {
        r_9 = (r_9 - 3.14159);
      };
    };
  } else {
    r_9 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_13;
  tmpvar_13 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_14;
  tmpvar_14 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_15;
  tmpvar_15 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(tmpvar_13);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(tmpvar_13);
  vec4 tmpvar_17;
  tmpvar_17 = texture2DGradARB (_MainTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  float tmpvar_18;
  tmpvar_18 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec2 tmpvar_19;
  tmpvar_19 = (texture2DGradARB (_BumpMap, uv_3, tmpvar_16.xy, tmpvar_16.zw).wy - vec2(0.5, 0.5));
  localCoords_2.x = (tmpvar_19.x * 0.25);
  localCoords_2.y = (tmpvar_19.y * 0.5);
  uv_3.x = (uv_3.x - 0.5);
  vec2 tmpvar_20;
  tmpvar_20 = (uv_3 + localCoords_2);
  uv_3 = tmpvar_20;
  norm_1.z = cos((6.28319 * tmpvar_20.x));
  norm_1.x = sin((6.28319 * tmpvar_20.x));
  norm_1.y = cos((3.14159 * tmpvar_20.y));
  vec3 tmpvar_21;
  tmpvar_21 = -(norm_1);
  norm_1 = tmpvar_21;
  vec3 tmpvar_22;
  tmpvar_22 = abs(xlv_TEXCOORD6);
  float tmpvar_23;
  tmpvar_23 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  vec4 tmpvar_24;
  tmpvar_24 = (mix ((xlv_TEXCOORD1 + mix ((0.25 * (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_18)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_18)), tmpvar_22.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_18)), tmpvar_22.yyyy) - 0.5)), vec4(0.0, 0.0, 0.0, 0.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))), tmpvar_17, vec4(tmpvar_23)) * _Color);
  color_4.w = tmpvar_24.w;
  vec3 tmpvar_25;
  tmpvar_25 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * mix (clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), clamp (dot (tmpvar_21, -(_SunDir)), 0.0, 1.0), tmpvar_23)) * 4.0) * (texture2D (_LightTexture0, xlv_TEXCOORD3).w * texture2DProj (_ShadowMapTexture, xlv_TEXCOORD4).x)), 0.0, 1.0))), 0.0, 1.0) * clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0));
  color_4.xyz = (tmpvar_24.xyz + (_Albedo * tmpvar_25));
  color_4.xyz = (color_4.xyz * tmpvar_25);
  color_4.w = 1.0;
  gl_FragData[0] = color_4;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_ProjectionParams]
Vector 14 [_ScreenParams]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 35 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
def c15, 0.00000000, 0.50000000, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
mov r1.xyz, v2
mov r1.w, c15.x
dp4 r0.z, r1, c6
dp4 r0.x, r1, c4
dp4 r0.y, r1, c5
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o6.xyz, r0.w, r0
dp4 r2.w, v0, c3
dp4 r2.z, v0, c2
mov r0.zw, v4.xyxy
mov r0.xy, v3
dp4 r0.w, r0, r0
rsq r0.w, r0.w
mul r0.xyz, r0.w, r0
mov o7.xyz, -r0
dp4 r0.x, v0, c4
dp4 r0.z, v0, c6
dp4 r0.y, v0, c5
dp4 r0.w, v0, c7
dp4 r2.x, v0, c0
dp4 r2.y, v0, c1
mul r1.xyz, r2.xyww, c15.y
mul r1.y, r1, c13.x
mad o5.xy, r1.z, c14.zwzw, r1
add r1.xyz, -r0, c12
dp4 o4.y, r0, c9
dp3 r1.x, r1, r1
dp4 o4.x, r0, c8
rsq r0.x, r1.x
mov o0, r2
mov o2, v1
mov o5.zw, r2
rcp o1.x, r0.x
mov o3.xyz, v2
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  highp vec3 p_2;
  p_2 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_1;
  highp vec4 tmpvar_4;
  tmpvar_4.x = _glesMultiTexCoord0.x;
  tmpvar_4.y = _glesMultiTexCoord0.y;
  tmpvar_4.z = _glesMultiTexCoord1.x;
  tmpvar_4.w = _glesMultiTexCoord1.y;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_4).xyz);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float terminator_2;
  mediump vec3 light_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float handoff_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec3 norm_10;
  highp vec2 localCoords_11;
  mediump vec4 encnorm_12;
  mediump float vertLerp_13;
  mediump vec4 main_14;
  highp vec2 uv_15;
  mediump vec4 color_16;
  highp float r_17;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_18;
    y_over_x_18 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_19;
    highp float x_20;
    x_20 = (y_over_x_18 * inversesqrt(((y_over_x_18 * y_over_x_18) + 1.0)));
    s_19 = (sign(x_20) * (1.5708 - (sqrt((1.0 - abs(x_20))) * (1.5708 + (abs(x_20) * (-0.214602 + (abs(x_20) * (0.0865667 + (abs(x_20) * -0.0310296)))))))));
    r_17 = s_19;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_17 = (s_19 + 3.14159);
      } else {
        r_17 = (r_17 - 3.14159);
      };
    };
  } else {
    r_17 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_15.x = (0.5 + (0.159155 * r_17));
  uv_15.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_21;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_22;
    y_over_x_22 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_23;
    highp float x_24;
    x_24 = (y_over_x_22 * inversesqrt(((y_over_x_22 * y_over_x_22) + 1.0)));
    s_23 = (sign(x_24) * (1.5708 - (sqrt((1.0 - abs(x_24))) * (1.5708 + (abs(x_24) * (-0.214602 + (abs(x_24) * (0.0865667 + (abs(x_24) * -0.0310296)))))))));
    r_21 = s_23;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_21 = (s_23 + 3.14159);
      } else {
        r_21 = (r_21 - 3.14159);
      };
    };
  } else {
    r_21 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_25;
  tmpvar_25 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_26;
  tmpvar_26 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_28;
  tmpvar_28.x = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_28.y = dFdx(tmpvar_25);
  tmpvar_28.z = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_28.w = dFdy(tmpvar_25);
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2DGradEXT (_MainTex, uv_15, tmpvar_28.xy, tmpvar_28.zw);
  main_14 = tmpvar_29;
  highp vec2 tmpvar_30;
  tmpvar_30 = (xlv_TEXCOORD6.zy * _DetailScale);
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD6.zx * _DetailScale);
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.xy * _DetailScale);
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  highp float tmpvar_36;
  tmpvar_36 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_13 = tmpvar_36;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_DetailVertTex, tmpvar_33);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailTex, tmpvar_30);
  mediump vec4 tmpvar_39;
  tmpvar_39 = mix (tmpvar_37, tmpvar_38, vec4(vertLerp_13));
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailVertTex, tmpvar_34);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailTex, tmpvar_31);
  mediump vec4 tmpvar_42;
  tmpvar_42 = mix (tmpvar_40, tmpvar_41, vec4(vertLerp_13));
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailVertTex, tmpvar_35);
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailTex, tmpvar_32);
  mediump vec4 tmpvar_45;
  tmpvar_45 = mix (tmpvar_43, tmpvar_44, vec4(vertLerp_13));
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2DGradEXT (_BumpMap, uv_15, tmpvar_28.xy, tmpvar_28.zw);
  encnorm_12 = tmpvar_46;
  mediump vec2 tmpvar_47;
  tmpvar_47 = encnorm_12.wy;
  localCoords_11 = tmpvar_47;
  highp vec2 tmpvar_48;
  tmpvar_48 = (localCoords_11 - vec2(0.5, 0.5));
  localCoords_11.x = (tmpvar_48.x * 0.25);
  localCoords_11.y = (tmpvar_48.y * 0.5);
  uv_15.x = (uv_15.x - 0.5);
  highp vec2 tmpvar_49;
  tmpvar_49 = (uv_15 + localCoords_11);
  uv_15 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = cos((6.28319 * tmpvar_49.x));
  norm_10.z = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = sin((6.28319 * tmpvar_49.x));
  norm_10.x = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = cos((3.14159 * tmpvar_49.y));
  norm_10.y = tmpvar_52;
  mediump vec3 tmpvar_53;
  tmpvar_53 = -(norm_10);
  norm_10 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_55;
  tmpvar_55 = mix (tmpvar_45, tmpvar_39, tmpvar_54.xxxx);
  detail_9 = tmpvar_55;
  highp vec4 tmpvar_56;
  tmpvar_56 = (0.25 * (mix (detail_9, tmpvar_42, tmpvar_54.yyyy) - 0.5));
  detail_9 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_57;
  mediump vec4 tmpvar_58;
  tmpvar_58 = mix (detail_9, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_8));
  highp vec4 tmpvar_59;
  tmpvar_59 = (xlv_TEXCOORD1 + tmpvar_58);
  color_16 = tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_7 = tmpvar_60;
  mediump vec4 tmpvar_61;
  tmpvar_61 = (mix (color_16, main_14, vec4(handoff_7)) * _Color);
  color_16.w = tmpvar_61.w;
  highp vec3 tmpvar_62;
  tmpvar_62 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_62;
  lowp vec3 tmpvar_63;
  tmpvar_63 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_64;
  lowp float tmpvar_65;
  mediump float lightShadowDataX_66;
  highp float dist_67;
  lowp float tmpvar_68;
  tmpvar_68 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD4).x;
  dist_67 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = _LightShadowData.x;
  lightShadowDataX_66 = tmpvar_69;
  highp float tmpvar_70;
  tmpvar_70 = max (float((dist_67 > (xlv_TEXCOORD4.z / xlv_TEXCOORD4.w))), lightShadowDataX_66);
  tmpvar_65 = tmpvar_70;
  lowp float tmpvar_71;
  tmpvar_71 = (texture2D (_LightTexture0, xlv_TEXCOORD3).w * tmpvar_65);
  mediump float tmpvar_72;
  tmpvar_72 = clamp ((((_LightColor0.w * mix (TNdotL_4, clamp (dot (tmpvar_53, -(_SunDir)), 0.0, 1.0), handoff_7)) * 4.0) * tmpvar_71), 0.0, 1.0);
  highp vec3 tmpvar_73;
  tmpvar_73 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_72)), 0.0, 1.0);
  light_3 = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0);
  terminator_2 = tmpvar_74;
  mediump vec3 tmpvar_75;
  tmpvar_75 = (light_3 * terminator_2);
  light_3 = tmpvar_75;
  highp vec3 tmpvar_76;
  tmpvar_76 = (tmpvar_61.xyz + (_Albedo * tmpvar_75));
  color_16.xyz = tmpvar_76;
  color_16.xyz = (color_16.xyz * tmpvar_75);
  color_16.w = 1.0;
  tmpvar_1 = color_16;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  highp vec4 tmpvar_5;
  tmpvar_5.x = _glesMultiTexCoord0.x;
  tmpvar_5.y = _glesMultiTexCoord0.y;
  tmpvar_5.z = _glesMultiTexCoord1.x;
  tmpvar_5.w = _glesMultiTexCoord1.y;
  highp vec4 o_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_8;
  tmpvar_8.x = tmpvar_7.x;
  tmpvar_8.y = (tmpvar_7.y * _ProjectionParams.x);
  o_6.xy = (tmpvar_8 + tmpvar_7.w);
  o_6.zw = tmpvar_2.zw;
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD4 = o_6;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_5).xyz);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float terminator_2;
  mediump vec3 light_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float handoff_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec3 norm_10;
  highp vec2 localCoords_11;
  mediump vec4 encnorm_12;
  mediump float vertLerp_13;
  mediump vec4 main_14;
  highp vec2 uv_15;
  mediump vec4 color_16;
  highp float r_17;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_18;
    y_over_x_18 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_19;
    highp float x_20;
    x_20 = (y_over_x_18 * inversesqrt(((y_over_x_18 * y_over_x_18) + 1.0)));
    s_19 = (sign(x_20) * (1.5708 - (sqrt((1.0 - abs(x_20))) * (1.5708 + (abs(x_20) * (-0.214602 + (abs(x_20) * (0.0865667 + (abs(x_20) * -0.0310296)))))))));
    r_17 = s_19;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_17 = (s_19 + 3.14159);
      } else {
        r_17 = (r_17 - 3.14159);
      };
    };
  } else {
    r_17 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_15.x = (0.5 + (0.159155 * r_17));
  uv_15.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_21;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_22;
    y_over_x_22 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_23;
    highp float x_24;
    x_24 = (y_over_x_22 * inversesqrt(((y_over_x_22 * y_over_x_22) + 1.0)));
    s_23 = (sign(x_24) * (1.5708 - (sqrt((1.0 - abs(x_24))) * (1.5708 + (abs(x_24) * (-0.214602 + (abs(x_24) * (0.0865667 + (abs(x_24) * -0.0310296)))))))));
    r_21 = s_23;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_21 = (s_23 + 3.14159);
      } else {
        r_21 = (r_21 - 3.14159);
      };
    };
  } else {
    r_21 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_25;
  tmpvar_25 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_26;
  tmpvar_26 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_28;
  tmpvar_28.x = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_28.y = dFdx(tmpvar_25);
  tmpvar_28.z = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_28.w = dFdy(tmpvar_25);
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2DGradEXT (_MainTex, uv_15, tmpvar_28.xy, tmpvar_28.zw);
  main_14 = tmpvar_29;
  highp vec2 tmpvar_30;
  tmpvar_30 = (xlv_TEXCOORD6.zy * _DetailScale);
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD6.zx * _DetailScale);
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.xy * _DetailScale);
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  highp float tmpvar_36;
  tmpvar_36 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_13 = tmpvar_36;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_DetailVertTex, tmpvar_33);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailTex, tmpvar_30);
  mediump vec4 tmpvar_39;
  tmpvar_39 = mix (tmpvar_37, tmpvar_38, vec4(vertLerp_13));
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailVertTex, tmpvar_34);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailTex, tmpvar_31);
  mediump vec4 tmpvar_42;
  tmpvar_42 = mix (tmpvar_40, tmpvar_41, vec4(vertLerp_13));
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailVertTex, tmpvar_35);
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailTex, tmpvar_32);
  mediump vec4 tmpvar_45;
  tmpvar_45 = mix (tmpvar_43, tmpvar_44, vec4(vertLerp_13));
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2DGradEXT (_BumpMap, uv_15, tmpvar_28.xy, tmpvar_28.zw);
  encnorm_12 = tmpvar_46;
  mediump vec2 tmpvar_47;
  tmpvar_47 = encnorm_12.wy;
  localCoords_11 = tmpvar_47;
  highp vec2 tmpvar_48;
  tmpvar_48 = (localCoords_11 - vec2(0.5, 0.5));
  localCoords_11.x = (tmpvar_48.x * 0.25);
  localCoords_11.y = (tmpvar_48.y * 0.5);
  uv_15.x = (uv_15.x - 0.5);
  highp vec2 tmpvar_49;
  tmpvar_49 = (uv_15 + localCoords_11);
  uv_15 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = cos((6.28319 * tmpvar_49.x));
  norm_10.z = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = sin((6.28319 * tmpvar_49.x));
  norm_10.x = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = cos((3.14159 * tmpvar_49.y));
  norm_10.y = tmpvar_52;
  mediump vec3 tmpvar_53;
  tmpvar_53 = -(norm_10);
  norm_10 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_55;
  tmpvar_55 = mix (tmpvar_45, tmpvar_39, tmpvar_54.xxxx);
  detail_9 = tmpvar_55;
  highp vec4 tmpvar_56;
  tmpvar_56 = (0.25 * (mix (detail_9, tmpvar_42, tmpvar_54.yyyy) - 0.5));
  detail_9 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_57;
  mediump vec4 tmpvar_58;
  tmpvar_58 = mix (detail_9, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_8));
  highp vec4 tmpvar_59;
  tmpvar_59 = (xlv_TEXCOORD1 + tmpvar_58);
  color_16 = tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_7 = tmpvar_60;
  mediump vec4 tmpvar_61;
  tmpvar_61 = (mix (color_16, main_14, vec4(handoff_7)) * _Color);
  color_16.w = tmpvar_61.w;
  highp vec3 tmpvar_62;
  tmpvar_62 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_62;
  lowp vec3 tmpvar_63;
  tmpvar_63 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_64;
  lowp float tmpvar_65;
  tmpvar_65 = (texture2D (_LightTexture0, xlv_TEXCOORD3).w * texture2DProj (_ShadowMapTexture, xlv_TEXCOORD4).x);
  mediump float tmpvar_66;
  tmpvar_66 = clamp ((((_LightColor0.w * mix (TNdotL_4, clamp (dot (tmpvar_53, -(_SunDir)), 0.0, 1.0), handoff_7)) * 4.0) * tmpvar_65), 0.0, 1.0);
  highp vec3 tmpvar_67;
  tmpvar_67 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_66)), 0.0, 1.0);
  light_3 = tmpvar_67;
  highp float tmpvar_68;
  tmpvar_68 = clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0);
  terminator_2 = tmpvar_68;
  mediump vec3 tmpvar_69;
  tmpvar_69 = (light_3 * terminator_2);
  light_3 = tmpvar_69;
  highp vec3 tmpvar_70;
  tmpvar_70 = (tmpvar_61.xyz + (_Albedo * tmpvar_69));
  color_16.xyz = tmpvar_70;
  color_16.xyz = (color_16.xyz * tmpvar_69);
  color_16.w = 1.0;
  tmpvar_1 = color_16;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 325
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 426
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 objnormal;
    highp vec2 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
};
#line 416
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 323
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 335
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 348
#line 356
#line 370
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 403
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 407
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 411
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp mat4 _Rotation;
#line 415
uniform highp mat4 _InvRotation;
#line 438
#line 464
#line 438
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 442
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    #line 446
    o.color = v.color;
    o.objnormal = v.normal;
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xy;
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    #line 451
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec2 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.objnormal);
    xlv_TEXCOORD3 = vec2(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereCoords);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 325
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 426
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 objnormal;
    highp vec2 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
};
#line 416
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 323
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 335
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 348
#line 356
#line 370
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 403
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 407
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 411
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp mat4 _Rotation;
#line 415
uniform highp mat4 _InvRotation;
#line 438
#line 464
#line 453
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 455
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 459
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 317
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    #line 319
    highp float dist = textureProj( _ShadowMapTexture, shadowCoord).x;
    mediump float lightShadowDataX = _LightShadowData.x;
    return max( float((dist > (shadowCoord.z / shadowCoord.w))), lightShadowDataX);
}
#line 464
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    #line 468
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 472
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    highp vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    highp vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    highp vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    #line 476
    highp vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    highp vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    highp vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, (-IN.sphereCoords))) - 0.95)) + 0.5));
    #line 480
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    #line 484
    highp vec2 localCoords = encnorm.wy;
    localCoords -= vec2( 0.5);
    localCoords.x *= 0.25;
    localCoords.y *= 0.5;
    #line 488
    uv.x -= 0.5;
    uv += localCoords;
    mediump vec3 norm;
    norm.z = cos((6.28319 * uv.x));
    #line 492
    norm.x = sin((6.28319 * uv.x));
    norm.y = cos((3.14159 * uv.y));
    norm = (-norm);
    sphereNrm = abs(sphereNrm);
    #line 496
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = (0.25 * (mix( detail, detailY, vec4( sphereNrm.y)) - 0.5));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (IN.color + mix( detail.xyzw, vec4( 0.0), vec4( detailLevel)));
    #line 500
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    color = mix( color, main, vec4( handoff));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 504
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    #line 508
    lowp float atten = (texture( _LightTexture0, IN._LightCoord).w * unitySampleShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    mediump float terminator = xll_saturate_f(floor((1.01 + dot( IN.sphereCoords, _SunDir))));
    #line 512
    light *= terminator;
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    color.w = 1.0;
    #line 516
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec2 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.objnormal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec2(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec4 _LightPositionRange;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec4 tmpvar_3;
  tmpvar_3.x = gl_MultiTexCoord0.x;
  tmpvar_3.y = gl_MultiTexCoord0.y;
  tmpvar_3.z = gl_MultiTexCoord1.x;
  tmpvar_3.w = gl_MultiTexCoord1.y;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_3).xyz);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _LightPositionRange;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec3 norm_1;
  vec2 localCoords_2;
  vec2 uv_3;
  vec4 color_4;
  float r_5;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_6;
    y_over_x_6 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * r_5));
  uv_3.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_9;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_10;
    y_over_x_10 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_11;
    float x_12;
    x_12 = (y_over_x_10 * inversesqrt(((y_over_x_10 * y_over_x_10) + 1.0)));
    s_11 = (sign(x_12) * (1.5708 - (sqrt((1.0 - abs(x_12))) * (1.5708 + (abs(x_12) * (-0.214602 + (abs(x_12) * (0.0865667 + (abs(x_12) * -0.0310296)))))))));
    r_9 = s_11;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_9 = (s_11 + 3.14159);
      } else {
        r_9 = (r_9 - 3.14159);
      };
    };
  } else {
    r_9 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_13;
  tmpvar_13 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_14;
  tmpvar_14 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_15;
  tmpvar_15 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(tmpvar_13);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(tmpvar_13);
  vec4 tmpvar_17;
  tmpvar_17 = texture2DGradARB (_MainTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  float tmpvar_18;
  tmpvar_18 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec2 tmpvar_19;
  tmpvar_19 = (texture2DGradARB (_BumpMap, uv_3, tmpvar_16.xy, tmpvar_16.zw).wy - vec2(0.5, 0.5));
  localCoords_2.x = (tmpvar_19.x * 0.25);
  localCoords_2.y = (tmpvar_19.y * 0.5);
  uv_3.x = (uv_3.x - 0.5);
  vec2 tmpvar_20;
  tmpvar_20 = (uv_3 + localCoords_2);
  uv_3 = tmpvar_20;
  norm_1.z = cos((6.28319 * tmpvar_20.x));
  norm_1.x = sin((6.28319 * tmpvar_20.x));
  norm_1.y = cos((3.14159 * tmpvar_20.y));
  vec3 tmpvar_21;
  tmpvar_21 = -(norm_1);
  norm_1 = tmpvar_21;
  vec3 tmpvar_22;
  tmpvar_22 = abs(xlv_TEXCOORD6);
  float tmpvar_23;
  tmpvar_23 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  vec4 tmpvar_24;
  tmpvar_24 = (mix ((xlv_TEXCOORD1 + mix ((0.25 * (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_18)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_18)), tmpvar_22.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_18)), tmpvar_22.yyyy) - 0.5)), vec4(0.0, 0.0, 0.0, 0.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))), tmpvar_17, vec4(tmpvar_23)) * _Color);
  color_4 = tmpvar_24;
  float tmpvar_25;
  tmpvar_25 = mix (clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), clamp (dot (tmpvar_21, -(_SunDir)), 0.0, 1.0), tmpvar_23);
  vec4 tmpvar_26;
  tmpvar_26 = texture2D (_LightTexture0, vec2(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)));
  float tmpvar_27;
  tmpvar_27 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  float tmpvar_28;
  tmpvar_28 = dot (textureCube (_ShadowMapTexture, xlv_TEXCOORD4), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  float tmpvar_29;
  if ((tmpvar_28 < tmpvar_27)) {
    tmpvar_29 = _LightShadowData.x;
  } else {
    tmpvar_29 = 1.0;
  };
  vec3 tmpvar_30;
  tmpvar_30 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_25) * 4.0) * (tmpvar_26.w * tmpvar_29)), 0.0, 1.0))), 0.0, 1.0) * clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0));
  color_4.xyz = (tmpvar_24.xyz + (_Albedo * tmpvar_30));
  color_4.xyz = (color_4.xyz * tmpvar_30);
  color_4.w = 1.0;
  gl_FragData[0] = color_4;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_LightPositionRange]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 32 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
def c14, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
mov r1.xyz, v2
mov r1.w, c14.x
dp4 r2.z, r1, c6
dp4 r2.x, r1, c4
dp4 r2.y, r1, c5
mov r0.zw, v4.xyxy
mov r0.xy, v3
dp4 r2.w, r0, r0
rsq r1.x, r2.w
mul r0.xyz, r1.x, r0
mov o7.xyz, -r0
dp3 r0.w, r2, r2
rsq r0.w, r0.w
mul o6.xyz, r0.w, r2
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
dp4 r0.w, v0, c7
add r1.xyz, -r0, c12
dp3 r1.x, r1, r1
rsq r1.x, r1.x
mov o2, v1
dp4 o4.z, r0, c10
dp4 o4.y, r0, c9
dp4 o4.x, r0, c8
rcp o1.x, r1.x
mov o3.xyz, v2
add o5.xyz, r0, -c13
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  highp vec3 p_2;
  p_2 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_1;
  highp vec4 tmpvar_4;
  tmpvar_4.x = _glesMultiTexCoord0.x;
  tmpvar_4.y = _glesMultiTexCoord0.y;
  tmpvar_4.z = _glesMultiTexCoord1.x;
  tmpvar_4.w = _glesMultiTexCoord1.y;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_4).xyz);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float terminator_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float TNdotL_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump float handoff_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec3 norm_11;
  highp vec2 localCoords_12;
  mediump vec4 encnorm_13;
  mediump float vertLerp_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD6.zy * _DetailScale);
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zx * _DetailScale);
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.xy * _DetailScale);
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  highp float tmpvar_37;
  tmpvar_37 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_14 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailVertTex, tmpvar_34);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailTex, tmpvar_31);
  mediump vec4 tmpvar_40;
  tmpvar_40 = mix (tmpvar_38, tmpvar_39, vec4(vertLerp_14));
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailVertTex, tmpvar_35);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailTex, tmpvar_32);
  mediump vec4 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41, tmpvar_42, vec4(vertLerp_14));
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailVertTex, tmpvar_36);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, tmpvar_33);
  mediump vec4 tmpvar_46;
  tmpvar_46 = mix (tmpvar_44, tmpvar_45, vec4(vertLerp_14));
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2DGradEXT (_BumpMap, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  encnorm_13 = tmpvar_47;
  mediump vec2 tmpvar_48;
  tmpvar_48 = encnorm_13.wy;
  localCoords_12 = tmpvar_48;
  highp vec2 tmpvar_49;
  tmpvar_49 = (localCoords_12 - vec2(0.5, 0.5));
  localCoords_12.x = (tmpvar_49.x * 0.25);
  localCoords_12.y = (tmpvar_49.y * 0.5);
  uv_16.x = (uv_16.x - 0.5);
  highp vec2 tmpvar_50;
  tmpvar_50 = (uv_16 + localCoords_12);
  uv_16 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = cos((6.28319 * tmpvar_50.x));
  norm_11.z = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = sin((6.28319 * tmpvar_50.x));
  norm_11.x = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = cos((3.14159 * tmpvar_50.y));
  norm_11.y = tmpvar_53;
  mediump vec3 tmpvar_54;
  tmpvar_54 = -(norm_11);
  norm_11 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_56;
  tmpvar_56 = mix (tmpvar_46, tmpvar_40, tmpvar_55.xxxx);
  detail_10 = tmpvar_56;
  highp vec4 tmpvar_57;
  tmpvar_57 = (0.25 * (mix (detail_10, tmpvar_43, tmpvar_55.yyyy) - 0.5));
  detail_10 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_9 = tmpvar_58;
  mediump vec4 tmpvar_59;
  tmpvar_59 = mix (detail_10, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_9));
  highp vec4 tmpvar_60;
  tmpvar_60 = (xlv_TEXCOORD1 + tmpvar_59);
  color_17 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_8 = tmpvar_61;
  mediump vec4 tmpvar_62;
  tmpvar_62 = (mix (color_17, main_15, vec4(handoff_8)) * _Color);
  color_17 = tmpvar_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = clamp (dot (xlv_TEXCOORD5, lightDirection_6), 0.0, 1.0);
  TNdotL_5 = tmpvar_65;
  mediump float tmpvar_66;
  tmpvar_66 = mix (TNdotL_5, clamp (dot (tmpvar_54, -(_SunDir)), 0.0, 1.0), handoff_8);
  highp float tmpvar_67;
  tmpvar_67 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_68;
  tmpvar_68 = texture2D (_LightTexture0, vec2(tmpvar_67));
  highp float tmpvar_69;
  tmpvar_69 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  highp vec4 packDist_70;
  lowp vec4 tmpvar_71;
  tmpvar_71 = textureCube (_ShadowMapTexture, xlv_TEXCOORD4);
  packDist_70 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = dot (packDist_70, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp float tmpvar_73;
  if ((tmpvar_72 < tmpvar_69)) {
    tmpvar_73 = _LightShadowData.x;
  } else {
    tmpvar_73 = 1.0;
  };
  highp float tmpvar_74;
  tmpvar_74 = (tmpvar_68.w * tmpvar_73);
  atten_4 = tmpvar_74;
  mediump float tmpvar_75;
  tmpvar_75 = clamp ((((_LightColor0.w * tmpvar_66) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_76;
  tmpvar_76 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_75)), 0.0, 1.0);
  light_3 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0);
  terminator_2 = tmpvar_77;
  mediump vec3 tmpvar_78;
  tmpvar_78 = (light_3 * terminator_2);
  light_3 = tmpvar_78;
  highp vec3 tmpvar_79;
  tmpvar_79 = (tmpvar_62.xyz + (_Albedo * tmpvar_78));
  color_17.xyz = tmpvar_79;
  color_17.xyz = (color_17.xyz * tmpvar_78);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  highp vec3 p_2;
  p_2 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_1;
  highp vec4 tmpvar_4;
  tmpvar_4.x = _glesMultiTexCoord0.x;
  tmpvar_4.y = _glesMultiTexCoord0.y;
  tmpvar_4.z = _glesMultiTexCoord1.x;
  tmpvar_4.w = _glesMultiTexCoord1.y;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_4).xyz);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float terminator_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float TNdotL_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump float handoff_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec3 norm_11;
  highp vec2 localCoords_12;
  mediump vec4 encnorm_13;
  mediump float vertLerp_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD6.zy * _DetailScale);
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zx * _DetailScale);
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.xy * _DetailScale);
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  highp float tmpvar_37;
  tmpvar_37 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_14 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailVertTex, tmpvar_34);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailTex, tmpvar_31);
  mediump vec4 tmpvar_40;
  tmpvar_40 = mix (tmpvar_38, tmpvar_39, vec4(vertLerp_14));
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailVertTex, tmpvar_35);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailTex, tmpvar_32);
  mediump vec4 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41, tmpvar_42, vec4(vertLerp_14));
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailVertTex, tmpvar_36);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, tmpvar_33);
  mediump vec4 tmpvar_46;
  tmpvar_46 = mix (tmpvar_44, tmpvar_45, vec4(vertLerp_14));
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2DGradEXT (_BumpMap, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  encnorm_13 = tmpvar_47;
  mediump vec2 tmpvar_48;
  tmpvar_48 = encnorm_13.wy;
  localCoords_12 = tmpvar_48;
  highp vec2 tmpvar_49;
  tmpvar_49 = (localCoords_12 - vec2(0.5, 0.5));
  localCoords_12.x = (tmpvar_49.x * 0.25);
  localCoords_12.y = (tmpvar_49.y * 0.5);
  uv_16.x = (uv_16.x - 0.5);
  highp vec2 tmpvar_50;
  tmpvar_50 = (uv_16 + localCoords_12);
  uv_16 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = cos((6.28319 * tmpvar_50.x));
  norm_11.z = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = sin((6.28319 * tmpvar_50.x));
  norm_11.x = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = cos((3.14159 * tmpvar_50.y));
  norm_11.y = tmpvar_53;
  mediump vec3 tmpvar_54;
  tmpvar_54 = -(norm_11);
  norm_11 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_56;
  tmpvar_56 = mix (tmpvar_46, tmpvar_40, tmpvar_55.xxxx);
  detail_10 = tmpvar_56;
  highp vec4 tmpvar_57;
  tmpvar_57 = (0.25 * (mix (detail_10, tmpvar_43, tmpvar_55.yyyy) - 0.5));
  detail_10 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_9 = tmpvar_58;
  mediump vec4 tmpvar_59;
  tmpvar_59 = mix (detail_10, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_9));
  highp vec4 tmpvar_60;
  tmpvar_60 = (xlv_TEXCOORD1 + tmpvar_59);
  color_17 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_8 = tmpvar_61;
  mediump vec4 tmpvar_62;
  tmpvar_62 = (mix (color_17, main_15, vec4(handoff_8)) * _Color);
  color_17 = tmpvar_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = clamp (dot (xlv_TEXCOORD5, lightDirection_6), 0.0, 1.0);
  TNdotL_5 = tmpvar_65;
  mediump float tmpvar_66;
  tmpvar_66 = mix (TNdotL_5, clamp (dot (tmpvar_54, -(_SunDir)), 0.0, 1.0), handoff_8);
  highp float tmpvar_67;
  tmpvar_67 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_68;
  tmpvar_68 = texture2D (_LightTexture0, vec2(tmpvar_67));
  highp float tmpvar_69;
  tmpvar_69 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  highp vec4 packDist_70;
  lowp vec4 tmpvar_71;
  tmpvar_71 = textureCube (_ShadowMapTexture, xlv_TEXCOORD4);
  packDist_70 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = dot (packDist_70, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp float tmpvar_73;
  if ((tmpvar_72 < tmpvar_69)) {
    tmpvar_73 = _LightShadowData.x;
  } else {
    tmpvar_73 = 1.0;
  };
  highp float tmpvar_74;
  tmpvar_74 = (tmpvar_68.w * tmpvar_73);
  atten_4 = tmpvar_74;
  mediump float tmpvar_75;
  tmpvar_75 = clamp ((((_LightColor0.w * tmpvar_66) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_76;
  tmpvar_76 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_75)), 0.0, 1.0);
  light_3 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0);
  terminator_2 = tmpvar_77;
  mediump vec3 tmpvar_78;
  tmpvar_78 = (light_3 * terminator_2);
  light_3 = tmpvar_78;
  highp vec3 tmpvar_79;
  tmpvar_79 = (tmpvar_62.xyz + (_Albedo * tmpvar_78));
  color_17.xyz = tmpvar_79;
  color_17.xyz = (color_17.xyz * tmpvar_78);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 330
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 431
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 objnormal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
};
#line 421
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 340
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 353
#line 361
#line 375
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 408
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 412
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 416
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp mat4 _Rotation;
#line 420
uniform highp mat4 _InvRotation;
#line 443
#line 469
#line 443
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 447
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    #line 451
    o.color = v.color;
    o.objnormal = v.normal;
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    o._ShadowCoord = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    #line 456
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.objnormal);
    xlv_TEXCOORD3 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereCoords);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 330
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 431
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 objnormal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
};
#line 421
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 340
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 353
#line 361
#line 375
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 408
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 412
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 416
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp mat4 _Rotation;
#line 420
uniform highp mat4 _InvRotation;
#line 443
#line 469
#line 458
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 460
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 464
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 215
highp float DecodeFloatRGBA( in highp vec4 enc ) {
    highp vec4 kDecodeDot = vec4( 1.0, 0.00392157, 1.53787e-05, 6.22737e-09);
    return dot( enc, kDecodeDot);
}
#line 316
highp float SampleCubeDistance( in highp vec3 vec ) {
    highp vec4 packDist = texture( _ShadowMapTexture, vec);
    #line 319
    return DecodeFloatRGBA( packDist);
}
#line 321
highp float unityCubeShadow( in highp vec3 vec ) {
    #line 323
    highp float mydist = (length(vec) * _LightPositionRange.w);
    mydist *= 0.97;
    highp float dist = SampleCubeDistance( vec);
    return (( (dist < mydist) ) ? ( _LightShadowData.x ) : ( 1.0 ));
}
#line 469
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    #line 473
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 477
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    highp vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    highp vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    highp vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    #line 481
    highp vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    highp vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    highp vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, (-IN.sphereCoords))) - 0.95)) + 0.5));
    #line 485
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    #line 489
    highp vec2 localCoords = encnorm.wy;
    localCoords -= vec2( 0.5);
    localCoords.x *= 0.25;
    localCoords.y *= 0.5;
    #line 493
    uv.x -= 0.5;
    uv += localCoords;
    mediump vec3 norm;
    norm.z = cos((6.28319 * uv.x));
    #line 497
    norm.x = sin((6.28319 * uv.x));
    norm.y = cos((3.14159 * uv.y));
    norm = (-norm);
    sphereNrm = abs(sphereNrm);
    #line 501
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = (0.25 * (mix( detail, detailY, vec4( sphereNrm.y)) - 0.5));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (IN.color + mix( detail.xyzw, vec4( 0.0), vec4( detailLevel)));
    #line 505
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    color = mix( color, main, vec4( handoff));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 509
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    #line 513
    lowp float atten = (texture( _LightTexture0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * unityCubeShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    mediump float terminator = xll_saturate_f(floor((1.01 + dot( IN.sphereCoords, _SunDir))));
    #line 517
    light *= terminator;
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    color.w = 1.0;
    #line 521
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.objnormal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec4 _LightPositionRange;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec4 tmpvar_3;
  tmpvar_3.x = gl_MultiTexCoord0.x;
  tmpvar_3.y = gl_MultiTexCoord0.y;
  tmpvar_3.z = gl_MultiTexCoord1.x;
  tmpvar_3.w = gl_MultiTexCoord1.y;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_3).xyz);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _LightPositionRange;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec3 norm_1;
  vec2 localCoords_2;
  vec2 uv_3;
  vec4 color_4;
  float r_5;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_6;
    y_over_x_6 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * r_5));
  uv_3.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_9;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_10;
    y_over_x_10 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_11;
    float x_12;
    x_12 = (y_over_x_10 * inversesqrt(((y_over_x_10 * y_over_x_10) + 1.0)));
    s_11 = (sign(x_12) * (1.5708 - (sqrt((1.0 - abs(x_12))) * (1.5708 + (abs(x_12) * (-0.214602 + (abs(x_12) * (0.0865667 + (abs(x_12) * -0.0310296)))))))));
    r_9 = s_11;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_9 = (s_11 + 3.14159);
      } else {
        r_9 = (r_9 - 3.14159);
      };
    };
  } else {
    r_9 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_13;
  tmpvar_13 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_14;
  tmpvar_14 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_15;
  tmpvar_15 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(tmpvar_13);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(tmpvar_13);
  vec4 tmpvar_17;
  tmpvar_17 = texture2DGradARB (_MainTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  float tmpvar_18;
  tmpvar_18 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec2 tmpvar_19;
  tmpvar_19 = (texture2DGradARB (_BumpMap, uv_3, tmpvar_16.xy, tmpvar_16.zw).wy - vec2(0.5, 0.5));
  localCoords_2.x = (tmpvar_19.x * 0.25);
  localCoords_2.y = (tmpvar_19.y * 0.5);
  uv_3.x = (uv_3.x - 0.5);
  vec2 tmpvar_20;
  tmpvar_20 = (uv_3 + localCoords_2);
  uv_3 = tmpvar_20;
  norm_1.z = cos((6.28319 * tmpvar_20.x));
  norm_1.x = sin((6.28319 * tmpvar_20.x));
  norm_1.y = cos((3.14159 * tmpvar_20.y));
  vec3 tmpvar_21;
  tmpvar_21 = -(norm_1);
  norm_1 = tmpvar_21;
  vec3 tmpvar_22;
  tmpvar_22 = abs(xlv_TEXCOORD6);
  float tmpvar_23;
  tmpvar_23 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  vec4 tmpvar_24;
  tmpvar_24 = (mix ((xlv_TEXCOORD1 + mix ((0.25 * (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_18)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_18)), tmpvar_22.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_18)), tmpvar_22.yyyy) - 0.5)), vec4(0.0, 0.0, 0.0, 0.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))), tmpvar_17, vec4(tmpvar_23)) * _Color);
  color_4 = tmpvar_24;
  float tmpvar_25;
  tmpvar_25 = mix (clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), clamp (dot (tmpvar_21, -(_SunDir)), 0.0, 1.0), tmpvar_23);
  vec4 tmpvar_26;
  tmpvar_26 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)));
  vec4 tmpvar_27;
  tmpvar_27 = textureCube (_LightTexture0, xlv_TEXCOORD3);
  float tmpvar_28;
  tmpvar_28 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  float tmpvar_29;
  tmpvar_29 = dot (textureCube (_ShadowMapTexture, xlv_TEXCOORD4), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  float tmpvar_30;
  if ((tmpvar_29 < tmpvar_28)) {
    tmpvar_30 = _LightShadowData.x;
  } else {
    tmpvar_30 = 1.0;
  };
  vec3 tmpvar_31;
  tmpvar_31 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_25) * 4.0) * ((tmpvar_26.w * tmpvar_27.w) * tmpvar_30)), 0.0, 1.0))), 0.0, 1.0) * clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0));
  color_4.xyz = (tmpvar_24.xyz + (_Albedo * tmpvar_31));
  color_4.xyz = (color_4.xyz * tmpvar_31);
  color_4.w = 1.0;
  gl_FragData[0] = color_4;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_LightPositionRange]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 32 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
def c14, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
mov r1.xyz, v2
mov r1.w, c14.x
dp4 r2.z, r1, c6
dp4 r2.x, r1, c4
dp4 r2.y, r1, c5
mov r0.zw, v4.xyxy
mov r0.xy, v3
dp4 r2.w, r0, r0
rsq r1.x, r2.w
mul r0.xyz, r1.x, r0
mov o7.xyz, -r0
dp3 r0.w, r2, r2
rsq r0.w, r0.w
mul o6.xyz, r0.w, r2
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
dp4 r0.w, v0, c7
add r1.xyz, -r0, c12
dp3 r1.x, r1, r1
rsq r1.x, r1.x
mov o2, v1
dp4 o4.z, r0, c10
dp4 o4.y, r0, c9
dp4 o4.x, r0, c8
rcp o1.x, r1.x
mov o3.xyz, v2
add o5.xyz, r0, -c13
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  highp vec3 p_2;
  p_2 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_1;
  highp vec4 tmpvar_4;
  tmpvar_4.x = _glesMultiTexCoord0.x;
  tmpvar_4.y = _glesMultiTexCoord0.y;
  tmpvar_4.z = _glesMultiTexCoord1.x;
  tmpvar_4.w = _glesMultiTexCoord1.y;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_4).xyz);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float terminator_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float TNdotL_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump float handoff_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec3 norm_11;
  highp vec2 localCoords_12;
  mediump vec4 encnorm_13;
  mediump float vertLerp_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD6.zy * _DetailScale);
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zx * _DetailScale);
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.xy * _DetailScale);
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  highp float tmpvar_37;
  tmpvar_37 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_14 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailVertTex, tmpvar_34);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailTex, tmpvar_31);
  mediump vec4 tmpvar_40;
  tmpvar_40 = mix (tmpvar_38, tmpvar_39, vec4(vertLerp_14));
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailVertTex, tmpvar_35);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailTex, tmpvar_32);
  mediump vec4 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41, tmpvar_42, vec4(vertLerp_14));
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailVertTex, tmpvar_36);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, tmpvar_33);
  mediump vec4 tmpvar_46;
  tmpvar_46 = mix (tmpvar_44, tmpvar_45, vec4(vertLerp_14));
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2DGradEXT (_BumpMap, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  encnorm_13 = tmpvar_47;
  mediump vec2 tmpvar_48;
  tmpvar_48 = encnorm_13.wy;
  localCoords_12 = tmpvar_48;
  highp vec2 tmpvar_49;
  tmpvar_49 = (localCoords_12 - vec2(0.5, 0.5));
  localCoords_12.x = (tmpvar_49.x * 0.25);
  localCoords_12.y = (tmpvar_49.y * 0.5);
  uv_16.x = (uv_16.x - 0.5);
  highp vec2 tmpvar_50;
  tmpvar_50 = (uv_16 + localCoords_12);
  uv_16 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = cos((6.28319 * tmpvar_50.x));
  norm_11.z = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = sin((6.28319 * tmpvar_50.x));
  norm_11.x = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = cos((3.14159 * tmpvar_50.y));
  norm_11.y = tmpvar_53;
  mediump vec3 tmpvar_54;
  tmpvar_54 = -(norm_11);
  norm_11 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_56;
  tmpvar_56 = mix (tmpvar_46, tmpvar_40, tmpvar_55.xxxx);
  detail_10 = tmpvar_56;
  highp vec4 tmpvar_57;
  tmpvar_57 = (0.25 * (mix (detail_10, tmpvar_43, tmpvar_55.yyyy) - 0.5));
  detail_10 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_9 = tmpvar_58;
  mediump vec4 tmpvar_59;
  tmpvar_59 = mix (detail_10, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_9));
  highp vec4 tmpvar_60;
  tmpvar_60 = (xlv_TEXCOORD1 + tmpvar_59);
  color_17 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_8 = tmpvar_61;
  mediump vec4 tmpvar_62;
  tmpvar_62 = (mix (color_17, main_15, vec4(handoff_8)) * _Color);
  color_17 = tmpvar_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = clamp (dot (xlv_TEXCOORD5, lightDirection_6), 0.0, 1.0);
  TNdotL_5 = tmpvar_65;
  mediump float tmpvar_66;
  tmpvar_66 = mix (TNdotL_5, clamp (dot (tmpvar_54, -(_SunDir)), 0.0, 1.0), handoff_8);
  highp float tmpvar_67;
  tmpvar_67 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_68;
  tmpvar_68 = texture2D (_LightTextureB0, vec2(tmpvar_67));
  lowp vec4 tmpvar_69;
  tmpvar_69 = textureCube (_LightTexture0, xlv_TEXCOORD3);
  highp float tmpvar_70;
  tmpvar_70 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  highp vec4 packDist_71;
  lowp vec4 tmpvar_72;
  tmpvar_72 = textureCube (_ShadowMapTexture, xlv_TEXCOORD4);
  packDist_71 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = dot (packDist_71, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp float tmpvar_74;
  if ((tmpvar_73 < tmpvar_70)) {
    tmpvar_74 = _LightShadowData.x;
  } else {
    tmpvar_74 = 1.0;
  };
  highp float tmpvar_75;
  tmpvar_75 = ((tmpvar_68.w * tmpvar_69.w) * tmpvar_74);
  atten_4 = tmpvar_75;
  mediump float tmpvar_76;
  tmpvar_76 = clamp ((((_LightColor0.w * tmpvar_66) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_77;
  tmpvar_77 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_76)), 0.0, 1.0);
  light_3 = tmpvar_77;
  highp float tmpvar_78;
  tmpvar_78 = clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0);
  terminator_2 = tmpvar_78;
  mediump vec3 tmpvar_79;
  tmpvar_79 = (light_3 * terminator_2);
  light_3 = tmpvar_79;
  highp vec3 tmpvar_80;
  tmpvar_80 = (tmpvar_62.xyz + (_Albedo * tmpvar_79));
  color_17.xyz = tmpvar_80;
  color_17.xyz = (color_17.xyz * tmpvar_79);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  highp vec3 p_2;
  p_2 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_1;
  highp vec4 tmpvar_4;
  tmpvar_4.x = _glesMultiTexCoord0.x;
  tmpvar_4.y = _glesMultiTexCoord0.y;
  tmpvar_4.z = _glesMultiTexCoord1.x;
  tmpvar_4.w = _glesMultiTexCoord1.y;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_4).xyz);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float terminator_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float TNdotL_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump float handoff_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec3 norm_11;
  highp vec2 localCoords_12;
  mediump vec4 encnorm_13;
  mediump float vertLerp_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD6.zy * _DetailScale);
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zx * _DetailScale);
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.xy * _DetailScale);
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  highp float tmpvar_37;
  tmpvar_37 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_14 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailVertTex, tmpvar_34);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailTex, tmpvar_31);
  mediump vec4 tmpvar_40;
  tmpvar_40 = mix (tmpvar_38, tmpvar_39, vec4(vertLerp_14));
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailVertTex, tmpvar_35);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailTex, tmpvar_32);
  mediump vec4 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41, tmpvar_42, vec4(vertLerp_14));
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailVertTex, tmpvar_36);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, tmpvar_33);
  mediump vec4 tmpvar_46;
  tmpvar_46 = mix (tmpvar_44, tmpvar_45, vec4(vertLerp_14));
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2DGradEXT (_BumpMap, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  encnorm_13 = tmpvar_47;
  mediump vec2 tmpvar_48;
  tmpvar_48 = encnorm_13.wy;
  localCoords_12 = tmpvar_48;
  highp vec2 tmpvar_49;
  tmpvar_49 = (localCoords_12 - vec2(0.5, 0.5));
  localCoords_12.x = (tmpvar_49.x * 0.25);
  localCoords_12.y = (tmpvar_49.y * 0.5);
  uv_16.x = (uv_16.x - 0.5);
  highp vec2 tmpvar_50;
  tmpvar_50 = (uv_16 + localCoords_12);
  uv_16 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = cos((6.28319 * tmpvar_50.x));
  norm_11.z = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = sin((6.28319 * tmpvar_50.x));
  norm_11.x = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = cos((3.14159 * tmpvar_50.y));
  norm_11.y = tmpvar_53;
  mediump vec3 tmpvar_54;
  tmpvar_54 = -(norm_11);
  norm_11 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_56;
  tmpvar_56 = mix (tmpvar_46, tmpvar_40, tmpvar_55.xxxx);
  detail_10 = tmpvar_56;
  highp vec4 tmpvar_57;
  tmpvar_57 = (0.25 * (mix (detail_10, tmpvar_43, tmpvar_55.yyyy) - 0.5));
  detail_10 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_9 = tmpvar_58;
  mediump vec4 tmpvar_59;
  tmpvar_59 = mix (detail_10, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_9));
  highp vec4 tmpvar_60;
  tmpvar_60 = (xlv_TEXCOORD1 + tmpvar_59);
  color_17 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_8 = tmpvar_61;
  mediump vec4 tmpvar_62;
  tmpvar_62 = (mix (color_17, main_15, vec4(handoff_8)) * _Color);
  color_17 = tmpvar_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = clamp (dot (xlv_TEXCOORD5, lightDirection_6), 0.0, 1.0);
  TNdotL_5 = tmpvar_65;
  mediump float tmpvar_66;
  tmpvar_66 = mix (TNdotL_5, clamp (dot (tmpvar_54, -(_SunDir)), 0.0, 1.0), handoff_8);
  highp float tmpvar_67;
  tmpvar_67 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_68;
  tmpvar_68 = texture2D (_LightTextureB0, vec2(tmpvar_67));
  lowp vec4 tmpvar_69;
  tmpvar_69 = textureCube (_LightTexture0, xlv_TEXCOORD3);
  highp float tmpvar_70;
  tmpvar_70 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  highp vec4 packDist_71;
  lowp vec4 tmpvar_72;
  tmpvar_72 = textureCube (_ShadowMapTexture, xlv_TEXCOORD4);
  packDist_71 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = dot (packDist_71, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp float tmpvar_74;
  if ((tmpvar_73 < tmpvar_70)) {
    tmpvar_74 = _LightShadowData.x;
  } else {
    tmpvar_74 = 1.0;
  };
  highp float tmpvar_75;
  tmpvar_75 = ((tmpvar_68.w * tmpvar_69.w) * tmpvar_74);
  atten_4 = tmpvar_75;
  mediump float tmpvar_76;
  tmpvar_76 = clamp ((((_LightColor0.w * tmpvar_66) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_77;
  tmpvar_77 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_76)), 0.0, 1.0);
  light_3 = tmpvar_77;
  highp float tmpvar_78;
  tmpvar_78 = clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0);
  terminator_2 = tmpvar_78;
  mediump vec3 tmpvar_79;
  tmpvar_79 = (light_3 * terminator_2);
  light_3 = tmpvar_79;
  highp vec3 tmpvar_80;
  tmpvar_80 = (tmpvar_62.xyz + (_Albedo * tmpvar_79));
  color_17.xyz = tmpvar_80;
  color_17.xyz = (color_17.xyz * tmpvar_79);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 331
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 432
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 objnormal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
};
#line 422
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 341
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 354
#line 362
#line 376
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 409
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 413
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 417
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp mat4 _Rotation;
#line 421
uniform highp mat4 _InvRotation;
#line 444
#line 470
#line 444
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 448
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    #line 452
    o.color = v.color;
    o.objnormal = v.normal;
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    o._ShadowCoord = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    #line 457
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.objnormal);
    xlv_TEXCOORD3 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereCoords);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 331
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 432
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 objnormal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
};
#line 422
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 341
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 354
#line 362
#line 376
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 409
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 413
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 417
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp mat4 _Rotation;
#line 421
uniform highp mat4 _InvRotation;
#line 444
#line 470
#line 459
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 461
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 465
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 215
highp float DecodeFloatRGBA( in highp vec4 enc ) {
    highp vec4 kDecodeDot = vec4( 1.0, 0.00392157, 1.53787e-05, 6.22737e-09);
    return dot( enc, kDecodeDot);
}
#line 316
highp float SampleCubeDistance( in highp vec3 vec ) {
    highp vec4 packDist = texture( _ShadowMapTexture, vec);
    #line 319
    return DecodeFloatRGBA( packDist);
}
#line 321
highp float unityCubeShadow( in highp vec3 vec ) {
    #line 323
    highp float mydist = (length(vec) * _LightPositionRange.w);
    mydist *= 0.97;
    highp float dist = SampleCubeDistance( vec);
    return (( (dist < mydist) ) ? ( _LightShadowData.x ) : ( 1.0 ));
}
#line 470
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    #line 474
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 478
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    highp vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    highp vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    highp vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    #line 482
    highp vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    highp vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    highp vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, (-IN.sphereCoords))) - 0.95)) + 0.5));
    #line 486
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    #line 490
    highp vec2 localCoords = encnorm.wy;
    localCoords -= vec2( 0.5);
    localCoords.x *= 0.25;
    localCoords.y *= 0.5;
    #line 494
    uv.x -= 0.5;
    uv += localCoords;
    mediump vec3 norm;
    norm.z = cos((6.28319 * uv.x));
    #line 498
    norm.x = sin((6.28319 * uv.x));
    norm.y = cos((3.14159 * uv.y));
    norm = (-norm);
    sphereNrm = abs(sphereNrm);
    #line 502
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = (0.25 * (mix( detail, detailY, vec4( sphereNrm.y)) - 0.5));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (IN.color + mix( detail.xyzw, vec4( 0.0), vec4( detailLevel)));
    #line 506
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    color = mix( color, main, vec4( handoff));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 510
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    #line 514
    lowp float atten = ((texture( _LightTextureB0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * texture( _LightTexture0, IN._LightCoord).w) * unityCubeShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    mediump float terminator = xll_saturate_f(floor((1.01 + dot( IN.sphereCoords, _SunDir))));
    #line 518
    light *= terminator;
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    color.w = 1.0;
    #line 522
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.objnormal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform mat4 unity_World2Shadow[4];
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec4 tmpvar_3;
  tmpvar_3.x = gl_MultiTexCoord0.x;
  tmpvar_3.y = gl_MultiTexCoord0.y;
  tmpvar_3.z = gl_MultiTexCoord1.x;
  tmpvar_3.w = gl_MultiTexCoord1.y;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * gl_Vertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_3).xyz);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec3 norm_1;
  vec2 localCoords_2;
  vec2 uv_3;
  vec4 color_4;
  float r_5;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_6;
    y_over_x_6 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * r_5));
  uv_3.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_9;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_10;
    y_over_x_10 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_11;
    float x_12;
    x_12 = (y_over_x_10 * inversesqrt(((y_over_x_10 * y_over_x_10) + 1.0)));
    s_11 = (sign(x_12) * (1.5708 - (sqrt((1.0 - abs(x_12))) * (1.5708 + (abs(x_12) * (-0.214602 + (abs(x_12) * (0.0865667 + (abs(x_12) * -0.0310296)))))))));
    r_9 = s_11;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_9 = (s_11 + 3.14159);
      } else {
        r_9 = (r_9 - 3.14159);
      };
    };
  } else {
    r_9 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_13;
  tmpvar_13 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_14;
  tmpvar_14 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_15;
  tmpvar_15 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(tmpvar_13);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(tmpvar_13);
  vec4 tmpvar_17;
  tmpvar_17 = texture2DGradARB (_MainTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  float tmpvar_18;
  tmpvar_18 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec2 tmpvar_19;
  tmpvar_19 = (texture2DGradARB (_BumpMap, uv_3, tmpvar_16.xy, tmpvar_16.zw).wy - vec2(0.5, 0.5));
  localCoords_2.x = (tmpvar_19.x * 0.25);
  localCoords_2.y = (tmpvar_19.y * 0.5);
  uv_3.x = (uv_3.x - 0.5);
  vec2 tmpvar_20;
  tmpvar_20 = (uv_3 + localCoords_2);
  uv_3 = tmpvar_20;
  norm_1.z = cos((6.28319 * tmpvar_20.x));
  norm_1.x = sin((6.28319 * tmpvar_20.x));
  norm_1.y = cos((3.14159 * tmpvar_20.y));
  vec3 tmpvar_21;
  tmpvar_21 = -(norm_1);
  norm_1 = tmpvar_21;
  vec3 tmpvar_22;
  tmpvar_22 = abs(xlv_TEXCOORD6);
  float tmpvar_23;
  tmpvar_23 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  vec4 tmpvar_24;
  tmpvar_24 = (mix ((xlv_TEXCOORD1 + mix ((0.25 * (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_18)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_18)), tmpvar_22.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_18)), tmpvar_22.yyyy) - 0.5)), vec4(0.0, 0.0, 0.0, 0.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))), tmpvar_17, vec4(tmpvar_23)) * _Color);
  color_4 = tmpvar_24;
  float tmpvar_25;
  tmpvar_25 = mix (clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), clamp (dot (tmpvar_21, -(_SunDir)), 0.0, 1.0), tmpvar_23);
  vec4 tmpvar_26;
  tmpvar_26 = texture2D (_LightTexture0, ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5));
  vec4 tmpvar_27;
  tmpvar_27 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz)));
  vec4 shadowVals_28;
  vec3 tmpvar_29;
  tmpvar_29 = (xlv_TEXCOORD4.xyz / xlv_TEXCOORD4.w);
  shadowVals_28.x = texture2D (_ShadowMapTexture, (tmpvar_29.xy + _ShadowOffsets[0].xy)).x;
  shadowVals_28.y = texture2D (_ShadowMapTexture, (tmpvar_29.xy + _ShadowOffsets[1].xy)).x;
  shadowVals_28.z = texture2D (_ShadowMapTexture, (tmpvar_29.xy + _ShadowOffsets[2].xy)).x;
  shadowVals_28.w = texture2D (_ShadowMapTexture, (tmpvar_29.xy + _ShadowOffsets[3].xy)).x;
  bvec4 tmpvar_30;
  tmpvar_30 = lessThan (shadowVals_28, tmpvar_29.zzzz);
  vec4 tmpvar_31;
  tmpvar_31 = _LightShadowData.xxxx;
  float tmpvar_32;
  if (tmpvar_30.x) {
    tmpvar_32 = tmpvar_31.x;
  } else {
    tmpvar_32 = 1.0;
  };
  float tmpvar_33;
  if (tmpvar_30.y) {
    tmpvar_33 = tmpvar_31.y;
  } else {
    tmpvar_33 = 1.0;
  };
  float tmpvar_34;
  if (tmpvar_30.z) {
    tmpvar_34 = tmpvar_31.z;
  } else {
    tmpvar_34 = 1.0;
  };
  float tmpvar_35;
  if (tmpvar_30.w) {
    tmpvar_35 = tmpvar_31.w;
  } else {
    tmpvar_35 = 1.0;
  };
  vec4 tmpvar_36;
  tmpvar_36.x = tmpvar_32;
  tmpvar_36.y = tmpvar_33;
  tmpvar_36.z = tmpvar_34;
  tmpvar_36.w = tmpvar_35;
  vec3 tmpvar_37;
  tmpvar_37 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_25) * 4.0) * (((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_26.w) * tmpvar_27.w) * dot (tmpvar_36, vec4(0.25, 0.25, 0.25, 0.25)))), 0.0, 1.0))), 0.0, 1.0) * clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0));
  color_4.xyz = (tmpvar_24.xyz + (_Albedo * tmpvar_37));
  color_4.xyz = (color_4.xyz * tmpvar_37);
  color_4.w = 1.0;
  gl_FragData[0] = color_4;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Matrix 4 [unity_World2Shadow0]
Matrix 8 [_Object2World]
Matrix 12 [_LightMatrix0]
"vs_3_0
; 36 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
def c17, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
mov r1.xyz, v2
mov r1.w, c17.x
dp4 r2.z, r1, c10
dp4 r2.x, r1, c8
dp4 r2.y, r1, c9
mov r0.zw, v4.xyxy
mov r0.xy, v3
dp4 r2.w, r0, r0
rsq r1.x, r2.w
mul r0.xyz, r1.x, r0
mov o7.xyz, -r0
dp3 r0.w, r2, r2
rsq r0.w, r0.w
mul o6.xyz, r0.w, r2
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
dp4 r0.w, v0, c11
add r1.xyz, -r0, c16
dp3 r1.x, r1, r1
rsq r1.x, r1.x
mov o2, v1
dp4 o4.w, r0, c15
dp4 o4.z, r0, c14
dp4 o4.y, r0, c13
dp4 o4.x, r0, c12
dp4 o5.w, r0, c7
dp4 o5.z, r0, c6
dp4 o5.y, r0, c5
dp4 o5.x, r0, c4
rcp o1.x, r1.x
mov o3.xyz, v2
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  highp vec3 p_2;
  p_2 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_1;
  highp vec4 tmpvar_4;
  tmpvar_4.x = _glesMultiTexCoord0.x;
  tmpvar_4.y = _glesMultiTexCoord0.y;
  tmpvar_4.z = _glesMultiTexCoord1.x;
  tmpvar_4.w = _glesMultiTexCoord1.y;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_4).xyz);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float terminator_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float TNdotL_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump float handoff_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec3 norm_11;
  highp vec2 localCoords_12;
  mediump vec4 encnorm_13;
  mediump float vertLerp_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD6.zy * _DetailScale);
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zx * _DetailScale);
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.xy * _DetailScale);
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  highp float tmpvar_37;
  tmpvar_37 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_14 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailVertTex, tmpvar_34);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailTex, tmpvar_31);
  mediump vec4 tmpvar_40;
  tmpvar_40 = mix (tmpvar_38, tmpvar_39, vec4(vertLerp_14));
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailVertTex, tmpvar_35);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailTex, tmpvar_32);
  mediump vec4 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41, tmpvar_42, vec4(vertLerp_14));
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailVertTex, tmpvar_36);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, tmpvar_33);
  mediump vec4 tmpvar_46;
  tmpvar_46 = mix (tmpvar_44, tmpvar_45, vec4(vertLerp_14));
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2DGradEXT (_BumpMap, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  encnorm_13 = tmpvar_47;
  mediump vec2 tmpvar_48;
  tmpvar_48 = encnorm_13.wy;
  localCoords_12 = tmpvar_48;
  highp vec2 tmpvar_49;
  tmpvar_49 = (localCoords_12 - vec2(0.5, 0.5));
  localCoords_12.x = (tmpvar_49.x * 0.25);
  localCoords_12.y = (tmpvar_49.y * 0.5);
  uv_16.x = (uv_16.x - 0.5);
  highp vec2 tmpvar_50;
  tmpvar_50 = (uv_16 + localCoords_12);
  uv_16 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = cos((6.28319 * tmpvar_50.x));
  norm_11.z = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = sin((6.28319 * tmpvar_50.x));
  norm_11.x = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = cos((3.14159 * tmpvar_50.y));
  norm_11.y = tmpvar_53;
  mediump vec3 tmpvar_54;
  tmpvar_54 = -(norm_11);
  norm_11 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_56;
  tmpvar_56 = mix (tmpvar_46, tmpvar_40, tmpvar_55.xxxx);
  detail_10 = tmpvar_56;
  highp vec4 tmpvar_57;
  tmpvar_57 = (0.25 * (mix (detail_10, tmpvar_43, tmpvar_55.yyyy) - 0.5));
  detail_10 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_9 = tmpvar_58;
  mediump vec4 tmpvar_59;
  tmpvar_59 = mix (detail_10, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_9));
  highp vec4 tmpvar_60;
  tmpvar_60 = (xlv_TEXCOORD1 + tmpvar_59);
  color_17 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_8 = tmpvar_61;
  mediump vec4 tmpvar_62;
  tmpvar_62 = (mix (color_17, main_15, vec4(handoff_8)) * _Color);
  color_17 = tmpvar_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = clamp (dot (xlv_TEXCOORD5, lightDirection_6), 0.0, 1.0);
  TNdotL_5 = tmpvar_65;
  mediump float tmpvar_66;
  tmpvar_66 = mix (TNdotL_5, clamp (dot (tmpvar_54, -(_SunDir)), 0.0, 1.0), handoff_8);
  lowp vec4 tmpvar_67;
  highp vec2 P_68;
  P_68 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_67 = texture2D (_LightTexture0, P_68);
  highp float tmpvar_69;
  tmpvar_69 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_70;
  tmpvar_70 = texture2D (_LightTextureB0, vec2(tmpvar_69));
  lowp float tmpvar_71;
  mediump vec4 shadows_72;
  highp vec4 shadowVals_73;
  highp vec3 tmpvar_74;
  tmpvar_74 = (xlv_TEXCOORD4.xyz / xlv_TEXCOORD4.w);
  highp vec2 P_75;
  P_75 = (tmpvar_74.xy + _ShadowOffsets[0].xy);
  lowp float tmpvar_76;
  tmpvar_76 = texture2D (_ShadowMapTexture, P_75).x;
  shadowVals_73.x = tmpvar_76;
  highp vec2 P_77;
  P_77 = (tmpvar_74.xy + _ShadowOffsets[1].xy);
  lowp float tmpvar_78;
  tmpvar_78 = texture2D (_ShadowMapTexture, P_77).x;
  shadowVals_73.y = tmpvar_78;
  highp vec2 P_79;
  P_79 = (tmpvar_74.xy + _ShadowOffsets[2].xy);
  lowp float tmpvar_80;
  tmpvar_80 = texture2D (_ShadowMapTexture, P_79).x;
  shadowVals_73.z = tmpvar_80;
  highp vec2 P_81;
  P_81 = (tmpvar_74.xy + _ShadowOffsets[3].xy);
  lowp float tmpvar_82;
  tmpvar_82 = texture2D (_ShadowMapTexture, P_81).x;
  shadowVals_73.w = tmpvar_82;
  bvec4 tmpvar_83;
  tmpvar_83 = lessThan (shadowVals_73, tmpvar_74.zzzz);
  highp vec4 tmpvar_84;
  tmpvar_84 = _LightShadowData.xxxx;
  highp float tmpvar_85;
  if (tmpvar_83.x) {
    tmpvar_85 = tmpvar_84.x;
  } else {
    tmpvar_85 = 1.0;
  };
  highp float tmpvar_86;
  if (tmpvar_83.y) {
    tmpvar_86 = tmpvar_84.y;
  } else {
    tmpvar_86 = 1.0;
  };
  highp float tmpvar_87;
  if (tmpvar_83.z) {
    tmpvar_87 = tmpvar_84.z;
  } else {
    tmpvar_87 = 1.0;
  };
  highp float tmpvar_88;
  if (tmpvar_83.w) {
    tmpvar_88 = tmpvar_84.w;
  } else {
    tmpvar_88 = 1.0;
  };
  highp vec4 tmpvar_89;
  tmpvar_89.x = tmpvar_85;
  tmpvar_89.y = tmpvar_86;
  tmpvar_89.z = tmpvar_87;
  tmpvar_89.w = tmpvar_88;
  shadows_72 = tmpvar_89;
  mediump float tmpvar_90;
  tmpvar_90 = dot (shadows_72, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_71 = tmpvar_90;
  highp float tmpvar_91;
  tmpvar_91 = (((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_67.w) * tmpvar_70.w) * tmpvar_71);
  atten_4 = tmpvar_91;
  mediump float tmpvar_92;
  tmpvar_92 = clamp ((((_LightColor0.w * tmpvar_66) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_93;
  tmpvar_93 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_92)), 0.0, 1.0);
  light_3 = tmpvar_93;
  highp float tmpvar_94;
  tmpvar_94 = clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0);
  terminator_2 = tmpvar_94;
  mediump vec3 tmpvar_95;
  tmpvar_95 = (light_3 * terminator_2);
  light_3 = tmpvar_95;
  highp vec3 tmpvar_96;
  tmpvar_96 = (tmpvar_62.xyz + (_Albedo * tmpvar_95));
  color_17.xyz = tmpvar_96;
  color_17.xyz = (color_17.xyz * tmpvar_95);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  highp vec3 p_2;
  p_2 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_1;
  highp vec4 tmpvar_4;
  tmpvar_4.x = _glesMultiTexCoord0.x;
  tmpvar_4.y = _glesMultiTexCoord0.y;
  tmpvar_4.z = _glesMultiTexCoord1.x;
  tmpvar_4.w = _glesMultiTexCoord1.y;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_4).xyz);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float terminator_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float TNdotL_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump float handoff_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec3 norm_11;
  highp vec2 localCoords_12;
  mediump vec4 encnorm_13;
  mediump float vertLerp_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD6.zy * _DetailScale);
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zx * _DetailScale);
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.xy * _DetailScale);
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  highp float tmpvar_37;
  tmpvar_37 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_14 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailVertTex, tmpvar_34);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailTex, tmpvar_31);
  mediump vec4 tmpvar_40;
  tmpvar_40 = mix (tmpvar_38, tmpvar_39, vec4(vertLerp_14));
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailVertTex, tmpvar_35);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailTex, tmpvar_32);
  mediump vec4 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41, tmpvar_42, vec4(vertLerp_14));
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailVertTex, tmpvar_36);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, tmpvar_33);
  mediump vec4 tmpvar_46;
  tmpvar_46 = mix (tmpvar_44, tmpvar_45, vec4(vertLerp_14));
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2DGradEXT (_BumpMap, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  encnorm_13 = tmpvar_47;
  mediump vec2 tmpvar_48;
  tmpvar_48 = encnorm_13.wy;
  localCoords_12 = tmpvar_48;
  highp vec2 tmpvar_49;
  tmpvar_49 = (localCoords_12 - vec2(0.5, 0.5));
  localCoords_12.x = (tmpvar_49.x * 0.25);
  localCoords_12.y = (tmpvar_49.y * 0.5);
  uv_16.x = (uv_16.x - 0.5);
  highp vec2 tmpvar_50;
  tmpvar_50 = (uv_16 + localCoords_12);
  uv_16 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = cos((6.28319 * tmpvar_50.x));
  norm_11.z = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = sin((6.28319 * tmpvar_50.x));
  norm_11.x = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = cos((3.14159 * tmpvar_50.y));
  norm_11.y = tmpvar_53;
  mediump vec3 tmpvar_54;
  tmpvar_54 = -(norm_11);
  norm_11 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_56;
  tmpvar_56 = mix (tmpvar_46, tmpvar_40, tmpvar_55.xxxx);
  detail_10 = tmpvar_56;
  highp vec4 tmpvar_57;
  tmpvar_57 = (0.25 * (mix (detail_10, tmpvar_43, tmpvar_55.yyyy) - 0.5));
  detail_10 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_9 = tmpvar_58;
  mediump vec4 tmpvar_59;
  tmpvar_59 = mix (detail_10, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_9));
  highp vec4 tmpvar_60;
  tmpvar_60 = (xlv_TEXCOORD1 + tmpvar_59);
  color_17 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_8 = tmpvar_61;
  mediump vec4 tmpvar_62;
  tmpvar_62 = (mix (color_17, main_15, vec4(handoff_8)) * _Color);
  color_17 = tmpvar_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = clamp (dot (xlv_TEXCOORD5, lightDirection_6), 0.0, 1.0);
  TNdotL_5 = tmpvar_65;
  mediump float tmpvar_66;
  tmpvar_66 = mix (TNdotL_5, clamp (dot (tmpvar_54, -(_SunDir)), 0.0, 1.0), handoff_8);
  lowp vec4 tmpvar_67;
  highp vec2 P_68;
  P_68 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_67 = texture2D (_LightTexture0, P_68);
  highp float tmpvar_69;
  tmpvar_69 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_70;
  tmpvar_70 = texture2D (_LightTextureB0, vec2(tmpvar_69));
  lowp float tmpvar_71;
  mediump vec4 shadows_72;
  highp vec4 shadowVals_73;
  highp vec3 tmpvar_74;
  tmpvar_74 = (xlv_TEXCOORD4.xyz / xlv_TEXCOORD4.w);
  highp vec2 P_75;
  P_75 = (tmpvar_74.xy + _ShadowOffsets[0].xy);
  lowp float tmpvar_76;
  tmpvar_76 = texture2D (_ShadowMapTexture, P_75).x;
  shadowVals_73.x = tmpvar_76;
  highp vec2 P_77;
  P_77 = (tmpvar_74.xy + _ShadowOffsets[1].xy);
  lowp float tmpvar_78;
  tmpvar_78 = texture2D (_ShadowMapTexture, P_77).x;
  shadowVals_73.y = tmpvar_78;
  highp vec2 P_79;
  P_79 = (tmpvar_74.xy + _ShadowOffsets[2].xy);
  lowp float tmpvar_80;
  tmpvar_80 = texture2D (_ShadowMapTexture, P_79).x;
  shadowVals_73.z = tmpvar_80;
  highp vec2 P_81;
  P_81 = (tmpvar_74.xy + _ShadowOffsets[3].xy);
  lowp float tmpvar_82;
  tmpvar_82 = texture2D (_ShadowMapTexture, P_81).x;
  shadowVals_73.w = tmpvar_82;
  bvec4 tmpvar_83;
  tmpvar_83 = lessThan (shadowVals_73, tmpvar_74.zzzz);
  highp vec4 tmpvar_84;
  tmpvar_84 = _LightShadowData.xxxx;
  highp float tmpvar_85;
  if (tmpvar_83.x) {
    tmpvar_85 = tmpvar_84.x;
  } else {
    tmpvar_85 = 1.0;
  };
  highp float tmpvar_86;
  if (tmpvar_83.y) {
    tmpvar_86 = tmpvar_84.y;
  } else {
    tmpvar_86 = 1.0;
  };
  highp float tmpvar_87;
  if (tmpvar_83.z) {
    tmpvar_87 = tmpvar_84.z;
  } else {
    tmpvar_87 = 1.0;
  };
  highp float tmpvar_88;
  if (tmpvar_83.w) {
    tmpvar_88 = tmpvar_84.w;
  } else {
    tmpvar_88 = 1.0;
  };
  highp vec4 tmpvar_89;
  tmpvar_89.x = tmpvar_85;
  tmpvar_89.y = tmpvar_86;
  tmpvar_89.z = tmpvar_87;
  tmpvar_89.w = tmpvar_88;
  shadows_72 = tmpvar_89;
  mediump float tmpvar_90;
  tmpvar_90 = dot (shadows_72, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_71 = tmpvar_90;
  highp float tmpvar_91;
  tmpvar_91 = (((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_67.w) * tmpvar_70.w) * tmpvar_71);
  atten_4 = tmpvar_91;
  mediump float tmpvar_92;
  tmpvar_92 = clamp ((((_LightColor0.w * tmpvar_66) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_93;
  tmpvar_93 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_92)), 0.0, 1.0);
  light_3 = tmpvar_93;
  highp float tmpvar_94;
  tmpvar_94 = clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0);
  terminator_2 = tmpvar_94;
  mediump vec3 tmpvar_95;
  tmpvar_95 = (light_3 * terminator_2);
  light_3 = tmpvar_95;
  highp vec3 tmpvar_96;
  tmpvar_96 = (tmpvar_62.xyz + (_Albedo * tmpvar_95));
  color_17.xyz = tmpvar_96;
  color_17.xyz = (color_17.xyz * tmpvar_95);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 441
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 objnormal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
};
#line 431
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 418
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 422
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 426
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp mat4 _Rotation;
#line 430
uniform highp mat4 _InvRotation;
#line 453
#line 479
#line 453
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 457
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    #line 461
    o.color = v.color;
    o.objnormal = v.normal;
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    #line 466
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.objnormal);
    xlv_TEXCOORD3 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereCoords);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
vec2 xll_vecTSel_vb2_vf2_vf2 (bvec2 a, vec2 b, vec2 c) {
  return vec2 (a.x ? b.x : c.x, a.y ? b.y : c.y);
}
vec3 xll_vecTSel_vb3_vf3_vf3 (bvec3 a, vec3 b, vec3 c) {
  return vec3 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z);
}
vec4 xll_vecTSel_vb4_vf4_vf4 (bvec4 a, vec4 b, vec4 c) {
  return vec4 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z, a.w ? b.w : c.w);
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 441
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 objnormal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
};
#line 431
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 418
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 422
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 426
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp mat4 _Rotation;
#line 430
uniform highp mat4 _InvRotation;
#line 453
#line 479
#line 468
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 470
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 474
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 336
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 332
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 317
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    #line 319
    highp vec3 coord = (shadowCoord.xyz / shadowCoord.w);
    highp vec4 shadowVals;
    shadowVals.x = texture( _ShadowMapTexture, (vec2( coord) + _ShadowOffsets[0].xy)).x;
    shadowVals.y = texture( _ShadowMapTexture, (vec2( coord) + _ShadowOffsets[1].xy)).x;
    #line 323
    shadowVals.z = texture( _ShadowMapTexture, (vec2( coord) + _ShadowOffsets[2].xy)).x;
    shadowVals.w = texture( _ShadowMapTexture, (vec2( coord) + _ShadowOffsets[3].xy)).x;
    mediump vec4 shadows = xll_vecTSel_vb4_vf4_vf4 (lessThan( shadowVals, coord.zzzz), vec4( _LightShadowData.xxxx), vec4( 1.0));
    mediump float shadow = dot( shadows, vec4( 0.25));
    #line 327
    return shadow;
}
#line 479
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    #line 483
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 487
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    highp vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    highp vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    highp vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    #line 491
    highp vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    highp vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    highp vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, (-IN.sphereCoords))) - 0.95)) + 0.5));
    #line 495
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    #line 499
    highp vec2 localCoords = encnorm.wy;
    localCoords -= vec2( 0.5);
    localCoords.x *= 0.25;
    localCoords.y *= 0.5;
    #line 503
    uv.x -= 0.5;
    uv += localCoords;
    mediump vec3 norm;
    norm.z = cos((6.28319 * uv.x));
    #line 507
    norm.x = sin((6.28319 * uv.x));
    norm.y = cos((3.14159 * uv.y));
    norm = (-norm);
    sphereNrm = abs(sphereNrm);
    #line 511
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = (0.25 * (mix( detail, detailY, vec4( sphereNrm.y)) - 0.5));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (IN.color + mix( detail.xyzw, vec4( 0.0), vec4( detailLevel)));
    #line 515
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    color = mix( color, main, vec4( handoff));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 519
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    #line 523
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * unitySampleShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    mediump float terminator = xll_saturate_f(floor((1.01 + dot( IN.sphereCoords, _SunDir))));
    #line 527
    light *= terminator;
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    color.w = 1.0;
    #line 531
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.objnormal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform mat4 unity_World2Shadow[4];
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec4 tmpvar_3;
  tmpvar_3.x = gl_MultiTexCoord0.x;
  tmpvar_3.y = gl_MultiTexCoord0.y;
  tmpvar_3.z = gl_MultiTexCoord1.x;
  tmpvar_3.w = gl_MultiTexCoord1.y;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * gl_Vertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_3).xyz);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform vec4 _ShadowOffsets[4];
uniform sampler2DShadow _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec3 norm_1;
  vec2 localCoords_2;
  vec2 uv_3;
  vec4 color_4;
  float r_5;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_6;
    y_over_x_6 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * r_5));
  uv_3.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_9;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_10;
    y_over_x_10 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_11;
    float x_12;
    x_12 = (y_over_x_10 * inversesqrt(((y_over_x_10 * y_over_x_10) + 1.0)));
    s_11 = (sign(x_12) * (1.5708 - (sqrt((1.0 - abs(x_12))) * (1.5708 + (abs(x_12) * (-0.214602 + (abs(x_12) * (0.0865667 + (abs(x_12) * -0.0310296)))))))));
    r_9 = s_11;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_9 = (s_11 + 3.14159);
      } else {
        r_9 = (r_9 - 3.14159);
      };
    };
  } else {
    r_9 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_13;
  tmpvar_13 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_14;
  tmpvar_14 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_15;
  tmpvar_15 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(tmpvar_13);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(tmpvar_13);
  vec4 tmpvar_17;
  tmpvar_17 = texture2DGradARB (_MainTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  float tmpvar_18;
  tmpvar_18 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec2 tmpvar_19;
  tmpvar_19 = (texture2DGradARB (_BumpMap, uv_3, tmpvar_16.xy, tmpvar_16.zw).wy - vec2(0.5, 0.5));
  localCoords_2.x = (tmpvar_19.x * 0.25);
  localCoords_2.y = (tmpvar_19.y * 0.5);
  uv_3.x = (uv_3.x - 0.5);
  vec2 tmpvar_20;
  tmpvar_20 = (uv_3 + localCoords_2);
  uv_3 = tmpvar_20;
  norm_1.z = cos((6.28319 * tmpvar_20.x));
  norm_1.x = sin((6.28319 * tmpvar_20.x));
  norm_1.y = cos((3.14159 * tmpvar_20.y));
  vec3 tmpvar_21;
  tmpvar_21 = -(norm_1);
  norm_1 = tmpvar_21;
  vec3 tmpvar_22;
  tmpvar_22 = abs(xlv_TEXCOORD6);
  float tmpvar_23;
  tmpvar_23 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  vec4 tmpvar_24;
  tmpvar_24 = (mix ((xlv_TEXCOORD1 + mix ((0.25 * (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_18)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_18)), tmpvar_22.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_18)), tmpvar_22.yyyy) - 0.5)), vec4(0.0, 0.0, 0.0, 0.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))), tmpvar_17, vec4(tmpvar_23)) * _Color);
  color_4.w = tmpvar_24.w;
  vec4 shadows_25;
  vec3 tmpvar_26;
  tmpvar_26 = (xlv_TEXCOORD4.xyz / xlv_TEXCOORD4.w);
  shadows_25.x = shadow2D (_ShadowMapTexture, (tmpvar_26 + _ShadowOffsets[0].xyz)).x;
  shadows_25.y = shadow2D (_ShadowMapTexture, (tmpvar_26 + _ShadowOffsets[1].xyz)).x;
  shadows_25.z = shadow2D (_ShadowMapTexture, (tmpvar_26 + _ShadowOffsets[2].xyz)).x;
  shadows_25.w = shadow2D (_ShadowMapTexture, (tmpvar_26 + _ShadowOffsets[3].xyz)).x;
  vec4 tmpvar_27;
  tmpvar_27 = (_LightShadowData.xxxx + (shadows_25 * (1.0 - _LightShadowData.xxxx)));
  shadows_25 = tmpvar_27;
  vec3 tmpvar_28;
  tmpvar_28 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * mix (clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), clamp (dot (tmpvar_21, -(_SunDir)), 0.0, 1.0), tmpvar_23)) * 4.0) * (((float((xlv_TEXCOORD3.z > 0.0)) * texture2D (_LightTexture0, ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5)).w) * texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz))).w) * dot (tmpvar_27, vec4(0.25, 0.25, 0.25, 0.25)))), 0.0, 1.0))), 0.0, 1.0) * clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0));
  color_4.xyz = (tmpvar_24.xyz + (_Albedo * tmpvar_28));
  color_4.xyz = (color_4.xyz * tmpvar_28);
  color_4.w = 1.0;
  gl_FragData[0] = color_4;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Matrix 4 [unity_World2Shadow0]
Matrix 8 [_Object2World]
Matrix 12 [_LightMatrix0]
"vs_3_0
; 36 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
def c17, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
mov r1.xyz, v2
mov r1.w, c17.x
dp4 r2.z, r1, c10
dp4 r2.x, r1, c8
dp4 r2.y, r1, c9
mov r0.zw, v4.xyxy
mov r0.xy, v3
dp4 r2.w, r0, r0
rsq r1.x, r2.w
mul r0.xyz, r1.x, r0
mov o7.xyz, -r0
dp3 r0.w, r2, r2
rsq r0.w, r0.w
mul o6.xyz, r0.w, r2
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
dp4 r0.w, v0, c11
add r1.xyz, -r0, c16
dp3 r1.x, r1, r1
rsq r1.x, r1.x
mov o2, v1
dp4 o4.w, r0, c15
dp4 o4.z, r0, c14
dp4 o4.y, r0, c13
dp4 o4.x, r0, c12
dp4 o5.w, r0, c7
dp4 o5.z, r0, c6
dp4 o5.y, r0, c5
dp4 o5.x, r0, c4
rcp o1.x, r1.x
mov o3.xyz, v2
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  highp vec3 p_2;
  p_2 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_1;
  highp vec4 tmpvar_4;
  tmpvar_4.x = _glesMultiTexCoord0.x;
  tmpvar_4.y = _glesMultiTexCoord0.y;
  tmpvar_4.z = _glesMultiTexCoord1.x;
  tmpvar_4.w = _glesMultiTexCoord1.y;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_4).xyz);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shadow_samplers : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 _ShadowOffsets[4];
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float terminator_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float TNdotL_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump float handoff_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec3 norm_11;
  highp vec2 localCoords_12;
  mediump vec4 encnorm_13;
  mediump float vertLerp_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD6.zy * _DetailScale);
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zx * _DetailScale);
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.xy * _DetailScale);
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  highp float tmpvar_37;
  tmpvar_37 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_14 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailVertTex, tmpvar_34);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailTex, tmpvar_31);
  mediump vec4 tmpvar_40;
  tmpvar_40 = mix (tmpvar_38, tmpvar_39, vec4(vertLerp_14));
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailVertTex, tmpvar_35);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailTex, tmpvar_32);
  mediump vec4 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41, tmpvar_42, vec4(vertLerp_14));
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailVertTex, tmpvar_36);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, tmpvar_33);
  mediump vec4 tmpvar_46;
  tmpvar_46 = mix (tmpvar_44, tmpvar_45, vec4(vertLerp_14));
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2DGradEXT (_BumpMap, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  encnorm_13 = tmpvar_47;
  mediump vec2 tmpvar_48;
  tmpvar_48 = encnorm_13.wy;
  localCoords_12 = tmpvar_48;
  highp vec2 tmpvar_49;
  tmpvar_49 = (localCoords_12 - vec2(0.5, 0.5));
  localCoords_12.x = (tmpvar_49.x * 0.25);
  localCoords_12.y = (tmpvar_49.y * 0.5);
  uv_16.x = (uv_16.x - 0.5);
  highp vec2 tmpvar_50;
  tmpvar_50 = (uv_16 + localCoords_12);
  uv_16 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = cos((6.28319 * tmpvar_50.x));
  norm_11.z = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = sin((6.28319 * tmpvar_50.x));
  norm_11.x = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = cos((3.14159 * tmpvar_50.y));
  norm_11.y = tmpvar_53;
  mediump vec3 tmpvar_54;
  tmpvar_54 = -(norm_11);
  norm_11 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_56;
  tmpvar_56 = mix (tmpvar_46, tmpvar_40, tmpvar_55.xxxx);
  detail_10 = tmpvar_56;
  highp vec4 tmpvar_57;
  tmpvar_57 = (0.25 * (mix (detail_10, tmpvar_43, tmpvar_55.yyyy) - 0.5));
  detail_10 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_9 = tmpvar_58;
  mediump vec4 tmpvar_59;
  tmpvar_59 = mix (detail_10, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_9));
  highp vec4 tmpvar_60;
  tmpvar_60 = (xlv_TEXCOORD1 + tmpvar_59);
  color_17 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_8 = tmpvar_61;
  mediump vec4 tmpvar_62;
  tmpvar_62 = (mix (color_17, main_15, vec4(handoff_8)) * _Color);
  color_17.w = tmpvar_62.w;
  highp vec3 tmpvar_63;
  tmpvar_63 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = clamp (dot (xlv_TEXCOORD5, lightDirection_6), 0.0, 1.0);
  TNdotL_5 = tmpvar_65;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_66 = texture2D (_LightTexture0, P_67);
  highp float tmpvar_68;
  tmpvar_68 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_69;
  tmpvar_69 = texture2D (_LightTextureB0, vec2(tmpvar_68));
  lowp float tmpvar_70;
  mediump vec4 shadows_71;
  highp vec3 tmpvar_72;
  tmpvar_72 = (xlv_TEXCOORD4.xyz / xlv_TEXCOORD4.w);
  highp vec3 coord_73;
  coord_73 = (tmpvar_72 + _ShadowOffsets[0].xyz);
  lowp float tmpvar_74;
  tmpvar_74 = shadow2DEXT (_ShadowMapTexture, coord_73);
  shadows_71.x = tmpvar_74;
  highp vec3 coord_75;
  coord_75 = (tmpvar_72 + _ShadowOffsets[1].xyz);
  lowp float tmpvar_76;
  tmpvar_76 = shadow2DEXT (_ShadowMapTexture, coord_75);
  shadows_71.y = tmpvar_76;
  highp vec3 coord_77;
  coord_77 = (tmpvar_72 + _ShadowOffsets[2].xyz);
  lowp float tmpvar_78;
  tmpvar_78 = shadow2DEXT (_ShadowMapTexture, coord_77);
  shadows_71.z = tmpvar_78;
  highp vec3 coord_79;
  coord_79 = (tmpvar_72 + _ShadowOffsets[3].xyz);
  lowp float tmpvar_80;
  tmpvar_80 = shadow2DEXT (_ShadowMapTexture, coord_79);
  shadows_71.w = tmpvar_80;
  highp vec4 tmpvar_81;
  tmpvar_81 = (_LightShadowData.xxxx + (shadows_71 * (1.0 - _LightShadowData.xxxx)));
  shadows_71 = tmpvar_81;
  mediump float tmpvar_82;
  tmpvar_82 = dot (shadows_71, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_70 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = (((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_66.w) * tmpvar_69.w) * tmpvar_70);
  atten_4 = tmpvar_83;
  mediump float tmpvar_84;
  tmpvar_84 = clamp ((((_LightColor0.w * mix (TNdotL_5, clamp (dot (tmpvar_54, -(_SunDir)), 0.0, 1.0), handoff_8)) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_85;
  tmpvar_85 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_84)), 0.0, 1.0);
  light_3 = tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0);
  terminator_2 = tmpvar_86;
  mediump vec3 tmpvar_87;
  tmpvar_87 = (light_3 * terminator_2);
  light_3 = tmpvar_87;
  highp vec3 tmpvar_88;
  tmpvar_88 = (tmpvar_62.xyz + (_Albedo * tmpvar_87));
  color_17.xyz = tmpvar_88;
  color_17.xyz = (color_17.xyz * tmpvar_87);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 441
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 objnormal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
};
#line 431
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 418
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 422
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 426
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp mat4 _Rotation;
#line 430
uniform highp mat4 _InvRotation;
#line 453
#line 479
#line 453
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 457
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    #line 461
    o.color = v.color;
    o.objnormal = v.normal;
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    #line 466
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.objnormal);
    xlv_TEXCOORD3 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereCoords);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_shadow2D(mediump sampler2DShadow s, vec3 coord) { return texture (s, coord); }
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 441
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 objnormal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
};
#line 431
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 418
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 422
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 426
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp mat4 _Rotation;
#line 430
uniform highp mat4 _InvRotation;
#line 453
#line 479
#line 468
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 470
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 474
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 336
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 332
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 317
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    #line 319
    highp vec3 coord = (shadowCoord.xyz / shadowCoord.w);
    mediump vec4 shadows;
    shadows.x = xll_shadow2D( _ShadowMapTexture, (coord + vec3( _ShadowOffsets[0])).xyz);
    shadows.y = xll_shadow2D( _ShadowMapTexture, (coord + vec3( _ShadowOffsets[1])).xyz);
    #line 323
    shadows.z = xll_shadow2D( _ShadowMapTexture, (coord + vec3( _ShadowOffsets[2])).xyz);
    shadows.w = xll_shadow2D( _ShadowMapTexture, (coord + vec3( _ShadowOffsets[3])).xyz);
    shadows = (_LightShadowData.xxxx + (shadows * (1.0 - _LightShadowData.xxxx)));
    mediump float shadow = dot( shadows, vec4( 0.25));
    #line 327
    return shadow;
}
#line 479
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    #line 483
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 487
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    highp vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    highp vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    highp vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    #line 491
    highp vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    highp vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    highp vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, (-IN.sphereCoords))) - 0.95)) + 0.5));
    #line 495
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    #line 499
    highp vec2 localCoords = encnorm.wy;
    localCoords -= vec2( 0.5);
    localCoords.x *= 0.25;
    localCoords.y *= 0.5;
    #line 503
    uv.x -= 0.5;
    uv += localCoords;
    mediump vec3 norm;
    norm.z = cos((6.28319 * uv.x));
    #line 507
    norm.x = sin((6.28319 * uv.x));
    norm.y = cos((3.14159 * uv.y));
    norm = (-norm);
    sphereNrm = abs(sphereNrm);
    #line 511
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = (0.25 * (mix( detail, detailY, vec4( sphereNrm.y)) - 0.5));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (IN.color + mix( detail.xyzw, vec4( 0.0), vec4( detailLevel)));
    #line 515
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    color = mix( color, main, vec4( handoff));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 519
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    #line 523
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * unitySampleShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    mediump float terminator = xll_saturate_f(floor((1.01 + dot( IN.sphereCoords, _SunDir))));
    #line 527
    light *= terminator;
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    color.w = 1.0;
    #line 531
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.objnormal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec4 _LightPositionRange;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec4 tmpvar_3;
  tmpvar_3.x = gl_MultiTexCoord0.x;
  tmpvar_3.y = gl_MultiTexCoord0.y;
  tmpvar_3.z = gl_MultiTexCoord1.x;
  tmpvar_3.w = gl_MultiTexCoord1.y;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_3).xyz);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _LightPositionRange;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec3 norm_1;
  vec2 localCoords_2;
  vec2 uv_3;
  vec4 color_4;
  float r_5;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_6;
    y_over_x_6 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * r_5));
  uv_3.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_9;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_10;
    y_over_x_10 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_11;
    float x_12;
    x_12 = (y_over_x_10 * inversesqrt(((y_over_x_10 * y_over_x_10) + 1.0)));
    s_11 = (sign(x_12) * (1.5708 - (sqrt((1.0 - abs(x_12))) * (1.5708 + (abs(x_12) * (-0.214602 + (abs(x_12) * (0.0865667 + (abs(x_12) * -0.0310296)))))))));
    r_9 = s_11;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_9 = (s_11 + 3.14159);
      } else {
        r_9 = (r_9 - 3.14159);
      };
    };
  } else {
    r_9 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_13;
  tmpvar_13 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_14;
  tmpvar_14 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_15;
  tmpvar_15 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(tmpvar_13);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(tmpvar_13);
  vec4 tmpvar_17;
  tmpvar_17 = texture2DGradARB (_MainTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  float tmpvar_18;
  tmpvar_18 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec2 tmpvar_19;
  tmpvar_19 = (texture2DGradARB (_BumpMap, uv_3, tmpvar_16.xy, tmpvar_16.zw).wy - vec2(0.5, 0.5));
  localCoords_2.x = (tmpvar_19.x * 0.25);
  localCoords_2.y = (tmpvar_19.y * 0.5);
  uv_3.x = (uv_3.x - 0.5);
  vec2 tmpvar_20;
  tmpvar_20 = (uv_3 + localCoords_2);
  uv_3 = tmpvar_20;
  norm_1.z = cos((6.28319 * tmpvar_20.x));
  norm_1.x = sin((6.28319 * tmpvar_20.x));
  norm_1.y = cos((3.14159 * tmpvar_20.y));
  vec3 tmpvar_21;
  tmpvar_21 = -(norm_1);
  norm_1 = tmpvar_21;
  vec3 tmpvar_22;
  tmpvar_22 = abs(xlv_TEXCOORD6);
  float tmpvar_23;
  tmpvar_23 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  vec4 tmpvar_24;
  tmpvar_24 = (mix ((xlv_TEXCOORD1 + mix ((0.25 * (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_18)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_18)), tmpvar_22.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_18)), tmpvar_22.yyyy) - 0.5)), vec4(0.0, 0.0, 0.0, 0.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))), tmpvar_17, vec4(tmpvar_23)) * _Color);
  color_4 = tmpvar_24;
  float tmpvar_25;
  tmpvar_25 = mix (clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), clamp (dot (tmpvar_21, -(_SunDir)), 0.0, 1.0), tmpvar_23);
  vec4 tmpvar_26;
  tmpvar_26 = texture2D (_LightTexture0, vec2(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)));
  vec4 shadowVals_27;
  shadowVals_27.x = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD4 + vec3(0.0078125, 0.0078125, 0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_27.y = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD4 + vec3(-0.0078125, -0.0078125, 0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_27.z = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD4 + vec3(-0.0078125, 0.0078125, -0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_27.w = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD4 + vec3(0.0078125, -0.0078125, -0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_28;
  tmpvar_28 = lessThan (shadowVals_27, vec4(((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97)));
  vec4 tmpvar_29;
  tmpvar_29 = _LightShadowData.xxxx;
  float tmpvar_30;
  if (tmpvar_28.x) {
    tmpvar_30 = tmpvar_29.x;
  } else {
    tmpvar_30 = 1.0;
  };
  float tmpvar_31;
  if (tmpvar_28.y) {
    tmpvar_31 = tmpvar_29.y;
  } else {
    tmpvar_31 = 1.0;
  };
  float tmpvar_32;
  if (tmpvar_28.z) {
    tmpvar_32 = tmpvar_29.z;
  } else {
    tmpvar_32 = 1.0;
  };
  float tmpvar_33;
  if (tmpvar_28.w) {
    tmpvar_33 = tmpvar_29.w;
  } else {
    tmpvar_33 = 1.0;
  };
  vec4 tmpvar_34;
  tmpvar_34.x = tmpvar_30;
  tmpvar_34.y = tmpvar_31;
  tmpvar_34.z = tmpvar_32;
  tmpvar_34.w = tmpvar_33;
  vec3 tmpvar_35;
  tmpvar_35 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_25) * 4.0) * (tmpvar_26.w * dot (tmpvar_34, vec4(0.25, 0.25, 0.25, 0.25)))), 0.0, 1.0))), 0.0, 1.0) * clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0));
  color_4.xyz = (tmpvar_24.xyz + (_Albedo * tmpvar_35));
  color_4.xyz = (color_4.xyz * tmpvar_35);
  color_4.w = 1.0;
  gl_FragData[0] = color_4;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_LightPositionRange]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 32 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
def c14, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
mov r1.xyz, v2
mov r1.w, c14.x
dp4 r2.z, r1, c6
dp4 r2.x, r1, c4
dp4 r2.y, r1, c5
mov r0.zw, v4.xyxy
mov r0.xy, v3
dp4 r2.w, r0, r0
rsq r1.x, r2.w
mul r0.xyz, r1.x, r0
mov o7.xyz, -r0
dp3 r0.w, r2, r2
rsq r0.w, r0.w
mul o6.xyz, r0.w, r2
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
dp4 r0.w, v0, c7
add r1.xyz, -r0, c12
dp3 r1.x, r1, r1
rsq r1.x, r1.x
mov o2, v1
dp4 o4.z, r0, c10
dp4 o4.y, r0, c9
dp4 o4.x, r0, c8
rcp o1.x, r1.x
mov o3.xyz, v2
add o5.xyz, r0, -c13
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  highp vec3 p_2;
  p_2 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_1;
  highp vec4 tmpvar_4;
  tmpvar_4.x = _glesMultiTexCoord0.x;
  tmpvar_4.y = _glesMultiTexCoord0.y;
  tmpvar_4.z = _glesMultiTexCoord1.x;
  tmpvar_4.w = _glesMultiTexCoord1.y;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_4).xyz);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float terminator_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float TNdotL_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump float handoff_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec3 norm_11;
  highp vec2 localCoords_12;
  mediump vec4 encnorm_13;
  mediump float vertLerp_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD6.zy * _DetailScale);
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zx * _DetailScale);
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.xy * _DetailScale);
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  highp float tmpvar_37;
  tmpvar_37 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_14 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailVertTex, tmpvar_34);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailTex, tmpvar_31);
  mediump vec4 tmpvar_40;
  tmpvar_40 = mix (tmpvar_38, tmpvar_39, vec4(vertLerp_14));
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailVertTex, tmpvar_35);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailTex, tmpvar_32);
  mediump vec4 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41, tmpvar_42, vec4(vertLerp_14));
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailVertTex, tmpvar_36);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, tmpvar_33);
  mediump vec4 tmpvar_46;
  tmpvar_46 = mix (tmpvar_44, tmpvar_45, vec4(vertLerp_14));
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2DGradEXT (_BumpMap, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  encnorm_13 = tmpvar_47;
  mediump vec2 tmpvar_48;
  tmpvar_48 = encnorm_13.wy;
  localCoords_12 = tmpvar_48;
  highp vec2 tmpvar_49;
  tmpvar_49 = (localCoords_12 - vec2(0.5, 0.5));
  localCoords_12.x = (tmpvar_49.x * 0.25);
  localCoords_12.y = (tmpvar_49.y * 0.5);
  uv_16.x = (uv_16.x - 0.5);
  highp vec2 tmpvar_50;
  tmpvar_50 = (uv_16 + localCoords_12);
  uv_16 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = cos((6.28319 * tmpvar_50.x));
  norm_11.z = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = sin((6.28319 * tmpvar_50.x));
  norm_11.x = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = cos((3.14159 * tmpvar_50.y));
  norm_11.y = tmpvar_53;
  mediump vec3 tmpvar_54;
  tmpvar_54 = -(norm_11);
  norm_11 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_56;
  tmpvar_56 = mix (tmpvar_46, tmpvar_40, tmpvar_55.xxxx);
  detail_10 = tmpvar_56;
  highp vec4 tmpvar_57;
  tmpvar_57 = (0.25 * (mix (detail_10, tmpvar_43, tmpvar_55.yyyy) - 0.5));
  detail_10 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_9 = tmpvar_58;
  mediump vec4 tmpvar_59;
  tmpvar_59 = mix (detail_10, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_9));
  highp vec4 tmpvar_60;
  tmpvar_60 = (xlv_TEXCOORD1 + tmpvar_59);
  color_17 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_8 = tmpvar_61;
  mediump vec4 tmpvar_62;
  tmpvar_62 = (mix (color_17, main_15, vec4(handoff_8)) * _Color);
  color_17 = tmpvar_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = clamp (dot (xlv_TEXCOORD5, lightDirection_6), 0.0, 1.0);
  TNdotL_5 = tmpvar_65;
  mediump float tmpvar_66;
  tmpvar_66 = mix (TNdotL_5, clamp (dot (tmpvar_54, -(_SunDir)), 0.0, 1.0), handoff_8);
  highp float tmpvar_67;
  tmpvar_67 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_68;
  tmpvar_68 = texture2D (_LightTexture0, vec2(tmpvar_67));
  highp float tmpvar_69;
  mediump vec4 shadows_70;
  highp vec4 shadowVals_71;
  highp float tmpvar_72;
  tmpvar_72 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  highp vec3 vec_73;
  vec_73 = (xlv_TEXCOORD4 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 packDist_74;
  lowp vec4 tmpvar_75;
  tmpvar_75 = textureCube (_ShadowMapTexture, vec_73);
  packDist_74 = tmpvar_75;
  shadowVals_71.x = dot (packDist_74, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_76;
  vec_76 = (xlv_TEXCOORD4 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 packDist_77;
  lowp vec4 tmpvar_78;
  tmpvar_78 = textureCube (_ShadowMapTexture, vec_76);
  packDist_77 = tmpvar_78;
  shadowVals_71.y = dot (packDist_77, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_79;
  vec_79 = (xlv_TEXCOORD4 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 packDist_80;
  lowp vec4 tmpvar_81;
  tmpvar_81 = textureCube (_ShadowMapTexture, vec_79);
  packDist_80 = tmpvar_81;
  shadowVals_71.z = dot (packDist_80, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_82;
  vec_82 = (xlv_TEXCOORD4 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 packDist_83;
  lowp vec4 tmpvar_84;
  tmpvar_84 = textureCube (_ShadowMapTexture, vec_82);
  packDist_83 = tmpvar_84;
  shadowVals_71.w = dot (packDist_83, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_85;
  tmpvar_85 = lessThan (shadowVals_71, vec4(tmpvar_72));
  highp vec4 tmpvar_86;
  tmpvar_86 = _LightShadowData.xxxx;
  highp float tmpvar_87;
  if (tmpvar_85.x) {
    tmpvar_87 = tmpvar_86.x;
  } else {
    tmpvar_87 = 1.0;
  };
  highp float tmpvar_88;
  if (tmpvar_85.y) {
    tmpvar_88 = tmpvar_86.y;
  } else {
    tmpvar_88 = 1.0;
  };
  highp float tmpvar_89;
  if (tmpvar_85.z) {
    tmpvar_89 = tmpvar_86.z;
  } else {
    tmpvar_89 = 1.0;
  };
  highp float tmpvar_90;
  if (tmpvar_85.w) {
    tmpvar_90 = tmpvar_86.w;
  } else {
    tmpvar_90 = 1.0;
  };
  highp vec4 tmpvar_91;
  tmpvar_91.x = tmpvar_87;
  tmpvar_91.y = tmpvar_88;
  tmpvar_91.z = tmpvar_89;
  tmpvar_91.w = tmpvar_90;
  shadows_70 = tmpvar_91;
  mediump float tmpvar_92;
  tmpvar_92 = dot (shadows_70, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_69 = tmpvar_92;
  highp float tmpvar_93;
  tmpvar_93 = (tmpvar_68.w * tmpvar_69);
  atten_4 = tmpvar_93;
  mediump float tmpvar_94;
  tmpvar_94 = clamp ((((_LightColor0.w * tmpvar_66) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_95;
  tmpvar_95 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_94)), 0.0, 1.0);
  light_3 = tmpvar_95;
  highp float tmpvar_96;
  tmpvar_96 = clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0);
  terminator_2 = tmpvar_96;
  mediump vec3 tmpvar_97;
  tmpvar_97 = (light_3 * terminator_2);
  light_3 = tmpvar_97;
  highp vec3 tmpvar_98;
  tmpvar_98 = (tmpvar_62.xyz + (_Albedo * tmpvar_97));
  color_17.xyz = tmpvar_98;
  color_17.xyz = (color_17.xyz * tmpvar_97);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  highp vec3 p_2;
  p_2 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_1;
  highp vec4 tmpvar_4;
  tmpvar_4.x = _glesMultiTexCoord0.x;
  tmpvar_4.y = _glesMultiTexCoord0.y;
  tmpvar_4.z = _glesMultiTexCoord1.x;
  tmpvar_4.w = _glesMultiTexCoord1.y;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_4).xyz);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float terminator_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float TNdotL_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump float handoff_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec3 norm_11;
  highp vec2 localCoords_12;
  mediump vec4 encnorm_13;
  mediump float vertLerp_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD6.zy * _DetailScale);
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zx * _DetailScale);
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.xy * _DetailScale);
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  highp float tmpvar_37;
  tmpvar_37 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_14 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailVertTex, tmpvar_34);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailTex, tmpvar_31);
  mediump vec4 tmpvar_40;
  tmpvar_40 = mix (tmpvar_38, tmpvar_39, vec4(vertLerp_14));
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailVertTex, tmpvar_35);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailTex, tmpvar_32);
  mediump vec4 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41, tmpvar_42, vec4(vertLerp_14));
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailVertTex, tmpvar_36);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, tmpvar_33);
  mediump vec4 tmpvar_46;
  tmpvar_46 = mix (tmpvar_44, tmpvar_45, vec4(vertLerp_14));
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2DGradEXT (_BumpMap, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  encnorm_13 = tmpvar_47;
  mediump vec2 tmpvar_48;
  tmpvar_48 = encnorm_13.wy;
  localCoords_12 = tmpvar_48;
  highp vec2 tmpvar_49;
  tmpvar_49 = (localCoords_12 - vec2(0.5, 0.5));
  localCoords_12.x = (tmpvar_49.x * 0.25);
  localCoords_12.y = (tmpvar_49.y * 0.5);
  uv_16.x = (uv_16.x - 0.5);
  highp vec2 tmpvar_50;
  tmpvar_50 = (uv_16 + localCoords_12);
  uv_16 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = cos((6.28319 * tmpvar_50.x));
  norm_11.z = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = sin((6.28319 * tmpvar_50.x));
  norm_11.x = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = cos((3.14159 * tmpvar_50.y));
  norm_11.y = tmpvar_53;
  mediump vec3 tmpvar_54;
  tmpvar_54 = -(norm_11);
  norm_11 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_56;
  tmpvar_56 = mix (tmpvar_46, tmpvar_40, tmpvar_55.xxxx);
  detail_10 = tmpvar_56;
  highp vec4 tmpvar_57;
  tmpvar_57 = (0.25 * (mix (detail_10, tmpvar_43, tmpvar_55.yyyy) - 0.5));
  detail_10 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_9 = tmpvar_58;
  mediump vec4 tmpvar_59;
  tmpvar_59 = mix (detail_10, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_9));
  highp vec4 tmpvar_60;
  tmpvar_60 = (xlv_TEXCOORD1 + tmpvar_59);
  color_17 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_8 = tmpvar_61;
  mediump vec4 tmpvar_62;
  tmpvar_62 = (mix (color_17, main_15, vec4(handoff_8)) * _Color);
  color_17 = tmpvar_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = clamp (dot (xlv_TEXCOORD5, lightDirection_6), 0.0, 1.0);
  TNdotL_5 = tmpvar_65;
  mediump float tmpvar_66;
  tmpvar_66 = mix (TNdotL_5, clamp (dot (tmpvar_54, -(_SunDir)), 0.0, 1.0), handoff_8);
  highp float tmpvar_67;
  tmpvar_67 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_68;
  tmpvar_68 = texture2D (_LightTexture0, vec2(tmpvar_67));
  highp float tmpvar_69;
  mediump vec4 shadows_70;
  highp vec4 shadowVals_71;
  highp float tmpvar_72;
  tmpvar_72 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  highp vec3 vec_73;
  vec_73 = (xlv_TEXCOORD4 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 packDist_74;
  lowp vec4 tmpvar_75;
  tmpvar_75 = textureCube (_ShadowMapTexture, vec_73);
  packDist_74 = tmpvar_75;
  shadowVals_71.x = dot (packDist_74, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_76;
  vec_76 = (xlv_TEXCOORD4 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 packDist_77;
  lowp vec4 tmpvar_78;
  tmpvar_78 = textureCube (_ShadowMapTexture, vec_76);
  packDist_77 = tmpvar_78;
  shadowVals_71.y = dot (packDist_77, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_79;
  vec_79 = (xlv_TEXCOORD4 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 packDist_80;
  lowp vec4 tmpvar_81;
  tmpvar_81 = textureCube (_ShadowMapTexture, vec_79);
  packDist_80 = tmpvar_81;
  shadowVals_71.z = dot (packDist_80, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_82;
  vec_82 = (xlv_TEXCOORD4 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 packDist_83;
  lowp vec4 tmpvar_84;
  tmpvar_84 = textureCube (_ShadowMapTexture, vec_82);
  packDist_83 = tmpvar_84;
  shadowVals_71.w = dot (packDist_83, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_85;
  tmpvar_85 = lessThan (shadowVals_71, vec4(tmpvar_72));
  highp vec4 tmpvar_86;
  tmpvar_86 = _LightShadowData.xxxx;
  highp float tmpvar_87;
  if (tmpvar_85.x) {
    tmpvar_87 = tmpvar_86.x;
  } else {
    tmpvar_87 = 1.0;
  };
  highp float tmpvar_88;
  if (tmpvar_85.y) {
    tmpvar_88 = tmpvar_86.y;
  } else {
    tmpvar_88 = 1.0;
  };
  highp float tmpvar_89;
  if (tmpvar_85.z) {
    tmpvar_89 = tmpvar_86.z;
  } else {
    tmpvar_89 = 1.0;
  };
  highp float tmpvar_90;
  if (tmpvar_85.w) {
    tmpvar_90 = tmpvar_86.w;
  } else {
    tmpvar_90 = 1.0;
  };
  highp vec4 tmpvar_91;
  tmpvar_91.x = tmpvar_87;
  tmpvar_91.y = tmpvar_88;
  tmpvar_91.z = tmpvar_89;
  tmpvar_91.w = tmpvar_90;
  shadows_70 = tmpvar_91;
  mediump float tmpvar_92;
  tmpvar_92 = dot (shadows_70, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_69 = tmpvar_92;
  highp float tmpvar_93;
  tmpvar_93 = (tmpvar_68.w * tmpvar_69);
  atten_4 = tmpvar_93;
  mediump float tmpvar_94;
  tmpvar_94 = clamp ((((_LightColor0.w * tmpvar_66) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_95;
  tmpvar_95 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_94)), 0.0, 1.0);
  light_3 = tmpvar_95;
  highp float tmpvar_96;
  tmpvar_96 = clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0);
  terminator_2 = tmpvar_96;
  mediump vec3 tmpvar_97;
  tmpvar_97 = (light_3 * terminator_2);
  light_3 = tmpvar_97;
  highp vec3 tmpvar_98;
  tmpvar_98 = (tmpvar_62.xyz + (_Albedo * tmpvar_97));
  color_17.xyz = tmpvar_98;
  color_17.xyz = (color_17.xyz * tmpvar_97);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 336
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 437
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 objnormal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
};
#line 427
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
#line 346
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 359
#line 367
#line 381
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 414
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 418
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 422
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp mat4 _Rotation;
#line 426
uniform highp mat4 _InvRotation;
#line 449
#line 475
#line 449
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 453
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    #line 457
    o.color = v.color;
    o.objnormal = v.normal;
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    o._ShadowCoord = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    #line 462
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.objnormal);
    xlv_TEXCOORD3 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereCoords);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
vec2 xll_vecTSel_vb2_vf2_vf2 (bvec2 a, vec2 b, vec2 c) {
  return vec2 (a.x ? b.x : c.x, a.y ? b.y : c.y);
}
vec3 xll_vecTSel_vb3_vf3_vf3 (bvec3 a, vec3 b, vec3 c) {
  return vec3 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z);
}
vec4 xll_vecTSel_vb4_vf4_vf4 (bvec4 a, vec4 b, vec4 c) {
  return vec4 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z, a.w ? b.w : c.w);
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 336
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 437
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 objnormal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
};
#line 427
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
#line 346
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 359
#line 367
#line 381
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 414
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 418
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 422
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp mat4 _Rotation;
#line 426
uniform highp mat4 _InvRotation;
#line 449
#line 475
#line 464
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 466
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 470
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 215
highp float DecodeFloatRGBA( in highp vec4 enc ) {
    highp vec4 kDecodeDot = vec4( 1.0, 0.00392157, 1.53787e-05, 6.22737e-09);
    return dot( enc, kDecodeDot);
}
#line 316
highp float SampleCubeDistance( in highp vec3 vec ) {
    highp vec4 packDist = texture( _ShadowMapTexture, vec);
    #line 319
    return DecodeFloatRGBA( packDist);
}
#line 321
highp float unityCubeShadow( in highp vec3 vec ) {
    #line 323
    highp float mydist = (length(vec) * _LightPositionRange.w);
    mydist *= 0.97;
    highp float z = 0.0078125;
    highp vec4 shadowVals;
    #line 327
    shadowVals.x = SampleCubeDistance( (vec + vec3( z, z, z)));
    shadowVals.y = SampleCubeDistance( (vec + vec3( (-z), (-z), z)));
    shadowVals.z = SampleCubeDistance( (vec + vec3( (-z), z, (-z))));
    shadowVals.w = SampleCubeDistance( (vec + vec3( z, (-z), (-z))));
    #line 331
    mediump vec4 shadows = xll_vecTSel_vb4_vf4_vf4 (lessThan( shadowVals, vec4( mydist)), vec4( _LightShadowData.xxxx), vec4( 1.0));
    return dot( shadows, vec4( 0.25));
}
#line 475
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    #line 479
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 483
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    highp vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    highp vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    highp vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    #line 487
    highp vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    highp vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    highp vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, (-IN.sphereCoords))) - 0.95)) + 0.5));
    #line 491
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    #line 495
    highp vec2 localCoords = encnorm.wy;
    localCoords -= vec2( 0.5);
    localCoords.x *= 0.25;
    localCoords.y *= 0.5;
    #line 499
    uv.x -= 0.5;
    uv += localCoords;
    mediump vec3 norm;
    norm.z = cos((6.28319 * uv.x));
    #line 503
    norm.x = sin((6.28319 * uv.x));
    norm.y = cos((3.14159 * uv.y));
    norm = (-norm);
    sphereNrm = abs(sphereNrm);
    #line 507
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = (0.25 * (mix( detail, detailY, vec4( sphereNrm.y)) - 0.5));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (IN.color + mix( detail.xyzw, vec4( 0.0), vec4( detailLevel)));
    #line 511
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    color = mix( color, main, vec4( handoff));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 515
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    #line 519
    lowp float atten = (texture( _LightTexture0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * unityCubeShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    mediump float terminator = xll_saturate_f(floor((1.01 + dot( IN.sphereCoords, _SunDir))));
    #line 523
    light *= terminator;
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    color.w = 1.0;
    #line 527
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.objnormal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec4 _LightPositionRange;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec4 tmpvar_3;
  tmpvar_3.x = gl_MultiTexCoord0.x;
  tmpvar_3.y = gl_MultiTexCoord0.y;
  tmpvar_3.z = gl_MultiTexCoord1.x;
  tmpvar_3.w = gl_MultiTexCoord1.y;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_3).xyz);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _LightPositionRange;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec3 norm_1;
  vec2 localCoords_2;
  vec2 uv_3;
  vec4 color_4;
  float r_5;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_6;
    y_over_x_6 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * r_5));
  uv_3.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_9;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_10;
    y_over_x_10 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_11;
    float x_12;
    x_12 = (y_over_x_10 * inversesqrt(((y_over_x_10 * y_over_x_10) + 1.0)));
    s_11 = (sign(x_12) * (1.5708 - (sqrt((1.0 - abs(x_12))) * (1.5708 + (abs(x_12) * (-0.214602 + (abs(x_12) * (0.0865667 + (abs(x_12) * -0.0310296)))))))));
    r_9 = s_11;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_9 = (s_11 + 3.14159);
      } else {
        r_9 = (r_9 - 3.14159);
      };
    };
  } else {
    r_9 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_13;
  tmpvar_13 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_14;
  tmpvar_14 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_15;
  tmpvar_15 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(tmpvar_13);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(tmpvar_13);
  vec4 tmpvar_17;
  tmpvar_17 = texture2DGradARB (_MainTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  float tmpvar_18;
  tmpvar_18 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec2 tmpvar_19;
  tmpvar_19 = (texture2DGradARB (_BumpMap, uv_3, tmpvar_16.xy, tmpvar_16.zw).wy - vec2(0.5, 0.5));
  localCoords_2.x = (tmpvar_19.x * 0.25);
  localCoords_2.y = (tmpvar_19.y * 0.5);
  uv_3.x = (uv_3.x - 0.5);
  vec2 tmpvar_20;
  tmpvar_20 = (uv_3 + localCoords_2);
  uv_3 = tmpvar_20;
  norm_1.z = cos((6.28319 * tmpvar_20.x));
  norm_1.x = sin((6.28319 * tmpvar_20.x));
  norm_1.y = cos((3.14159 * tmpvar_20.y));
  vec3 tmpvar_21;
  tmpvar_21 = -(norm_1);
  norm_1 = tmpvar_21;
  vec3 tmpvar_22;
  tmpvar_22 = abs(xlv_TEXCOORD6);
  float tmpvar_23;
  tmpvar_23 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  vec4 tmpvar_24;
  tmpvar_24 = (mix ((xlv_TEXCOORD1 + mix ((0.25 * (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_18)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_18)), tmpvar_22.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_18)), tmpvar_22.yyyy) - 0.5)), vec4(0.0, 0.0, 0.0, 0.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))), tmpvar_17, vec4(tmpvar_23)) * _Color);
  color_4 = tmpvar_24;
  float tmpvar_25;
  tmpvar_25 = mix (clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), clamp (dot (tmpvar_21, -(_SunDir)), 0.0, 1.0), tmpvar_23);
  vec4 tmpvar_26;
  tmpvar_26 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)));
  vec4 tmpvar_27;
  tmpvar_27 = textureCube (_LightTexture0, xlv_TEXCOORD3);
  vec4 shadowVals_28;
  shadowVals_28.x = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD4 + vec3(0.0078125, 0.0078125, 0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_28.y = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD4 + vec3(-0.0078125, -0.0078125, 0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_28.z = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD4 + vec3(-0.0078125, 0.0078125, -0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_28.w = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD4 + vec3(0.0078125, -0.0078125, -0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_29;
  tmpvar_29 = lessThan (shadowVals_28, vec4(((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97)));
  vec4 tmpvar_30;
  tmpvar_30 = _LightShadowData.xxxx;
  float tmpvar_31;
  if (tmpvar_29.x) {
    tmpvar_31 = tmpvar_30.x;
  } else {
    tmpvar_31 = 1.0;
  };
  float tmpvar_32;
  if (tmpvar_29.y) {
    tmpvar_32 = tmpvar_30.y;
  } else {
    tmpvar_32 = 1.0;
  };
  float tmpvar_33;
  if (tmpvar_29.z) {
    tmpvar_33 = tmpvar_30.z;
  } else {
    tmpvar_33 = 1.0;
  };
  float tmpvar_34;
  if (tmpvar_29.w) {
    tmpvar_34 = tmpvar_30.w;
  } else {
    tmpvar_34 = 1.0;
  };
  vec4 tmpvar_35;
  tmpvar_35.x = tmpvar_31;
  tmpvar_35.y = tmpvar_32;
  tmpvar_35.z = tmpvar_33;
  tmpvar_35.w = tmpvar_34;
  vec3 tmpvar_36;
  tmpvar_36 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_25) * 4.0) * ((tmpvar_26.w * tmpvar_27.w) * dot (tmpvar_35, vec4(0.25, 0.25, 0.25, 0.25)))), 0.0, 1.0))), 0.0, 1.0) * clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0));
  color_4.xyz = (tmpvar_24.xyz + (_Albedo * tmpvar_36));
  color_4.xyz = (color_4.xyz * tmpvar_36);
  color_4.w = 1.0;
  gl_FragData[0] = color_4;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_LightPositionRange]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 32 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
def c14, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
mov r1.xyz, v2
mov r1.w, c14.x
dp4 r2.z, r1, c6
dp4 r2.x, r1, c4
dp4 r2.y, r1, c5
mov r0.zw, v4.xyxy
mov r0.xy, v3
dp4 r2.w, r0, r0
rsq r1.x, r2.w
mul r0.xyz, r1.x, r0
mov o7.xyz, -r0
dp3 r0.w, r2, r2
rsq r0.w, r0.w
mul o6.xyz, r0.w, r2
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
dp4 r0.w, v0, c7
add r1.xyz, -r0, c12
dp3 r1.x, r1, r1
rsq r1.x, r1.x
mov o2, v1
dp4 o4.z, r0, c10
dp4 o4.y, r0, c9
dp4 o4.x, r0, c8
rcp o1.x, r1.x
mov o3.xyz, v2
add o5.xyz, r0, -c13
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  highp vec3 p_2;
  p_2 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_1;
  highp vec4 tmpvar_4;
  tmpvar_4.x = _glesMultiTexCoord0.x;
  tmpvar_4.y = _glesMultiTexCoord0.y;
  tmpvar_4.z = _glesMultiTexCoord1.x;
  tmpvar_4.w = _glesMultiTexCoord1.y;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_4).xyz);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float terminator_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float TNdotL_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump float handoff_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec3 norm_11;
  highp vec2 localCoords_12;
  mediump vec4 encnorm_13;
  mediump float vertLerp_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD6.zy * _DetailScale);
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zx * _DetailScale);
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.xy * _DetailScale);
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  highp float tmpvar_37;
  tmpvar_37 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_14 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailVertTex, tmpvar_34);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailTex, tmpvar_31);
  mediump vec4 tmpvar_40;
  tmpvar_40 = mix (tmpvar_38, tmpvar_39, vec4(vertLerp_14));
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailVertTex, tmpvar_35);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailTex, tmpvar_32);
  mediump vec4 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41, tmpvar_42, vec4(vertLerp_14));
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailVertTex, tmpvar_36);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, tmpvar_33);
  mediump vec4 tmpvar_46;
  tmpvar_46 = mix (tmpvar_44, tmpvar_45, vec4(vertLerp_14));
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2DGradEXT (_BumpMap, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  encnorm_13 = tmpvar_47;
  mediump vec2 tmpvar_48;
  tmpvar_48 = encnorm_13.wy;
  localCoords_12 = tmpvar_48;
  highp vec2 tmpvar_49;
  tmpvar_49 = (localCoords_12 - vec2(0.5, 0.5));
  localCoords_12.x = (tmpvar_49.x * 0.25);
  localCoords_12.y = (tmpvar_49.y * 0.5);
  uv_16.x = (uv_16.x - 0.5);
  highp vec2 tmpvar_50;
  tmpvar_50 = (uv_16 + localCoords_12);
  uv_16 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = cos((6.28319 * tmpvar_50.x));
  norm_11.z = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = sin((6.28319 * tmpvar_50.x));
  norm_11.x = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = cos((3.14159 * tmpvar_50.y));
  norm_11.y = tmpvar_53;
  mediump vec3 tmpvar_54;
  tmpvar_54 = -(norm_11);
  norm_11 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_56;
  tmpvar_56 = mix (tmpvar_46, tmpvar_40, tmpvar_55.xxxx);
  detail_10 = tmpvar_56;
  highp vec4 tmpvar_57;
  tmpvar_57 = (0.25 * (mix (detail_10, tmpvar_43, tmpvar_55.yyyy) - 0.5));
  detail_10 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_9 = tmpvar_58;
  mediump vec4 tmpvar_59;
  tmpvar_59 = mix (detail_10, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_9));
  highp vec4 tmpvar_60;
  tmpvar_60 = (xlv_TEXCOORD1 + tmpvar_59);
  color_17 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_8 = tmpvar_61;
  mediump vec4 tmpvar_62;
  tmpvar_62 = (mix (color_17, main_15, vec4(handoff_8)) * _Color);
  color_17 = tmpvar_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = clamp (dot (xlv_TEXCOORD5, lightDirection_6), 0.0, 1.0);
  TNdotL_5 = tmpvar_65;
  mediump float tmpvar_66;
  tmpvar_66 = mix (TNdotL_5, clamp (dot (tmpvar_54, -(_SunDir)), 0.0, 1.0), handoff_8);
  highp float tmpvar_67;
  tmpvar_67 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_68;
  tmpvar_68 = texture2D (_LightTextureB0, vec2(tmpvar_67));
  lowp vec4 tmpvar_69;
  tmpvar_69 = textureCube (_LightTexture0, xlv_TEXCOORD3);
  highp float tmpvar_70;
  mediump vec4 shadows_71;
  highp vec4 shadowVals_72;
  highp float tmpvar_73;
  tmpvar_73 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  highp vec3 vec_74;
  vec_74 = (xlv_TEXCOORD4 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 packDist_75;
  lowp vec4 tmpvar_76;
  tmpvar_76 = textureCube (_ShadowMapTexture, vec_74);
  packDist_75 = tmpvar_76;
  shadowVals_72.x = dot (packDist_75, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_77;
  vec_77 = (xlv_TEXCOORD4 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 packDist_78;
  lowp vec4 tmpvar_79;
  tmpvar_79 = textureCube (_ShadowMapTexture, vec_77);
  packDist_78 = tmpvar_79;
  shadowVals_72.y = dot (packDist_78, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_80;
  vec_80 = (xlv_TEXCOORD4 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 packDist_81;
  lowp vec4 tmpvar_82;
  tmpvar_82 = textureCube (_ShadowMapTexture, vec_80);
  packDist_81 = tmpvar_82;
  shadowVals_72.z = dot (packDist_81, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_83;
  vec_83 = (xlv_TEXCOORD4 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 packDist_84;
  lowp vec4 tmpvar_85;
  tmpvar_85 = textureCube (_ShadowMapTexture, vec_83);
  packDist_84 = tmpvar_85;
  shadowVals_72.w = dot (packDist_84, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_86;
  tmpvar_86 = lessThan (shadowVals_72, vec4(tmpvar_73));
  highp vec4 tmpvar_87;
  tmpvar_87 = _LightShadowData.xxxx;
  highp float tmpvar_88;
  if (tmpvar_86.x) {
    tmpvar_88 = tmpvar_87.x;
  } else {
    tmpvar_88 = 1.0;
  };
  highp float tmpvar_89;
  if (tmpvar_86.y) {
    tmpvar_89 = tmpvar_87.y;
  } else {
    tmpvar_89 = 1.0;
  };
  highp float tmpvar_90;
  if (tmpvar_86.z) {
    tmpvar_90 = tmpvar_87.z;
  } else {
    tmpvar_90 = 1.0;
  };
  highp float tmpvar_91;
  if (tmpvar_86.w) {
    tmpvar_91 = tmpvar_87.w;
  } else {
    tmpvar_91 = 1.0;
  };
  highp vec4 tmpvar_92;
  tmpvar_92.x = tmpvar_88;
  tmpvar_92.y = tmpvar_89;
  tmpvar_92.z = tmpvar_90;
  tmpvar_92.w = tmpvar_91;
  shadows_71 = tmpvar_92;
  mediump float tmpvar_93;
  tmpvar_93 = dot (shadows_71, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_70 = tmpvar_93;
  highp float tmpvar_94;
  tmpvar_94 = ((tmpvar_68.w * tmpvar_69.w) * tmpvar_70);
  atten_4 = tmpvar_94;
  mediump float tmpvar_95;
  tmpvar_95 = clamp ((((_LightColor0.w * tmpvar_66) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_96;
  tmpvar_96 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_95)), 0.0, 1.0);
  light_3 = tmpvar_96;
  highp float tmpvar_97;
  tmpvar_97 = clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0);
  terminator_2 = tmpvar_97;
  mediump vec3 tmpvar_98;
  tmpvar_98 = (light_3 * terminator_2);
  light_3 = tmpvar_98;
  highp vec3 tmpvar_99;
  tmpvar_99 = (tmpvar_62.xyz + (_Albedo * tmpvar_98));
  color_17.xyz = tmpvar_99;
  color_17.xyz = (color_17.xyz * tmpvar_98);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  highp vec3 p_2;
  p_2 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_1;
  highp vec4 tmpvar_4;
  tmpvar_4.x = _glesMultiTexCoord0.x;
  tmpvar_4.y = _glesMultiTexCoord0.y;
  tmpvar_4.z = _glesMultiTexCoord1.x;
  tmpvar_4.w = _glesMultiTexCoord1.y;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_4).xyz);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float terminator_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float TNdotL_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump float handoff_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec3 norm_11;
  highp vec2 localCoords_12;
  mediump vec4 encnorm_13;
  mediump float vertLerp_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD6.zy * _DetailScale);
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zx * _DetailScale);
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.xy * _DetailScale);
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  highp float tmpvar_37;
  tmpvar_37 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_14 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailVertTex, tmpvar_34);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailTex, tmpvar_31);
  mediump vec4 tmpvar_40;
  tmpvar_40 = mix (tmpvar_38, tmpvar_39, vec4(vertLerp_14));
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailVertTex, tmpvar_35);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailTex, tmpvar_32);
  mediump vec4 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41, tmpvar_42, vec4(vertLerp_14));
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailVertTex, tmpvar_36);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, tmpvar_33);
  mediump vec4 tmpvar_46;
  tmpvar_46 = mix (tmpvar_44, tmpvar_45, vec4(vertLerp_14));
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2DGradEXT (_BumpMap, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  encnorm_13 = tmpvar_47;
  mediump vec2 tmpvar_48;
  tmpvar_48 = encnorm_13.wy;
  localCoords_12 = tmpvar_48;
  highp vec2 tmpvar_49;
  tmpvar_49 = (localCoords_12 - vec2(0.5, 0.5));
  localCoords_12.x = (tmpvar_49.x * 0.25);
  localCoords_12.y = (tmpvar_49.y * 0.5);
  uv_16.x = (uv_16.x - 0.5);
  highp vec2 tmpvar_50;
  tmpvar_50 = (uv_16 + localCoords_12);
  uv_16 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = cos((6.28319 * tmpvar_50.x));
  norm_11.z = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = sin((6.28319 * tmpvar_50.x));
  norm_11.x = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = cos((3.14159 * tmpvar_50.y));
  norm_11.y = tmpvar_53;
  mediump vec3 tmpvar_54;
  tmpvar_54 = -(norm_11);
  norm_11 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_56;
  tmpvar_56 = mix (tmpvar_46, tmpvar_40, tmpvar_55.xxxx);
  detail_10 = tmpvar_56;
  highp vec4 tmpvar_57;
  tmpvar_57 = (0.25 * (mix (detail_10, tmpvar_43, tmpvar_55.yyyy) - 0.5));
  detail_10 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_9 = tmpvar_58;
  mediump vec4 tmpvar_59;
  tmpvar_59 = mix (detail_10, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_9));
  highp vec4 tmpvar_60;
  tmpvar_60 = (xlv_TEXCOORD1 + tmpvar_59);
  color_17 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_8 = tmpvar_61;
  mediump vec4 tmpvar_62;
  tmpvar_62 = (mix (color_17, main_15, vec4(handoff_8)) * _Color);
  color_17 = tmpvar_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = clamp (dot (xlv_TEXCOORD5, lightDirection_6), 0.0, 1.0);
  TNdotL_5 = tmpvar_65;
  mediump float tmpvar_66;
  tmpvar_66 = mix (TNdotL_5, clamp (dot (tmpvar_54, -(_SunDir)), 0.0, 1.0), handoff_8);
  highp float tmpvar_67;
  tmpvar_67 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_68;
  tmpvar_68 = texture2D (_LightTextureB0, vec2(tmpvar_67));
  lowp vec4 tmpvar_69;
  tmpvar_69 = textureCube (_LightTexture0, xlv_TEXCOORD3);
  highp float tmpvar_70;
  mediump vec4 shadows_71;
  highp vec4 shadowVals_72;
  highp float tmpvar_73;
  tmpvar_73 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  highp vec3 vec_74;
  vec_74 = (xlv_TEXCOORD4 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 packDist_75;
  lowp vec4 tmpvar_76;
  tmpvar_76 = textureCube (_ShadowMapTexture, vec_74);
  packDist_75 = tmpvar_76;
  shadowVals_72.x = dot (packDist_75, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_77;
  vec_77 = (xlv_TEXCOORD4 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 packDist_78;
  lowp vec4 tmpvar_79;
  tmpvar_79 = textureCube (_ShadowMapTexture, vec_77);
  packDist_78 = tmpvar_79;
  shadowVals_72.y = dot (packDist_78, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_80;
  vec_80 = (xlv_TEXCOORD4 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 packDist_81;
  lowp vec4 tmpvar_82;
  tmpvar_82 = textureCube (_ShadowMapTexture, vec_80);
  packDist_81 = tmpvar_82;
  shadowVals_72.z = dot (packDist_81, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_83;
  vec_83 = (xlv_TEXCOORD4 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 packDist_84;
  lowp vec4 tmpvar_85;
  tmpvar_85 = textureCube (_ShadowMapTexture, vec_83);
  packDist_84 = tmpvar_85;
  shadowVals_72.w = dot (packDist_84, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_86;
  tmpvar_86 = lessThan (shadowVals_72, vec4(tmpvar_73));
  highp vec4 tmpvar_87;
  tmpvar_87 = _LightShadowData.xxxx;
  highp float tmpvar_88;
  if (tmpvar_86.x) {
    tmpvar_88 = tmpvar_87.x;
  } else {
    tmpvar_88 = 1.0;
  };
  highp float tmpvar_89;
  if (tmpvar_86.y) {
    tmpvar_89 = tmpvar_87.y;
  } else {
    tmpvar_89 = 1.0;
  };
  highp float tmpvar_90;
  if (tmpvar_86.z) {
    tmpvar_90 = tmpvar_87.z;
  } else {
    tmpvar_90 = 1.0;
  };
  highp float tmpvar_91;
  if (tmpvar_86.w) {
    tmpvar_91 = tmpvar_87.w;
  } else {
    tmpvar_91 = 1.0;
  };
  highp vec4 tmpvar_92;
  tmpvar_92.x = tmpvar_88;
  tmpvar_92.y = tmpvar_89;
  tmpvar_92.z = tmpvar_90;
  tmpvar_92.w = tmpvar_91;
  shadows_71 = tmpvar_92;
  mediump float tmpvar_93;
  tmpvar_93 = dot (shadows_71, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_70 = tmpvar_93;
  highp float tmpvar_94;
  tmpvar_94 = ((tmpvar_68.w * tmpvar_69.w) * tmpvar_70);
  atten_4 = tmpvar_94;
  mediump float tmpvar_95;
  tmpvar_95 = clamp ((((_LightColor0.w * tmpvar_66) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_96;
  tmpvar_96 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_95)), 0.0, 1.0);
  light_3 = tmpvar_96;
  highp float tmpvar_97;
  tmpvar_97 = clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0);
  terminator_2 = tmpvar_97;
  mediump vec3 tmpvar_98;
  tmpvar_98 = (light_3 * terminator_2);
  light_3 = tmpvar_98;
  highp vec3 tmpvar_99;
  tmpvar_99 = (tmpvar_62.xyz + (_Albedo * tmpvar_98));
  color_17.xyz = tmpvar_99;
  color_17.xyz = (color_17.xyz * tmpvar_98);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 337
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 438
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 objnormal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
};
#line 428
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform samplerCube _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 347
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 360
#line 368
#line 382
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 415
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 419
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 423
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp mat4 _Rotation;
#line 427
uniform highp mat4 _InvRotation;
#line 450
#line 476
#line 450
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 454
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    #line 458
    o.color = v.color;
    o.objnormal = v.normal;
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    o._ShadowCoord = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    #line 463
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.objnormal);
    xlv_TEXCOORD3 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereCoords);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
vec2 xll_vecTSel_vb2_vf2_vf2 (bvec2 a, vec2 b, vec2 c) {
  return vec2 (a.x ? b.x : c.x, a.y ? b.y : c.y);
}
vec3 xll_vecTSel_vb3_vf3_vf3 (bvec3 a, vec3 b, vec3 c) {
  return vec3 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z);
}
vec4 xll_vecTSel_vb4_vf4_vf4 (bvec4 a, vec4 b, vec4 c) {
  return vec4 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z, a.w ? b.w : c.w);
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 337
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 438
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 objnormal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
};
#line 428
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform samplerCube _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 347
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 360
#line 368
#line 382
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 415
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 419
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 423
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp mat4 _Rotation;
#line 427
uniform highp mat4 _InvRotation;
#line 450
#line 476
#line 465
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 467
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 471
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 215
highp float DecodeFloatRGBA( in highp vec4 enc ) {
    highp vec4 kDecodeDot = vec4( 1.0, 0.00392157, 1.53787e-05, 6.22737e-09);
    return dot( enc, kDecodeDot);
}
#line 316
highp float SampleCubeDistance( in highp vec3 vec ) {
    highp vec4 packDist = texture( _ShadowMapTexture, vec);
    #line 319
    return DecodeFloatRGBA( packDist);
}
#line 321
highp float unityCubeShadow( in highp vec3 vec ) {
    #line 323
    highp float mydist = (length(vec) * _LightPositionRange.w);
    mydist *= 0.97;
    highp float z = 0.0078125;
    highp vec4 shadowVals;
    #line 327
    shadowVals.x = SampleCubeDistance( (vec + vec3( z, z, z)));
    shadowVals.y = SampleCubeDistance( (vec + vec3( (-z), (-z), z)));
    shadowVals.z = SampleCubeDistance( (vec + vec3( (-z), z, (-z))));
    shadowVals.w = SampleCubeDistance( (vec + vec3( z, (-z), (-z))));
    #line 331
    mediump vec4 shadows = xll_vecTSel_vb4_vf4_vf4 (lessThan( shadowVals, vec4( mydist)), vec4( _LightShadowData.xxxx), vec4( 1.0));
    return dot( shadows, vec4( 0.25));
}
#line 476
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    #line 480
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 484
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    highp vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    highp vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    highp vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    #line 488
    highp vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    highp vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    highp vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, (-IN.sphereCoords))) - 0.95)) + 0.5));
    #line 492
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    #line 496
    highp vec2 localCoords = encnorm.wy;
    localCoords -= vec2( 0.5);
    localCoords.x *= 0.25;
    localCoords.y *= 0.5;
    #line 500
    uv.x -= 0.5;
    uv += localCoords;
    mediump vec3 norm;
    norm.z = cos((6.28319 * uv.x));
    #line 504
    norm.x = sin((6.28319 * uv.x));
    norm.y = cos((3.14159 * uv.y));
    norm = (-norm);
    sphereNrm = abs(sphereNrm);
    #line 508
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = (0.25 * (mix( detail, detailY, vec4( sphereNrm.y)) - 0.5));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (IN.color + mix( detail.xyzw, vec4( 0.0), vec4( detailLevel)));
    #line 512
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    color = mix( color, main, vec4( handoff));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 516
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    #line 520
    lowp float atten = ((texture( _LightTextureB0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * texture( _LightTexture0, IN._LightCoord).w) * unityCubeShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    mediump float terminator = xll_saturate_f(floor((1.01 + dot( IN.sphereCoords, _SunDir))));
    #line 524
    light *= terminator;
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    color.w = 1.0;
    #line 528
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.objnormal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec4 tmpvar_3;
  tmpvar_3.x = gl_MultiTexCoord0.x;
  tmpvar_3.y = gl_MultiTexCoord0.y;
  tmpvar_3.z = gl_MultiTexCoord1.x;
  tmpvar_3.w = gl_MultiTexCoord1.y;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_3).xyz);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec3 norm_1;
  vec2 localCoords_2;
  vec2 uv_3;
  vec4 color_4;
  float r_5;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_6;
    y_over_x_6 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * r_5));
  uv_3.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_9;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_10;
    y_over_x_10 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_11;
    float x_12;
    x_12 = (y_over_x_10 * inversesqrt(((y_over_x_10 * y_over_x_10) + 1.0)));
    s_11 = (sign(x_12) * (1.5708 - (sqrt((1.0 - abs(x_12))) * (1.5708 + (abs(x_12) * (-0.214602 + (abs(x_12) * (0.0865667 + (abs(x_12) * -0.0310296)))))))));
    r_9 = s_11;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_9 = (s_11 + 3.14159);
      } else {
        r_9 = (r_9 - 3.14159);
      };
    };
  } else {
    r_9 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_13;
  tmpvar_13 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_14;
  tmpvar_14 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_15;
  tmpvar_15 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(tmpvar_13);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(tmpvar_13);
  vec4 tmpvar_17;
  tmpvar_17 = texture2DGradARB (_MainTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  float tmpvar_18;
  tmpvar_18 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec2 tmpvar_19;
  tmpvar_19 = (texture2DGradARB (_BumpMap, uv_3, tmpvar_16.xy, tmpvar_16.zw).wy - vec2(0.5, 0.5));
  localCoords_2.x = (tmpvar_19.x * 0.25);
  localCoords_2.y = (tmpvar_19.y * 0.5);
  uv_3.x = (uv_3.x - 0.5);
  vec2 tmpvar_20;
  tmpvar_20 = (uv_3 + localCoords_2);
  uv_3 = tmpvar_20;
  norm_1.z = cos((6.28319 * tmpvar_20.x));
  norm_1.x = sin((6.28319 * tmpvar_20.x));
  norm_1.y = cos((3.14159 * tmpvar_20.y));
  vec3 tmpvar_21;
  tmpvar_21 = -(norm_1);
  norm_1 = tmpvar_21;
  vec3 tmpvar_22;
  tmpvar_22 = abs(xlv_TEXCOORD6);
  float tmpvar_23;
  tmpvar_23 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  vec4 tmpvar_24;
  tmpvar_24 = (mix ((xlv_TEXCOORD1 + mix ((0.25 * (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_18)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_18)), tmpvar_22.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_18)), tmpvar_22.yyyy) - 0.5)), vec4(0.0, 0.0, 0.0, 0.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))), tmpvar_17, vec4(tmpvar_23)) * _Color);
  color_4.w = tmpvar_24.w;
  vec3 tmpvar_25;
  tmpvar_25 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * mix (clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), clamp (dot (tmpvar_21, -(_SunDir)), 0.0, 1.0), tmpvar_23)) * 4.0) * texture2D (_LightTexture0, vec2(dot (xlv_TEXCOORD3, xlv_TEXCOORD3))).w), 0.0, 1.0))), 0.0, 1.0) * clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0));
  color_4.xyz = (tmpvar_24.xyz + (_Albedo * tmpvar_25));
  color_4.xyz = (color_4.xyz * tmpvar_25);
  color_4.w = 1.0;
  gl_FragData[0] = color_4;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 31 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord5 o5
dcl_texcoord6 o6
def c13, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
mov r1.xyz, v2
mov r1.w, c13.x
dp4 r2.z, r1, c6
dp4 r2.x, r1, c4
dp4 r2.y, r1, c5
mov r0.zw, v4.xyxy
mov r0.xy, v3
dp4 r2.w, r0, r0
rsq r1.x, r2.w
mul r0.xyz, r1.x, r0
mov o6.xyz, -r0
dp3 r0.w, r2, r2
rsq r0.w, r0.w
mul o5.xyz, r0.w, r2
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
dp4 r0.w, v0, c7
add r1.xyz, -r0, c12
dp3 r1.x, r1, r1
rsq r1.x, r1.x
mov o2, v1
dp4 o4.z, r0, c10
dp4 o4.y, r0, c9
dp4 o4.x, r0, c8
rcp o1.x, r1.x
mov o3.xyz, v2
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  highp vec3 p_2;
  p_2 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_1;
  highp vec4 tmpvar_4;
  tmpvar_4.x = _glesMultiTexCoord0.x;
  tmpvar_4.y = _glesMultiTexCoord0.y;
  tmpvar_4.z = _glesMultiTexCoord1.x;
  tmpvar_4.w = _glesMultiTexCoord1.y;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_4).xyz);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float terminator_2;
  mediump vec3 light_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float handoff_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec3 norm_10;
  highp vec2 localCoords_11;
  mediump vec4 encnorm_12;
  mediump float vertLerp_13;
  mediump vec4 main_14;
  highp vec2 uv_15;
  mediump vec4 color_16;
  highp float r_17;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_18;
    y_over_x_18 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_19;
    highp float x_20;
    x_20 = (y_over_x_18 * inversesqrt(((y_over_x_18 * y_over_x_18) + 1.0)));
    s_19 = (sign(x_20) * (1.5708 - (sqrt((1.0 - abs(x_20))) * (1.5708 + (abs(x_20) * (-0.214602 + (abs(x_20) * (0.0865667 + (abs(x_20) * -0.0310296)))))))));
    r_17 = s_19;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_17 = (s_19 + 3.14159);
      } else {
        r_17 = (r_17 - 3.14159);
      };
    };
  } else {
    r_17 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_15.x = (0.5 + (0.159155 * r_17));
  uv_15.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_21;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_22;
    y_over_x_22 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_23;
    highp float x_24;
    x_24 = (y_over_x_22 * inversesqrt(((y_over_x_22 * y_over_x_22) + 1.0)));
    s_23 = (sign(x_24) * (1.5708 - (sqrt((1.0 - abs(x_24))) * (1.5708 + (abs(x_24) * (-0.214602 + (abs(x_24) * (0.0865667 + (abs(x_24) * -0.0310296)))))))));
    r_21 = s_23;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_21 = (s_23 + 3.14159);
      } else {
        r_21 = (r_21 - 3.14159);
      };
    };
  } else {
    r_21 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_25;
  tmpvar_25 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_26;
  tmpvar_26 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_28;
  tmpvar_28.x = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_28.y = dFdx(tmpvar_25);
  tmpvar_28.z = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_28.w = dFdy(tmpvar_25);
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2DGradEXT (_MainTex, uv_15, tmpvar_28.xy, tmpvar_28.zw);
  main_14 = tmpvar_29;
  highp vec2 tmpvar_30;
  tmpvar_30 = (xlv_TEXCOORD6.zy * _DetailScale);
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD6.zx * _DetailScale);
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.xy * _DetailScale);
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  highp float tmpvar_36;
  tmpvar_36 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_13 = tmpvar_36;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_DetailVertTex, tmpvar_33);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailTex, tmpvar_30);
  mediump vec4 tmpvar_39;
  tmpvar_39 = mix (tmpvar_37, tmpvar_38, vec4(vertLerp_13));
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailVertTex, tmpvar_34);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailTex, tmpvar_31);
  mediump vec4 tmpvar_42;
  tmpvar_42 = mix (tmpvar_40, tmpvar_41, vec4(vertLerp_13));
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailVertTex, tmpvar_35);
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailTex, tmpvar_32);
  mediump vec4 tmpvar_45;
  tmpvar_45 = mix (tmpvar_43, tmpvar_44, vec4(vertLerp_13));
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2DGradEXT (_BumpMap, uv_15, tmpvar_28.xy, tmpvar_28.zw);
  encnorm_12 = tmpvar_46;
  mediump vec2 tmpvar_47;
  tmpvar_47 = encnorm_12.wy;
  localCoords_11 = tmpvar_47;
  highp vec2 tmpvar_48;
  tmpvar_48 = (localCoords_11 - vec2(0.5, 0.5));
  localCoords_11.x = (tmpvar_48.x * 0.25);
  localCoords_11.y = (tmpvar_48.y * 0.5);
  uv_15.x = (uv_15.x - 0.5);
  highp vec2 tmpvar_49;
  tmpvar_49 = (uv_15 + localCoords_11);
  uv_15 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = cos((6.28319 * tmpvar_49.x));
  norm_10.z = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = sin((6.28319 * tmpvar_49.x));
  norm_10.x = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = cos((3.14159 * tmpvar_49.y));
  norm_10.y = tmpvar_52;
  mediump vec3 tmpvar_53;
  tmpvar_53 = -(norm_10);
  norm_10 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_55;
  tmpvar_55 = mix (tmpvar_45, tmpvar_39, tmpvar_54.xxxx);
  detail_9 = tmpvar_55;
  highp vec4 tmpvar_56;
  tmpvar_56 = (0.25 * (mix (detail_9, tmpvar_42, tmpvar_54.yyyy) - 0.5));
  detail_9 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_57;
  mediump vec4 tmpvar_58;
  tmpvar_58 = mix (detail_9, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_8));
  highp vec4 tmpvar_59;
  tmpvar_59 = (xlv_TEXCOORD1 + tmpvar_58);
  color_16 = tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_7 = tmpvar_60;
  mediump vec4 tmpvar_61;
  tmpvar_61 = (mix (color_16, main_14, vec4(handoff_7)) * _Color);
  color_16.w = tmpvar_61.w;
  highp vec3 tmpvar_62;
  tmpvar_62 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp float tmpvar_66;
  tmpvar_66 = texture2D (_LightTexture0, vec2(tmpvar_65)).w;
  mediump float tmpvar_67;
  tmpvar_67 = clamp ((((_LightColor0.w * mix (TNdotL_4, clamp (dot (tmpvar_53, -(_SunDir)), 0.0, 1.0), handoff_7)) * 4.0) * tmpvar_66), 0.0, 1.0);
  highp vec3 tmpvar_68;
  tmpvar_68 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_67)), 0.0, 1.0);
  light_3 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0);
  terminator_2 = tmpvar_69;
  mediump vec3 tmpvar_70;
  tmpvar_70 = (light_3 * terminator_2);
  light_3 = tmpvar_70;
  highp vec3 tmpvar_71;
  tmpvar_71 = (tmpvar_61.xyz + (_Albedo * tmpvar_70));
  color_16.xyz = tmpvar_71;
  color_16.xyz = (color_16.xyz * tmpvar_70);
  color_16.w = 1.0;
  tmpvar_1 = color_16;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  highp vec3 p_2;
  p_2 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_1;
  highp vec4 tmpvar_4;
  tmpvar_4.x = _glesMultiTexCoord0.x;
  tmpvar_4.y = _glesMultiTexCoord0.y;
  tmpvar_4.z = _glesMultiTexCoord1.x;
  tmpvar_4.w = _glesMultiTexCoord1.y;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_4).xyz);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float terminator_2;
  mediump vec3 light_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float handoff_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec3 norm_10;
  highp vec2 localCoords_11;
  mediump vec4 encnorm_12;
  mediump float vertLerp_13;
  mediump vec4 main_14;
  highp vec2 uv_15;
  mediump vec4 color_16;
  highp float r_17;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_18;
    y_over_x_18 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_19;
    highp float x_20;
    x_20 = (y_over_x_18 * inversesqrt(((y_over_x_18 * y_over_x_18) + 1.0)));
    s_19 = (sign(x_20) * (1.5708 - (sqrt((1.0 - abs(x_20))) * (1.5708 + (abs(x_20) * (-0.214602 + (abs(x_20) * (0.0865667 + (abs(x_20) * -0.0310296)))))))));
    r_17 = s_19;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_17 = (s_19 + 3.14159);
      } else {
        r_17 = (r_17 - 3.14159);
      };
    };
  } else {
    r_17 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_15.x = (0.5 + (0.159155 * r_17));
  uv_15.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_21;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_22;
    y_over_x_22 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_23;
    highp float x_24;
    x_24 = (y_over_x_22 * inversesqrt(((y_over_x_22 * y_over_x_22) + 1.0)));
    s_23 = (sign(x_24) * (1.5708 - (sqrt((1.0 - abs(x_24))) * (1.5708 + (abs(x_24) * (-0.214602 + (abs(x_24) * (0.0865667 + (abs(x_24) * -0.0310296)))))))));
    r_21 = s_23;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_21 = (s_23 + 3.14159);
      } else {
        r_21 = (r_21 - 3.14159);
      };
    };
  } else {
    r_21 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_25;
  tmpvar_25 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_26;
  tmpvar_26 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_28;
  tmpvar_28.x = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_28.y = dFdx(tmpvar_25);
  tmpvar_28.z = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_28.w = dFdy(tmpvar_25);
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2DGradEXT (_MainTex, uv_15, tmpvar_28.xy, tmpvar_28.zw);
  main_14 = tmpvar_29;
  highp vec2 tmpvar_30;
  tmpvar_30 = (xlv_TEXCOORD6.zy * _DetailScale);
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD6.zx * _DetailScale);
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.xy * _DetailScale);
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  highp float tmpvar_36;
  tmpvar_36 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_13 = tmpvar_36;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_DetailVertTex, tmpvar_33);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailTex, tmpvar_30);
  mediump vec4 tmpvar_39;
  tmpvar_39 = mix (tmpvar_37, tmpvar_38, vec4(vertLerp_13));
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailVertTex, tmpvar_34);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailTex, tmpvar_31);
  mediump vec4 tmpvar_42;
  tmpvar_42 = mix (tmpvar_40, tmpvar_41, vec4(vertLerp_13));
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailVertTex, tmpvar_35);
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailTex, tmpvar_32);
  mediump vec4 tmpvar_45;
  tmpvar_45 = mix (tmpvar_43, tmpvar_44, vec4(vertLerp_13));
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2DGradEXT (_BumpMap, uv_15, tmpvar_28.xy, tmpvar_28.zw);
  encnorm_12 = tmpvar_46;
  mediump vec2 tmpvar_47;
  tmpvar_47 = encnorm_12.wy;
  localCoords_11 = tmpvar_47;
  highp vec2 tmpvar_48;
  tmpvar_48 = (localCoords_11 - vec2(0.5, 0.5));
  localCoords_11.x = (tmpvar_48.x * 0.25);
  localCoords_11.y = (tmpvar_48.y * 0.5);
  uv_15.x = (uv_15.x - 0.5);
  highp vec2 tmpvar_49;
  tmpvar_49 = (uv_15 + localCoords_11);
  uv_15 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = cos((6.28319 * tmpvar_49.x));
  norm_10.z = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = sin((6.28319 * tmpvar_49.x));
  norm_10.x = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = cos((3.14159 * tmpvar_49.y));
  norm_10.y = tmpvar_52;
  mediump vec3 tmpvar_53;
  tmpvar_53 = -(norm_10);
  norm_10 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_55;
  tmpvar_55 = mix (tmpvar_45, tmpvar_39, tmpvar_54.xxxx);
  detail_9 = tmpvar_55;
  highp vec4 tmpvar_56;
  tmpvar_56 = (0.25 * (mix (detail_9, tmpvar_42, tmpvar_54.yyyy) - 0.5));
  detail_9 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_57;
  mediump vec4 tmpvar_58;
  tmpvar_58 = mix (detail_9, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_8));
  highp vec4 tmpvar_59;
  tmpvar_59 = (xlv_TEXCOORD1 + tmpvar_58);
  color_16 = tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_7 = tmpvar_60;
  mediump vec4 tmpvar_61;
  tmpvar_61 = (mix (color_16, main_14, vec4(handoff_7)) * _Color);
  color_16.w = tmpvar_61.w;
  highp vec3 tmpvar_62;
  tmpvar_62 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp float tmpvar_66;
  tmpvar_66 = texture2D (_LightTexture0, vec2(tmpvar_65)).w;
  mediump float tmpvar_67;
  tmpvar_67 = clamp ((((_LightColor0.w * mix (TNdotL_4, clamp (dot (tmpvar_53, -(_SunDir)), 0.0, 1.0), handoff_7)) * 4.0) * tmpvar_66), 0.0, 1.0);
  highp vec3 tmpvar_68;
  tmpvar_68 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_67)), 0.0, 1.0);
  light_3 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0);
  terminator_2 = tmpvar_69;
  mediump vec3 tmpvar_70;
  tmpvar_70 = (light_3 * terminator_2);
  light_3 = tmpvar_70;
  highp vec3 tmpvar_71;
  tmpvar_71 = (tmpvar_61.xyz + (_Albedo * tmpvar_70));
  color_16.xyz = tmpvar_71;
  color_16.xyz = (color_16.xyz * tmpvar_70);
  color_16.w = 1.0;
  tmpvar_1 = color_16;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 418
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 objnormal;
    highp vec3 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
};
#line 408
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 395
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 399
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 403
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp mat4 _Rotation;
#line 407
uniform highp mat4 _InvRotation;
#line 429
#line 454
#line 429
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 433
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    #line 437
    o.color = v.color;
    o.objnormal = v.normal;
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    #line 441
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.objnormal);
    xlv_TEXCOORD3 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereCoords);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 418
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 objnormal;
    highp vec3 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
};
#line 408
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 395
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 399
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 403
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp mat4 _Rotation;
#line 407
uniform highp mat4 _InvRotation;
#line 429
#line 454
#line 443
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 445
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 449
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 454
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    #line 458
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 462
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    highp vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    highp vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    highp vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    #line 466
    highp vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    highp vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    highp vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, (-IN.sphereCoords))) - 0.95)) + 0.5));
    #line 470
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    #line 474
    highp vec2 localCoords = encnorm.wy;
    localCoords -= vec2( 0.5);
    localCoords.x *= 0.25;
    localCoords.y *= 0.5;
    #line 478
    uv.x -= 0.5;
    uv += localCoords;
    mediump vec3 norm;
    norm.z = cos((6.28319 * uv.x));
    #line 482
    norm.x = sin((6.28319 * uv.x));
    norm.y = cos((3.14159 * uv.y));
    norm = (-norm);
    sphereNrm = abs(sphereNrm);
    #line 486
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = (0.25 * (mix( detail, detailY, vec4( sphereNrm.y)) - 0.5));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (IN.color + mix( detail.xyzw, vec4( 0.0), vec4( detailLevel)));
    #line 490
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    color = mix( color, main, vec4( handoff));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 494
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    #line 498
    lowp float atten = (texture( _LightTexture0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * 1.0);
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    mediump float terminator = xll_saturate_f(floor((1.01 + dot( IN.sphereCoords, _SunDir))));
    #line 502
    light *= terminator;
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    color.w = 1.0;
    #line 506
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.objnormal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec4 tmpvar_3;
  tmpvar_3.x = gl_MultiTexCoord0.x;
  tmpvar_3.y = gl_MultiTexCoord0.y;
  tmpvar_3.z = gl_MultiTexCoord1.x;
  tmpvar_3.w = gl_MultiTexCoord1.y;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_3).xyz);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec3 norm_1;
  vec2 localCoords_2;
  vec2 uv_3;
  vec4 color_4;
  float r_5;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_6;
    y_over_x_6 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * r_5));
  uv_3.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_9;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_10;
    y_over_x_10 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_11;
    float x_12;
    x_12 = (y_over_x_10 * inversesqrt(((y_over_x_10 * y_over_x_10) + 1.0)));
    s_11 = (sign(x_12) * (1.5708 - (sqrt((1.0 - abs(x_12))) * (1.5708 + (abs(x_12) * (-0.214602 + (abs(x_12) * (0.0865667 + (abs(x_12) * -0.0310296)))))))));
    r_9 = s_11;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_9 = (s_11 + 3.14159);
      } else {
        r_9 = (r_9 - 3.14159);
      };
    };
  } else {
    r_9 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_13;
  tmpvar_13 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_14;
  tmpvar_14 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_15;
  tmpvar_15 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(tmpvar_13);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(tmpvar_13);
  vec4 tmpvar_17;
  tmpvar_17 = texture2DGradARB (_MainTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  float tmpvar_18;
  tmpvar_18 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec2 tmpvar_19;
  tmpvar_19 = (texture2DGradARB (_BumpMap, uv_3, tmpvar_16.xy, tmpvar_16.zw).wy - vec2(0.5, 0.5));
  localCoords_2.x = (tmpvar_19.x * 0.25);
  localCoords_2.y = (tmpvar_19.y * 0.5);
  uv_3.x = (uv_3.x - 0.5);
  vec2 tmpvar_20;
  tmpvar_20 = (uv_3 + localCoords_2);
  uv_3 = tmpvar_20;
  norm_1.z = cos((6.28319 * tmpvar_20.x));
  norm_1.x = sin((6.28319 * tmpvar_20.x));
  norm_1.y = cos((3.14159 * tmpvar_20.y));
  vec3 tmpvar_21;
  tmpvar_21 = -(norm_1);
  norm_1 = tmpvar_21;
  vec3 tmpvar_22;
  tmpvar_22 = abs(xlv_TEXCOORD6);
  float tmpvar_23;
  tmpvar_23 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  vec4 tmpvar_24;
  tmpvar_24 = (mix ((xlv_TEXCOORD1 + mix ((0.25 * (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_18)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_18)), tmpvar_22.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_18)), tmpvar_22.yyyy) - 0.5)), vec4(0.0, 0.0, 0.0, 0.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))), tmpvar_17, vec4(tmpvar_23)) * _Color);
  color_4.w = tmpvar_24.w;
  vec3 tmpvar_25;
  tmpvar_25 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * mix (clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), clamp (dot (tmpvar_21, -(_SunDir)), 0.0, 1.0), tmpvar_23)) * 4.0), 0.0, 1.0))), 0.0, 1.0) * clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0));
  color_4.xyz = (tmpvar_24.xyz + (_Albedo * tmpvar_25));
  color_4.xyz = (color_4.xyz * tmpvar_25);
  color_4.w = 1.0;
  gl_FragData[0] = color_4;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
"vs_3_0
; 27 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord5 o4
dcl_texcoord6 o5
def c9, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
mov r0.xyz, v2
mov r0.w, c9.x
dp4 r1.z, r0, c6
dp4 r1.x, r0, c4
dp4 r1.y, r0, c5
dp3 r0.x, r1, r1
rsq r1.w, r0.x
mul o4.xyz, r1.w, r1
mov r0.zw, v4.xyxy
mov r0.xy, v3
dp4 r0.w, r0, r0
rsq r0.w, r0.w
mul r0.xyz, r0.w, r0
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
add r1.xyz, -r1, c8
dp3 r0.w, r1, r1
mov o5.xyz, -r0
rsq r0.x, r0.w
mov o2, v1
rcp o1.x, r0.x
mov o3.xyz, v2
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  highp vec3 p_2;
  p_2 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_1;
  highp vec4 tmpvar_4;
  tmpvar_4.x = _glesMultiTexCoord0.x;
  tmpvar_4.y = _glesMultiTexCoord0.y;
  tmpvar_4.z = _glesMultiTexCoord1.x;
  tmpvar_4.w = _glesMultiTexCoord1.y;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_4).xyz);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float terminator_2;
  mediump vec3 light_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float handoff_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec3 norm_10;
  highp vec2 localCoords_11;
  mediump vec4 encnorm_12;
  mediump float vertLerp_13;
  mediump vec4 main_14;
  highp vec2 uv_15;
  mediump vec4 color_16;
  highp float r_17;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_18;
    y_over_x_18 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_19;
    highp float x_20;
    x_20 = (y_over_x_18 * inversesqrt(((y_over_x_18 * y_over_x_18) + 1.0)));
    s_19 = (sign(x_20) * (1.5708 - (sqrt((1.0 - abs(x_20))) * (1.5708 + (abs(x_20) * (-0.214602 + (abs(x_20) * (0.0865667 + (abs(x_20) * -0.0310296)))))))));
    r_17 = s_19;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_17 = (s_19 + 3.14159);
      } else {
        r_17 = (r_17 - 3.14159);
      };
    };
  } else {
    r_17 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_15.x = (0.5 + (0.159155 * r_17));
  uv_15.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_21;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_22;
    y_over_x_22 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_23;
    highp float x_24;
    x_24 = (y_over_x_22 * inversesqrt(((y_over_x_22 * y_over_x_22) + 1.0)));
    s_23 = (sign(x_24) * (1.5708 - (sqrt((1.0 - abs(x_24))) * (1.5708 + (abs(x_24) * (-0.214602 + (abs(x_24) * (0.0865667 + (abs(x_24) * -0.0310296)))))))));
    r_21 = s_23;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_21 = (s_23 + 3.14159);
      } else {
        r_21 = (r_21 - 3.14159);
      };
    };
  } else {
    r_21 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_25;
  tmpvar_25 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_26;
  tmpvar_26 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_28;
  tmpvar_28.x = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_28.y = dFdx(tmpvar_25);
  tmpvar_28.z = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_28.w = dFdy(tmpvar_25);
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2DGradEXT (_MainTex, uv_15, tmpvar_28.xy, tmpvar_28.zw);
  main_14 = tmpvar_29;
  highp vec2 tmpvar_30;
  tmpvar_30 = (xlv_TEXCOORD6.zy * _DetailScale);
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD6.zx * _DetailScale);
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.xy * _DetailScale);
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  highp float tmpvar_36;
  tmpvar_36 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_13 = tmpvar_36;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_DetailVertTex, tmpvar_33);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailTex, tmpvar_30);
  mediump vec4 tmpvar_39;
  tmpvar_39 = mix (tmpvar_37, tmpvar_38, vec4(vertLerp_13));
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailVertTex, tmpvar_34);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailTex, tmpvar_31);
  mediump vec4 tmpvar_42;
  tmpvar_42 = mix (tmpvar_40, tmpvar_41, vec4(vertLerp_13));
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailVertTex, tmpvar_35);
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailTex, tmpvar_32);
  mediump vec4 tmpvar_45;
  tmpvar_45 = mix (tmpvar_43, tmpvar_44, vec4(vertLerp_13));
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2DGradEXT (_BumpMap, uv_15, tmpvar_28.xy, tmpvar_28.zw);
  encnorm_12 = tmpvar_46;
  mediump vec2 tmpvar_47;
  tmpvar_47 = encnorm_12.wy;
  localCoords_11 = tmpvar_47;
  highp vec2 tmpvar_48;
  tmpvar_48 = (localCoords_11 - vec2(0.5, 0.5));
  localCoords_11.x = (tmpvar_48.x * 0.25);
  localCoords_11.y = (tmpvar_48.y * 0.5);
  uv_15.x = (uv_15.x - 0.5);
  highp vec2 tmpvar_49;
  tmpvar_49 = (uv_15 + localCoords_11);
  uv_15 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = cos((6.28319 * tmpvar_49.x));
  norm_10.z = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = sin((6.28319 * tmpvar_49.x));
  norm_10.x = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = cos((3.14159 * tmpvar_49.y));
  norm_10.y = tmpvar_52;
  mediump vec3 tmpvar_53;
  tmpvar_53 = -(norm_10);
  norm_10 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_55;
  tmpvar_55 = mix (tmpvar_45, tmpvar_39, tmpvar_54.xxxx);
  detail_9 = tmpvar_55;
  highp vec4 tmpvar_56;
  tmpvar_56 = (0.25 * (mix (detail_9, tmpvar_42, tmpvar_54.yyyy) - 0.5));
  detail_9 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_57;
  mediump vec4 tmpvar_58;
  tmpvar_58 = mix (detail_9, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_8));
  highp vec4 tmpvar_59;
  tmpvar_59 = (xlv_TEXCOORD1 + tmpvar_58);
  color_16 = tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_7 = tmpvar_60;
  mediump vec4 tmpvar_61;
  tmpvar_61 = (mix (color_16, main_14, vec4(handoff_7)) * _Color);
  color_16.w = tmpvar_61.w;
  highp vec3 tmpvar_62;
  tmpvar_62 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_62;
  lowp vec3 tmpvar_63;
  tmpvar_63 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_64;
  mediump float tmpvar_65;
  tmpvar_65 = clamp (((_LightColor0.w * mix (TNdotL_4, clamp (dot (tmpvar_53, -(_SunDir)), 0.0, 1.0), handoff_7)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_66;
  tmpvar_66 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_65)), 0.0, 1.0);
  light_3 = tmpvar_66;
  highp float tmpvar_67;
  tmpvar_67 = clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0);
  terminator_2 = tmpvar_67;
  mediump vec3 tmpvar_68;
  tmpvar_68 = (light_3 * terminator_2);
  light_3 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = (tmpvar_61.xyz + (_Albedo * tmpvar_68));
  color_16.xyz = tmpvar_69;
  color_16.xyz = (color_16.xyz * tmpvar_68);
  color_16.w = 1.0;
  tmpvar_1 = color_16;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  highp vec3 p_2;
  p_2 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_1;
  highp vec4 tmpvar_4;
  tmpvar_4.x = _glesMultiTexCoord0.x;
  tmpvar_4.y = _glesMultiTexCoord0.y;
  tmpvar_4.z = _glesMultiTexCoord1.x;
  tmpvar_4.w = _glesMultiTexCoord1.y;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_4).xyz);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float terminator_2;
  mediump vec3 light_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float handoff_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec3 norm_10;
  highp vec2 localCoords_11;
  mediump vec4 encnorm_12;
  mediump float vertLerp_13;
  mediump vec4 main_14;
  highp vec2 uv_15;
  mediump vec4 color_16;
  highp float r_17;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_18;
    y_over_x_18 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_19;
    highp float x_20;
    x_20 = (y_over_x_18 * inversesqrt(((y_over_x_18 * y_over_x_18) + 1.0)));
    s_19 = (sign(x_20) * (1.5708 - (sqrt((1.0 - abs(x_20))) * (1.5708 + (abs(x_20) * (-0.214602 + (abs(x_20) * (0.0865667 + (abs(x_20) * -0.0310296)))))))));
    r_17 = s_19;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_17 = (s_19 + 3.14159);
      } else {
        r_17 = (r_17 - 3.14159);
      };
    };
  } else {
    r_17 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_15.x = (0.5 + (0.159155 * r_17));
  uv_15.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_21;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_22;
    y_over_x_22 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_23;
    highp float x_24;
    x_24 = (y_over_x_22 * inversesqrt(((y_over_x_22 * y_over_x_22) + 1.0)));
    s_23 = (sign(x_24) * (1.5708 - (sqrt((1.0 - abs(x_24))) * (1.5708 + (abs(x_24) * (-0.214602 + (abs(x_24) * (0.0865667 + (abs(x_24) * -0.0310296)))))))));
    r_21 = s_23;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_21 = (s_23 + 3.14159);
      } else {
        r_21 = (r_21 - 3.14159);
      };
    };
  } else {
    r_21 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_25;
  tmpvar_25 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_26;
  tmpvar_26 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_28;
  tmpvar_28.x = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_28.y = dFdx(tmpvar_25);
  tmpvar_28.z = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_28.w = dFdy(tmpvar_25);
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2DGradEXT (_MainTex, uv_15, tmpvar_28.xy, tmpvar_28.zw);
  main_14 = tmpvar_29;
  highp vec2 tmpvar_30;
  tmpvar_30 = (xlv_TEXCOORD6.zy * _DetailScale);
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD6.zx * _DetailScale);
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.xy * _DetailScale);
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  highp float tmpvar_36;
  tmpvar_36 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_13 = tmpvar_36;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_DetailVertTex, tmpvar_33);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailTex, tmpvar_30);
  mediump vec4 tmpvar_39;
  tmpvar_39 = mix (tmpvar_37, tmpvar_38, vec4(vertLerp_13));
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailVertTex, tmpvar_34);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailTex, tmpvar_31);
  mediump vec4 tmpvar_42;
  tmpvar_42 = mix (tmpvar_40, tmpvar_41, vec4(vertLerp_13));
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailVertTex, tmpvar_35);
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailTex, tmpvar_32);
  mediump vec4 tmpvar_45;
  tmpvar_45 = mix (tmpvar_43, tmpvar_44, vec4(vertLerp_13));
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2DGradEXT (_BumpMap, uv_15, tmpvar_28.xy, tmpvar_28.zw);
  encnorm_12 = tmpvar_46;
  mediump vec2 tmpvar_47;
  tmpvar_47 = encnorm_12.wy;
  localCoords_11 = tmpvar_47;
  highp vec2 tmpvar_48;
  tmpvar_48 = (localCoords_11 - vec2(0.5, 0.5));
  localCoords_11.x = (tmpvar_48.x * 0.25);
  localCoords_11.y = (tmpvar_48.y * 0.5);
  uv_15.x = (uv_15.x - 0.5);
  highp vec2 tmpvar_49;
  tmpvar_49 = (uv_15 + localCoords_11);
  uv_15 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = cos((6.28319 * tmpvar_49.x));
  norm_10.z = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = sin((6.28319 * tmpvar_49.x));
  norm_10.x = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = cos((3.14159 * tmpvar_49.y));
  norm_10.y = tmpvar_52;
  mediump vec3 tmpvar_53;
  tmpvar_53 = -(norm_10);
  norm_10 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_55;
  tmpvar_55 = mix (tmpvar_45, tmpvar_39, tmpvar_54.xxxx);
  detail_9 = tmpvar_55;
  highp vec4 tmpvar_56;
  tmpvar_56 = (0.25 * (mix (detail_9, tmpvar_42, tmpvar_54.yyyy) - 0.5));
  detail_9 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_57;
  mediump vec4 tmpvar_58;
  tmpvar_58 = mix (detail_9, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_8));
  highp vec4 tmpvar_59;
  tmpvar_59 = (xlv_TEXCOORD1 + tmpvar_58);
  color_16 = tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_7 = tmpvar_60;
  mediump vec4 tmpvar_61;
  tmpvar_61 = (mix (color_16, main_14, vec4(handoff_7)) * _Color);
  color_16.w = tmpvar_61.w;
  highp vec3 tmpvar_62;
  tmpvar_62 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_62;
  lowp vec3 tmpvar_63;
  tmpvar_63 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_64;
  mediump float tmpvar_65;
  tmpvar_65 = clamp (((_LightColor0.w * mix (TNdotL_4, clamp (dot (tmpvar_53, -(_SunDir)), 0.0, 1.0), handoff_7)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_66;
  tmpvar_66 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_65)), 0.0, 1.0);
  light_3 = tmpvar_66;
  highp float tmpvar_67;
  tmpvar_67 = clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0);
  terminator_2 = tmpvar_67;
  mediump vec3 tmpvar_68;
  tmpvar_68 = (light_3 * terminator_2);
  light_3 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = (tmpvar_61.xyz + (_Albedo * tmpvar_68));
  color_16.xyz = tmpvar_69;
  color_16.xyz = (color_16.xyz * tmpvar_68);
  color_16.w = 1.0;
  tmpvar_1 = color_16;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 416
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 objnormal;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
};
#line 406
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 393
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 397
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 401
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp mat4 _Rotation;
#line 405
uniform highp mat4 _InvRotation;
#line 426
#line 439
#line 426
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 430
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    #line 434
    o.color = v.color;
    o.objnormal = v.normal;
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.objnormal);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereCoords);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 416
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 objnormal;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
};
#line 406
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 393
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 397
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 401
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp mat4 _Rotation;
#line 405
uniform highp mat4 _InvRotation;
#line 426
#line 439
#line 439
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 443
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 447
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 450
lowp vec4 frag( in v2f IN ) {
    #line 452
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 456
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    highp vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 460
    highp vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    highp vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    highp vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    highp vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 464
    highp vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, (-IN.sphereCoords))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 468
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    highp vec2 localCoords = encnorm.wy;
    localCoords -= vec2( 0.5);
    #line 472
    localCoords.x *= 0.25;
    localCoords.y *= 0.5;
    uv.x -= 0.5;
    uv += localCoords;
    #line 476
    mediump vec3 norm;
    norm.z = cos((6.28319 * uv.x));
    norm.x = sin((6.28319 * uv.x));
    norm.y = cos((3.14159 * uv.y));
    #line 480
    norm = (-norm);
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = (0.25 * (mix( detail, detailY, vec4( sphereNrm.y)) - 0.5));
    #line 484
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (IN.color + mix( detail.xyzw, vec4( 0.0), vec4( detailLevel)));
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    color = mix( color, main, vec4( handoff));
    #line 488
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    #line 492
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    lowp float atten = 1.0;
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    #line 496
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    mediump float terminator = xll_saturate_f(floor((1.01 + dot( IN.sphereCoords, _SunDir))));
    light *= terminator;
    color.xyz += (_Albedo * light);
    #line 500
    color.xyz *= light;
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.objnormal = vec3(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec4 tmpvar_3;
  tmpvar_3.x = gl_MultiTexCoord0.x;
  tmpvar_3.y = gl_MultiTexCoord0.y;
  tmpvar_3.z = gl_MultiTexCoord1.x;
  tmpvar_3.w = gl_MultiTexCoord1.y;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_3).xyz);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec3 norm_1;
  vec2 localCoords_2;
  vec2 uv_3;
  vec4 color_4;
  float r_5;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_6;
    y_over_x_6 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * r_5));
  uv_3.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_9;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_10;
    y_over_x_10 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_11;
    float x_12;
    x_12 = (y_over_x_10 * inversesqrt(((y_over_x_10 * y_over_x_10) + 1.0)));
    s_11 = (sign(x_12) * (1.5708 - (sqrt((1.0 - abs(x_12))) * (1.5708 + (abs(x_12) * (-0.214602 + (abs(x_12) * (0.0865667 + (abs(x_12) * -0.0310296)))))))));
    r_9 = s_11;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_9 = (s_11 + 3.14159);
      } else {
        r_9 = (r_9 - 3.14159);
      };
    };
  } else {
    r_9 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_13;
  tmpvar_13 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_14;
  tmpvar_14 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_15;
  tmpvar_15 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(tmpvar_13);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(tmpvar_13);
  vec4 tmpvar_17;
  tmpvar_17 = texture2DGradARB (_MainTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  float tmpvar_18;
  tmpvar_18 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec2 tmpvar_19;
  tmpvar_19 = (texture2DGradARB (_BumpMap, uv_3, tmpvar_16.xy, tmpvar_16.zw).wy - vec2(0.5, 0.5));
  localCoords_2.x = (tmpvar_19.x * 0.25);
  localCoords_2.y = (tmpvar_19.y * 0.5);
  uv_3.x = (uv_3.x - 0.5);
  vec2 tmpvar_20;
  tmpvar_20 = (uv_3 + localCoords_2);
  uv_3 = tmpvar_20;
  norm_1.z = cos((6.28319 * tmpvar_20.x));
  norm_1.x = sin((6.28319 * tmpvar_20.x));
  norm_1.y = cos((3.14159 * tmpvar_20.y));
  vec3 tmpvar_21;
  tmpvar_21 = -(norm_1);
  norm_1 = tmpvar_21;
  vec3 tmpvar_22;
  tmpvar_22 = abs(xlv_TEXCOORD6);
  float tmpvar_23;
  tmpvar_23 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  vec4 tmpvar_24;
  tmpvar_24 = (mix ((xlv_TEXCOORD1 + mix ((0.25 * (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_18)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_18)), tmpvar_22.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_18)), tmpvar_22.yyyy) - 0.5)), vec4(0.0, 0.0, 0.0, 0.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))), tmpvar_17, vec4(tmpvar_23)) * _Color);
  color_4.w = tmpvar_24.w;
  vec3 tmpvar_25;
  tmpvar_25 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * mix (clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), clamp (dot (tmpvar_21, -(_SunDir)), 0.0, 1.0), tmpvar_23)) * 4.0) * ((float((xlv_TEXCOORD3.z > 0.0)) * texture2D (_LightTexture0, ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5)).w) * texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz))).w)), 0.0, 1.0))), 0.0, 1.0) * clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0));
  color_4.xyz = (tmpvar_24.xyz + (_Albedo * tmpvar_25));
  color_4.xyz = (color_4.xyz * tmpvar_25);
  color_4.w = 1.0;
  gl_FragData[0] = color_4;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 32 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord5 o5
dcl_texcoord6 o6
def c13, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
mov r1.xyz, v2
mov r1.w, c13.x
dp4 r2.z, r1, c6
dp4 r2.x, r1, c4
dp4 r2.y, r1, c5
mov r0.zw, v4.xyxy
mov r0.xy, v3
dp4 r2.w, r0, r0
rsq r1.x, r2.w
mul r0.xyz, r1.x, r0
mov o6.xyz, -r0
dp3 r0.w, r2, r2
rsq r0.w, r0.w
mul o5.xyz, r0.w, r2
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
dp4 r0.w, v0, c7
add r1.xyz, -r0, c12
dp3 r1.x, r1, r1
rsq r1.x, r1.x
mov o2, v1
dp4 o4.w, r0, c11
dp4 o4.z, r0, c10
dp4 o4.y, r0, c9
dp4 o4.x, r0, c8
rcp o1.x, r1.x
mov o3.xyz, v2
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  highp vec3 p_2;
  p_2 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_1;
  highp vec4 tmpvar_4;
  tmpvar_4.x = _glesMultiTexCoord0.x;
  tmpvar_4.y = _glesMultiTexCoord0.y;
  tmpvar_4.z = _glesMultiTexCoord1.x;
  tmpvar_4.w = _glesMultiTexCoord1.y;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_4).xyz);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float terminator_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float TNdotL_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump float handoff_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec3 norm_11;
  highp vec2 localCoords_12;
  mediump vec4 encnorm_13;
  mediump float vertLerp_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD6.zy * _DetailScale);
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zx * _DetailScale);
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.xy * _DetailScale);
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  highp float tmpvar_37;
  tmpvar_37 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_14 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailVertTex, tmpvar_34);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailTex, tmpvar_31);
  mediump vec4 tmpvar_40;
  tmpvar_40 = mix (tmpvar_38, tmpvar_39, vec4(vertLerp_14));
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailVertTex, tmpvar_35);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailTex, tmpvar_32);
  mediump vec4 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41, tmpvar_42, vec4(vertLerp_14));
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailVertTex, tmpvar_36);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, tmpvar_33);
  mediump vec4 tmpvar_46;
  tmpvar_46 = mix (tmpvar_44, tmpvar_45, vec4(vertLerp_14));
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2DGradEXT (_BumpMap, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  encnorm_13 = tmpvar_47;
  mediump vec2 tmpvar_48;
  tmpvar_48 = encnorm_13.wy;
  localCoords_12 = tmpvar_48;
  highp vec2 tmpvar_49;
  tmpvar_49 = (localCoords_12 - vec2(0.5, 0.5));
  localCoords_12.x = (tmpvar_49.x * 0.25);
  localCoords_12.y = (tmpvar_49.y * 0.5);
  uv_16.x = (uv_16.x - 0.5);
  highp vec2 tmpvar_50;
  tmpvar_50 = (uv_16 + localCoords_12);
  uv_16 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = cos((6.28319 * tmpvar_50.x));
  norm_11.z = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = sin((6.28319 * tmpvar_50.x));
  norm_11.x = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = cos((3.14159 * tmpvar_50.y));
  norm_11.y = tmpvar_53;
  mediump vec3 tmpvar_54;
  tmpvar_54 = -(norm_11);
  norm_11 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_56;
  tmpvar_56 = mix (tmpvar_46, tmpvar_40, tmpvar_55.xxxx);
  detail_10 = tmpvar_56;
  highp vec4 tmpvar_57;
  tmpvar_57 = (0.25 * (mix (detail_10, tmpvar_43, tmpvar_55.yyyy) - 0.5));
  detail_10 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_9 = tmpvar_58;
  mediump vec4 tmpvar_59;
  tmpvar_59 = mix (detail_10, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_9));
  highp vec4 tmpvar_60;
  tmpvar_60 = (xlv_TEXCOORD1 + tmpvar_59);
  color_17 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_8 = tmpvar_61;
  mediump vec4 tmpvar_62;
  tmpvar_62 = (mix (color_17, main_15, vec4(handoff_8)) * _Color);
  color_17.w = tmpvar_62.w;
  highp vec3 tmpvar_63;
  tmpvar_63 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = clamp (dot (xlv_TEXCOORD5, lightDirection_6), 0.0, 1.0);
  TNdotL_5 = tmpvar_65;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_66 = texture2D (_LightTexture0, P_67);
  highp float tmpvar_68;
  tmpvar_68 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_69;
  tmpvar_69 = texture2D (_LightTextureB0, vec2(tmpvar_68));
  highp float tmpvar_70;
  tmpvar_70 = ((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_66.w) * tmpvar_69.w);
  atten_4 = tmpvar_70;
  mediump float tmpvar_71;
  tmpvar_71 = clamp ((((_LightColor0.w * mix (TNdotL_5, clamp (dot (tmpvar_54, -(_SunDir)), 0.0, 1.0), handoff_8)) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_72;
  tmpvar_72 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_71)), 0.0, 1.0);
  light_3 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0);
  terminator_2 = tmpvar_73;
  mediump vec3 tmpvar_74;
  tmpvar_74 = (light_3 * terminator_2);
  light_3 = tmpvar_74;
  highp vec3 tmpvar_75;
  tmpvar_75 = (tmpvar_62.xyz + (_Albedo * tmpvar_74));
  color_17.xyz = tmpvar_75;
  color_17.xyz = (color_17.xyz * tmpvar_74);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  highp vec3 p_2;
  p_2 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_1;
  highp vec4 tmpvar_4;
  tmpvar_4.x = _glesMultiTexCoord0.x;
  tmpvar_4.y = _glesMultiTexCoord0.y;
  tmpvar_4.z = _glesMultiTexCoord1.x;
  tmpvar_4.w = _glesMultiTexCoord1.y;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_4).xyz);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float terminator_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float TNdotL_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump float handoff_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec3 norm_11;
  highp vec2 localCoords_12;
  mediump vec4 encnorm_13;
  mediump float vertLerp_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD6.zy * _DetailScale);
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zx * _DetailScale);
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.xy * _DetailScale);
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  highp float tmpvar_37;
  tmpvar_37 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_14 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailVertTex, tmpvar_34);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailTex, tmpvar_31);
  mediump vec4 tmpvar_40;
  tmpvar_40 = mix (tmpvar_38, tmpvar_39, vec4(vertLerp_14));
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailVertTex, tmpvar_35);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailTex, tmpvar_32);
  mediump vec4 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41, tmpvar_42, vec4(vertLerp_14));
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailVertTex, tmpvar_36);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, tmpvar_33);
  mediump vec4 tmpvar_46;
  tmpvar_46 = mix (tmpvar_44, tmpvar_45, vec4(vertLerp_14));
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2DGradEXT (_BumpMap, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  encnorm_13 = tmpvar_47;
  mediump vec2 tmpvar_48;
  tmpvar_48 = encnorm_13.wy;
  localCoords_12 = tmpvar_48;
  highp vec2 tmpvar_49;
  tmpvar_49 = (localCoords_12 - vec2(0.5, 0.5));
  localCoords_12.x = (tmpvar_49.x * 0.25);
  localCoords_12.y = (tmpvar_49.y * 0.5);
  uv_16.x = (uv_16.x - 0.5);
  highp vec2 tmpvar_50;
  tmpvar_50 = (uv_16 + localCoords_12);
  uv_16 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = cos((6.28319 * tmpvar_50.x));
  norm_11.z = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = sin((6.28319 * tmpvar_50.x));
  norm_11.x = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = cos((3.14159 * tmpvar_50.y));
  norm_11.y = tmpvar_53;
  mediump vec3 tmpvar_54;
  tmpvar_54 = -(norm_11);
  norm_11 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_56;
  tmpvar_56 = mix (tmpvar_46, tmpvar_40, tmpvar_55.xxxx);
  detail_10 = tmpvar_56;
  highp vec4 tmpvar_57;
  tmpvar_57 = (0.25 * (mix (detail_10, tmpvar_43, tmpvar_55.yyyy) - 0.5));
  detail_10 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_9 = tmpvar_58;
  mediump vec4 tmpvar_59;
  tmpvar_59 = mix (detail_10, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_9));
  highp vec4 tmpvar_60;
  tmpvar_60 = (xlv_TEXCOORD1 + tmpvar_59);
  color_17 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_8 = tmpvar_61;
  mediump vec4 tmpvar_62;
  tmpvar_62 = (mix (color_17, main_15, vec4(handoff_8)) * _Color);
  color_17.w = tmpvar_62.w;
  highp vec3 tmpvar_63;
  tmpvar_63 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = clamp (dot (xlv_TEXCOORD5, lightDirection_6), 0.0, 1.0);
  TNdotL_5 = tmpvar_65;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_66 = texture2D (_LightTexture0, P_67);
  highp float tmpvar_68;
  tmpvar_68 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_69;
  tmpvar_69 = texture2D (_LightTextureB0, vec2(tmpvar_68));
  highp float tmpvar_70;
  tmpvar_70 = ((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_66.w) * tmpvar_69.w);
  atten_4 = tmpvar_70;
  mediump float tmpvar_71;
  tmpvar_71 = clamp ((((_LightColor0.w * mix (TNdotL_5, clamp (dot (tmpvar_54, -(_SunDir)), 0.0, 1.0), handoff_8)) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_72;
  tmpvar_72 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_71)), 0.0, 1.0);
  light_3 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0);
  terminator_2 = tmpvar_73;
  mediump vec3 tmpvar_74;
  tmpvar_74 = (light_3 * terminator_2);
  light_3 = tmpvar_74;
  highp vec3 tmpvar_75;
  tmpvar_75 = (tmpvar_62.xyz + (_Albedo * tmpvar_74));
  color_17.xyz = tmpvar_75;
  color_17.xyz = (color_17.xyz * tmpvar_74);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 326
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 427
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 objnormal;
    highp vec4 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
};
#line 417
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 336
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 349
#line 357
#line 371
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 404
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 408
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 412
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp mat4 _Rotation;
#line 416
uniform highp mat4 _InvRotation;
#line 438
#line 463
#line 438
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 442
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    #line 446
    o.color = v.color;
    o.objnormal = v.normal;
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    #line 450
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.objnormal);
    xlv_TEXCOORD3 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereCoords);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 326
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 427
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 objnormal;
    highp vec4 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
};
#line 417
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 336
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 349
#line 357
#line 371
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 404
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 408
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 412
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp mat4 _Rotation;
#line 416
uniform highp mat4 _InvRotation;
#line 438
#line 463
#line 452
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 454
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 458
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 322
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    #line 324
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 318
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    #line 320
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 463
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    #line 467
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 471
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    highp vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    highp vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    highp vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    #line 475
    highp vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    highp vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    highp vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, (-IN.sphereCoords))) - 0.95)) + 0.5));
    #line 479
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    #line 483
    highp vec2 localCoords = encnorm.wy;
    localCoords -= vec2( 0.5);
    localCoords.x *= 0.25;
    localCoords.y *= 0.5;
    #line 487
    uv.x -= 0.5;
    uv += localCoords;
    mediump vec3 norm;
    norm.z = cos((6.28319 * uv.x));
    #line 491
    norm.x = sin((6.28319 * uv.x));
    norm.y = cos((3.14159 * uv.y));
    norm = (-norm);
    sphereNrm = abs(sphereNrm);
    #line 495
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = (0.25 * (mix( detail, detailY, vec4( sphereNrm.y)) - 0.5));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (IN.color + mix( detail.xyzw, vec4( 0.0), vec4( detailLevel)));
    #line 499
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    color = mix( color, main, vec4( handoff));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 503
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    #line 507
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * 1.0);
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    mediump float terminator = xll_saturate_f(floor((1.01 + dot( IN.sphereCoords, _SunDir))));
    #line 511
    light *= terminator;
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    color.w = 1.0;
    #line 515
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.objnormal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec4 tmpvar_3;
  tmpvar_3.x = gl_MultiTexCoord0.x;
  tmpvar_3.y = gl_MultiTexCoord0.y;
  tmpvar_3.z = gl_MultiTexCoord1.x;
  tmpvar_3.w = gl_MultiTexCoord1.y;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_3).xyz);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec3 norm_1;
  vec2 localCoords_2;
  vec2 uv_3;
  vec4 color_4;
  float r_5;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_6;
    y_over_x_6 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * r_5));
  uv_3.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_9;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_10;
    y_over_x_10 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_11;
    float x_12;
    x_12 = (y_over_x_10 * inversesqrt(((y_over_x_10 * y_over_x_10) + 1.0)));
    s_11 = (sign(x_12) * (1.5708 - (sqrt((1.0 - abs(x_12))) * (1.5708 + (abs(x_12) * (-0.214602 + (abs(x_12) * (0.0865667 + (abs(x_12) * -0.0310296)))))))));
    r_9 = s_11;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_9 = (s_11 + 3.14159);
      } else {
        r_9 = (r_9 - 3.14159);
      };
    };
  } else {
    r_9 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_13;
  tmpvar_13 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_14;
  tmpvar_14 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_15;
  tmpvar_15 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(tmpvar_13);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(tmpvar_13);
  vec4 tmpvar_17;
  tmpvar_17 = texture2DGradARB (_MainTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  float tmpvar_18;
  tmpvar_18 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec2 tmpvar_19;
  tmpvar_19 = (texture2DGradARB (_BumpMap, uv_3, tmpvar_16.xy, tmpvar_16.zw).wy - vec2(0.5, 0.5));
  localCoords_2.x = (tmpvar_19.x * 0.25);
  localCoords_2.y = (tmpvar_19.y * 0.5);
  uv_3.x = (uv_3.x - 0.5);
  vec2 tmpvar_20;
  tmpvar_20 = (uv_3 + localCoords_2);
  uv_3 = tmpvar_20;
  norm_1.z = cos((6.28319 * tmpvar_20.x));
  norm_1.x = sin((6.28319 * tmpvar_20.x));
  norm_1.y = cos((3.14159 * tmpvar_20.y));
  vec3 tmpvar_21;
  tmpvar_21 = -(norm_1);
  norm_1 = tmpvar_21;
  vec3 tmpvar_22;
  tmpvar_22 = abs(xlv_TEXCOORD6);
  float tmpvar_23;
  tmpvar_23 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  vec4 tmpvar_24;
  tmpvar_24 = (mix ((xlv_TEXCOORD1 + mix ((0.25 * (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_18)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_18)), tmpvar_22.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_18)), tmpvar_22.yyyy) - 0.5)), vec4(0.0, 0.0, 0.0, 0.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))), tmpvar_17, vec4(tmpvar_23)) * _Color);
  color_4.w = tmpvar_24.w;
  vec3 tmpvar_25;
  tmpvar_25 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * mix (clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), clamp (dot (tmpvar_21, -(_SunDir)), 0.0, 1.0), tmpvar_23)) * 4.0) * (texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3, xlv_TEXCOORD3))).w * textureCube (_LightTexture0, xlv_TEXCOORD3).w)), 0.0, 1.0))), 0.0, 1.0) * clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0));
  color_4.xyz = (tmpvar_24.xyz + (_Albedo * tmpvar_25));
  color_4.xyz = (color_4.xyz * tmpvar_25);
  color_4.w = 1.0;
  gl_FragData[0] = color_4;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 31 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord5 o5
dcl_texcoord6 o6
def c13, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
mov r1.xyz, v2
mov r1.w, c13.x
dp4 r2.z, r1, c6
dp4 r2.x, r1, c4
dp4 r2.y, r1, c5
mov r0.zw, v4.xyxy
mov r0.xy, v3
dp4 r2.w, r0, r0
rsq r1.x, r2.w
mul r0.xyz, r1.x, r0
mov o6.xyz, -r0
dp3 r0.w, r2, r2
rsq r0.w, r0.w
mul o5.xyz, r0.w, r2
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
dp4 r0.w, v0, c7
add r1.xyz, -r0, c12
dp3 r1.x, r1, r1
rsq r1.x, r1.x
mov o2, v1
dp4 o4.z, r0, c10
dp4 o4.y, r0, c9
dp4 o4.x, r0, c8
rcp o1.x, r1.x
mov o3.xyz, v2
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  highp vec3 p_2;
  p_2 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_1;
  highp vec4 tmpvar_4;
  tmpvar_4.x = _glesMultiTexCoord0.x;
  tmpvar_4.y = _glesMultiTexCoord0.y;
  tmpvar_4.z = _glesMultiTexCoord1.x;
  tmpvar_4.w = _glesMultiTexCoord1.y;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_4).xyz);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float terminator_2;
  mediump vec3 light_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float handoff_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec3 norm_10;
  highp vec2 localCoords_11;
  mediump vec4 encnorm_12;
  mediump float vertLerp_13;
  mediump vec4 main_14;
  highp vec2 uv_15;
  mediump vec4 color_16;
  highp float r_17;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_18;
    y_over_x_18 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_19;
    highp float x_20;
    x_20 = (y_over_x_18 * inversesqrt(((y_over_x_18 * y_over_x_18) + 1.0)));
    s_19 = (sign(x_20) * (1.5708 - (sqrt((1.0 - abs(x_20))) * (1.5708 + (abs(x_20) * (-0.214602 + (abs(x_20) * (0.0865667 + (abs(x_20) * -0.0310296)))))))));
    r_17 = s_19;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_17 = (s_19 + 3.14159);
      } else {
        r_17 = (r_17 - 3.14159);
      };
    };
  } else {
    r_17 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_15.x = (0.5 + (0.159155 * r_17));
  uv_15.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_21;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_22;
    y_over_x_22 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_23;
    highp float x_24;
    x_24 = (y_over_x_22 * inversesqrt(((y_over_x_22 * y_over_x_22) + 1.0)));
    s_23 = (sign(x_24) * (1.5708 - (sqrt((1.0 - abs(x_24))) * (1.5708 + (abs(x_24) * (-0.214602 + (abs(x_24) * (0.0865667 + (abs(x_24) * -0.0310296)))))))));
    r_21 = s_23;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_21 = (s_23 + 3.14159);
      } else {
        r_21 = (r_21 - 3.14159);
      };
    };
  } else {
    r_21 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_25;
  tmpvar_25 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_26;
  tmpvar_26 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_28;
  tmpvar_28.x = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_28.y = dFdx(tmpvar_25);
  tmpvar_28.z = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_28.w = dFdy(tmpvar_25);
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2DGradEXT (_MainTex, uv_15, tmpvar_28.xy, tmpvar_28.zw);
  main_14 = tmpvar_29;
  highp vec2 tmpvar_30;
  tmpvar_30 = (xlv_TEXCOORD6.zy * _DetailScale);
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD6.zx * _DetailScale);
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.xy * _DetailScale);
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  highp float tmpvar_36;
  tmpvar_36 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_13 = tmpvar_36;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_DetailVertTex, tmpvar_33);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailTex, tmpvar_30);
  mediump vec4 tmpvar_39;
  tmpvar_39 = mix (tmpvar_37, tmpvar_38, vec4(vertLerp_13));
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailVertTex, tmpvar_34);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailTex, tmpvar_31);
  mediump vec4 tmpvar_42;
  tmpvar_42 = mix (tmpvar_40, tmpvar_41, vec4(vertLerp_13));
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailVertTex, tmpvar_35);
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailTex, tmpvar_32);
  mediump vec4 tmpvar_45;
  tmpvar_45 = mix (tmpvar_43, tmpvar_44, vec4(vertLerp_13));
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2DGradEXT (_BumpMap, uv_15, tmpvar_28.xy, tmpvar_28.zw);
  encnorm_12 = tmpvar_46;
  mediump vec2 tmpvar_47;
  tmpvar_47 = encnorm_12.wy;
  localCoords_11 = tmpvar_47;
  highp vec2 tmpvar_48;
  tmpvar_48 = (localCoords_11 - vec2(0.5, 0.5));
  localCoords_11.x = (tmpvar_48.x * 0.25);
  localCoords_11.y = (tmpvar_48.y * 0.5);
  uv_15.x = (uv_15.x - 0.5);
  highp vec2 tmpvar_49;
  tmpvar_49 = (uv_15 + localCoords_11);
  uv_15 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = cos((6.28319 * tmpvar_49.x));
  norm_10.z = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = sin((6.28319 * tmpvar_49.x));
  norm_10.x = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = cos((3.14159 * tmpvar_49.y));
  norm_10.y = tmpvar_52;
  mediump vec3 tmpvar_53;
  tmpvar_53 = -(norm_10);
  norm_10 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_55;
  tmpvar_55 = mix (tmpvar_45, tmpvar_39, tmpvar_54.xxxx);
  detail_9 = tmpvar_55;
  highp vec4 tmpvar_56;
  tmpvar_56 = (0.25 * (mix (detail_9, tmpvar_42, tmpvar_54.yyyy) - 0.5));
  detail_9 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_57;
  mediump vec4 tmpvar_58;
  tmpvar_58 = mix (detail_9, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_8));
  highp vec4 tmpvar_59;
  tmpvar_59 = (xlv_TEXCOORD1 + tmpvar_58);
  color_16 = tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_7 = tmpvar_60;
  mediump vec4 tmpvar_61;
  tmpvar_61 = (mix (color_16, main_14, vec4(handoff_7)) * _Color);
  color_16.w = tmpvar_61.w;
  highp vec3 tmpvar_62;
  tmpvar_62 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp float tmpvar_66;
  tmpvar_66 = (texture2D (_LightTextureB0, vec2(tmpvar_65)).w * textureCube (_LightTexture0, xlv_TEXCOORD3).w);
  mediump float tmpvar_67;
  tmpvar_67 = clamp ((((_LightColor0.w * mix (TNdotL_4, clamp (dot (tmpvar_53, -(_SunDir)), 0.0, 1.0), handoff_7)) * 4.0) * tmpvar_66), 0.0, 1.0);
  highp vec3 tmpvar_68;
  tmpvar_68 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_67)), 0.0, 1.0);
  light_3 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0);
  terminator_2 = tmpvar_69;
  mediump vec3 tmpvar_70;
  tmpvar_70 = (light_3 * terminator_2);
  light_3 = tmpvar_70;
  highp vec3 tmpvar_71;
  tmpvar_71 = (tmpvar_61.xyz + (_Albedo * tmpvar_70));
  color_16.xyz = tmpvar_71;
  color_16.xyz = (color_16.xyz * tmpvar_70);
  color_16.w = 1.0;
  tmpvar_1 = color_16;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  highp vec3 p_2;
  p_2 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_1;
  highp vec4 tmpvar_4;
  tmpvar_4.x = _glesMultiTexCoord0.x;
  tmpvar_4.y = _glesMultiTexCoord0.y;
  tmpvar_4.z = _glesMultiTexCoord1.x;
  tmpvar_4.w = _glesMultiTexCoord1.y;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_4).xyz);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float terminator_2;
  mediump vec3 light_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float handoff_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec3 norm_10;
  highp vec2 localCoords_11;
  mediump vec4 encnorm_12;
  mediump float vertLerp_13;
  mediump vec4 main_14;
  highp vec2 uv_15;
  mediump vec4 color_16;
  highp float r_17;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_18;
    y_over_x_18 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_19;
    highp float x_20;
    x_20 = (y_over_x_18 * inversesqrt(((y_over_x_18 * y_over_x_18) + 1.0)));
    s_19 = (sign(x_20) * (1.5708 - (sqrt((1.0 - abs(x_20))) * (1.5708 + (abs(x_20) * (-0.214602 + (abs(x_20) * (0.0865667 + (abs(x_20) * -0.0310296)))))))));
    r_17 = s_19;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_17 = (s_19 + 3.14159);
      } else {
        r_17 = (r_17 - 3.14159);
      };
    };
  } else {
    r_17 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_15.x = (0.5 + (0.159155 * r_17));
  uv_15.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_21;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_22;
    y_over_x_22 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_23;
    highp float x_24;
    x_24 = (y_over_x_22 * inversesqrt(((y_over_x_22 * y_over_x_22) + 1.0)));
    s_23 = (sign(x_24) * (1.5708 - (sqrt((1.0 - abs(x_24))) * (1.5708 + (abs(x_24) * (-0.214602 + (abs(x_24) * (0.0865667 + (abs(x_24) * -0.0310296)))))))));
    r_21 = s_23;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_21 = (s_23 + 3.14159);
      } else {
        r_21 = (r_21 - 3.14159);
      };
    };
  } else {
    r_21 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_25;
  tmpvar_25 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_26;
  tmpvar_26 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_28;
  tmpvar_28.x = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_28.y = dFdx(tmpvar_25);
  tmpvar_28.z = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_28.w = dFdy(tmpvar_25);
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2DGradEXT (_MainTex, uv_15, tmpvar_28.xy, tmpvar_28.zw);
  main_14 = tmpvar_29;
  highp vec2 tmpvar_30;
  tmpvar_30 = (xlv_TEXCOORD6.zy * _DetailScale);
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD6.zx * _DetailScale);
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.xy * _DetailScale);
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  highp float tmpvar_36;
  tmpvar_36 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_13 = tmpvar_36;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_DetailVertTex, tmpvar_33);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailTex, tmpvar_30);
  mediump vec4 tmpvar_39;
  tmpvar_39 = mix (tmpvar_37, tmpvar_38, vec4(vertLerp_13));
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailVertTex, tmpvar_34);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailTex, tmpvar_31);
  mediump vec4 tmpvar_42;
  tmpvar_42 = mix (tmpvar_40, tmpvar_41, vec4(vertLerp_13));
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailVertTex, tmpvar_35);
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailTex, tmpvar_32);
  mediump vec4 tmpvar_45;
  tmpvar_45 = mix (tmpvar_43, tmpvar_44, vec4(vertLerp_13));
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2DGradEXT (_BumpMap, uv_15, tmpvar_28.xy, tmpvar_28.zw);
  encnorm_12 = tmpvar_46;
  mediump vec2 tmpvar_47;
  tmpvar_47 = encnorm_12.wy;
  localCoords_11 = tmpvar_47;
  highp vec2 tmpvar_48;
  tmpvar_48 = (localCoords_11 - vec2(0.5, 0.5));
  localCoords_11.x = (tmpvar_48.x * 0.25);
  localCoords_11.y = (tmpvar_48.y * 0.5);
  uv_15.x = (uv_15.x - 0.5);
  highp vec2 tmpvar_49;
  tmpvar_49 = (uv_15 + localCoords_11);
  uv_15 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = cos((6.28319 * tmpvar_49.x));
  norm_10.z = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = sin((6.28319 * tmpvar_49.x));
  norm_10.x = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = cos((3.14159 * tmpvar_49.y));
  norm_10.y = tmpvar_52;
  mediump vec3 tmpvar_53;
  tmpvar_53 = -(norm_10);
  norm_10 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_55;
  tmpvar_55 = mix (tmpvar_45, tmpvar_39, tmpvar_54.xxxx);
  detail_9 = tmpvar_55;
  highp vec4 tmpvar_56;
  tmpvar_56 = (0.25 * (mix (detail_9, tmpvar_42, tmpvar_54.yyyy) - 0.5));
  detail_9 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_57;
  mediump vec4 tmpvar_58;
  tmpvar_58 = mix (detail_9, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_8));
  highp vec4 tmpvar_59;
  tmpvar_59 = (xlv_TEXCOORD1 + tmpvar_58);
  color_16 = tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_7 = tmpvar_60;
  mediump vec4 tmpvar_61;
  tmpvar_61 = (mix (color_16, main_14, vec4(handoff_7)) * _Color);
  color_16.w = tmpvar_61.w;
  highp vec3 tmpvar_62;
  tmpvar_62 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp float tmpvar_66;
  tmpvar_66 = (texture2D (_LightTextureB0, vec2(tmpvar_65)).w * textureCube (_LightTexture0, xlv_TEXCOORD3).w);
  mediump float tmpvar_67;
  tmpvar_67 = clamp ((((_LightColor0.w * mix (TNdotL_4, clamp (dot (tmpvar_53, -(_SunDir)), 0.0, 1.0), handoff_7)) * 4.0) * tmpvar_66), 0.0, 1.0);
  highp vec3 tmpvar_68;
  tmpvar_68 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_67)), 0.0, 1.0);
  light_3 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0);
  terminator_2 = tmpvar_69;
  mediump vec3 tmpvar_70;
  tmpvar_70 = (light_3 * terminator_2);
  light_3 = tmpvar_70;
  highp vec3 tmpvar_71;
  tmpvar_71 = (tmpvar_61.xyz + (_Albedo * tmpvar_70));
  color_16.xyz = tmpvar_71;
  color_16.xyz = (color_16.xyz * tmpvar_70);
  color_16.w = 1.0;
  tmpvar_1 = color_16;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 318
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 419
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 objnormal;
    highp vec3 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
};
#line 409
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 328
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 341
#line 349
#line 363
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 396
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 400
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 404
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp mat4 _Rotation;
#line 408
uniform highp mat4 _InvRotation;
#line 430
#line 455
#line 430
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 434
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    #line 438
    o.color = v.color;
    o.objnormal = v.normal;
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    #line 442
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.objnormal);
    xlv_TEXCOORD3 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereCoords);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 318
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 419
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 objnormal;
    highp vec3 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
};
#line 409
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 328
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 341
#line 349
#line 363
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 396
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 400
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 404
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp mat4 _Rotation;
#line 408
uniform highp mat4 _InvRotation;
#line 430
#line 455
#line 444
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 446
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 450
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 455
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    #line 459
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 463
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    highp vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    highp vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    highp vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    #line 467
    highp vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    highp vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    highp vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, (-IN.sphereCoords))) - 0.95)) + 0.5));
    #line 471
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    #line 475
    highp vec2 localCoords = encnorm.wy;
    localCoords -= vec2( 0.5);
    localCoords.x *= 0.25;
    localCoords.y *= 0.5;
    #line 479
    uv.x -= 0.5;
    uv += localCoords;
    mediump vec3 norm;
    norm.z = cos((6.28319 * uv.x));
    #line 483
    norm.x = sin((6.28319 * uv.x));
    norm.y = cos((3.14159 * uv.y));
    norm = (-norm);
    sphereNrm = abs(sphereNrm);
    #line 487
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = (0.25 * (mix( detail, detailY, vec4( sphereNrm.y)) - 0.5));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (IN.color + mix( detail.xyzw, vec4( 0.0), vec4( detailLevel)));
    #line 491
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    color = mix( color, main, vec4( handoff));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 495
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    #line 499
    lowp float atten = ((texture( _LightTextureB0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * texture( _LightTexture0, IN._LightCoord).w) * 1.0);
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    mediump float terminator = xll_saturate_f(floor((1.01 + dot( IN.sphereCoords, _SunDir))));
    #line 503
    light *= terminator;
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    color.w = 1.0;
    #line 507
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.objnormal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec2 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec4 tmpvar_3;
  tmpvar_3.x = gl_MultiTexCoord0.x;
  tmpvar_3.y = gl_MultiTexCoord0.y;
  tmpvar_3.z = gl_MultiTexCoord1.x;
  tmpvar_3.w = gl_MultiTexCoord1.y;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xy;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_3).xyz);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec2 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec3 norm_1;
  vec2 localCoords_2;
  vec2 uv_3;
  vec4 color_4;
  float r_5;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_6;
    y_over_x_6 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * r_5));
  uv_3.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_9;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_10;
    y_over_x_10 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_11;
    float x_12;
    x_12 = (y_over_x_10 * inversesqrt(((y_over_x_10 * y_over_x_10) + 1.0)));
    s_11 = (sign(x_12) * (1.5708 - (sqrt((1.0 - abs(x_12))) * (1.5708 + (abs(x_12) * (-0.214602 + (abs(x_12) * (0.0865667 + (abs(x_12) * -0.0310296)))))))));
    r_9 = s_11;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_9 = (s_11 + 3.14159);
      } else {
        r_9 = (r_9 - 3.14159);
      };
    };
  } else {
    r_9 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_13;
  tmpvar_13 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_14;
  tmpvar_14 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_15;
  tmpvar_15 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(tmpvar_13);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(tmpvar_13);
  vec4 tmpvar_17;
  tmpvar_17 = texture2DGradARB (_MainTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  float tmpvar_18;
  tmpvar_18 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec2 tmpvar_19;
  tmpvar_19 = (texture2DGradARB (_BumpMap, uv_3, tmpvar_16.xy, tmpvar_16.zw).wy - vec2(0.5, 0.5));
  localCoords_2.x = (tmpvar_19.x * 0.25);
  localCoords_2.y = (tmpvar_19.y * 0.5);
  uv_3.x = (uv_3.x - 0.5);
  vec2 tmpvar_20;
  tmpvar_20 = (uv_3 + localCoords_2);
  uv_3 = tmpvar_20;
  norm_1.z = cos((6.28319 * tmpvar_20.x));
  norm_1.x = sin((6.28319 * tmpvar_20.x));
  norm_1.y = cos((3.14159 * tmpvar_20.y));
  vec3 tmpvar_21;
  tmpvar_21 = -(norm_1);
  norm_1 = tmpvar_21;
  vec3 tmpvar_22;
  tmpvar_22 = abs(xlv_TEXCOORD6);
  float tmpvar_23;
  tmpvar_23 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  vec4 tmpvar_24;
  tmpvar_24 = (mix ((xlv_TEXCOORD1 + mix ((0.25 * (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_18)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_18)), tmpvar_22.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_18)), tmpvar_22.yyyy) - 0.5)), vec4(0.0, 0.0, 0.0, 0.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))), tmpvar_17, vec4(tmpvar_23)) * _Color);
  color_4.w = tmpvar_24.w;
  vec3 tmpvar_25;
  tmpvar_25 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * mix (clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), clamp (dot (tmpvar_21, -(_SunDir)), 0.0, 1.0), tmpvar_23)) * 4.0) * texture2D (_LightTexture0, xlv_TEXCOORD3).w), 0.0, 1.0))), 0.0, 1.0) * clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0));
  color_4.xyz = (tmpvar_24.xyz + (_Albedo * tmpvar_25));
  color_4.xyz = (color_4.xyz * tmpvar_25);
  color_4.w = 1.0;
  gl_FragData[0] = color_4;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 30 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord5 o5
dcl_texcoord6 o6
def c13, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
mov r1.xyz, v2
mov r1.w, c13.x
dp4 r2.z, r1, c6
dp4 r2.x, r1, c4
dp4 r2.y, r1, c5
mov r0.zw, v4.xyxy
mov r0.xy, v3
dp4 r2.w, r0, r0
rsq r1.x, r2.w
mul r0.xyz, r1.x, r0
mov o6.xyz, -r0
dp3 r0.w, r2, r2
rsq r0.w, r0.w
mul o5.xyz, r0.w, r2
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
dp4 r0.w, v0, c7
add r1.xyz, -r0, c12
dp3 r1.x, r1, r1
rsq r1.x, r1.x
mov o2, v1
dp4 o4.y, r0, c9
dp4 o4.x, r0, c8
rcp o1.x, r1.x
mov o3.xyz, v2
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  highp vec3 p_2;
  p_2 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_1;
  highp vec4 tmpvar_4;
  tmpvar_4.x = _glesMultiTexCoord0.x;
  tmpvar_4.y = _glesMultiTexCoord0.y;
  tmpvar_4.z = _glesMultiTexCoord1.x;
  tmpvar_4.w = _glesMultiTexCoord1.y;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_4).xyz);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float terminator_2;
  mediump vec3 light_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float handoff_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec3 norm_10;
  highp vec2 localCoords_11;
  mediump vec4 encnorm_12;
  mediump float vertLerp_13;
  mediump vec4 main_14;
  highp vec2 uv_15;
  mediump vec4 color_16;
  highp float r_17;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_18;
    y_over_x_18 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_19;
    highp float x_20;
    x_20 = (y_over_x_18 * inversesqrt(((y_over_x_18 * y_over_x_18) + 1.0)));
    s_19 = (sign(x_20) * (1.5708 - (sqrt((1.0 - abs(x_20))) * (1.5708 + (abs(x_20) * (-0.214602 + (abs(x_20) * (0.0865667 + (abs(x_20) * -0.0310296)))))))));
    r_17 = s_19;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_17 = (s_19 + 3.14159);
      } else {
        r_17 = (r_17 - 3.14159);
      };
    };
  } else {
    r_17 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_15.x = (0.5 + (0.159155 * r_17));
  uv_15.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_21;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_22;
    y_over_x_22 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_23;
    highp float x_24;
    x_24 = (y_over_x_22 * inversesqrt(((y_over_x_22 * y_over_x_22) + 1.0)));
    s_23 = (sign(x_24) * (1.5708 - (sqrt((1.0 - abs(x_24))) * (1.5708 + (abs(x_24) * (-0.214602 + (abs(x_24) * (0.0865667 + (abs(x_24) * -0.0310296)))))))));
    r_21 = s_23;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_21 = (s_23 + 3.14159);
      } else {
        r_21 = (r_21 - 3.14159);
      };
    };
  } else {
    r_21 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_25;
  tmpvar_25 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_26;
  tmpvar_26 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_28;
  tmpvar_28.x = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_28.y = dFdx(tmpvar_25);
  tmpvar_28.z = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_28.w = dFdy(tmpvar_25);
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2DGradEXT (_MainTex, uv_15, tmpvar_28.xy, tmpvar_28.zw);
  main_14 = tmpvar_29;
  highp vec2 tmpvar_30;
  tmpvar_30 = (xlv_TEXCOORD6.zy * _DetailScale);
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD6.zx * _DetailScale);
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.xy * _DetailScale);
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  highp float tmpvar_36;
  tmpvar_36 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_13 = tmpvar_36;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_DetailVertTex, tmpvar_33);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailTex, tmpvar_30);
  mediump vec4 tmpvar_39;
  tmpvar_39 = mix (tmpvar_37, tmpvar_38, vec4(vertLerp_13));
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailVertTex, tmpvar_34);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailTex, tmpvar_31);
  mediump vec4 tmpvar_42;
  tmpvar_42 = mix (tmpvar_40, tmpvar_41, vec4(vertLerp_13));
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailVertTex, tmpvar_35);
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailTex, tmpvar_32);
  mediump vec4 tmpvar_45;
  tmpvar_45 = mix (tmpvar_43, tmpvar_44, vec4(vertLerp_13));
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2DGradEXT (_BumpMap, uv_15, tmpvar_28.xy, tmpvar_28.zw);
  encnorm_12 = tmpvar_46;
  mediump vec2 tmpvar_47;
  tmpvar_47 = encnorm_12.wy;
  localCoords_11 = tmpvar_47;
  highp vec2 tmpvar_48;
  tmpvar_48 = (localCoords_11 - vec2(0.5, 0.5));
  localCoords_11.x = (tmpvar_48.x * 0.25);
  localCoords_11.y = (tmpvar_48.y * 0.5);
  uv_15.x = (uv_15.x - 0.5);
  highp vec2 tmpvar_49;
  tmpvar_49 = (uv_15 + localCoords_11);
  uv_15 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = cos((6.28319 * tmpvar_49.x));
  norm_10.z = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = sin((6.28319 * tmpvar_49.x));
  norm_10.x = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = cos((3.14159 * tmpvar_49.y));
  norm_10.y = tmpvar_52;
  mediump vec3 tmpvar_53;
  tmpvar_53 = -(norm_10);
  norm_10 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_55;
  tmpvar_55 = mix (tmpvar_45, tmpvar_39, tmpvar_54.xxxx);
  detail_9 = tmpvar_55;
  highp vec4 tmpvar_56;
  tmpvar_56 = (0.25 * (mix (detail_9, tmpvar_42, tmpvar_54.yyyy) - 0.5));
  detail_9 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_57;
  mediump vec4 tmpvar_58;
  tmpvar_58 = mix (detail_9, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_8));
  highp vec4 tmpvar_59;
  tmpvar_59 = (xlv_TEXCOORD1 + tmpvar_58);
  color_16 = tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_7 = tmpvar_60;
  mediump vec4 tmpvar_61;
  tmpvar_61 = (mix (color_16, main_14, vec4(handoff_7)) * _Color);
  color_16.w = tmpvar_61.w;
  highp vec3 tmpvar_62;
  tmpvar_62 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_62;
  lowp vec3 tmpvar_63;
  tmpvar_63 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_64;
  lowp float tmpvar_65;
  tmpvar_65 = texture2D (_LightTexture0, xlv_TEXCOORD3).w;
  mediump float tmpvar_66;
  tmpvar_66 = clamp ((((_LightColor0.w * mix (TNdotL_4, clamp (dot (tmpvar_53, -(_SunDir)), 0.0, 1.0), handoff_7)) * 4.0) * tmpvar_65), 0.0, 1.0);
  highp vec3 tmpvar_67;
  tmpvar_67 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_66)), 0.0, 1.0);
  light_3 = tmpvar_67;
  highp float tmpvar_68;
  tmpvar_68 = clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0);
  terminator_2 = tmpvar_68;
  mediump vec3 tmpvar_69;
  tmpvar_69 = (light_3 * terminator_2);
  light_3 = tmpvar_69;
  highp vec3 tmpvar_70;
  tmpvar_70 = (tmpvar_61.xyz + (_Albedo * tmpvar_69));
  color_16.xyz = tmpvar_70;
  color_16.xyz = (color_16.xyz * tmpvar_69);
  color_16.w = 1.0;
  tmpvar_1 = color_16;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  highp vec3 p_2;
  p_2 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_1;
  highp vec4 tmpvar_4;
  tmpvar_4.x = _glesMultiTexCoord0.x;
  tmpvar_4.y = _glesMultiTexCoord0.y;
  tmpvar_4.z = _glesMultiTexCoord1.x;
  tmpvar_4.w = _glesMultiTexCoord1.y;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_4).xyz);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float terminator_2;
  mediump vec3 light_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float handoff_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec3 norm_10;
  highp vec2 localCoords_11;
  mediump vec4 encnorm_12;
  mediump float vertLerp_13;
  mediump vec4 main_14;
  highp vec2 uv_15;
  mediump vec4 color_16;
  highp float r_17;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_18;
    y_over_x_18 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_19;
    highp float x_20;
    x_20 = (y_over_x_18 * inversesqrt(((y_over_x_18 * y_over_x_18) + 1.0)));
    s_19 = (sign(x_20) * (1.5708 - (sqrt((1.0 - abs(x_20))) * (1.5708 + (abs(x_20) * (-0.214602 + (abs(x_20) * (0.0865667 + (abs(x_20) * -0.0310296)))))))));
    r_17 = s_19;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_17 = (s_19 + 3.14159);
      } else {
        r_17 = (r_17 - 3.14159);
      };
    };
  } else {
    r_17 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_15.x = (0.5 + (0.159155 * r_17));
  uv_15.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_21;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_22;
    y_over_x_22 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_23;
    highp float x_24;
    x_24 = (y_over_x_22 * inversesqrt(((y_over_x_22 * y_over_x_22) + 1.0)));
    s_23 = (sign(x_24) * (1.5708 - (sqrt((1.0 - abs(x_24))) * (1.5708 + (abs(x_24) * (-0.214602 + (abs(x_24) * (0.0865667 + (abs(x_24) * -0.0310296)))))))));
    r_21 = s_23;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_21 = (s_23 + 3.14159);
      } else {
        r_21 = (r_21 - 3.14159);
      };
    };
  } else {
    r_21 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_25;
  tmpvar_25 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_26;
  tmpvar_26 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_28;
  tmpvar_28.x = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_28.y = dFdx(tmpvar_25);
  tmpvar_28.z = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_28.w = dFdy(tmpvar_25);
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2DGradEXT (_MainTex, uv_15, tmpvar_28.xy, tmpvar_28.zw);
  main_14 = tmpvar_29;
  highp vec2 tmpvar_30;
  tmpvar_30 = (xlv_TEXCOORD6.zy * _DetailScale);
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD6.zx * _DetailScale);
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.xy * _DetailScale);
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  highp float tmpvar_36;
  tmpvar_36 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_13 = tmpvar_36;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_DetailVertTex, tmpvar_33);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailTex, tmpvar_30);
  mediump vec4 tmpvar_39;
  tmpvar_39 = mix (tmpvar_37, tmpvar_38, vec4(vertLerp_13));
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailVertTex, tmpvar_34);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailTex, tmpvar_31);
  mediump vec4 tmpvar_42;
  tmpvar_42 = mix (tmpvar_40, tmpvar_41, vec4(vertLerp_13));
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailVertTex, tmpvar_35);
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailTex, tmpvar_32);
  mediump vec4 tmpvar_45;
  tmpvar_45 = mix (tmpvar_43, tmpvar_44, vec4(vertLerp_13));
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2DGradEXT (_BumpMap, uv_15, tmpvar_28.xy, tmpvar_28.zw);
  encnorm_12 = tmpvar_46;
  mediump vec2 tmpvar_47;
  tmpvar_47 = encnorm_12.wy;
  localCoords_11 = tmpvar_47;
  highp vec2 tmpvar_48;
  tmpvar_48 = (localCoords_11 - vec2(0.5, 0.5));
  localCoords_11.x = (tmpvar_48.x * 0.25);
  localCoords_11.y = (tmpvar_48.y * 0.5);
  uv_15.x = (uv_15.x - 0.5);
  highp vec2 tmpvar_49;
  tmpvar_49 = (uv_15 + localCoords_11);
  uv_15 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = cos((6.28319 * tmpvar_49.x));
  norm_10.z = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = sin((6.28319 * tmpvar_49.x));
  norm_10.x = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = cos((3.14159 * tmpvar_49.y));
  norm_10.y = tmpvar_52;
  mediump vec3 tmpvar_53;
  tmpvar_53 = -(norm_10);
  norm_10 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_55;
  tmpvar_55 = mix (tmpvar_45, tmpvar_39, tmpvar_54.xxxx);
  detail_9 = tmpvar_55;
  highp vec4 tmpvar_56;
  tmpvar_56 = (0.25 * (mix (detail_9, tmpvar_42, tmpvar_54.yyyy) - 0.5));
  detail_9 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_57;
  mediump vec4 tmpvar_58;
  tmpvar_58 = mix (detail_9, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_8));
  highp vec4 tmpvar_59;
  tmpvar_59 = (xlv_TEXCOORD1 + tmpvar_58);
  color_16 = tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_7 = tmpvar_60;
  mediump vec4 tmpvar_61;
  tmpvar_61 = (mix (color_16, main_14, vec4(handoff_7)) * _Color);
  color_16.w = tmpvar_61.w;
  highp vec3 tmpvar_62;
  tmpvar_62 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_62;
  lowp vec3 tmpvar_63;
  tmpvar_63 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_64;
  lowp float tmpvar_65;
  tmpvar_65 = texture2D (_LightTexture0, xlv_TEXCOORD3).w;
  mediump float tmpvar_66;
  tmpvar_66 = clamp ((((_LightColor0.w * mix (TNdotL_4, clamp (dot (tmpvar_53, -(_SunDir)), 0.0, 1.0), handoff_7)) * 4.0) * tmpvar_65), 0.0, 1.0);
  highp vec3 tmpvar_67;
  tmpvar_67 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_66)), 0.0, 1.0);
  light_3 = tmpvar_67;
  highp float tmpvar_68;
  tmpvar_68 = clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0);
  terminator_2 = tmpvar_68;
  mediump vec3 tmpvar_69;
  tmpvar_69 = (light_3 * terminator_2);
  light_3 = tmpvar_69;
  highp vec3 tmpvar_70;
  tmpvar_70 = (tmpvar_61.xyz + (_Albedo * tmpvar_69));
  color_16.xyz = tmpvar_70;
  color_16.xyz = (color_16.xyz * tmpvar_69);
  color_16.w = 1.0;
  tmpvar_1 = color_16;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 418
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 objnormal;
    highp vec2 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
};
#line 408
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 395
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 399
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 403
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp mat4 _Rotation;
#line 407
uniform highp mat4 _InvRotation;
#line 429
#line 454
#line 429
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 433
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    #line 437
    o.color = v.color;
    o.objnormal = v.normal;
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xy;
    #line 441
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec2 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.objnormal);
    xlv_TEXCOORD3 = vec2(xl_retval._LightCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereCoords);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 418
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 objnormal;
    highp vec2 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
};
#line 408
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 395
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 399
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 403
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp mat4 _Rotation;
#line 407
uniform highp mat4 _InvRotation;
#line 429
#line 454
#line 443
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 445
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 449
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 454
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    #line 458
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 462
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    highp vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    highp vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    highp vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    #line 466
    highp vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    highp vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    highp vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, (-IN.sphereCoords))) - 0.95)) + 0.5));
    #line 470
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    #line 474
    highp vec2 localCoords = encnorm.wy;
    localCoords -= vec2( 0.5);
    localCoords.x *= 0.25;
    localCoords.y *= 0.5;
    #line 478
    uv.x -= 0.5;
    uv += localCoords;
    mediump vec3 norm;
    norm.z = cos((6.28319 * uv.x));
    #line 482
    norm.x = sin((6.28319 * uv.x));
    norm.y = cos((3.14159 * uv.y));
    norm = (-norm);
    sphereNrm = abs(sphereNrm);
    #line 486
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = (0.25 * (mix( detail, detailY, vec4( sphereNrm.y)) - 0.5));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (IN.color + mix( detail.xyzw, vec4( 0.0), vec4( detailLevel)));
    #line 490
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    color = mix( color, main, vec4( handoff));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 494
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    #line 498
    lowp float atten = (texture( _LightTexture0, IN._LightCoord).w * 1.0);
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    mediump float terminator = xll_saturate_f(floor((1.01 + dot( IN.sphereCoords, _SunDir))));
    #line 502
    light *= terminator;
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    color.w = 1.0;
    #line 506
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec2 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.objnormal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec2(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform mat4 unity_World2Shadow[4];
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec4 tmpvar_3;
  tmpvar_3.x = gl_MultiTexCoord0.x;
  tmpvar_3.y = gl_MultiTexCoord0.y;
  tmpvar_3.z = gl_MultiTexCoord1.x;
  tmpvar_3.w = gl_MultiTexCoord1.y;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * gl_Vertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_3).xyz);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec3 norm_1;
  vec2 localCoords_2;
  vec2 uv_3;
  vec4 color_4;
  float r_5;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_6;
    y_over_x_6 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * r_5));
  uv_3.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_9;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_10;
    y_over_x_10 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_11;
    float x_12;
    x_12 = (y_over_x_10 * inversesqrt(((y_over_x_10 * y_over_x_10) + 1.0)));
    s_11 = (sign(x_12) * (1.5708 - (sqrt((1.0 - abs(x_12))) * (1.5708 + (abs(x_12) * (-0.214602 + (abs(x_12) * (0.0865667 + (abs(x_12) * -0.0310296)))))))));
    r_9 = s_11;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_9 = (s_11 + 3.14159);
      } else {
        r_9 = (r_9 - 3.14159);
      };
    };
  } else {
    r_9 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_13;
  tmpvar_13 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_14;
  tmpvar_14 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_15;
  tmpvar_15 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(tmpvar_13);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(tmpvar_13);
  vec4 tmpvar_17;
  tmpvar_17 = texture2DGradARB (_MainTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  float tmpvar_18;
  tmpvar_18 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec2 tmpvar_19;
  tmpvar_19 = (texture2DGradARB (_BumpMap, uv_3, tmpvar_16.xy, tmpvar_16.zw).wy - vec2(0.5, 0.5));
  localCoords_2.x = (tmpvar_19.x * 0.25);
  localCoords_2.y = (tmpvar_19.y * 0.5);
  uv_3.x = (uv_3.x - 0.5);
  vec2 tmpvar_20;
  tmpvar_20 = (uv_3 + localCoords_2);
  uv_3 = tmpvar_20;
  norm_1.z = cos((6.28319 * tmpvar_20.x));
  norm_1.x = sin((6.28319 * tmpvar_20.x));
  norm_1.y = cos((3.14159 * tmpvar_20.y));
  vec3 tmpvar_21;
  tmpvar_21 = -(norm_1);
  norm_1 = tmpvar_21;
  vec3 tmpvar_22;
  tmpvar_22 = abs(xlv_TEXCOORD6);
  float tmpvar_23;
  tmpvar_23 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  vec4 tmpvar_24;
  tmpvar_24 = (mix ((xlv_TEXCOORD1 + mix ((0.25 * (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_18)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_18)), tmpvar_22.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_18)), tmpvar_22.yyyy) - 0.5)), vec4(0.0, 0.0, 0.0, 0.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))), tmpvar_17, vec4(tmpvar_23)) * _Color);
  color_4 = tmpvar_24;
  float tmpvar_25;
  tmpvar_25 = mix (clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), clamp (dot (tmpvar_21, -(_SunDir)), 0.0, 1.0), tmpvar_23);
  vec4 tmpvar_26;
  tmpvar_26 = texture2D (_LightTexture0, ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5));
  vec4 tmpvar_27;
  tmpvar_27 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz)));
  vec4 tmpvar_28;
  tmpvar_28 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD4);
  float tmpvar_29;
  if ((tmpvar_28.x < (xlv_TEXCOORD4.z / xlv_TEXCOORD4.w))) {
    tmpvar_29 = _LightShadowData.x;
  } else {
    tmpvar_29 = 1.0;
  };
  vec3 tmpvar_30;
  tmpvar_30 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_25) * 4.0) * (((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_26.w) * tmpvar_27.w) * tmpvar_29)), 0.0, 1.0))), 0.0, 1.0) * clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0));
  color_4.xyz = (tmpvar_24.xyz + (_Albedo * tmpvar_30));
  color_4.xyz = (color_4.xyz * tmpvar_30);
  color_4.w = 1.0;
  gl_FragData[0] = color_4;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Matrix 4 [unity_World2Shadow0]
Matrix 8 [_Object2World]
Matrix 12 [_LightMatrix0]
"vs_3_0
; 36 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
def c17, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
mov r1.xyz, v2
mov r1.w, c17.x
dp4 r2.z, r1, c10
dp4 r2.x, r1, c8
dp4 r2.y, r1, c9
mov r0.zw, v4.xyxy
mov r0.xy, v3
dp4 r2.w, r0, r0
rsq r1.x, r2.w
mul r0.xyz, r1.x, r0
mov o7.xyz, -r0
dp3 r0.w, r2, r2
rsq r0.w, r0.w
mul o6.xyz, r0.w, r2
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
dp4 r0.w, v0, c11
add r1.xyz, -r0, c16
dp3 r1.x, r1, r1
rsq r1.x, r1.x
mov o2, v1
dp4 o4.w, r0, c15
dp4 o4.z, r0, c14
dp4 o4.y, r0, c13
dp4 o4.x, r0, c12
dp4 o5.w, r0, c7
dp4 o5.z, r0, c6
dp4 o5.y, r0, c5
dp4 o5.x, r0, c4
rcp o1.x, r1.x
mov o3.xyz, v2
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  highp vec3 p_2;
  p_2 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_1;
  highp vec4 tmpvar_4;
  tmpvar_4.x = _glesMultiTexCoord0.x;
  tmpvar_4.y = _glesMultiTexCoord0.y;
  tmpvar_4.z = _glesMultiTexCoord1.x;
  tmpvar_4.w = _glesMultiTexCoord1.y;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_4).xyz);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float terminator_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float TNdotL_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump float handoff_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec3 norm_11;
  highp vec2 localCoords_12;
  mediump vec4 encnorm_13;
  mediump float vertLerp_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD6.zy * _DetailScale);
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zx * _DetailScale);
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.xy * _DetailScale);
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  highp float tmpvar_37;
  tmpvar_37 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_14 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailVertTex, tmpvar_34);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailTex, tmpvar_31);
  mediump vec4 tmpvar_40;
  tmpvar_40 = mix (tmpvar_38, tmpvar_39, vec4(vertLerp_14));
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailVertTex, tmpvar_35);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailTex, tmpvar_32);
  mediump vec4 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41, tmpvar_42, vec4(vertLerp_14));
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailVertTex, tmpvar_36);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, tmpvar_33);
  mediump vec4 tmpvar_46;
  tmpvar_46 = mix (tmpvar_44, tmpvar_45, vec4(vertLerp_14));
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2DGradEXT (_BumpMap, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  encnorm_13 = tmpvar_47;
  mediump vec2 tmpvar_48;
  tmpvar_48 = encnorm_13.wy;
  localCoords_12 = tmpvar_48;
  highp vec2 tmpvar_49;
  tmpvar_49 = (localCoords_12 - vec2(0.5, 0.5));
  localCoords_12.x = (tmpvar_49.x * 0.25);
  localCoords_12.y = (tmpvar_49.y * 0.5);
  uv_16.x = (uv_16.x - 0.5);
  highp vec2 tmpvar_50;
  tmpvar_50 = (uv_16 + localCoords_12);
  uv_16 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = cos((6.28319 * tmpvar_50.x));
  norm_11.z = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = sin((6.28319 * tmpvar_50.x));
  norm_11.x = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = cos((3.14159 * tmpvar_50.y));
  norm_11.y = tmpvar_53;
  mediump vec3 tmpvar_54;
  tmpvar_54 = -(norm_11);
  norm_11 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_56;
  tmpvar_56 = mix (tmpvar_46, tmpvar_40, tmpvar_55.xxxx);
  detail_10 = tmpvar_56;
  highp vec4 tmpvar_57;
  tmpvar_57 = (0.25 * (mix (detail_10, tmpvar_43, tmpvar_55.yyyy) - 0.5));
  detail_10 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_9 = tmpvar_58;
  mediump vec4 tmpvar_59;
  tmpvar_59 = mix (detail_10, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_9));
  highp vec4 tmpvar_60;
  tmpvar_60 = (xlv_TEXCOORD1 + tmpvar_59);
  color_17 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_8 = tmpvar_61;
  mediump vec4 tmpvar_62;
  tmpvar_62 = (mix (color_17, main_15, vec4(handoff_8)) * _Color);
  color_17 = tmpvar_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = clamp (dot (xlv_TEXCOORD5, lightDirection_6), 0.0, 1.0);
  TNdotL_5 = tmpvar_65;
  mediump float tmpvar_66;
  tmpvar_66 = mix (TNdotL_5, clamp (dot (tmpvar_54, -(_SunDir)), 0.0, 1.0), handoff_8);
  lowp vec4 tmpvar_67;
  highp vec2 P_68;
  P_68 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_67 = texture2D (_LightTexture0, P_68);
  highp float tmpvar_69;
  tmpvar_69 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_70;
  tmpvar_70 = texture2D (_LightTextureB0, vec2(tmpvar_69));
  lowp float tmpvar_71;
  mediump float shadow_72;
  lowp vec4 tmpvar_73;
  tmpvar_73 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD4);
  highp float tmpvar_74;
  if ((tmpvar_73.x < (xlv_TEXCOORD4.z / xlv_TEXCOORD4.w))) {
    tmpvar_74 = _LightShadowData.x;
  } else {
    tmpvar_74 = 1.0;
  };
  shadow_72 = tmpvar_74;
  tmpvar_71 = shadow_72;
  highp float tmpvar_75;
  tmpvar_75 = (((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_67.w) * tmpvar_70.w) * tmpvar_71);
  atten_4 = tmpvar_75;
  mediump float tmpvar_76;
  tmpvar_76 = clamp ((((_LightColor0.w * tmpvar_66) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_77;
  tmpvar_77 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_76)), 0.0, 1.0);
  light_3 = tmpvar_77;
  highp float tmpvar_78;
  tmpvar_78 = clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0);
  terminator_2 = tmpvar_78;
  mediump vec3 tmpvar_79;
  tmpvar_79 = (light_3 * terminator_2);
  light_3 = tmpvar_79;
  highp vec3 tmpvar_80;
  tmpvar_80 = (tmpvar_62.xyz + (_Albedo * tmpvar_79));
  color_17.xyz = tmpvar_80;
  color_17.xyz = (color_17.xyz * tmpvar_79);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  highp vec3 p_2;
  p_2 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_1;
  highp vec4 tmpvar_4;
  tmpvar_4.x = _glesMultiTexCoord0.x;
  tmpvar_4.y = _glesMultiTexCoord0.y;
  tmpvar_4.z = _glesMultiTexCoord1.x;
  tmpvar_4.w = _glesMultiTexCoord1.y;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_4).xyz);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float terminator_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float TNdotL_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump float handoff_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec3 norm_11;
  highp vec2 localCoords_12;
  mediump vec4 encnorm_13;
  mediump float vertLerp_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD6.zy * _DetailScale);
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zx * _DetailScale);
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.xy * _DetailScale);
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  highp float tmpvar_37;
  tmpvar_37 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_14 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailVertTex, tmpvar_34);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailTex, tmpvar_31);
  mediump vec4 tmpvar_40;
  tmpvar_40 = mix (tmpvar_38, tmpvar_39, vec4(vertLerp_14));
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailVertTex, tmpvar_35);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailTex, tmpvar_32);
  mediump vec4 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41, tmpvar_42, vec4(vertLerp_14));
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailVertTex, tmpvar_36);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, tmpvar_33);
  mediump vec4 tmpvar_46;
  tmpvar_46 = mix (tmpvar_44, tmpvar_45, vec4(vertLerp_14));
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2DGradEXT (_BumpMap, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  encnorm_13 = tmpvar_47;
  mediump vec2 tmpvar_48;
  tmpvar_48 = encnorm_13.wy;
  localCoords_12 = tmpvar_48;
  highp vec2 tmpvar_49;
  tmpvar_49 = (localCoords_12 - vec2(0.5, 0.5));
  localCoords_12.x = (tmpvar_49.x * 0.25);
  localCoords_12.y = (tmpvar_49.y * 0.5);
  uv_16.x = (uv_16.x - 0.5);
  highp vec2 tmpvar_50;
  tmpvar_50 = (uv_16 + localCoords_12);
  uv_16 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = cos((6.28319 * tmpvar_50.x));
  norm_11.z = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = sin((6.28319 * tmpvar_50.x));
  norm_11.x = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = cos((3.14159 * tmpvar_50.y));
  norm_11.y = tmpvar_53;
  mediump vec3 tmpvar_54;
  tmpvar_54 = -(norm_11);
  norm_11 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_56;
  tmpvar_56 = mix (tmpvar_46, tmpvar_40, tmpvar_55.xxxx);
  detail_10 = tmpvar_56;
  highp vec4 tmpvar_57;
  tmpvar_57 = (0.25 * (mix (detail_10, tmpvar_43, tmpvar_55.yyyy) - 0.5));
  detail_10 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_9 = tmpvar_58;
  mediump vec4 tmpvar_59;
  tmpvar_59 = mix (detail_10, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_9));
  highp vec4 tmpvar_60;
  tmpvar_60 = (xlv_TEXCOORD1 + tmpvar_59);
  color_17 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_8 = tmpvar_61;
  mediump vec4 tmpvar_62;
  tmpvar_62 = (mix (color_17, main_15, vec4(handoff_8)) * _Color);
  color_17 = tmpvar_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = clamp (dot (xlv_TEXCOORD5, lightDirection_6), 0.0, 1.0);
  TNdotL_5 = tmpvar_65;
  mediump float tmpvar_66;
  tmpvar_66 = mix (TNdotL_5, clamp (dot (tmpvar_54, -(_SunDir)), 0.0, 1.0), handoff_8);
  lowp vec4 tmpvar_67;
  highp vec2 P_68;
  P_68 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_67 = texture2D (_LightTexture0, P_68);
  highp float tmpvar_69;
  tmpvar_69 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_70;
  tmpvar_70 = texture2D (_LightTextureB0, vec2(tmpvar_69));
  lowp float tmpvar_71;
  mediump float shadow_72;
  lowp vec4 tmpvar_73;
  tmpvar_73 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD4);
  highp float tmpvar_74;
  if ((tmpvar_73.x < (xlv_TEXCOORD4.z / xlv_TEXCOORD4.w))) {
    tmpvar_74 = _LightShadowData.x;
  } else {
    tmpvar_74 = 1.0;
  };
  shadow_72 = tmpvar_74;
  tmpvar_71 = shadow_72;
  highp float tmpvar_75;
  tmpvar_75 = (((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_67.w) * tmpvar_70.w) * tmpvar_71);
  atten_4 = tmpvar_75;
  mediump float tmpvar_76;
  tmpvar_76 = clamp ((((_LightColor0.w * tmpvar_66) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_77;
  tmpvar_77 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_76)), 0.0, 1.0);
  light_3 = tmpvar_77;
  highp float tmpvar_78;
  tmpvar_78 = clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0);
  terminator_2 = tmpvar_78;
  mediump vec3 tmpvar_79;
  tmpvar_79 = (light_3 * terminator_2);
  light_3 = tmpvar_79;
  highp vec3 tmpvar_80;
  tmpvar_80 = (tmpvar_62.xyz + (_Albedo * tmpvar_79));
  color_17.xyz = tmpvar_80;
  color_17.xyz = (color_17.xyz * tmpvar_79);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 332
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 433
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 objnormal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
};
#line 423
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 323
uniform sampler2D _LightTextureB0;
#line 328
#line 342
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 355
#line 363
#line 377
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 410
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 414
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 418
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp mat4 _Rotation;
#line 422
uniform highp mat4 _InvRotation;
#line 445
#line 471
#line 445
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 449
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    #line 453
    o.color = v.color;
    o.objnormal = v.normal;
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    #line 458
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.objnormal);
    xlv_TEXCOORD3 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereCoords);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 332
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 433
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 objnormal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
};
#line 423
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 323
uniform sampler2D _LightTextureB0;
#line 328
#line 342
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 355
#line 363
#line 377
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 410
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 414
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 418
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp mat4 _Rotation;
#line 422
uniform highp mat4 _InvRotation;
#line 445
#line 471
#line 460
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 462
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 466
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 328
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 324
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 316
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    mediump float shadow = (( (textureProj( _ShadowMapTexture, shadowCoord).x < (shadowCoord.z / shadowCoord.w)) ) ? ( _LightShadowData.x ) : ( 1.0 ));
    #line 319
    return shadow;
}
#line 471
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    #line 475
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 479
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    highp vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    highp vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    highp vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    #line 483
    highp vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    highp vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    highp vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, (-IN.sphereCoords))) - 0.95)) + 0.5));
    #line 487
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    #line 491
    highp vec2 localCoords = encnorm.wy;
    localCoords -= vec2( 0.5);
    localCoords.x *= 0.25;
    localCoords.y *= 0.5;
    #line 495
    uv.x -= 0.5;
    uv += localCoords;
    mediump vec3 norm;
    norm.z = cos((6.28319 * uv.x));
    #line 499
    norm.x = sin((6.28319 * uv.x));
    norm.y = cos((3.14159 * uv.y));
    norm = (-norm);
    sphereNrm = abs(sphereNrm);
    #line 503
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = (0.25 * (mix( detail, detailY, vec4( sphereNrm.y)) - 0.5));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (IN.color + mix( detail.xyzw, vec4( 0.0), vec4( detailLevel)));
    #line 507
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    color = mix( color, main, vec4( handoff));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 511
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    #line 515
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * unitySampleShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    mediump float terminator = xll_saturate_f(floor((1.01 + dot( IN.sphereCoords, _SunDir))));
    #line 519
    light *= terminator;
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    color.w = 1.0;
    #line 523
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.objnormal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform mat4 unity_World2Shadow[4];
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec4 tmpvar_3;
  tmpvar_3.x = gl_MultiTexCoord0.x;
  tmpvar_3.y = gl_MultiTexCoord0.y;
  tmpvar_3.z = gl_MultiTexCoord1.x;
  tmpvar_3.w = gl_MultiTexCoord1.y;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * gl_Vertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_3).xyz);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform sampler2DShadow _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec3 norm_1;
  vec2 localCoords_2;
  vec2 uv_3;
  vec4 color_4;
  float r_5;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_6;
    y_over_x_6 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * r_5));
  uv_3.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_9;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_10;
    y_over_x_10 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_11;
    float x_12;
    x_12 = (y_over_x_10 * inversesqrt(((y_over_x_10 * y_over_x_10) + 1.0)));
    s_11 = (sign(x_12) * (1.5708 - (sqrt((1.0 - abs(x_12))) * (1.5708 + (abs(x_12) * (-0.214602 + (abs(x_12) * (0.0865667 + (abs(x_12) * -0.0310296)))))))));
    r_9 = s_11;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_9 = (s_11 + 3.14159);
      } else {
        r_9 = (r_9 - 3.14159);
      };
    };
  } else {
    r_9 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_13;
  tmpvar_13 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_14;
  tmpvar_14 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_15;
  tmpvar_15 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(tmpvar_13);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(tmpvar_13);
  vec4 tmpvar_17;
  tmpvar_17 = texture2DGradARB (_MainTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  float tmpvar_18;
  tmpvar_18 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec2 tmpvar_19;
  tmpvar_19 = (texture2DGradARB (_BumpMap, uv_3, tmpvar_16.xy, tmpvar_16.zw).wy - vec2(0.5, 0.5));
  localCoords_2.x = (tmpvar_19.x * 0.25);
  localCoords_2.y = (tmpvar_19.y * 0.5);
  uv_3.x = (uv_3.x - 0.5);
  vec2 tmpvar_20;
  tmpvar_20 = (uv_3 + localCoords_2);
  uv_3 = tmpvar_20;
  norm_1.z = cos((6.28319 * tmpvar_20.x));
  norm_1.x = sin((6.28319 * tmpvar_20.x));
  norm_1.y = cos((3.14159 * tmpvar_20.y));
  vec3 tmpvar_21;
  tmpvar_21 = -(norm_1);
  norm_1 = tmpvar_21;
  vec3 tmpvar_22;
  tmpvar_22 = abs(xlv_TEXCOORD6);
  float tmpvar_23;
  tmpvar_23 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  vec4 tmpvar_24;
  tmpvar_24 = (mix ((xlv_TEXCOORD1 + mix ((0.25 * (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_18)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_18)), tmpvar_22.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_18)), tmpvar_22.yyyy) - 0.5)), vec4(0.0, 0.0, 0.0, 0.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))), tmpvar_17, vec4(tmpvar_23)) * _Color);
  color_4.w = tmpvar_24.w;
  vec3 tmpvar_25;
  tmpvar_25 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * mix (clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), clamp (dot (tmpvar_21, -(_SunDir)), 0.0, 1.0), tmpvar_23)) * 4.0) * (((float((xlv_TEXCOORD3.z > 0.0)) * texture2D (_LightTexture0, ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5)).w) * texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz))).w) * (_LightShadowData.x + (shadow2DProj (_ShadowMapTexture, xlv_TEXCOORD4).x * (1.0 - _LightShadowData.x))))), 0.0, 1.0))), 0.0, 1.0) * clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0));
  color_4.xyz = (tmpvar_24.xyz + (_Albedo * tmpvar_25));
  color_4.xyz = (color_4.xyz * tmpvar_25);
  color_4.w = 1.0;
  gl_FragData[0] = color_4;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Matrix 4 [unity_World2Shadow0]
Matrix 8 [_Object2World]
Matrix 12 [_LightMatrix0]
"vs_3_0
; 36 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
def c17, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
mov r1.xyz, v2
mov r1.w, c17.x
dp4 r2.z, r1, c10
dp4 r2.x, r1, c8
dp4 r2.y, r1, c9
mov r0.zw, v4.xyxy
mov r0.xy, v3
dp4 r2.w, r0, r0
rsq r1.x, r2.w
mul r0.xyz, r1.x, r0
mov o7.xyz, -r0
dp3 r0.w, r2, r2
rsq r0.w, r0.w
mul o6.xyz, r0.w, r2
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
dp4 r0.w, v0, c11
add r1.xyz, -r0, c16
dp3 r1.x, r1, r1
rsq r1.x, r1.x
mov o2, v1
dp4 o4.w, r0, c15
dp4 o4.z, r0, c14
dp4 o4.y, r0, c13
dp4 o4.x, r0, c12
dp4 o5.w, r0, c7
dp4 o5.z, r0, c6
dp4 o5.y, r0, c5
dp4 o5.x, r0, c4
rcp o1.x, r1.x
mov o3.xyz, v2
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  highp vec3 p_2;
  p_2 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_1;
  highp vec4 tmpvar_4;
  tmpvar_4.x = _glesMultiTexCoord0.x;
  tmpvar_4.y = _glesMultiTexCoord0.y;
  tmpvar_4.z = _glesMultiTexCoord1.x;
  tmpvar_4.w = _glesMultiTexCoord1.y;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_4).xyz);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shadow_samplers : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float terminator_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float TNdotL_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump float handoff_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec3 norm_11;
  highp vec2 localCoords_12;
  mediump vec4 encnorm_13;
  mediump float vertLerp_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD6.zy * _DetailScale);
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zx * _DetailScale);
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.xy * _DetailScale);
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  highp float tmpvar_37;
  tmpvar_37 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_14 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailVertTex, tmpvar_34);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailTex, tmpvar_31);
  mediump vec4 tmpvar_40;
  tmpvar_40 = mix (tmpvar_38, tmpvar_39, vec4(vertLerp_14));
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailVertTex, tmpvar_35);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailTex, tmpvar_32);
  mediump vec4 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41, tmpvar_42, vec4(vertLerp_14));
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailVertTex, tmpvar_36);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, tmpvar_33);
  mediump vec4 tmpvar_46;
  tmpvar_46 = mix (tmpvar_44, tmpvar_45, vec4(vertLerp_14));
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2DGradEXT (_BumpMap, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  encnorm_13 = tmpvar_47;
  mediump vec2 tmpvar_48;
  tmpvar_48 = encnorm_13.wy;
  localCoords_12 = tmpvar_48;
  highp vec2 tmpvar_49;
  tmpvar_49 = (localCoords_12 - vec2(0.5, 0.5));
  localCoords_12.x = (tmpvar_49.x * 0.25);
  localCoords_12.y = (tmpvar_49.y * 0.5);
  uv_16.x = (uv_16.x - 0.5);
  highp vec2 tmpvar_50;
  tmpvar_50 = (uv_16 + localCoords_12);
  uv_16 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = cos((6.28319 * tmpvar_50.x));
  norm_11.z = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = sin((6.28319 * tmpvar_50.x));
  norm_11.x = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = cos((3.14159 * tmpvar_50.y));
  norm_11.y = tmpvar_53;
  mediump vec3 tmpvar_54;
  tmpvar_54 = -(norm_11);
  norm_11 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_56;
  tmpvar_56 = mix (tmpvar_46, tmpvar_40, tmpvar_55.xxxx);
  detail_10 = tmpvar_56;
  highp vec4 tmpvar_57;
  tmpvar_57 = (0.25 * (mix (detail_10, tmpvar_43, tmpvar_55.yyyy) - 0.5));
  detail_10 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_9 = tmpvar_58;
  mediump vec4 tmpvar_59;
  tmpvar_59 = mix (detail_10, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_9));
  highp vec4 tmpvar_60;
  tmpvar_60 = (xlv_TEXCOORD1 + tmpvar_59);
  color_17 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_8 = tmpvar_61;
  mediump vec4 tmpvar_62;
  tmpvar_62 = (mix (color_17, main_15, vec4(handoff_8)) * _Color);
  color_17.w = tmpvar_62.w;
  highp vec3 tmpvar_63;
  tmpvar_63 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = clamp (dot (xlv_TEXCOORD5, lightDirection_6), 0.0, 1.0);
  TNdotL_5 = tmpvar_65;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_66 = texture2D (_LightTexture0, P_67);
  highp float tmpvar_68;
  tmpvar_68 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_69;
  tmpvar_69 = texture2D (_LightTextureB0, vec2(tmpvar_68));
  lowp float tmpvar_70;
  mediump float shadow_71;
  lowp float tmpvar_72;
  tmpvar_72 = shadow2DProjEXT (_ShadowMapTexture, xlv_TEXCOORD4);
  shadow_71 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = (_LightShadowData.x + (shadow_71 * (1.0 - _LightShadowData.x)));
  shadow_71 = tmpvar_73;
  tmpvar_70 = shadow_71;
  highp float tmpvar_74;
  tmpvar_74 = (((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_66.w) * tmpvar_69.w) * tmpvar_70);
  atten_4 = tmpvar_74;
  mediump float tmpvar_75;
  tmpvar_75 = clamp ((((_LightColor0.w * mix (TNdotL_5, clamp (dot (tmpvar_54, -(_SunDir)), 0.0, 1.0), handoff_8)) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_76;
  tmpvar_76 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_75)), 0.0, 1.0);
  light_3 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0);
  terminator_2 = tmpvar_77;
  mediump vec3 tmpvar_78;
  tmpvar_78 = (light_3 * terminator_2);
  light_3 = tmpvar_78;
  highp vec3 tmpvar_79;
  tmpvar_79 = (tmpvar_62.xyz + (_Albedo * tmpvar_78));
  color_17.xyz = tmpvar_79;
  color_17.xyz = (color_17.xyz * tmpvar_78);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 333
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 434
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 objnormal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
};
#line 424
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 323
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 343
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 356
#line 364
#line 378
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 411
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 415
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 419
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp mat4 _Rotation;
#line 423
uniform highp mat4 _InvRotation;
#line 446
#line 472
#line 446
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 450
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    #line 454
    o.color = v.color;
    o.objnormal = v.normal;
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    #line 459
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.objnormal);
    xlv_TEXCOORD3 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereCoords);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_shadow2Dproj(mediump sampler2DShadow s, vec4 coord) { return textureProj (s, coord); }
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 333
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 434
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 objnormal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
};
#line 424
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 323
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 343
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 356
#line 364
#line 378
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 411
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 415
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 419
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp mat4 _Rotation;
#line 423
uniform highp mat4 _InvRotation;
#line 446
#line 472
#line 461
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 463
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 467
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 329
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    #line 331
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 325
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    #line 327
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 316
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    mediump float shadow = xll_shadow2Dproj( _ShadowMapTexture, shadowCoord);
    #line 319
    shadow = (_LightShadowData.x + (shadow * (1.0 - _LightShadowData.x)));
    return shadow;
}
#line 472
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    #line 476
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 480
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    highp vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    highp vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    highp vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    #line 484
    highp vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    highp vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    highp vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, (-IN.sphereCoords))) - 0.95)) + 0.5));
    #line 488
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    #line 492
    highp vec2 localCoords = encnorm.wy;
    localCoords -= vec2( 0.5);
    localCoords.x *= 0.25;
    localCoords.y *= 0.5;
    #line 496
    uv.x -= 0.5;
    uv += localCoords;
    mediump vec3 norm;
    norm.z = cos((6.28319 * uv.x));
    #line 500
    norm.x = sin((6.28319 * uv.x));
    norm.y = cos((3.14159 * uv.y));
    norm = (-norm);
    sphereNrm = abs(sphereNrm);
    #line 504
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = (0.25 * (mix( detail, detailY, vec4( sphereNrm.y)) - 0.5));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (IN.color + mix( detail.xyzw, vec4( 0.0), vec4( detailLevel)));
    #line 508
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    color = mix( color, main, vec4( handoff));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 512
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    #line 516
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * unitySampleShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    mediump float terminator = xll_saturate_f(floor((1.01 + dot( IN.sphereCoords, _SunDir))));
    #line 520
    light *= terminator;
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    color.w = 1.0;
    #line 524
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.objnormal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _Object2World;

uniform vec4 _ProjectionParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec3 p_2;
  p_2 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = gl_Normal;
  vec4 tmpvar_4;
  tmpvar_4.x = gl_MultiTexCoord0.x;
  tmpvar_4.y = gl_MultiTexCoord0.y;
  tmpvar_4.z = gl_MultiTexCoord1.x;
  tmpvar_4.w = gl_MultiTexCoord1.y;
  vec4 o_5;
  vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_1 * 0.5);
  vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_1.zw;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD3 = o_5;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_4).xyz);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec3 norm_1;
  vec2 localCoords_2;
  vec2 uv_3;
  vec4 color_4;
  float r_5;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_6;
    y_over_x_6 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * r_5));
  uv_3.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_9;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_10;
    y_over_x_10 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_11;
    float x_12;
    x_12 = (y_over_x_10 * inversesqrt(((y_over_x_10 * y_over_x_10) + 1.0)));
    s_11 = (sign(x_12) * (1.5708 - (sqrt((1.0 - abs(x_12))) * (1.5708 + (abs(x_12) * (-0.214602 + (abs(x_12) * (0.0865667 + (abs(x_12) * -0.0310296)))))))));
    r_9 = s_11;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_9 = (s_11 + 3.14159);
      } else {
        r_9 = (r_9 - 3.14159);
      };
    };
  } else {
    r_9 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_13;
  tmpvar_13 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_14;
  tmpvar_14 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_15;
  tmpvar_15 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(tmpvar_13);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(tmpvar_13);
  vec4 tmpvar_17;
  tmpvar_17 = texture2DGradARB (_MainTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  float tmpvar_18;
  tmpvar_18 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec2 tmpvar_19;
  tmpvar_19 = (texture2DGradARB (_BumpMap, uv_3, tmpvar_16.xy, tmpvar_16.zw).wy - vec2(0.5, 0.5));
  localCoords_2.x = (tmpvar_19.x * 0.25);
  localCoords_2.y = (tmpvar_19.y * 0.5);
  uv_3.x = (uv_3.x - 0.5);
  vec2 tmpvar_20;
  tmpvar_20 = (uv_3 + localCoords_2);
  uv_3 = tmpvar_20;
  norm_1.z = cos((6.28319 * tmpvar_20.x));
  norm_1.x = sin((6.28319 * tmpvar_20.x));
  norm_1.y = cos((3.14159 * tmpvar_20.y));
  vec3 tmpvar_21;
  tmpvar_21 = -(norm_1);
  norm_1 = tmpvar_21;
  vec3 tmpvar_22;
  tmpvar_22 = abs(xlv_TEXCOORD6);
  float tmpvar_23;
  tmpvar_23 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  vec4 tmpvar_24;
  tmpvar_24 = (mix ((xlv_TEXCOORD1 + mix ((0.25 * (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_18)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_18)), tmpvar_22.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_18)), tmpvar_22.yyyy) - 0.5)), vec4(0.0, 0.0, 0.0, 0.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))), tmpvar_17, vec4(tmpvar_23)) * _Color);
  color_4.w = tmpvar_24.w;
  vec3 tmpvar_25;
  tmpvar_25 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * mix (clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), clamp (dot (tmpvar_21, -(_SunDir)), 0.0, 1.0), tmpvar_23)) * 4.0) * texture2DProj (_ShadowMapTexture, xlv_TEXCOORD3).x), 0.0, 1.0))), 0.0, 1.0) * clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0));
  color_4.xyz = (tmpvar_24.xyz + (_Albedo * tmpvar_25));
  color_4.xyz = (color_4.xyz * tmpvar_25);
  color_4.w = 1.0;
  gl_FragData[0] = color_4;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_WorldSpaceCameraPos]
Vector 9 [_ProjectionParams]
Vector 10 [_ScreenParams]
Matrix 4 [_Object2World]
"vs_3_0
; 32 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord5 o5
dcl_texcoord6 o6
def c11, 0.00000000, 0.50000000, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
mov r1.xyz, v2
mov r1.w, c11.x
dp4 r0.z, r1, c6
dp4 r0.x, r1, c4
dp4 r0.y, r1, c5
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o5.xyz, r0.w, r0
dp4 r0.w, v0, c3
dp4 r0.x, v0, c0
dp4 r0.y, v0, c1
mul r2.xyz, r0.xyww, c11.y
mul r2.y, r2, c9.x
mov r1.zw, v4.xyxy
mov r1.xy, v3
dp4 r1.w, r1, r1
rsq r0.z, r1.w
mul r1.xyz, r0.z, r1
mov o6.xyz, -r1
dp4 r0.z, v0, c2
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
add r1.xyz, -r1, c8
mov o0, r0
dp3 r0.x, r1, r1
rsq r0.x, r0.x
mad o4.xy, r2.z, c10.zwzw, r2
mov o2, v1
mov o4.zw, r0
rcp o1.x, r0.x
mov o3.xyz, v2
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  highp vec3 p_2;
  p_2 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_1;
  highp vec4 tmpvar_4;
  tmpvar_4.x = _glesMultiTexCoord0.x;
  tmpvar_4.y = _glesMultiTexCoord0.y;
  tmpvar_4.z = _glesMultiTexCoord1.x;
  tmpvar_4.w = _glesMultiTexCoord1.y;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_4).xyz);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float terminator_2;
  mediump vec3 light_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float handoff_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec3 norm_10;
  highp vec2 localCoords_11;
  mediump vec4 encnorm_12;
  mediump float vertLerp_13;
  mediump vec4 main_14;
  highp vec2 uv_15;
  mediump vec4 color_16;
  highp float r_17;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_18;
    y_over_x_18 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_19;
    highp float x_20;
    x_20 = (y_over_x_18 * inversesqrt(((y_over_x_18 * y_over_x_18) + 1.0)));
    s_19 = (sign(x_20) * (1.5708 - (sqrt((1.0 - abs(x_20))) * (1.5708 + (abs(x_20) * (-0.214602 + (abs(x_20) * (0.0865667 + (abs(x_20) * -0.0310296)))))))));
    r_17 = s_19;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_17 = (s_19 + 3.14159);
      } else {
        r_17 = (r_17 - 3.14159);
      };
    };
  } else {
    r_17 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_15.x = (0.5 + (0.159155 * r_17));
  uv_15.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_21;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_22;
    y_over_x_22 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_23;
    highp float x_24;
    x_24 = (y_over_x_22 * inversesqrt(((y_over_x_22 * y_over_x_22) + 1.0)));
    s_23 = (sign(x_24) * (1.5708 - (sqrt((1.0 - abs(x_24))) * (1.5708 + (abs(x_24) * (-0.214602 + (abs(x_24) * (0.0865667 + (abs(x_24) * -0.0310296)))))))));
    r_21 = s_23;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_21 = (s_23 + 3.14159);
      } else {
        r_21 = (r_21 - 3.14159);
      };
    };
  } else {
    r_21 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_25;
  tmpvar_25 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_26;
  tmpvar_26 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_28;
  tmpvar_28.x = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_28.y = dFdx(tmpvar_25);
  tmpvar_28.z = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_28.w = dFdy(tmpvar_25);
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2DGradEXT (_MainTex, uv_15, tmpvar_28.xy, tmpvar_28.zw);
  main_14 = tmpvar_29;
  highp vec2 tmpvar_30;
  tmpvar_30 = (xlv_TEXCOORD6.zy * _DetailScale);
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD6.zx * _DetailScale);
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.xy * _DetailScale);
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  highp float tmpvar_36;
  tmpvar_36 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_13 = tmpvar_36;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_DetailVertTex, tmpvar_33);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailTex, tmpvar_30);
  mediump vec4 tmpvar_39;
  tmpvar_39 = mix (tmpvar_37, tmpvar_38, vec4(vertLerp_13));
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailVertTex, tmpvar_34);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailTex, tmpvar_31);
  mediump vec4 tmpvar_42;
  tmpvar_42 = mix (tmpvar_40, tmpvar_41, vec4(vertLerp_13));
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailVertTex, tmpvar_35);
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailTex, tmpvar_32);
  mediump vec4 tmpvar_45;
  tmpvar_45 = mix (tmpvar_43, tmpvar_44, vec4(vertLerp_13));
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2DGradEXT (_BumpMap, uv_15, tmpvar_28.xy, tmpvar_28.zw);
  encnorm_12 = tmpvar_46;
  mediump vec2 tmpvar_47;
  tmpvar_47 = encnorm_12.wy;
  localCoords_11 = tmpvar_47;
  highp vec2 tmpvar_48;
  tmpvar_48 = (localCoords_11 - vec2(0.5, 0.5));
  localCoords_11.x = (tmpvar_48.x * 0.25);
  localCoords_11.y = (tmpvar_48.y * 0.5);
  uv_15.x = (uv_15.x - 0.5);
  highp vec2 tmpvar_49;
  tmpvar_49 = (uv_15 + localCoords_11);
  uv_15 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = cos((6.28319 * tmpvar_49.x));
  norm_10.z = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = sin((6.28319 * tmpvar_49.x));
  norm_10.x = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = cos((3.14159 * tmpvar_49.y));
  norm_10.y = tmpvar_52;
  mediump vec3 tmpvar_53;
  tmpvar_53 = -(norm_10);
  norm_10 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_55;
  tmpvar_55 = mix (tmpvar_45, tmpvar_39, tmpvar_54.xxxx);
  detail_9 = tmpvar_55;
  highp vec4 tmpvar_56;
  tmpvar_56 = (0.25 * (mix (detail_9, tmpvar_42, tmpvar_54.yyyy) - 0.5));
  detail_9 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_57;
  mediump vec4 tmpvar_58;
  tmpvar_58 = mix (detail_9, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_8));
  highp vec4 tmpvar_59;
  tmpvar_59 = (xlv_TEXCOORD1 + tmpvar_58);
  color_16 = tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_7 = tmpvar_60;
  mediump vec4 tmpvar_61;
  tmpvar_61 = (mix (color_16, main_14, vec4(handoff_7)) * _Color);
  color_16.w = tmpvar_61.w;
  highp vec3 tmpvar_62;
  tmpvar_62 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_62;
  lowp vec3 tmpvar_63;
  tmpvar_63 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_64;
  lowp float tmpvar_65;
  mediump float lightShadowDataX_66;
  highp float dist_67;
  lowp float tmpvar_68;
  tmpvar_68 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD3).x;
  dist_67 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = _LightShadowData.x;
  lightShadowDataX_66 = tmpvar_69;
  highp float tmpvar_70;
  tmpvar_70 = max (float((dist_67 > (xlv_TEXCOORD3.z / xlv_TEXCOORD3.w))), lightShadowDataX_66);
  tmpvar_65 = tmpvar_70;
  mediump float tmpvar_71;
  tmpvar_71 = clamp ((((_LightColor0.w * mix (TNdotL_4, clamp (dot (tmpvar_53, -(_SunDir)), 0.0, 1.0), handoff_7)) * 4.0) * tmpvar_65), 0.0, 1.0);
  highp vec3 tmpvar_72;
  tmpvar_72 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_71)), 0.0, 1.0);
  light_3 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0);
  terminator_2 = tmpvar_73;
  mediump vec3 tmpvar_74;
  tmpvar_74 = (light_3 * terminator_2);
  light_3 = tmpvar_74;
  highp vec3 tmpvar_75;
  tmpvar_75 = (tmpvar_61.xyz + (_Albedo * tmpvar_74));
  color_16.xyz = tmpvar_75;
  color_16.xyz = (color_16.xyz * tmpvar_74);
  color_16.w = 1.0;
  tmpvar_1 = color_16;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  highp vec4 tmpvar_5;
  tmpvar_5.x = _glesMultiTexCoord0.x;
  tmpvar_5.y = _glesMultiTexCoord0.y;
  tmpvar_5.z = _glesMultiTexCoord1.x;
  tmpvar_5.w = _glesMultiTexCoord1.y;
  highp vec4 o_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_8;
  tmpvar_8.x = tmpvar_7.x;
  tmpvar_8.y = (tmpvar_7.y * _ProjectionParams.x);
  o_6.xy = (tmpvar_8 + tmpvar_7.w);
  o_6.zw = tmpvar_2.zw;
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_6;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_5).xyz);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float terminator_2;
  mediump vec3 light_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float handoff_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec3 norm_10;
  highp vec2 localCoords_11;
  mediump vec4 encnorm_12;
  mediump float vertLerp_13;
  mediump vec4 main_14;
  highp vec2 uv_15;
  mediump vec4 color_16;
  highp float r_17;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_18;
    y_over_x_18 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_19;
    highp float x_20;
    x_20 = (y_over_x_18 * inversesqrt(((y_over_x_18 * y_over_x_18) + 1.0)));
    s_19 = (sign(x_20) * (1.5708 - (sqrt((1.0 - abs(x_20))) * (1.5708 + (abs(x_20) * (-0.214602 + (abs(x_20) * (0.0865667 + (abs(x_20) * -0.0310296)))))))));
    r_17 = s_19;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_17 = (s_19 + 3.14159);
      } else {
        r_17 = (r_17 - 3.14159);
      };
    };
  } else {
    r_17 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_15.x = (0.5 + (0.159155 * r_17));
  uv_15.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_21;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_22;
    y_over_x_22 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_23;
    highp float x_24;
    x_24 = (y_over_x_22 * inversesqrt(((y_over_x_22 * y_over_x_22) + 1.0)));
    s_23 = (sign(x_24) * (1.5708 - (sqrt((1.0 - abs(x_24))) * (1.5708 + (abs(x_24) * (-0.214602 + (abs(x_24) * (0.0865667 + (abs(x_24) * -0.0310296)))))))));
    r_21 = s_23;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_21 = (s_23 + 3.14159);
      } else {
        r_21 = (r_21 - 3.14159);
      };
    };
  } else {
    r_21 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_25;
  tmpvar_25 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_26;
  tmpvar_26 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_28;
  tmpvar_28.x = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_28.y = dFdx(tmpvar_25);
  tmpvar_28.z = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_28.w = dFdy(tmpvar_25);
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2DGradEXT (_MainTex, uv_15, tmpvar_28.xy, tmpvar_28.zw);
  main_14 = tmpvar_29;
  highp vec2 tmpvar_30;
  tmpvar_30 = (xlv_TEXCOORD6.zy * _DetailScale);
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD6.zx * _DetailScale);
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.xy * _DetailScale);
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  highp float tmpvar_36;
  tmpvar_36 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_13 = tmpvar_36;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_DetailVertTex, tmpvar_33);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailTex, tmpvar_30);
  mediump vec4 tmpvar_39;
  tmpvar_39 = mix (tmpvar_37, tmpvar_38, vec4(vertLerp_13));
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailVertTex, tmpvar_34);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailTex, tmpvar_31);
  mediump vec4 tmpvar_42;
  tmpvar_42 = mix (tmpvar_40, tmpvar_41, vec4(vertLerp_13));
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailVertTex, tmpvar_35);
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailTex, tmpvar_32);
  mediump vec4 tmpvar_45;
  tmpvar_45 = mix (tmpvar_43, tmpvar_44, vec4(vertLerp_13));
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2DGradEXT (_BumpMap, uv_15, tmpvar_28.xy, tmpvar_28.zw);
  encnorm_12 = tmpvar_46;
  mediump vec2 tmpvar_47;
  tmpvar_47 = encnorm_12.wy;
  localCoords_11 = tmpvar_47;
  highp vec2 tmpvar_48;
  tmpvar_48 = (localCoords_11 - vec2(0.5, 0.5));
  localCoords_11.x = (tmpvar_48.x * 0.25);
  localCoords_11.y = (tmpvar_48.y * 0.5);
  uv_15.x = (uv_15.x - 0.5);
  highp vec2 tmpvar_49;
  tmpvar_49 = (uv_15 + localCoords_11);
  uv_15 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = cos((6.28319 * tmpvar_49.x));
  norm_10.z = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = sin((6.28319 * tmpvar_49.x));
  norm_10.x = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = cos((3.14159 * tmpvar_49.y));
  norm_10.y = tmpvar_52;
  mediump vec3 tmpvar_53;
  tmpvar_53 = -(norm_10);
  norm_10 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_55;
  tmpvar_55 = mix (tmpvar_45, tmpvar_39, tmpvar_54.xxxx);
  detail_9 = tmpvar_55;
  highp vec4 tmpvar_56;
  tmpvar_56 = (0.25 * (mix (detail_9, tmpvar_42, tmpvar_54.yyyy) - 0.5));
  detail_9 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_57;
  mediump vec4 tmpvar_58;
  tmpvar_58 = mix (detail_9, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_8));
  highp vec4 tmpvar_59;
  tmpvar_59 = (xlv_TEXCOORD1 + tmpvar_58);
  color_16 = tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_7 = tmpvar_60;
  mediump vec4 tmpvar_61;
  tmpvar_61 = (mix (color_16, main_14, vec4(handoff_7)) * _Color);
  color_16.w = tmpvar_61.w;
  highp vec3 tmpvar_62;
  tmpvar_62 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_62;
  lowp vec3 tmpvar_63;
  tmpvar_63 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_64;
  lowp vec4 tmpvar_65;
  tmpvar_65 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD3);
  mediump float tmpvar_66;
  tmpvar_66 = clamp ((((_LightColor0.w * mix (TNdotL_4, clamp (dot (tmpvar_53, -(_SunDir)), 0.0, 1.0), handoff_7)) * 4.0) * tmpvar_65.x), 0.0, 1.0);
  highp vec3 tmpvar_67;
  tmpvar_67 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_66)), 0.0, 1.0);
  light_3 = tmpvar_67;
  highp float tmpvar_68;
  tmpvar_68 = clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0);
  terminator_2 = tmpvar_68;
  mediump vec3 tmpvar_69;
  tmpvar_69 = (light_3 * terminator_2);
  light_3 = tmpvar_69;
  highp vec3 tmpvar_70;
  tmpvar_70 = (tmpvar_61.xyz + (_Albedo * tmpvar_69));
  color_16.xyz = tmpvar_70;
  color_16.xyz = (color_16.xyz * tmpvar_69);
  color_16.w = 1.0;
  tmpvar_1 = color_16;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 323
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 424
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 objnormal;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
};
#line 414
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 333
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 346
#line 354
#line 368
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 401
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 405
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 409
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp mat4 _Rotation;
#line 413
uniform highp mat4 _InvRotation;
#line 435
#line 460
#line 435
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 439
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    #line 443
    o.color = v.color;
    o.objnormal = v.normal;
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    #line 447
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.objnormal);
    xlv_TEXCOORD3 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereCoords);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 323
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 424
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 objnormal;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
};
#line 414
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 333
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 346
#line 354
#line 368
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 401
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 405
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 409
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp mat4 _Rotation;
#line 413
uniform highp mat4 _InvRotation;
#line 435
#line 460
#line 449
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 451
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 455
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 317
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    #line 319
    highp float dist = textureProj( _ShadowMapTexture, shadowCoord).x;
    mediump float lightShadowDataX = _LightShadowData.x;
    return max( float((dist > (shadowCoord.z / shadowCoord.w))), lightShadowDataX);
}
#line 460
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    #line 464
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 468
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    highp vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    highp vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    highp vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    #line 472
    highp vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    highp vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    highp vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, (-IN.sphereCoords))) - 0.95)) + 0.5));
    #line 476
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    #line 480
    highp vec2 localCoords = encnorm.wy;
    localCoords -= vec2( 0.5);
    localCoords.x *= 0.25;
    localCoords.y *= 0.5;
    #line 484
    uv.x -= 0.5;
    uv += localCoords;
    mediump vec3 norm;
    norm.z = cos((6.28319 * uv.x));
    #line 488
    norm.x = sin((6.28319 * uv.x));
    norm.y = cos((3.14159 * uv.y));
    norm = (-norm);
    sphereNrm = abs(sphereNrm);
    #line 492
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = (0.25 * (mix( detail, detailY, vec4( sphereNrm.y)) - 0.5));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (IN.color + mix( detail.xyzw, vec4( 0.0), vec4( detailLevel)));
    #line 496
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    color = mix( color, main, vec4( handoff));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 500
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    #line 504
    lowp float atten = unitySampleShadow( IN._ShadowCoord);
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    mediump float terminator = xll_saturate_f(floor((1.01 + dot( IN.sphereCoords, _SunDir))));
    #line 508
    light *= terminator;
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    color.w = 1.0;
    #line 512
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.objnormal = vec3(xlv_TEXCOORD2);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec2 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec4 _ProjectionParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec3 p_2;
  p_2 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = gl_Normal;
  vec4 tmpvar_4;
  tmpvar_4.x = gl_MultiTexCoord0.x;
  tmpvar_4.y = gl_MultiTexCoord0.y;
  tmpvar_4.z = gl_MultiTexCoord1.x;
  tmpvar_4.w = gl_MultiTexCoord1.y;
  vec4 o_5;
  vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_1 * 0.5);
  vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_1.zw;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xy;
  xlv_TEXCOORD4 = o_5;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_4).xyz);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec2 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec3 norm_1;
  vec2 localCoords_2;
  vec2 uv_3;
  vec4 color_4;
  float r_5;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_6;
    y_over_x_6 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * r_5));
  uv_3.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_9;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_10;
    y_over_x_10 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_11;
    float x_12;
    x_12 = (y_over_x_10 * inversesqrt(((y_over_x_10 * y_over_x_10) + 1.0)));
    s_11 = (sign(x_12) * (1.5708 - (sqrt((1.0 - abs(x_12))) * (1.5708 + (abs(x_12) * (-0.214602 + (abs(x_12) * (0.0865667 + (abs(x_12) * -0.0310296)))))))));
    r_9 = s_11;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_9 = (s_11 + 3.14159);
      } else {
        r_9 = (r_9 - 3.14159);
      };
    };
  } else {
    r_9 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_13;
  tmpvar_13 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_14;
  tmpvar_14 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_15;
  tmpvar_15 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(tmpvar_13);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(tmpvar_13);
  vec4 tmpvar_17;
  tmpvar_17 = texture2DGradARB (_MainTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  float tmpvar_18;
  tmpvar_18 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec2 tmpvar_19;
  tmpvar_19 = (texture2DGradARB (_BumpMap, uv_3, tmpvar_16.xy, tmpvar_16.zw).wy - vec2(0.5, 0.5));
  localCoords_2.x = (tmpvar_19.x * 0.25);
  localCoords_2.y = (tmpvar_19.y * 0.5);
  uv_3.x = (uv_3.x - 0.5);
  vec2 tmpvar_20;
  tmpvar_20 = (uv_3 + localCoords_2);
  uv_3 = tmpvar_20;
  norm_1.z = cos((6.28319 * tmpvar_20.x));
  norm_1.x = sin((6.28319 * tmpvar_20.x));
  norm_1.y = cos((3.14159 * tmpvar_20.y));
  vec3 tmpvar_21;
  tmpvar_21 = -(norm_1);
  norm_1 = tmpvar_21;
  vec3 tmpvar_22;
  tmpvar_22 = abs(xlv_TEXCOORD6);
  float tmpvar_23;
  tmpvar_23 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  vec4 tmpvar_24;
  tmpvar_24 = (mix ((xlv_TEXCOORD1 + mix ((0.25 * (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_18)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_18)), tmpvar_22.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_18)), tmpvar_22.yyyy) - 0.5)), vec4(0.0, 0.0, 0.0, 0.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))), tmpvar_17, vec4(tmpvar_23)) * _Color);
  color_4.w = tmpvar_24.w;
  vec3 tmpvar_25;
  tmpvar_25 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * mix (clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), clamp (dot (tmpvar_21, -(_SunDir)), 0.0, 1.0), tmpvar_23)) * 4.0) * (texture2D (_LightTexture0, xlv_TEXCOORD3).w * texture2DProj (_ShadowMapTexture, xlv_TEXCOORD4).x)), 0.0, 1.0))), 0.0, 1.0) * clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0));
  color_4.xyz = (tmpvar_24.xyz + (_Albedo * tmpvar_25));
  color_4.xyz = (color_4.xyz * tmpvar_25);
  color_4.w = 1.0;
  gl_FragData[0] = color_4;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_ProjectionParams]
Vector 14 [_ScreenParams]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 35 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
def c15, 0.00000000, 0.50000000, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
mov r1.xyz, v2
mov r1.w, c15.x
dp4 r0.z, r1, c6
dp4 r0.x, r1, c4
dp4 r0.y, r1, c5
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o6.xyz, r0.w, r0
dp4 r2.w, v0, c3
dp4 r2.z, v0, c2
mov r0.zw, v4.xyxy
mov r0.xy, v3
dp4 r0.w, r0, r0
rsq r0.w, r0.w
mul r0.xyz, r0.w, r0
mov o7.xyz, -r0
dp4 r0.x, v0, c4
dp4 r0.z, v0, c6
dp4 r0.y, v0, c5
dp4 r0.w, v0, c7
dp4 r2.x, v0, c0
dp4 r2.y, v0, c1
mul r1.xyz, r2.xyww, c15.y
mul r1.y, r1, c13.x
mad o5.xy, r1.z, c14.zwzw, r1
add r1.xyz, -r0, c12
dp4 o4.y, r0, c9
dp3 r1.x, r1, r1
dp4 o4.x, r0, c8
rsq r0.x, r1.x
mov o0, r2
mov o2, v1
mov o5.zw, r2
rcp o1.x, r0.x
mov o3.xyz, v2
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  highp vec3 p_2;
  p_2 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_1;
  highp vec4 tmpvar_4;
  tmpvar_4.x = _glesMultiTexCoord0.x;
  tmpvar_4.y = _glesMultiTexCoord0.y;
  tmpvar_4.z = _glesMultiTexCoord1.x;
  tmpvar_4.w = _glesMultiTexCoord1.y;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_4).xyz);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float terminator_2;
  mediump vec3 light_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float handoff_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec3 norm_10;
  highp vec2 localCoords_11;
  mediump vec4 encnorm_12;
  mediump float vertLerp_13;
  mediump vec4 main_14;
  highp vec2 uv_15;
  mediump vec4 color_16;
  highp float r_17;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_18;
    y_over_x_18 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_19;
    highp float x_20;
    x_20 = (y_over_x_18 * inversesqrt(((y_over_x_18 * y_over_x_18) + 1.0)));
    s_19 = (sign(x_20) * (1.5708 - (sqrt((1.0 - abs(x_20))) * (1.5708 + (abs(x_20) * (-0.214602 + (abs(x_20) * (0.0865667 + (abs(x_20) * -0.0310296)))))))));
    r_17 = s_19;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_17 = (s_19 + 3.14159);
      } else {
        r_17 = (r_17 - 3.14159);
      };
    };
  } else {
    r_17 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_15.x = (0.5 + (0.159155 * r_17));
  uv_15.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_21;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_22;
    y_over_x_22 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_23;
    highp float x_24;
    x_24 = (y_over_x_22 * inversesqrt(((y_over_x_22 * y_over_x_22) + 1.0)));
    s_23 = (sign(x_24) * (1.5708 - (sqrt((1.0 - abs(x_24))) * (1.5708 + (abs(x_24) * (-0.214602 + (abs(x_24) * (0.0865667 + (abs(x_24) * -0.0310296)))))))));
    r_21 = s_23;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_21 = (s_23 + 3.14159);
      } else {
        r_21 = (r_21 - 3.14159);
      };
    };
  } else {
    r_21 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_25;
  tmpvar_25 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_26;
  tmpvar_26 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_28;
  tmpvar_28.x = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_28.y = dFdx(tmpvar_25);
  tmpvar_28.z = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_28.w = dFdy(tmpvar_25);
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2DGradEXT (_MainTex, uv_15, tmpvar_28.xy, tmpvar_28.zw);
  main_14 = tmpvar_29;
  highp vec2 tmpvar_30;
  tmpvar_30 = (xlv_TEXCOORD6.zy * _DetailScale);
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD6.zx * _DetailScale);
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.xy * _DetailScale);
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  highp float tmpvar_36;
  tmpvar_36 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_13 = tmpvar_36;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_DetailVertTex, tmpvar_33);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailTex, tmpvar_30);
  mediump vec4 tmpvar_39;
  tmpvar_39 = mix (tmpvar_37, tmpvar_38, vec4(vertLerp_13));
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailVertTex, tmpvar_34);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailTex, tmpvar_31);
  mediump vec4 tmpvar_42;
  tmpvar_42 = mix (tmpvar_40, tmpvar_41, vec4(vertLerp_13));
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailVertTex, tmpvar_35);
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailTex, tmpvar_32);
  mediump vec4 tmpvar_45;
  tmpvar_45 = mix (tmpvar_43, tmpvar_44, vec4(vertLerp_13));
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2DGradEXT (_BumpMap, uv_15, tmpvar_28.xy, tmpvar_28.zw);
  encnorm_12 = tmpvar_46;
  mediump vec2 tmpvar_47;
  tmpvar_47 = encnorm_12.wy;
  localCoords_11 = tmpvar_47;
  highp vec2 tmpvar_48;
  tmpvar_48 = (localCoords_11 - vec2(0.5, 0.5));
  localCoords_11.x = (tmpvar_48.x * 0.25);
  localCoords_11.y = (tmpvar_48.y * 0.5);
  uv_15.x = (uv_15.x - 0.5);
  highp vec2 tmpvar_49;
  tmpvar_49 = (uv_15 + localCoords_11);
  uv_15 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = cos((6.28319 * tmpvar_49.x));
  norm_10.z = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = sin((6.28319 * tmpvar_49.x));
  norm_10.x = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = cos((3.14159 * tmpvar_49.y));
  norm_10.y = tmpvar_52;
  mediump vec3 tmpvar_53;
  tmpvar_53 = -(norm_10);
  norm_10 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_55;
  tmpvar_55 = mix (tmpvar_45, tmpvar_39, tmpvar_54.xxxx);
  detail_9 = tmpvar_55;
  highp vec4 tmpvar_56;
  tmpvar_56 = (0.25 * (mix (detail_9, tmpvar_42, tmpvar_54.yyyy) - 0.5));
  detail_9 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_57;
  mediump vec4 tmpvar_58;
  tmpvar_58 = mix (detail_9, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_8));
  highp vec4 tmpvar_59;
  tmpvar_59 = (xlv_TEXCOORD1 + tmpvar_58);
  color_16 = tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_7 = tmpvar_60;
  mediump vec4 tmpvar_61;
  tmpvar_61 = (mix (color_16, main_14, vec4(handoff_7)) * _Color);
  color_16.w = tmpvar_61.w;
  highp vec3 tmpvar_62;
  tmpvar_62 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_62;
  lowp vec3 tmpvar_63;
  tmpvar_63 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_64;
  lowp float tmpvar_65;
  mediump float lightShadowDataX_66;
  highp float dist_67;
  lowp float tmpvar_68;
  tmpvar_68 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD4).x;
  dist_67 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = _LightShadowData.x;
  lightShadowDataX_66 = tmpvar_69;
  highp float tmpvar_70;
  tmpvar_70 = max (float((dist_67 > (xlv_TEXCOORD4.z / xlv_TEXCOORD4.w))), lightShadowDataX_66);
  tmpvar_65 = tmpvar_70;
  lowp float tmpvar_71;
  tmpvar_71 = (texture2D (_LightTexture0, xlv_TEXCOORD3).w * tmpvar_65);
  mediump float tmpvar_72;
  tmpvar_72 = clamp ((((_LightColor0.w * mix (TNdotL_4, clamp (dot (tmpvar_53, -(_SunDir)), 0.0, 1.0), handoff_7)) * 4.0) * tmpvar_71), 0.0, 1.0);
  highp vec3 tmpvar_73;
  tmpvar_73 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_72)), 0.0, 1.0);
  light_3 = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0);
  terminator_2 = tmpvar_74;
  mediump vec3 tmpvar_75;
  tmpvar_75 = (light_3 * terminator_2);
  light_3 = tmpvar_75;
  highp vec3 tmpvar_76;
  tmpvar_76 = (tmpvar_61.xyz + (_Albedo * tmpvar_75));
  color_16.xyz = tmpvar_76;
  color_16.xyz = (color_16.xyz * tmpvar_75);
  color_16.w = 1.0;
  tmpvar_1 = color_16;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  highp vec4 tmpvar_5;
  tmpvar_5.x = _glesMultiTexCoord0.x;
  tmpvar_5.y = _glesMultiTexCoord0.y;
  tmpvar_5.z = _glesMultiTexCoord1.x;
  tmpvar_5.w = _glesMultiTexCoord1.y;
  highp vec4 o_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_8;
  tmpvar_8.x = tmpvar_7.x;
  tmpvar_8.y = (tmpvar_7.y * _ProjectionParams.x);
  o_6.xy = (tmpvar_8 + tmpvar_7.w);
  o_6.zw = tmpvar_2.zw;
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD4 = o_6;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_5).xyz);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float terminator_2;
  mediump vec3 light_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float handoff_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec3 norm_10;
  highp vec2 localCoords_11;
  mediump vec4 encnorm_12;
  mediump float vertLerp_13;
  mediump vec4 main_14;
  highp vec2 uv_15;
  mediump vec4 color_16;
  highp float r_17;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_18;
    y_over_x_18 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_19;
    highp float x_20;
    x_20 = (y_over_x_18 * inversesqrt(((y_over_x_18 * y_over_x_18) + 1.0)));
    s_19 = (sign(x_20) * (1.5708 - (sqrt((1.0 - abs(x_20))) * (1.5708 + (abs(x_20) * (-0.214602 + (abs(x_20) * (0.0865667 + (abs(x_20) * -0.0310296)))))))));
    r_17 = s_19;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_17 = (s_19 + 3.14159);
      } else {
        r_17 = (r_17 - 3.14159);
      };
    };
  } else {
    r_17 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_15.x = (0.5 + (0.159155 * r_17));
  uv_15.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_21;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_22;
    y_over_x_22 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_23;
    highp float x_24;
    x_24 = (y_over_x_22 * inversesqrt(((y_over_x_22 * y_over_x_22) + 1.0)));
    s_23 = (sign(x_24) * (1.5708 - (sqrt((1.0 - abs(x_24))) * (1.5708 + (abs(x_24) * (-0.214602 + (abs(x_24) * (0.0865667 + (abs(x_24) * -0.0310296)))))))));
    r_21 = s_23;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_21 = (s_23 + 3.14159);
      } else {
        r_21 = (r_21 - 3.14159);
      };
    };
  } else {
    r_21 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_25;
  tmpvar_25 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_26;
  tmpvar_26 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_28;
  tmpvar_28.x = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_28.y = dFdx(tmpvar_25);
  tmpvar_28.z = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_28.w = dFdy(tmpvar_25);
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2DGradEXT (_MainTex, uv_15, tmpvar_28.xy, tmpvar_28.zw);
  main_14 = tmpvar_29;
  highp vec2 tmpvar_30;
  tmpvar_30 = (xlv_TEXCOORD6.zy * _DetailScale);
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD6.zx * _DetailScale);
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.xy * _DetailScale);
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  highp float tmpvar_36;
  tmpvar_36 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_13 = tmpvar_36;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_DetailVertTex, tmpvar_33);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailTex, tmpvar_30);
  mediump vec4 tmpvar_39;
  tmpvar_39 = mix (tmpvar_37, tmpvar_38, vec4(vertLerp_13));
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailVertTex, tmpvar_34);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailTex, tmpvar_31);
  mediump vec4 tmpvar_42;
  tmpvar_42 = mix (tmpvar_40, tmpvar_41, vec4(vertLerp_13));
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailVertTex, tmpvar_35);
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailTex, tmpvar_32);
  mediump vec4 tmpvar_45;
  tmpvar_45 = mix (tmpvar_43, tmpvar_44, vec4(vertLerp_13));
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2DGradEXT (_BumpMap, uv_15, tmpvar_28.xy, tmpvar_28.zw);
  encnorm_12 = tmpvar_46;
  mediump vec2 tmpvar_47;
  tmpvar_47 = encnorm_12.wy;
  localCoords_11 = tmpvar_47;
  highp vec2 tmpvar_48;
  tmpvar_48 = (localCoords_11 - vec2(0.5, 0.5));
  localCoords_11.x = (tmpvar_48.x * 0.25);
  localCoords_11.y = (tmpvar_48.y * 0.5);
  uv_15.x = (uv_15.x - 0.5);
  highp vec2 tmpvar_49;
  tmpvar_49 = (uv_15 + localCoords_11);
  uv_15 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = cos((6.28319 * tmpvar_49.x));
  norm_10.z = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = sin((6.28319 * tmpvar_49.x));
  norm_10.x = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = cos((3.14159 * tmpvar_49.y));
  norm_10.y = tmpvar_52;
  mediump vec3 tmpvar_53;
  tmpvar_53 = -(norm_10);
  norm_10 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_55;
  tmpvar_55 = mix (tmpvar_45, tmpvar_39, tmpvar_54.xxxx);
  detail_9 = tmpvar_55;
  highp vec4 tmpvar_56;
  tmpvar_56 = (0.25 * (mix (detail_9, tmpvar_42, tmpvar_54.yyyy) - 0.5));
  detail_9 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_57;
  mediump vec4 tmpvar_58;
  tmpvar_58 = mix (detail_9, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_8));
  highp vec4 tmpvar_59;
  tmpvar_59 = (xlv_TEXCOORD1 + tmpvar_58);
  color_16 = tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_7 = tmpvar_60;
  mediump vec4 tmpvar_61;
  tmpvar_61 = (mix (color_16, main_14, vec4(handoff_7)) * _Color);
  color_16.w = tmpvar_61.w;
  highp vec3 tmpvar_62;
  tmpvar_62 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_62;
  lowp vec3 tmpvar_63;
  tmpvar_63 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_64;
  lowp float tmpvar_65;
  tmpvar_65 = (texture2D (_LightTexture0, xlv_TEXCOORD3).w * texture2DProj (_ShadowMapTexture, xlv_TEXCOORD4).x);
  mediump float tmpvar_66;
  tmpvar_66 = clamp ((((_LightColor0.w * mix (TNdotL_4, clamp (dot (tmpvar_53, -(_SunDir)), 0.0, 1.0), handoff_7)) * 4.0) * tmpvar_65), 0.0, 1.0);
  highp vec3 tmpvar_67;
  tmpvar_67 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_66)), 0.0, 1.0);
  light_3 = tmpvar_67;
  highp float tmpvar_68;
  tmpvar_68 = clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0);
  terminator_2 = tmpvar_68;
  mediump vec3 tmpvar_69;
  tmpvar_69 = (light_3 * terminator_2);
  light_3 = tmpvar_69;
  highp vec3 tmpvar_70;
  tmpvar_70 = (tmpvar_61.xyz + (_Albedo * tmpvar_69));
  color_16.xyz = tmpvar_70;
  color_16.xyz = (color_16.xyz * tmpvar_69);
  color_16.w = 1.0;
  tmpvar_1 = color_16;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 325
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 426
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 objnormal;
    highp vec2 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
};
#line 416
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 323
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 335
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 348
#line 356
#line 370
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 403
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 407
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 411
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp mat4 _Rotation;
#line 415
uniform highp mat4 _InvRotation;
#line 438
#line 464
#line 438
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 442
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    #line 446
    o.color = v.color;
    o.objnormal = v.normal;
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xy;
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    #line 451
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec2 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.objnormal);
    xlv_TEXCOORD3 = vec2(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereCoords);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 325
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 426
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 objnormal;
    highp vec2 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
};
#line 416
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 323
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 335
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 348
#line 356
#line 370
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 403
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 407
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 411
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp mat4 _Rotation;
#line 415
uniform highp mat4 _InvRotation;
#line 438
#line 464
#line 453
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 455
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 459
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 317
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    #line 319
    highp float dist = textureProj( _ShadowMapTexture, shadowCoord).x;
    mediump float lightShadowDataX = _LightShadowData.x;
    return max( float((dist > (shadowCoord.z / shadowCoord.w))), lightShadowDataX);
}
#line 464
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    #line 468
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 472
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    highp vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    highp vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    highp vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    #line 476
    highp vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    highp vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    highp vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, (-IN.sphereCoords))) - 0.95)) + 0.5));
    #line 480
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    #line 484
    highp vec2 localCoords = encnorm.wy;
    localCoords -= vec2( 0.5);
    localCoords.x *= 0.25;
    localCoords.y *= 0.5;
    #line 488
    uv.x -= 0.5;
    uv += localCoords;
    mediump vec3 norm;
    norm.z = cos((6.28319 * uv.x));
    #line 492
    norm.x = sin((6.28319 * uv.x));
    norm.y = cos((3.14159 * uv.y));
    norm = (-norm);
    sphereNrm = abs(sphereNrm);
    #line 496
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = (0.25 * (mix( detail, detailY, vec4( sphereNrm.y)) - 0.5));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (IN.color + mix( detail.xyzw, vec4( 0.0), vec4( detailLevel)));
    #line 500
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    color = mix( color, main, vec4( handoff));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 504
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    #line 508
    lowp float atten = (texture( _LightTexture0, IN._LightCoord).w * unitySampleShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    mediump float terminator = xll_saturate_f(floor((1.01 + dot( IN.sphereCoords, _SunDir))));
    #line 512
    light *= terminator;
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    color.w = 1.0;
    #line 516
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec2 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.objnormal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec2(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec4 _LightPositionRange;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec4 tmpvar_3;
  tmpvar_3.x = gl_MultiTexCoord0.x;
  tmpvar_3.y = gl_MultiTexCoord0.y;
  tmpvar_3.z = gl_MultiTexCoord1.x;
  tmpvar_3.w = gl_MultiTexCoord1.y;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_3).xyz);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _LightPositionRange;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec3 norm_1;
  vec2 localCoords_2;
  vec2 uv_3;
  vec4 color_4;
  float r_5;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_6;
    y_over_x_6 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * r_5));
  uv_3.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_9;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_10;
    y_over_x_10 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_11;
    float x_12;
    x_12 = (y_over_x_10 * inversesqrt(((y_over_x_10 * y_over_x_10) + 1.0)));
    s_11 = (sign(x_12) * (1.5708 - (sqrt((1.0 - abs(x_12))) * (1.5708 + (abs(x_12) * (-0.214602 + (abs(x_12) * (0.0865667 + (abs(x_12) * -0.0310296)))))))));
    r_9 = s_11;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_9 = (s_11 + 3.14159);
      } else {
        r_9 = (r_9 - 3.14159);
      };
    };
  } else {
    r_9 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_13;
  tmpvar_13 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_14;
  tmpvar_14 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_15;
  tmpvar_15 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(tmpvar_13);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(tmpvar_13);
  vec4 tmpvar_17;
  tmpvar_17 = texture2DGradARB (_MainTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  float tmpvar_18;
  tmpvar_18 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec2 tmpvar_19;
  tmpvar_19 = (texture2DGradARB (_BumpMap, uv_3, tmpvar_16.xy, tmpvar_16.zw).wy - vec2(0.5, 0.5));
  localCoords_2.x = (tmpvar_19.x * 0.25);
  localCoords_2.y = (tmpvar_19.y * 0.5);
  uv_3.x = (uv_3.x - 0.5);
  vec2 tmpvar_20;
  tmpvar_20 = (uv_3 + localCoords_2);
  uv_3 = tmpvar_20;
  norm_1.z = cos((6.28319 * tmpvar_20.x));
  norm_1.x = sin((6.28319 * tmpvar_20.x));
  norm_1.y = cos((3.14159 * tmpvar_20.y));
  vec3 tmpvar_21;
  tmpvar_21 = -(norm_1);
  norm_1 = tmpvar_21;
  vec3 tmpvar_22;
  tmpvar_22 = abs(xlv_TEXCOORD6);
  float tmpvar_23;
  tmpvar_23 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  vec4 tmpvar_24;
  tmpvar_24 = (mix ((xlv_TEXCOORD1 + mix ((0.25 * (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_18)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_18)), tmpvar_22.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_18)), tmpvar_22.yyyy) - 0.5)), vec4(0.0, 0.0, 0.0, 0.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))), tmpvar_17, vec4(tmpvar_23)) * _Color);
  color_4 = tmpvar_24;
  float tmpvar_25;
  tmpvar_25 = mix (clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), clamp (dot (tmpvar_21, -(_SunDir)), 0.0, 1.0), tmpvar_23);
  vec4 tmpvar_26;
  tmpvar_26 = texture2D (_LightTexture0, vec2(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)));
  float tmpvar_27;
  tmpvar_27 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  float tmpvar_28;
  tmpvar_28 = dot (textureCube (_ShadowMapTexture, xlv_TEXCOORD4), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  float tmpvar_29;
  if ((tmpvar_28 < tmpvar_27)) {
    tmpvar_29 = _LightShadowData.x;
  } else {
    tmpvar_29 = 1.0;
  };
  vec3 tmpvar_30;
  tmpvar_30 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_25) * 4.0) * (tmpvar_26.w * tmpvar_29)), 0.0, 1.0))), 0.0, 1.0) * clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0));
  color_4.xyz = (tmpvar_24.xyz + (_Albedo * tmpvar_30));
  color_4.xyz = (color_4.xyz * tmpvar_30);
  color_4.w = 1.0;
  gl_FragData[0] = color_4;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_LightPositionRange]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 32 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
def c14, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
mov r1.xyz, v2
mov r1.w, c14.x
dp4 r2.z, r1, c6
dp4 r2.x, r1, c4
dp4 r2.y, r1, c5
mov r0.zw, v4.xyxy
mov r0.xy, v3
dp4 r2.w, r0, r0
rsq r1.x, r2.w
mul r0.xyz, r1.x, r0
mov o7.xyz, -r0
dp3 r0.w, r2, r2
rsq r0.w, r0.w
mul o6.xyz, r0.w, r2
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
dp4 r0.w, v0, c7
add r1.xyz, -r0, c12
dp3 r1.x, r1, r1
rsq r1.x, r1.x
mov o2, v1
dp4 o4.z, r0, c10
dp4 o4.y, r0, c9
dp4 o4.x, r0, c8
rcp o1.x, r1.x
mov o3.xyz, v2
add o5.xyz, r0, -c13
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  highp vec3 p_2;
  p_2 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_1;
  highp vec4 tmpvar_4;
  tmpvar_4.x = _glesMultiTexCoord0.x;
  tmpvar_4.y = _glesMultiTexCoord0.y;
  tmpvar_4.z = _glesMultiTexCoord1.x;
  tmpvar_4.w = _glesMultiTexCoord1.y;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_4).xyz);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float terminator_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float TNdotL_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump float handoff_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec3 norm_11;
  highp vec2 localCoords_12;
  mediump vec4 encnorm_13;
  mediump float vertLerp_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD6.zy * _DetailScale);
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zx * _DetailScale);
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.xy * _DetailScale);
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  highp float tmpvar_37;
  tmpvar_37 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_14 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailVertTex, tmpvar_34);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailTex, tmpvar_31);
  mediump vec4 tmpvar_40;
  tmpvar_40 = mix (tmpvar_38, tmpvar_39, vec4(vertLerp_14));
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailVertTex, tmpvar_35);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailTex, tmpvar_32);
  mediump vec4 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41, tmpvar_42, vec4(vertLerp_14));
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailVertTex, tmpvar_36);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, tmpvar_33);
  mediump vec4 tmpvar_46;
  tmpvar_46 = mix (tmpvar_44, tmpvar_45, vec4(vertLerp_14));
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2DGradEXT (_BumpMap, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  encnorm_13 = tmpvar_47;
  mediump vec2 tmpvar_48;
  tmpvar_48 = encnorm_13.wy;
  localCoords_12 = tmpvar_48;
  highp vec2 tmpvar_49;
  tmpvar_49 = (localCoords_12 - vec2(0.5, 0.5));
  localCoords_12.x = (tmpvar_49.x * 0.25);
  localCoords_12.y = (tmpvar_49.y * 0.5);
  uv_16.x = (uv_16.x - 0.5);
  highp vec2 tmpvar_50;
  tmpvar_50 = (uv_16 + localCoords_12);
  uv_16 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = cos((6.28319 * tmpvar_50.x));
  norm_11.z = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = sin((6.28319 * tmpvar_50.x));
  norm_11.x = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = cos((3.14159 * tmpvar_50.y));
  norm_11.y = tmpvar_53;
  mediump vec3 tmpvar_54;
  tmpvar_54 = -(norm_11);
  norm_11 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_56;
  tmpvar_56 = mix (tmpvar_46, tmpvar_40, tmpvar_55.xxxx);
  detail_10 = tmpvar_56;
  highp vec4 tmpvar_57;
  tmpvar_57 = (0.25 * (mix (detail_10, tmpvar_43, tmpvar_55.yyyy) - 0.5));
  detail_10 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_9 = tmpvar_58;
  mediump vec4 tmpvar_59;
  tmpvar_59 = mix (detail_10, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_9));
  highp vec4 tmpvar_60;
  tmpvar_60 = (xlv_TEXCOORD1 + tmpvar_59);
  color_17 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_8 = tmpvar_61;
  mediump vec4 tmpvar_62;
  tmpvar_62 = (mix (color_17, main_15, vec4(handoff_8)) * _Color);
  color_17 = tmpvar_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = clamp (dot (xlv_TEXCOORD5, lightDirection_6), 0.0, 1.0);
  TNdotL_5 = tmpvar_65;
  mediump float tmpvar_66;
  tmpvar_66 = mix (TNdotL_5, clamp (dot (tmpvar_54, -(_SunDir)), 0.0, 1.0), handoff_8);
  highp float tmpvar_67;
  tmpvar_67 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_68;
  tmpvar_68 = texture2D (_LightTexture0, vec2(tmpvar_67));
  highp float tmpvar_69;
  tmpvar_69 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  highp vec4 packDist_70;
  lowp vec4 tmpvar_71;
  tmpvar_71 = textureCube (_ShadowMapTexture, xlv_TEXCOORD4);
  packDist_70 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = dot (packDist_70, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp float tmpvar_73;
  if ((tmpvar_72 < tmpvar_69)) {
    tmpvar_73 = _LightShadowData.x;
  } else {
    tmpvar_73 = 1.0;
  };
  highp float tmpvar_74;
  tmpvar_74 = (tmpvar_68.w * tmpvar_73);
  atten_4 = tmpvar_74;
  mediump float tmpvar_75;
  tmpvar_75 = clamp ((((_LightColor0.w * tmpvar_66) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_76;
  tmpvar_76 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_75)), 0.0, 1.0);
  light_3 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0);
  terminator_2 = tmpvar_77;
  mediump vec3 tmpvar_78;
  tmpvar_78 = (light_3 * terminator_2);
  light_3 = tmpvar_78;
  highp vec3 tmpvar_79;
  tmpvar_79 = (tmpvar_62.xyz + (_Albedo * tmpvar_78));
  color_17.xyz = tmpvar_79;
  color_17.xyz = (color_17.xyz * tmpvar_78);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  highp vec3 p_2;
  p_2 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_1;
  highp vec4 tmpvar_4;
  tmpvar_4.x = _glesMultiTexCoord0.x;
  tmpvar_4.y = _glesMultiTexCoord0.y;
  tmpvar_4.z = _glesMultiTexCoord1.x;
  tmpvar_4.w = _glesMultiTexCoord1.y;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_4).xyz);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float terminator_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float TNdotL_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump float handoff_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec3 norm_11;
  highp vec2 localCoords_12;
  mediump vec4 encnorm_13;
  mediump float vertLerp_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD6.zy * _DetailScale);
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zx * _DetailScale);
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.xy * _DetailScale);
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  highp float tmpvar_37;
  tmpvar_37 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_14 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailVertTex, tmpvar_34);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailTex, tmpvar_31);
  mediump vec4 tmpvar_40;
  tmpvar_40 = mix (tmpvar_38, tmpvar_39, vec4(vertLerp_14));
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailVertTex, tmpvar_35);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailTex, tmpvar_32);
  mediump vec4 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41, tmpvar_42, vec4(vertLerp_14));
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailVertTex, tmpvar_36);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, tmpvar_33);
  mediump vec4 tmpvar_46;
  tmpvar_46 = mix (tmpvar_44, tmpvar_45, vec4(vertLerp_14));
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2DGradEXT (_BumpMap, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  encnorm_13 = tmpvar_47;
  mediump vec2 tmpvar_48;
  tmpvar_48 = encnorm_13.wy;
  localCoords_12 = tmpvar_48;
  highp vec2 tmpvar_49;
  tmpvar_49 = (localCoords_12 - vec2(0.5, 0.5));
  localCoords_12.x = (tmpvar_49.x * 0.25);
  localCoords_12.y = (tmpvar_49.y * 0.5);
  uv_16.x = (uv_16.x - 0.5);
  highp vec2 tmpvar_50;
  tmpvar_50 = (uv_16 + localCoords_12);
  uv_16 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = cos((6.28319 * tmpvar_50.x));
  norm_11.z = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = sin((6.28319 * tmpvar_50.x));
  norm_11.x = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = cos((3.14159 * tmpvar_50.y));
  norm_11.y = tmpvar_53;
  mediump vec3 tmpvar_54;
  tmpvar_54 = -(norm_11);
  norm_11 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_56;
  tmpvar_56 = mix (tmpvar_46, tmpvar_40, tmpvar_55.xxxx);
  detail_10 = tmpvar_56;
  highp vec4 tmpvar_57;
  tmpvar_57 = (0.25 * (mix (detail_10, tmpvar_43, tmpvar_55.yyyy) - 0.5));
  detail_10 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_9 = tmpvar_58;
  mediump vec4 tmpvar_59;
  tmpvar_59 = mix (detail_10, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_9));
  highp vec4 tmpvar_60;
  tmpvar_60 = (xlv_TEXCOORD1 + tmpvar_59);
  color_17 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_8 = tmpvar_61;
  mediump vec4 tmpvar_62;
  tmpvar_62 = (mix (color_17, main_15, vec4(handoff_8)) * _Color);
  color_17 = tmpvar_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = clamp (dot (xlv_TEXCOORD5, lightDirection_6), 0.0, 1.0);
  TNdotL_5 = tmpvar_65;
  mediump float tmpvar_66;
  tmpvar_66 = mix (TNdotL_5, clamp (dot (tmpvar_54, -(_SunDir)), 0.0, 1.0), handoff_8);
  highp float tmpvar_67;
  tmpvar_67 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_68;
  tmpvar_68 = texture2D (_LightTexture0, vec2(tmpvar_67));
  highp float tmpvar_69;
  tmpvar_69 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  highp vec4 packDist_70;
  lowp vec4 tmpvar_71;
  tmpvar_71 = textureCube (_ShadowMapTexture, xlv_TEXCOORD4);
  packDist_70 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = dot (packDist_70, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp float tmpvar_73;
  if ((tmpvar_72 < tmpvar_69)) {
    tmpvar_73 = _LightShadowData.x;
  } else {
    tmpvar_73 = 1.0;
  };
  highp float tmpvar_74;
  tmpvar_74 = (tmpvar_68.w * tmpvar_73);
  atten_4 = tmpvar_74;
  mediump float tmpvar_75;
  tmpvar_75 = clamp ((((_LightColor0.w * tmpvar_66) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_76;
  tmpvar_76 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_75)), 0.0, 1.0);
  light_3 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0);
  terminator_2 = tmpvar_77;
  mediump vec3 tmpvar_78;
  tmpvar_78 = (light_3 * terminator_2);
  light_3 = tmpvar_78;
  highp vec3 tmpvar_79;
  tmpvar_79 = (tmpvar_62.xyz + (_Albedo * tmpvar_78));
  color_17.xyz = tmpvar_79;
  color_17.xyz = (color_17.xyz * tmpvar_78);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 330
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 431
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 objnormal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
};
#line 421
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 340
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 353
#line 361
#line 375
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 408
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 412
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 416
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp mat4 _Rotation;
#line 420
uniform highp mat4 _InvRotation;
#line 443
#line 469
#line 443
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 447
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    #line 451
    o.color = v.color;
    o.objnormal = v.normal;
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    o._ShadowCoord = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    #line 456
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.objnormal);
    xlv_TEXCOORD3 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereCoords);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 330
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 431
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 objnormal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
};
#line 421
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 340
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 353
#line 361
#line 375
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 408
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 412
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 416
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp mat4 _Rotation;
#line 420
uniform highp mat4 _InvRotation;
#line 443
#line 469
#line 458
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 460
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 464
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 215
highp float DecodeFloatRGBA( in highp vec4 enc ) {
    highp vec4 kDecodeDot = vec4( 1.0, 0.00392157, 1.53787e-05, 6.22737e-09);
    return dot( enc, kDecodeDot);
}
#line 316
highp float SampleCubeDistance( in highp vec3 vec ) {
    highp vec4 packDist = texture( _ShadowMapTexture, vec);
    #line 319
    return DecodeFloatRGBA( packDist);
}
#line 321
highp float unityCubeShadow( in highp vec3 vec ) {
    #line 323
    highp float mydist = (length(vec) * _LightPositionRange.w);
    mydist *= 0.97;
    highp float dist = SampleCubeDistance( vec);
    return (( (dist < mydist) ) ? ( _LightShadowData.x ) : ( 1.0 ));
}
#line 469
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    #line 473
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 477
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    highp vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    highp vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    highp vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    #line 481
    highp vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    highp vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    highp vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, (-IN.sphereCoords))) - 0.95)) + 0.5));
    #line 485
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    #line 489
    highp vec2 localCoords = encnorm.wy;
    localCoords -= vec2( 0.5);
    localCoords.x *= 0.25;
    localCoords.y *= 0.5;
    #line 493
    uv.x -= 0.5;
    uv += localCoords;
    mediump vec3 norm;
    norm.z = cos((6.28319 * uv.x));
    #line 497
    norm.x = sin((6.28319 * uv.x));
    norm.y = cos((3.14159 * uv.y));
    norm = (-norm);
    sphereNrm = abs(sphereNrm);
    #line 501
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = (0.25 * (mix( detail, detailY, vec4( sphereNrm.y)) - 0.5));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (IN.color + mix( detail.xyzw, vec4( 0.0), vec4( detailLevel)));
    #line 505
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    color = mix( color, main, vec4( handoff));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 509
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    #line 513
    lowp float atten = (texture( _LightTexture0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * unityCubeShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    mediump float terminator = xll_saturate_f(floor((1.01 + dot( IN.sphereCoords, _SunDir))));
    #line 517
    light *= terminator;
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    color.w = 1.0;
    #line 521
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.objnormal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec4 _LightPositionRange;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec4 tmpvar_3;
  tmpvar_3.x = gl_MultiTexCoord0.x;
  tmpvar_3.y = gl_MultiTexCoord0.y;
  tmpvar_3.z = gl_MultiTexCoord1.x;
  tmpvar_3.w = gl_MultiTexCoord1.y;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_3).xyz);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _LightPositionRange;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec3 norm_1;
  vec2 localCoords_2;
  vec2 uv_3;
  vec4 color_4;
  float r_5;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_6;
    y_over_x_6 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * r_5));
  uv_3.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_9;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_10;
    y_over_x_10 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_11;
    float x_12;
    x_12 = (y_over_x_10 * inversesqrt(((y_over_x_10 * y_over_x_10) + 1.0)));
    s_11 = (sign(x_12) * (1.5708 - (sqrt((1.0 - abs(x_12))) * (1.5708 + (abs(x_12) * (-0.214602 + (abs(x_12) * (0.0865667 + (abs(x_12) * -0.0310296)))))))));
    r_9 = s_11;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_9 = (s_11 + 3.14159);
      } else {
        r_9 = (r_9 - 3.14159);
      };
    };
  } else {
    r_9 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_13;
  tmpvar_13 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_14;
  tmpvar_14 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_15;
  tmpvar_15 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(tmpvar_13);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(tmpvar_13);
  vec4 tmpvar_17;
  tmpvar_17 = texture2DGradARB (_MainTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  float tmpvar_18;
  tmpvar_18 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec2 tmpvar_19;
  tmpvar_19 = (texture2DGradARB (_BumpMap, uv_3, tmpvar_16.xy, tmpvar_16.zw).wy - vec2(0.5, 0.5));
  localCoords_2.x = (tmpvar_19.x * 0.25);
  localCoords_2.y = (tmpvar_19.y * 0.5);
  uv_3.x = (uv_3.x - 0.5);
  vec2 tmpvar_20;
  tmpvar_20 = (uv_3 + localCoords_2);
  uv_3 = tmpvar_20;
  norm_1.z = cos((6.28319 * tmpvar_20.x));
  norm_1.x = sin((6.28319 * tmpvar_20.x));
  norm_1.y = cos((3.14159 * tmpvar_20.y));
  vec3 tmpvar_21;
  tmpvar_21 = -(norm_1);
  norm_1 = tmpvar_21;
  vec3 tmpvar_22;
  tmpvar_22 = abs(xlv_TEXCOORD6);
  float tmpvar_23;
  tmpvar_23 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  vec4 tmpvar_24;
  tmpvar_24 = (mix ((xlv_TEXCOORD1 + mix ((0.25 * (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_18)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_18)), tmpvar_22.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_18)), tmpvar_22.yyyy) - 0.5)), vec4(0.0, 0.0, 0.0, 0.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))), tmpvar_17, vec4(tmpvar_23)) * _Color);
  color_4 = tmpvar_24;
  float tmpvar_25;
  tmpvar_25 = mix (clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), clamp (dot (tmpvar_21, -(_SunDir)), 0.0, 1.0), tmpvar_23);
  vec4 tmpvar_26;
  tmpvar_26 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)));
  vec4 tmpvar_27;
  tmpvar_27 = textureCube (_LightTexture0, xlv_TEXCOORD3);
  float tmpvar_28;
  tmpvar_28 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  float tmpvar_29;
  tmpvar_29 = dot (textureCube (_ShadowMapTexture, xlv_TEXCOORD4), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  float tmpvar_30;
  if ((tmpvar_29 < tmpvar_28)) {
    tmpvar_30 = _LightShadowData.x;
  } else {
    tmpvar_30 = 1.0;
  };
  vec3 tmpvar_31;
  tmpvar_31 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_25) * 4.0) * ((tmpvar_26.w * tmpvar_27.w) * tmpvar_30)), 0.0, 1.0))), 0.0, 1.0) * clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0));
  color_4.xyz = (tmpvar_24.xyz + (_Albedo * tmpvar_31));
  color_4.xyz = (color_4.xyz * tmpvar_31);
  color_4.w = 1.0;
  gl_FragData[0] = color_4;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_LightPositionRange]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 32 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
def c14, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
mov r1.xyz, v2
mov r1.w, c14.x
dp4 r2.z, r1, c6
dp4 r2.x, r1, c4
dp4 r2.y, r1, c5
mov r0.zw, v4.xyxy
mov r0.xy, v3
dp4 r2.w, r0, r0
rsq r1.x, r2.w
mul r0.xyz, r1.x, r0
mov o7.xyz, -r0
dp3 r0.w, r2, r2
rsq r0.w, r0.w
mul o6.xyz, r0.w, r2
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
dp4 r0.w, v0, c7
add r1.xyz, -r0, c12
dp3 r1.x, r1, r1
rsq r1.x, r1.x
mov o2, v1
dp4 o4.z, r0, c10
dp4 o4.y, r0, c9
dp4 o4.x, r0, c8
rcp o1.x, r1.x
mov o3.xyz, v2
add o5.xyz, r0, -c13
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  highp vec3 p_2;
  p_2 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_1;
  highp vec4 tmpvar_4;
  tmpvar_4.x = _glesMultiTexCoord0.x;
  tmpvar_4.y = _glesMultiTexCoord0.y;
  tmpvar_4.z = _glesMultiTexCoord1.x;
  tmpvar_4.w = _glesMultiTexCoord1.y;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_4).xyz);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float terminator_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float TNdotL_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump float handoff_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec3 norm_11;
  highp vec2 localCoords_12;
  mediump vec4 encnorm_13;
  mediump float vertLerp_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD6.zy * _DetailScale);
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zx * _DetailScale);
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.xy * _DetailScale);
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  highp float tmpvar_37;
  tmpvar_37 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_14 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailVertTex, tmpvar_34);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailTex, tmpvar_31);
  mediump vec4 tmpvar_40;
  tmpvar_40 = mix (tmpvar_38, tmpvar_39, vec4(vertLerp_14));
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailVertTex, tmpvar_35);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailTex, tmpvar_32);
  mediump vec4 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41, tmpvar_42, vec4(vertLerp_14));
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailVertTex, tmpvar_36);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, tmpvar_33);
  mediump vec4 tmpvar_46;
  tmpvar_46 = mix (tmpvar_44, tmpvar_45, vec4(vertLerp_14));
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2DGradEXT (_BumpMap, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  encnorm_13 = tmpvar_47;
  mediump vec2 tmpvar_48;
  tmpvar_48 = encnorm_13.wy;
  localCoords_12 = tmpvar_48;
  highp vec2 tmpvar_49;
  tmpvar_49 = (localCoords_12 - vec2(0.5, 0.5));
  localCoords_12.x = (tmpvar_49.x * 0.25);
  localCoords_12.y = (tmpvar_49.y * 0.5);
  uv_16.x = (uv_16.x - 0.5);
  highp vec2 tmpvar_50;
  tmpvar_50 = (uv_16 + localCoords_12);
  uv_16 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = cos((6.28319 * tmpvar_50.x));
  norm_11.z = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = sin((6.28319 * tmpvar_50.x));
  norm_11.x = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = cos((3.14159 * tmpvar_50.y));
  norm_11.y = tmpvar_53;
  mediump vec3 tmpvar_54;
  tmpvar_54 = -(norm_11);
  norm_11 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_56;
  tmpvar_56 = mix (tmpvar_46, tmpvar_40, tmpvar_55.xxxx);
  detail_10 = tmpvar_56;
  highp vec4 tmpvar_57;
  tmpvar_57 = (0.25 * (mix (detail_10, tmpvar_43, tmpvar_55.yyyy) - 0.5));
  detail_10 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_9 = tmpvar_58;
  mediump vec4 tmpvar_59;
  tmpvar_59 = mix (detail_10, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_9));
  highp vec4 tmpvar_60;
  tmpvar_60 = (xlv_TEXCOORD1 + tmpvar_59);
  color_17 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_8 = tmpvar_61;
  mediump vec4 tmpvar_62;
  tmpvar_62 = (mix (color_17, main_15, vec4(handoff_8)) * _Color);
  color_17 = tmpvar_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = clamp (dot (xlv_TEXCOORD5, lightDirection_6), 0.0, 1.0);
  TNdotL_5 = tmpvar_65;
  mediump float tmpvar_66;
  tmpvar_66 = mix (TNdotL_5, clamp (dot (tmpvar_54, -(_SunDir)), 0.0, 1.0), handoff_8);
  highp float tmpvar_67;
  tmpvar_67 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_68;
  tmpvar_68 = texture2D (_LightTextureB0, vec2(tmpvar_67));
  lowp vec4 tmpvar_69;
  tmpvar_69 = textureCube (_LightTexture0, xlv_TEXCOORD3);
  highp float tmpvar_70;
  tmpvar_70 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  highp vec4 packDist_71;
  lowp vec4 tmpvar_72;
  tmpvar_72 = textureCube (_ShadowMapTexture, xlv_TEXCOORD4);
  packDist_71 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = dot (packDist_71, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp float tmpvar_74;
  if ((tmpvar_73 < tmpvar_70)) {
    tmpvar_74 = _LightShadowData.x;
  } else {
    tmpvar_74 = 1.0;
  };
  highp float tmpvar_75;
  tmpvar_75 = ((tmpvar_68.w * tmpvar_69.w) * tmpvar_74);
  atten_4 = tmpvar_75;
  mediump float tmpvar_76;
  tmpvar_76 = clamp ((((_LightColor0.w * tmpvar_66) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_77;
  tmpvar_77 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_76)), 0.0, 1.0);
  light_3 = tmpvar_77;
  highp float tmpvar_78;
  tmpvar_78 = clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0);
  terminator_2 = tmpvar_78;
  mediump vec3 tmpvar_79;
  tmpvar_79 = (light_3 * terminator_2);
  light_3 = tmpvar_79;
  highp vec3 tmpvar_80;
  tmpvar_80 = (tmpvar_62.xyz + (_Albedo * tmpvar_79));
  color_17.xyz = tmpvar_80;
  color_17.xyz = (color_17.xyz * tmpvar_79);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  highp vec3 p_2;
  p_2 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_1;
  highp vec4 tmpvar_4;
  tmpvar_4.x = _glesMultiTexCoord0.x;
  tmpvar_4.y = _glesMultiTexCoord0.y;
  tmpvar_4.z = _glesMultiTexCoord1.x;
  tmpvar_4.w = _glesMultiTexCoord1.y;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_4).xyz);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float terminator_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float TNdotL_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump float handoff_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec3 norm_11;
  highp vec2 localCoords_12;
  mediump vec4 encnorm_13;
  mediump float vertLerp_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD6.zy * _DetailScale);
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zx * _DetailScale);
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.xy * _DetailScale);
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  highp float tmpvar_37;
  tmpvar_37 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_14 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailVertTex, tmpvar_34);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailTex, tmpvar_31);
  mediump vec4 tmpvar_40;
  tmpvar_40 = mix (tmpvar_38, tmpvar_39, vec4(vertLerp_14));
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailVertTex, tmpvar_35);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailTex, tmpvar_32);
  mediump vec4 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41, tmpvar_42, vec4(vertLerp_14));
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailVertTex, tmpvar_36);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, tmpvar_33);
  mediump vec4 tmpvar_46;
  tmpvar_46 = mix (tmpvar_44, tmpvar_45, vec4(vertLerp_14));
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2DGradEXT (_BumpMap, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  encnorm_13 = tmpvar_47;
  mediump vec2 tmpvar_48;
  tmpvar_48 = encnorm_13.wy;
  localCoords_12 = tmpvar_48;
  highp vec2 tmpvar_49;
  tmpvar_49 = (localCoords_12 - vec2(0.5, 0.5));
  localCoords_12.x = (tmpvar_49.x * 0.25);
  localCoords_12.y = (tmpvar_49.y * 0.5);
  uv_16.x = (uv_16.x - 0.5);
  highp vec2 tmpvar_50;
  tmpvar_50 = (uv_16 + localCoords_12);
  uv_16 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = cos((6.28319 * tmpvar_50.x));
  norm_11.z = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = sin((6.28319 * tmpvar_50.x));
  norm_11.x = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = cos((3.14159 * tmpvar_50.y));
  norm_11.y = tmpvar_53;
  mediump vec3 tmpvar_54;
  tmpvar_54 = -(norm_11);
  norm_11 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_56;
  tmpvar_56 = mix (tmpvar_46, tmpvar_40, tmpvar_55.xxxx);
  detail_10 = tmpvar_56;
  highp vec4 tmpvar_57;
  tmpvar_57 = (0.25 * (mix (detail_10, tmpvar_43, tmpvar_55.yyyy) - 0.5));
  detail_10 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_9 = tmpvar_58;
  mediump vec4 tmpvar_59;
  tmpvar_59 = mix (detail_10, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_9));
  highp vec4 tmpvar_60;
  tmpvar_60 = (xlv_TEXCOORD1 + tmpvar_59);
  color_17 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_8 = tmpvar_61;
  mediump vec4 tmpvar_62;
  tmpvar_62 = (mix (color_17, main_15, vec4(handoff_8)) * _Color);
  color_17 = tmpvar_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = clamp (dot (xlv_TEXCOORD5, lightDirection_6), 0.0, 1.0);
  TNdotL_5 = tmpvar_65;
  mediump float tmpvar_66;
  tmpvar_66 = mix (TNdotL_5, clamp (dot (tmpvar_54, -(_SunDir)), 0.0, 1.0), handoff_8);
  highp float tmpvar_67;
  tmpvar_67 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_68;
  tmpvar_68 = texture2D (_LightTextureB0, vec2(tmpvar_67));
  lowp vec4 tmpvar_69;
  tmpvar_69 = textureCube (_LightTexture0, xlv_TEXCOORD3);
  highp float tmpvar_70;
  tmpvar_70 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  highp vec4 packDist_71;
  lowp vec4 tmpvar_72;
  tmpvar_72 = textureCube (_ShadowMapTexture, xlv_TEXCOORD4);
  packDist_71 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = dot (packDist_71, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp float tmpvar_74;
  if ((tmpvar_73 < tmpvar_70)) {
    tmpvar_74 = _LightShadowData.x;
  } else {
    tmpvar_74 = 1.0;
  };
  highp float tmpvar_75;
  tmpvar_75 = ((tmpvar_68.w * tmpvar_69.w) * tmpvar_74);
  atten_4 = tmpvar_75;
  mediump float tmpvar_76;
  tmpvar_76 = clamp ((((_LightColor0.w * tmpvar_66) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_77;
  tmpvar_77 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_76)), 0.0, 1.0);
  light_3 = tmpvar_77;
  highp float tmpvar_78;
  tmpvar_78 = clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0);
  terminator_2 = tmpvar_78;
  mediump vec3 tmpvar_79;
  tmpvar_79 = (light_3 * terminator_2);
  light_3 = tmpvar_79;
  highp vec3 tmpvar_80;
  tmpvar_80 = (tmpvar_62.xyz + (_Albedo * tmpvar_79));
  color_17.xyz = tmpvar_80;
  color_17.xyz = (color_17.xyz * tmpvar_79);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 331
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 432
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 objnormal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
};
#line 422
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 341
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 354
#line 362
#line 376
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 409
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 413
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 417
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp mat4 _Rotation;
#line 421
uniform highp mat4 _InvRotation;
#line 444
#line 470
#line 444
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 448
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    #line 452
    o.color = v.color;
    o.objnormal = v.normal;
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    o._ShadowCoord = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    #line 457
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.objnormal);
    xlv_TEXCOORD3 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereCoords);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 331
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 432
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 objnormal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
};
#line 422
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 341
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 354
#line 362
#line 376
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 409
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 413
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 417
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp mat4 _Rotation;
#line 421
uniform highp mat4 _InvRotation;
#line 444
#line 470
#line 459
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 461
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 465
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 215
highp float DecodeFloatRGBA( in highp vec4 enc ) {
    highp vec4 kDecodeDot = vec4( 1.0, 0.00392157, 1.53787e-05, 6.22737e-09);
    return dot( enc, kDecodeDot);
}
#line 316
highp float SampleCubeDistance( in highp vec3 vec ) {
    highp vec4 packDist = texture( _ShadowMapTexture, vec);
    #line 319
    return DecodeFloatRGBA( packDist);
}
#line 321
highp float unityCubeShadow( in highp vec3 vec ) {
    #line 323
    highp float mydist = (length(vec) * _LightPositionRange.w);
    mydist *= 0.97;
    highp float dist = SampleCubeDistance( vec);
    return (( (dist < mydist) ) ? ( _LightShadowData.x ) : ( 1.0 ));
}
#line 470
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    #line 474
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 478
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    highp vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    highp vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    highp vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    #line 482
    highp vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    highp vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    highp vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, (-IN.sphereCoords))) - 0.95)) + 0.5));
    #line 486
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    #line 490
    highp vec2 localCoords = encnorm.wy;
    localCoords -= vec2( 0.5);
    localCoords.x *= 0.25;
    localCoords.y *= 0.5;
    #line 494
    uv.x -= 0.5;
    uv += localCoords;
    mediump vec3 norm;
    norm.z = cos((6.28319 * uv.x));
    #line 498
    norm.x = sin((6.28319 * uv.x));
    norm.y = cos((3.14159 * uv.y));
    norm = (-norm);
    sphereNrm = abs(sphereNrm);
    #line 502
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = (0.25 * (mix( detail, detailY, vec4( sphereNrm.y)) - 0.5));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (IN.color + mix( detail.xyzw, vec4( 0.0), vec4( detailLevel)));
    #line 506
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    color = mix( color, main, vec4( handoff));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 510
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    #line 514
    lowp float atten = ((texture( _LightTextureB0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * texture( _LightTexture0, IN._LightCoord).w) * unityCubeShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    mediump float terminator = xll_saturate_f(floor((1.01 + dot( IN.sphereCoords, _SunDir))));
    #line 518
    light *= terminator;
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    color.w = 1.0;
    #line 522
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.objnormal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform mat4 unity_World2Shadow[4];
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec4 tmpvar_3;
  tmpvar_3.x = gl_MultiTexCoord0.x;
  tmpvar_3.y = gl_MultiTexCoord0.y;
  tmpvar_3.z = gl_MultiTexCoord1.x;
  tmpvar_3.w = gl_MultiTexCoord1.y;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * gl_Vertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_3).xyz);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec3 norm_1;
  vec2 localCoords_2;
  vec2 uv_3;
  vec4 color_4;
  float r_5;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_6;
    y_over_x_6 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * r_5));
  uv_3.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_9;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_10;
    y_over_x_10 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_11;
    float x_12;
    x_12 = (y_over_x_10 * inversesqrt(((y_over_x_10 * y_over_x_10) + 1.0)));
    s_11 = (sign(x_12) * (1.5708 - (sqrt((1.0 - abs(x_12))) * (1.5708 + (abs(x_12) * (-0.214602 + (abs(x_12) * (0.0865667 + (abs(x_12) * -0.0310296)))))))));
    r_9 = s_11;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_9 = (s_11 + 3.14159);
      } else {
        r_9 = (r_9 - 3.14159);
      };
    };
  } else {
    r_9 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_13;
  tmpvar_13 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_14;
  tmpvar_14 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_15;
  tmpvar_15 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(tmpvar_13);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(tmpvar_13);
  vec4 tmpvar_17;
  tmpvar_17 = texture2DGradARB (_MainTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  float tmpvar_18;
  tmpvar_18 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec2 tmpvar_19;
  tmpvar_19 = (texture2DGradARB (_BumpMap, uv_3, tmpvar_16.xy, tmpvar_16.zw).wy - vec2(0.5, 0.5));
  localCoords_2.x = (tmpvar_19.x * 0.25);
  localCoords_2.y = (tmpvar_19.y * 0.5);
  uv_3.x = (uv_3.x - 0.5);
  vec2 tmpvar_20;
  tmpvar_20 = (uv_3 + localCoords_2);
  uv_3 = tmpvar_20;
  norm_1.z = cos((6.28319 * tmpvar_20.x));
  norm_1.x = sin((6.28319 * tmpvar_20.x));
  norm_1.y = cos((3.14159 * tmpvar_20.y));
  vec3 tmpvar_21;
  tmpvar_21 = -(norm_1);
  norm_1 = tmpvar_21;
  vec3 tmpvar_22;
  tmpvar_22 = abs(xlv_TEXCOORD6);
  float tmpvar_23;
  tmpvar_23 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  vec4 tmpvar_24;
  tmpvar_24 = (mix ((xlv_TEXCOORD1 + mix ((0.25 * (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_18)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_18)), tmpvar_22.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_18)), tmpvar_22.yyyy) - 0.5)), vec4(0.0, 0.0, 0.0, 0.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))), tmpvar_17, vec4(tmpvar_23)) * _Color);
  color_4 = tmpvar_24;
  float tmpvar_25;
  tmpvar_25 = mix (clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), clamp (dot (tmpvar_21, -(_SunDir)), 0.0, 1.0), tmpvar_23);
  vec4 tmpvar_26;
  tmpvar_26 = texture2D (_LightTexture0, ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5));
  vec4 tmpvar_27;
  tmpvar_27 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz)));
  vec4 shadowVals_28;
  vec3 tmpvar_29;
  tmpvar_29 = (xlv_TEXCOORD4.xyz / xlv_TEXCOORD4.w);
  shadowVals_28.x = texture2D (_ShadowMapTexture, (tmpvar_29.xy + _ShadowOffsets[0].xy)).x;
  shadowVals_28.y = texture2D (_ShadowMapTexture, (tmpvar_29.xy + _ShadowOffsets[1].xy)).x;
  shadowVals_28.z = texture2D (_ShadowMapTexture, (tmpvar_29.xy + _ShadowOffsets[2].xy)).x;
  shadowVals_28.w = texture2D (_ShadowMapTexture, (tmpvar_29.xy + _ShadowOffsets[3].xy)).x;
  bvec4 tmpvar_30;
  tmpvar_30 = lessThan (shadowVals_28, tmpvar_29.zzzz);
  vec4 tmpvar_31;
  tmpvar_31 = _LightShadowData.xxxx;
  float tmpvar_32;
  if (tmpvar_30.x) {
    tmpvar_32 = tmpvar_31.x;
  } else {
    tmpvar_32 = 1.0;
  };
  float tmpvar_33;
  if (tmpvar_30.y) {
    tmpvar_33 = tmpvar_31.y;
  } else {
    tmpvar_33 = 1.0;
  };
  float tmpvar_34;
  if (tmpvar_30.z) {
    tmpvar_34 = tmpvar_31.z;
  } else {
    tmpvar_34 = 1.0;
  };
  float tmpvar_35;
  if (tmpvar_30.w) {
    tmpvar_35 = tmpvar_31.w;
  } else {
    tmpvar_35 = 1.0;
  };
  vec4 tmpvar_36;
  tmpvar_36.x = tmpvar_32;
  tmpvar_36.y = tmpvar_33;
  tmpvar_36.z = tmpvar_34;
  tmpvar_36.w = tmpvar_35;
  vec3 tmpvar_37;
  tmpvar_37 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_25) * 4.0) * (((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_26.w) * tmpvar_27.w) * dot (tmpvar_36, vec4(0.25, 0.25, 0.25, 0.25)))), 0.0, 1.0))), 0.0, 1.0) * clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0));
  color_4.xyz = (tmpvar_24.xyz + (_Albedo * tmpvar_37));
  color_4.xyz = (color_4.xyz * tmpvar_37);
  color_4.w = 1.0;
  gl_FragData[0] = color_4;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Matrix 4 [unity_World2Shadow0]
Matrix 8 [_Object2World]
Matrix 12 [_LightMatrix0]
"vs_3_0
; 36 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
def c17, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
mov r1.xyz, v2
mov r1.w, c17.x
dp4 r2.z, r1, c10
dp4 r2.x, r1, c8
dp4 r2.y, r1, c9
mov r0.zw, v4.xyxy
mov r0.xy, v3
dp4 r2.w, r0, r0
rsq r1.x, r2.w
mul r0.xyz, r1.x, r0
mov o7.xyz, -r0
dp3 r0.w, r2, r2
rsq r0.w, r0.w
mul o6.xyz, r0.w, r2
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
dp4 r0.w, v0, c11
add r1.xyz, -r0, c16
dp3 r1.x, r1, r1
rsq r1.x, r1.x
mov o2, v1
dp4 o4.w, r0, c15
dp4 o4.z, r0, c14
dp4 o4.y, r0, c13
dp4 o4.x, r0, c12
dp4 o5.w, r0, c7
dp4 o5.z, r0, c6
dp4 o5.y, r0, c5
dp4 o5.x, r0, c4
rcp o1.x, r1.x
mov o3.xyz, v2
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  highp vec3 p_2;
  p_2 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_1;
  highp vec4 tmpvar_4;
  tmpvar_4.x = _glesMultiTexCoord0.x;
  tmpvar_4.y = _glesMultiTexCoord0.y;
  tmpvar_4.z = _glesMultiTexCoord1.x;
  tmpvar_4.w = _glesMultiTexCoord1.y;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_4).xyz);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float terminator_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float TNdotL_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump float handoff_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec3 norm_11;
  highp vec2 localCoords_12;
  mediump vec4 encnorm_13;
  mediump float vertLerp_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD6.zy * _DetailScale);
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zx * _DetailScale);
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.xy * _DetailScale);
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  highp float tmpvar_37;
  tmpvar_37 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_14 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailVertTex, tmpvar_34);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailTex, tmpvar_31);
  mediump vec4 tmpvar_40;
  tmpvar_40 = mix (tmpvar_38, tmpvar_39, vec4(vertLerp_14));
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailVertTex, tmpvar_35);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailTex, tmpvar_32);
  mediump vec4 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41, tmpvar_42, vec4(vertLerp_14));
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailVertTex, tmpvar_36);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, tmpvar_33);
  mediump vec4 tmpvar_46;
  tmpvar_46 = mix (tmpvar_44, tmpvar_45, vec4(vertLerp_14));
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2DGradEXT (_BumpMap, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  encnorm_13 = tmpvar_47;
  mediump vec2 tmpvar_48;
  tmpvar_48 = encnorm_13.wy;
  localCoords_12 = tmpvar_48;
  highp vec2 tmpvar_49;
  tmpvar_49 = (localCoords_12 - vec2(0.5, 0.5));
  localCoords_12.x = (tmpvar_49.x * 0.25);
  localCoords_12.y = (tmpvar_49.y * 0.5);
  uv_16.x = (uv_16.x - 0.5);
  highp vec2 tmpvar_50;
  tmpvar_50 = (uv_16 + localCoords_12);
  uv_16 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = cos((6.28319 * tmpvar_50.x));
  norm_11.z = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = sin((6.28319 * tmpvar_50.x));
  norm_11.x = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = cos((3.14159 * tmpvar_50.y));
  norm_11.y = tmpvar_53;
  mediump vec3 tmpvar_54;
  tmpvar_54 = -(norm_11);
  norm_11 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_56;
  tmpvar_56 = mix (tmpvar_46, tmpvar_40, tmpvar_55.xxxx);
  detail_10 = tmpvar_56;
  highp vec4 tmpvar_57;
  tmpvar_57 = (0.25 * (mix (detail_10, tmpvar_43, tmpvar_55.yyyy) - 0.5));
  detail_10 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_9 = tmpvar_58;
  mediump vec4 tmpvar_59;
  tmpvar_59 = mix (detail_10, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_9));
  highp vec4 tmpvar_60;
  tmpvar_60 = (xlv_TEXCOORD1 + tmpvar_59);
  color_17 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_8 = tmpvar_61;
  mediump vec4 tmpvar_62;
  tmpvar_62 = (mix (color_17, main_15, vec4(handoff_8)) * _Color);
  color_17 = tmpvar_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = clamp (dot (xlv_TEXCOORD5, lightDirection_6), 0.0, 1.0);
  TNdotL_5 = tmpvar_65;
  mediump float tmpvar_66;
  tmpvar_66 = mix (TNdotL_5, clamp (dot (tmpvar_54, -(_SunDir)), 0.0, 1.0), handoff_8);
  lowp vec4 tmpvar_67;
  highp vec2 P_68;
  P_68 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_67 = texture2D (_LightTexture0, P_68);
  highp float tmpvar_69;
  tmpvar_69 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_70;
  tmpvar_70 = texture2D (_LightTextureB0, vec2(tmpvar_69));
  lowp float tmpvar_71;
  mediump vec4 shadows_72;
  highp vec4 shadowVals_73;
  highp vec3 tmpvar_74;
  tmpvar_74 = (xlv_TEXCOORD4.xyz / xlv_TEXCOORD4.w);
  highp vec2 P_75;
  P_75 = (tmpvar_74.xy + _ShadowOffsets[0].xy);
  lowp float tmpvar_76;
  tmpvar_76 = texture2D (_ShadowMapTexture, P_75).x;
  shadowVals_73.x = tmpvar_76;
  highp vec2 P_77;
  P_77 = (tmpvar_74.xy + _ShadowOffsets[1].xy);
  lowp float tmpvar_78;
  tmpvar_78 = texture2D (_ShadowMapTexture, P_77).x;
  shadowVals_73.y = tmpvar_78;
  highp vec2 P_79;
  P_79 = (tmpvar_74.xy + _ShadowOffsets[2].xy);
  lowp float tmpvar_80;
  tmpvar_80 = texture2D (_ShadowMapTexture, P_79).x;
  shadowVals_73.z = tmpvar_80;
  highp vec2 P_81;
  P_81 = (tmpvar_74.xy + _ShadowOffsets[3].xy);
  lowp float tmpvar_82;
  tmpvar_82 = texture2D (_ShadowMapTexture, P_81).x;
  shadowVals_73.w = tmpvar_82;
  bvec4 tmpvar_83;
  tmpvar_83 = lessThan (shadowVals_73, tmpvar_74.zzzz);
  highp vec4 tmpvar_84;
  tmpvar_84 = _LightShadowData.xxxx;
  highp float tmpvar_85;
  if (tmpvar_83.x) {
    tmpvar_85 = tmpvar_84.x;
  } else {
    tmpvar_85 = 1.0;
  };
  highp float tmpvar_86;
  if (tmpvar_83.y) {
    tmpvar_86 = tmpvar_84.y;
  } else {
    tmpvar_86 = 1.0;
  };
  highp float tmpvar_87;
  if (tmpvar_83.z) {
    tmpvar_87 = tmpvar_84.z;
  } else {
    tmpvar_87 = 1.0;
  };
  highp float tmpvar_88;
  if (tmpvar_83.w) {
    tmpvar_88 = tmpvar_84.w;
  } else {
    tmpvar_88 = 1.0;
  };
  highp vec4 tmpvar_89;
  tmpvar_89.x = tmpvar_85;
  tmpvar_89.y = tmpvar_86;
  tmpvar_89.z = tmpvar_87;
  tmpvar_89.w = tmpvar_88;
  shadows_72 = tmpvar_89;
  mediump float tmpvar_90;
  tmpvar_90 = dot (shadows_72, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_71 = tmpvar_90;
  highp float tmpvar_91;
  tmpvar_91 = (((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_67.w) * tmpvar_70.w) * tmpvar_71);
  atten_4 = tmpvar_91;
  mediump float tmpvar_92;
  tmpvar_92 = clamp ((((_LightColor0.w * tmpvar_66) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_93;
  tmpvar_93 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_92)), 0.0, 1.0);
  light_3 = tmpvar_93;
  highp float tmpvar_94;
  tmpvar_94 = clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0);
  terminator_2 = tmpvar_94;
  mediump vec3 tmpvar_95;
  tmpvar_95 = (light_3 * terminator_2);
  light_3 = tmpvar_95;
  highp vec3 tmpvar_96;
  tmpvar_96 = (tmpvar_62.xyz + (_Albedo * tmpvar_95));
  color_17.xyz = tmpvar_96;
  color_17.xyz = (color_17.xyz * tmpvar_95);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  highp vec3 p_2;
  p_2 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_1;
  highp vec4 tmpvar_4;
  tmpvar_4.x = _glesMultiTexCoord0.x;
  tmpvar_4.y = _glesMultiTexCoord0.y;
  tmpvar_4.z = _glesMultiTexCoord1.x;
  tmpvar_4.w = _glesMultiTexCoord1.y;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_4).xyz);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float terminator_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float TNdotL_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump float handoff_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec3 norm_11;
  highp vec2 localCoords_12;
  mediump vec4 encnorm_13;
  mediump float vertLerp_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD6.zy * _DetailScale);
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zx * _DetailScale);
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.xy * _DetailScale);
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  highp float tmpvar_37;
  tmpvar_37 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_14 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailVertTex, tmpvar_34);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailTex, tmpvar_31);
  mediump vec4 tmpvar_40;
  tmpvar_40 = mix (tmpvar_38, tmpvar_39, vec4(vertLerp_14));
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailVertTex, tmpvar_35);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailTex, tmpvar_32);
  mediump vec4 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41, tmpvar_42, vec4(vertLerp_14));
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailVertTex, tmpvar_36);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, tmpvar_33);
  mediump vec4 tmpvar_46;
  tmpvar_46 = mix (tmpvar_44, tmpvar_45, vec4(vertLerp_14));
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2DGradEXT (_BumpMap, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  encnorm_13 = tmpvar_47;
  mediump vec2 tmpvar_48;
  tmpvar_48 = encnorm_13.wy;
  localCoords_12 = tmpvar_48;
  highp vec2 tmpvar_49;
  tmpvar_49 = (localCoords_12 - vec2(0.5, 0.5));
  localCoords_12.x = (tmpvar_49.x * 0.25);
  localCoords_12.y = (tmpvar_49.y * 0.5);
  uv_16.x = (uv_16.x - 0.5);
  highp vec2 tmpvar_50;
  tmpvar_50 = (uv_16 + localCoords_12);
  uv_16 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = cos((6.28319 * tmpvar_50.x));
  norm_11.z = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = sin((6.28319 * tmpvar_50.x));
  norm_11.x = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = cos((3.14159 * tmpvar_50.y));
  norm_11.y = tmpvar_53;
  mediump vec3 tmpvar_54;
  tmpvar_54 = -(norm_11);
  norm_11 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_56;
  tmpvar_56 = mix (tmpvar_46, tmpvar_40, tmpvar_55.xxxx);
  detail_10 = tmpvar_56;
  highp vec4 tmpvar_57;
  tmpvar_57 = (0.25 * (mix (detail_10, tmpvar_43, tmpvar_55.yyyy) - 0.5));
  detail_10 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_9 = tmpvar_58;
  mediump vec4 tmpvar_59;
  tmpvar_59 = mix (detail_10, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_9));
  highp vec4 tmpvar_60;
  tmpvar_60 = (xlv_TEXCOORD1 + tmpvar_59);
  color_17 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_8 = tmpvar_61;
  mediump vec4 tmpvar_62;
  tmpvar_62 = (mix (color_17, main_15, vec4(handoff_8)) * _Color);
  color_17 = tmpvar_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = clamp (dot (xlv_TEXCOORD5, lightDirection_6), 0.0, 1.0);
  TNdotL_5 = tmpvar_65;
  mediump float tmpvar_66;
  tmpvar_66 = mix (TNdotL_5, clamp (dot (tmpvar_54, -(_SunDir)), 0.0, 1.0), handoff_8);
  lowp vec4 tmpvar_67;
  highp vec2 P_68;
  P_68 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_67 = texture2D (_LightTexture0, P_68);
  highp float tmpvar_69;
  tmpvar_69 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_70;
  tmpvar_70 = texture2D (_LightTextureB0, vec2(tmpvar_69));
  lowp float tmpvar_71;
  mediump vec4 shadows_72;
  highp vec4 shadowVals_73;
  highp vec3 tmpvar_74;
  tmpvar_74 = (xlv_TEXCOORD4.xyz / xlv_TEXCOORD4.w);
  highp vec2 P_75;
  P_75 = (tmpvar_74.xy + _ShadowOffsets[0].xy);
  lowp float tmpvar_76;
  tmpvar_76 = texture2D (_ShadowMapTexture, P_75).x;
  shadowVals_73.x = tmpvar_76;
  highp vec2 P_77;
  P_77 = (tmpvar_74.xy + _ShadowOffsets[1].xy);
  lowp float tmpvar_78;
  tmpvar_78 = texture2D (_ShadowMapTexture, P_77).x;
  shadowVals_73.y = tmpvar_78;
  highp vec2 P_79;
  P_79 = (tmpvar_74.xy + _ShadowOffsets[2].xy);
  lowp float tmpvar_80;
  tmpvar_80 = texture2D (_ShadowMapTexture, P_79).x;
  shadowVals_73.z = tmpvar_80;
  highp vec2 P_81;
  P_81 = (tmpvar_74.xy + _ShadowOffsets[3].xy);
  lowp float tmpvar_82;
  tmpvar_82 = texture2D (_ShadowMapTexture, P_81).x;
  shadowVals_73.w = tmpvar_82;
  bvec4 tmpvar_83;
  tmpvar_83 = lessThan (shadowVals_73, tmpvar_74.zzzz);
  highp vec4 tmpvar_84;
  tmpvar_84 = _LightShadowData.xxxx;
  highp float tmpvar_85;
  if (tmpvar_83.x) {
    tmpvar_85 = tmpvar_84.x;
  } else {
    tmpvar_85 = 1.0;
  };
  highp float tmpvar_86;
  if (tmpvar_83.y) {
    tmpvar_86 = tmpvar_84.y;
  } else {
    tmpvar_86 = 1.0;
  };
  highp float tmpvar_87;
  if (tmpvar_83.z) {
    tmpvar_87 = tmpvar_84.z;
  } else {
    tmpvar_87 = 1.0;
  };
  highp float tmpvar_88;
  if (tmpvar_83.w) {
    tmpvar_88 = tmpvar_84.w;
  } else {
    tmpvar_88 = 1.0;
  };
  highp vec4 tmpvar_89;
  tmpvar_89.x = tmpvar_85;
  tmpvar_89.y = tmpvar_86;
  tmpvar_89.z = tmpvar_87;
  tmpvar_89.w = tmpvar_88;
  shadows_72 = tmpvar_89;
  mediump float tmpvar_90;
  tmpvar_90 = dot (shadows_72, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_71 = tmpvar_90;
  highp float tmpvar_91;
  tmpvar_91 = (((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_67.w) * tmpvar_70.w) * tmpvar_71);
  atten_4 = tmpvar_91;
  mediump float tmpvar_92;
  tmpvar_92 = clamp ((((_LightColor0.w * tmpvar_66) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_93;
  tmpvar_93 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_92)), 0.0, 1.0);
  light_3 = tmpvar_93;
  highp float tmpvar_94;
  tmpvar_94 = clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0);
  terminator_2 = tmpvar_94;
  mediump vec3 tmpvar_95;
  tmpvar_95 = (light_3 * terminator_2);
  light_3 = tmpvar_95;
  highp vec3 tmpvar_96;
  tmpvar_96 = (tmpvar_62.xyz + (_Albedo * tmpvar_95));
  color_17.xyz = tmpvar_96;
  color_17.xyz = (color_17.xyz * tmpvar_95);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 441
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 objnormal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
};
#line 431
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 418
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 422
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 426
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp mat4 _Rotation;
#line 430
uniform highp mat4 _InvRotation;
#line 453
#line 479
#line 453
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 457
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    #line 461
    o.color = v.color;
    o.objnormal = v.normal;
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    #line 466
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.objnormal);
    xlv_TEXCOORD3 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereCoords);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
vec2 xll_vecTSel_vb2_vf2_vf2 (bvec2 a, vec2 b, vec2 c) {
  return vec2 (a.x ? b.x : c.x, a.y ? b.y : c.y);
}
vec3 xll_vecTSel_vb3_vf3_vf3 (bvec3 a, vec3 b, vec3 c) {
  return vec3 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z);
}
vec4 xll_vecTSel_vb4_vf4_vf4 (bvec4 a, vec4 b, vec4 c) {
  return vec4 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z, a.w ? b.w : c.w);
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 441
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 objnormal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
};
#line 431
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 418
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 422
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 426
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp mat4 _Rotation;
#line 430
uniform highp mat4 _InvRotation;
#line 453
#line 479
#line 468
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 470
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 474
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 336
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 332
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 317
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    #line 319
    highp vec3 coord = (shadowCoord.xyz / shadowCoord.w);
    highp vec4 shadowVals;
    shadowVals.x = texture( _ShadowMapTexture, (vec2( coord) + _ShadowOffsets[0].xy)).x;
    shadowVals.y = texture( _ShadowMapTexture, (vec2( coord) + _ShadowOffsets[1].xy)).x;
    #line 323
    shadowVals.z = texture( _ShadowMapTexture, (vec2( coord) + _ShadowOffsets[2].xy)).x;
    shadowVals.w = texture( _ShadowMapTexture, (vec2( coord) + _ShadowOffsets[3].xy)).x;
    mediump vec4 shadows = xll_vecTSel_vb4_vf4_vf4 (lessThan( shadowVals, coord.zzzz), vec4( _LightShadowData.xxxx), vec4( 1.0));
    mediump float shadow = dot( shadows, vec4( 0.25));
    #line 327
    return shadow;
}
#line 479
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    #line 483
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 487
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    highp vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    highp vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    highp vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    #line 491
    highp vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    highp vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    highp vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, (-IN.sphereCoords))) - 0.95)) + 0.5));
    #line 495
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    #line 499
    highp vec2 localCoords = encnorm.wy;
    localCoords -= vec2( 0.5);
    localCoords.x *= 0.25;
    localCoords.y *= 0.5;
    #line 503
    uv.x -= 0.5;
    uv += localCoords;
    mediump vec3 norm;
    norm.z = cos((6.28319 * uv.x));
    #line 507
    norm.x = sin((6.28319 * uv.x));
    norm.y = cos((3.14159 * uv.y));
    norm = (-norm);
    sphereNrm = abs(sphereNrm);
    #line 511
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = (0.25 * (mix( detail, detailY, vec4( sphereNrm.y)) - 0.5));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (IN.color + mix( detail.xyzw, vec4( 0.0), vec4( detailLevel)));
    #line 515
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    color = mix( color, main, vec4( handoff));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 519
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    #line 523
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * unitySampleShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    mediump float terminator = xll_saturate_f(floor((1.01 + dot( IN.sphereCoords, _SunDir))));
    #line 527
    light *= terminator;
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    color.w = 1.0;
    #line 531
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.objnormal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform mat4 unity_World2Shadow[4];
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec4 tmpvar_3;
  tmpvar_3.x = gl_MultiTexCoord0.x;
  tmpvar_3.y = gl_MultiTexCoord0.y;
  tmpvar_3.z = gl_MultiTexCoord1.x;
  tmpvar_3.w = gl_MultiTexCoord1.y;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * gl_Vertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_3).xyz);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform vec4 _ShadowOffsets[4];
uniform sampler2DShadow _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec3 norm_1;
  vec2 localCoords_2;
  vec2 uv_3;
  vec4 color_4;
  float r_5;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_6;
    y_over_x_6 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * r_5));
  uv_3.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_9;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_10;
    y_over_x_10 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_11;
    float x_12;
    x_12 = (y_over_x_10 * inversesqrt(((y_over_x_10 * y_over_x_10) + 1.0)));
    s_11 = (sign(x_12) * (1.5708 - (sqrt((1.0 - abs(x_12))) * (1.5708 + (abs(x_12) * (-0.214602 + (abs(x_12) * (0.0865667 + (abs(x_12) * -0.0310296)))))))));
    r_9 = s_11;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_9 = (s_11 + 3.14159);
      } else {
        r_9 = (r_9 - 3.14159);
      };
    };
  } else {
    r_9 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_13;
  tmpvar_13 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_14;
  tmpvar_14 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_15;
  tmpvar_15 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(tmpvar_13);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(tmpvar_13);
  vec4 tmpvar_17;
  tmpvar_17 = texture2DGradARB (_MainTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  float tmpvar_18;
  tmpvar_18 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec2 tmpvar_19;
  tmpvar_19 = (texture2DGradARB (_BumpMap, uv_3, tmpvar_16.xy, tmpvar_16.zw).wy - vec2(0.5, 0.5));
  localCoords_2.x = (tmpvar_19.x * 0.25);
  localCoords_2.y = (tmpvar_19.y * 0.5);
  uv_3.x = (uv_3.x - 0.5);
  vec2 tmpvar_20;
  tmpvar_20 = (uv_3 + localCoords_2);
  uv_3 = tmpvar_20;
  norm_1.z = cos((6.28319 * tmpvar_20.x));
  norm_1.x = sin((6.28319 * tmpvar_20.x));
  norm_1.y = cos((3.14159 * tmpvar_20.y));
  vec3 tmpvar_21;
  tmpvar_21 = -(norm_1);
  norm_1 = tmpvar_21;
  vec3 tmpvar_22;
  tmpvar_22 = abs(xlv_TEXCOORD6);
  float tmpvar_23;
  tmpvar_23 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  vec4 tmpvar_24;
  tmpvar_24 = (mix ((xlv_TEXCOORD1 + mix ((0.25 * (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_18)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_18)), tmpvar_22.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_18)), tmpvar_22.yyyy) - 0.5)), vec4(0.0, 0.0, 0.0, 0.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))), tmpvar_17, vec4(tmpvar_23)) * _Color);
  color_4.w = tmpvar_24.w;
  vec4 shadows_25;
  vec3 tmpvar_26;
  tmpvar_26 = (xlv_TEXCOORD4.xyz / xlv_TEXCOORD4.w);
  shadows_25.x = shadow2D (_ShadowMapTexture, (tmpvar_26 + _ShadowOffsets[0].xyz)).x;
  shadows_25.y = shadow2D (_ShadowMapTexture, (tmpvar_26 + _ShadowOffsets[1].xyz)).x;
  shadows_25.z = shadow2D (_ShadowMapTexture, (tmpvar_26 + _ShadowOffsets[2].xyz)).x;
  shadows_25.w = shadow2D (_ShadowMapTexture, (tmpvar_26 + _ShadowOffsets[3].xyz)).x;
  vec4 tmpvar_27;
  tmpvar_27 = (_LightShadowData.xxxx + (shadows_25 * (1.0 - _LightShadowData.xxxx)));
  shadows_25 = tmpvar_27;
  vec3 tmpvar_28;
  tmpvar_28 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * mix (clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), clamp (dot (tmpvar_21, -(_SunDir)), 0.0, 1.0), tmpvar_23)) * 4.0) * (((float((xlv_TEXCOORD3.z > 0.0)) * texture2D (_LightTexture0, ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5)).w) * texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz))).w) * dot (tmpvar_27, vec4(0.25, 0.25, 0.25, 0.25)))), 0.0, 1.0))), 0.0, 1.0) * clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0));
  color_4.xyz = (tmpvar_24.xyz + (_Albedo * tmpvar_28));
  color_4.xyz = (color_4.xyz * tmpvar_28);
  color_4.w = 1.0;
  gl_FragData[0] = color_4;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Matrix 4 [unity_World2Shadow0]
Matrix 8 [_Object2World]
Matrix 12 [_LightMatrix0]
"vs_3_0
; 36 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
def c17, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
mov r1.xyz, v2
mov r1.w, c17.x
dp4 r2.z, r1, c10
dp4 r2.x, r1, c8
dp4 r2.y, r1, c9
mov r0.zw, v4.xyxy
mov r0.xy, v3
dp4 r2.w, r0, r0
rsq r1.x, r2.w
mul r0.xyz, r1.x, r0
mov o7.xyz, -r0
dp3 r0.w, r2, r2
rsq r0.w, r0.w
mul o6.xyz, r0.w, r2
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
dp4 r0.w, v0, c11
add r1.xyz, -r0, c16
dp3 r1.x, r1, r1
rsq r1.x, r1.x
mov o2, v1
dp4 o4.w, r0, c15
dp4 o4.z, r0, c14
dp4 o4.y, r0, c13
dp4 o4.x, r0, c12
dp4 o5.w, r0, c7
dp4 o5.z, r0, c6
dp4 o5.y, r0, c5
dp4 o5.x, r0, c4
rcp o1.x, r1.x
mov o3.xyz, v2
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  highp vec3 p_2;
  p_2 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_1;
  highp vec4 tmpvar_4;
  tmpvar_4.x = _glesMultiTexCoord0.x;
  tmpvar_4.y = _glesMultiTexCoord0.y;
  tmpvar_4.z = _glesMultiTexCoord1.x;
  tmpvar_4.w = _glesMultiTexCoord1.y;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_4).xyz);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shadow_samplers : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 _ShadowOffsets[4];
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float terminator_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float TNdotL_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump float handoff_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec3 norm_11;
  highp vec2 localCoords_12;
  mediump vec4 encnorm_13;
  mediump float vertLerp_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD6.zy * _DetailScale);
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zx * _DetailScale);
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.xy * _DetailScale);
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  highp float tmpvar_37;
  tmpvar_37 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_14 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailVertTex, tmpvar_34);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailTex, tmpvar_31);
  mediump vec4 tmpvar_40;
  tmpvar_40 = mix (tmpvar_38, tmpvar_39, vec4(vertLerp_14));
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailVertTex, tmpvar_35);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailTex, tmpvar_32);
  mediump vec4 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41, tmpvar_42, vec4(vertLerp_14));
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailVertTex, tmpvar_36);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, tmpvar_33);
  mediump vec4 tmpvar_46;
  tmpvar_46 = mix (tmpvar_44, tmpvar_45, vec4(vertLerp_14));
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2DGradEXT (_BumpMap, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  encnorm_13 = tmpvar_47;
  mediump vec2 tmpvar_48;
  tmpvar_48 = encnorm_13.wy;
  localCoords_12 = tmpvar_48;
  highp vec2 tmpvar_49;
  tmpvar_49 = (localCoords_12 - vec2(0.5, 0.5));
  localCoords_12.x = (tmpvar_49.x * 0.25);
  localCoords_12.y = (tmpvar_49.y * 0.5);
  uv_16.x = (uv_16.x - 0.5);
  highp vec2 tmpvar_50;
  tmpvar_50 = (uv_16 + localCoords_12);
  uv_16 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = cos((6.28319 * tmpvar_50.x));
  norm_11.z = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = sin((6.28319 * tmpvar_50.x));
  norm_11.x = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = cos((3.14159 * tmpvar_50.y));
  norm_11.y = tmpvar_53;
  mediump vec3 tmpvar_54;
  tmpvar_54 = -(norm_11);
  norm_11 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_56;
  tmpvar_56 = mix (tmpvar_46, tmpvar_40, tmpvar_55.xxxx);
  detail_10 = tmpvar_56;
  highp vec4 tmpvar_57;
  tmpvar_57 = (0.25 * (mix (detail_10, tmpvar_43, tmpvar_55.yyyy) - 0.5));
  detail_10 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_9 = tmpvar_58;
  mediump vec4 tmpvar_59;
  tmpvar_59 = mix (detail_10, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_9));
  highp vec4 tmpvar_60;
  tmpvar_60 = (xlv_TEXCOORD1 + tmpvar_59);
  color_17 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_8 = tmpvar_61;
  mediump vec4 tmpvar_62;
  tmpvar_62 = (mix (color_17, main_15, vec4(handoff_8)) * _Color);
  color_17.w = tmpvar_62.w;
  highp vec3 tmpvar_63;
  tmpvar_63 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = clamp (dot (xlv_TEXCOORD5, lightDirection_6), 0.0, 1.0);
  TNdotL_5 = tmpvar_65;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_66 = texture2D (_LightTexture0, P_67);
  highp float tmpvar_68;
  tmpvar_68 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_69;
  tmpvar_69 = texture2D (_LightTextureB0, vec2(tmpvar_68));
  lowp float tmpvar_70;
  mediump vec4 shadows_71;
  highp vec3 tmpvar_72;
  tmpvar_72 = (xlv_TEXCOORD4.xyz / xlv_TEXCOORD4.w);
  highp vec3 coord_73;
  coord_73 = (tmpvar_72 + _ShadowOffsets[0].xyz);
  lowp float tmpvar_74;
  tmpvar_74 = shadow2DEXT (_ShadowMapTexture, coord_73);
  shadows_71.x = tmpvar_74;
  highp vec3 coord_75;
  coord_75 = (tmpvar_72 + _ShadowOffsets[1].xyz);
  lowp float tmpvar_76;
  tmpvar_76 = shadow2DEXT (_ShadowMapTexture, coord_75);
  shadows_71.y = tmpvar_76;
  highp vec3 coord_77;
  coord_77 = (tmpvar_72 + _ShadowOffsets[2].xyz);
  lowp float tmpvar_78;
  tmpvar_78 = shadow2DEXT (_ShadowMapTexture, coord_77);
  shadows_71.z = tmpvar_78;
  highp vec3 coord_79;
  coord_79 = (tmpvar_72 + _ShadowOffsets[3].xyz);
  lowp float tmpvar_80;
  tmpvar_80 = shadow2DEXT (_ShadowMapTexture, coord_79);
  shadows_71.w = tmpvar_80;
  highp vec4 tmpvar_81;
  tmpvar_81 = (_LightShadowData.xxxx + (shadows_71 * (1.0 - _LightShadowData.xxxx)));
  shadows_71 = tmpvar_81;
  mediump float tmpvar_82;
  tmpvar_82 = dot (shadows_71, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_70 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = (((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_66.w) * tmpvar_69.w) * tmpvar_70);
  atten_4 = tmpvar_83;
  mediump float tmpvar_84;
  tmpvar_84 = clamp ((((_LightColor0.w * mix (TNdotL_5, clamp (dot (tmpvar_54, -(_SunDir)), 0.0, 1.0), handoff_8)) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_85;
  tmpvar_85 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_84)), 0.0, 1.0);
  light_3 = tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0);
  terminator_2 = tmpvar_86;
  mediump vec3 tmpvar_87;
  tmpvar_87 = (light_3 * terminator_2);
  light_3 = tmpvar_87;
  highp vec3 tmpvar_88;
  tmpvar_88 = (tmpvar_62.xyz + (_Albedo * tmpvar_87));
  color_17.xyz = tmpvar_88;
  color_17.xyz = (color_17.xyz * tmpvar_87);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 441
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 objnormal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
};
#line 431
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 418
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 422
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 426
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp mat4 _Rotation;
#line 430
uniform highp mat4 _InvRotation;
#line 453
#line 479
#line 453
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 457
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    #line 461
    o.color = v.color;
    o.objnormal = v.normal;
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    #line 466
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.objnormal);
    xlv_TEXCOORD3 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereCoords);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_shadow2D(mediump sampler2DShadow s, vec3 coord) { return texture (s, coord); }
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 441
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 objnormal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
};
#line 431
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 418
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 422
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 426
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp mat4 _Rotation;
#line 430
uniform highp mat4 _InvRotation;
#line 453
#line 479
#line 468
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 470
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 474
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 336
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 332
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 317
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    #line 319
    highp vec3 coord = (shadowCoord.xyz / shadowCoord.w);
    mediump vec4 shadows;
    shadows.x = xll_shadow2D( _ShadowMapTexture, (coord + vec3( _ShadowOffsets[0])).xyz);
    shadows.y = xll_shadow2D( _ShadowMapTexture, (coord + vec3( _ShadowOffsets[1])).xyz);
    #line 323
    shadows.z = xll_shadow2D( _ShadowMapTexture, (coord + vec3( _ShadowOffsets[2])).xyz);
    shadows.w = xll_shadow2D( _ShadowMapTexture, (coord + vec3( _ShadowOffsets[3])).xyz);
    shadows = (_LightShadowData.xxxx + (shadows * (1.0 - _LightShadowData.xxxx)));
    mediump float shadow = dot( shadows, vec4( 0.25));
    #line 327
    return shadow;
}
#line 479
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    #line 483
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 487
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    highp vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    highp vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    highp vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    #line 491
    highp vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    highp vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    highp vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, (-IN.sphereCoords))) - 0.95)) + 0.5));
    #line 495
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    #line 499
    highp vec2 localCoords = encnorm.wy;
    localCoords -= vec2( 0.5);
    localCoords.x *= 0.25;
    localCoords.y *= 0.5;
    #line 503
    uv.x -= 0.5;
    uv += localCoords;
    mediump vec3 norm;
    norm.z = cos((6.28319 * uv.x));
    #line 507
    norm.x = sin((6.28319 * uv.x));
    norm.y = cos((3.14159 * uv.y));
    norm = (-norm);
    sphereNrm = abs(sphereNrm);
    #line 511
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = (0.25 * (mix( detail, detailY, vec4( sphereNrm.y)) - 0.5));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (IN.color + mix( detail.xyzw, vec4( 0.0), vec4( detailLevel)));
    #line 515
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    color = mix( color, main, vec4( handoff));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 519
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    #line 523
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * unitySampleShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    mediump float terminator = xll_saturate_f(floor((1.01 + dot( IN.sphereCoords, _SunDir))));
    #line 527
    light *= terminator;
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    color.w = 1.0;
    #line 531
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.objnormal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec4 _LightPositionRange;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec4 tmpvar_3;
  tmpvar_3.x = gl_MultiTexCoord0.x;
  tmpvar_3.y = gl_MultiTexCoord0.y;
  tmpvar_3.z = gl_MultiTexCoord1.x;
  tmpvar_3.w = gl_MultiTexCoord1.y;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_3).xyz);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _LightPositionRange;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec3 norm_1;
  vec2 localCoords_2;
  vec2 uv_3;
  vec4 color_4;
  float r_5;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_6;
    y_over_x_6 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * r_5));
  uv_3.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_9;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_10;
    y_over_x_10 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_11;
    float x_12;
    x_12 = (y_over_x_10 * inversesqrt(((y_over_x_10 * y_over_x_10) + 1.0)));
    s_11 = (sign(x_12) * (1.5708 - (sqrt((1.0 - abs(x_12))) * (1.5708 + (abs(x_12) * (-0.214602 + (abs(x_12) * (0.0865667 + (abs(x_12) * -0.0310296)))))))));
    r_9 = s_11;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_9 = (s_11 + 3.14159);
      } else {
        r_9 = (r_9 - 3.14159);
      };
    };
  } else {
    r_9 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_13;
  tmpvar_13 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_14;
  tmpvar_14 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_15;
  tmpvar_15 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(tmpvar_13);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(tmpvar_13);
  vec4 tmpvar_17;
  tmpvar_17 = texture2DGradARB (_MainTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  float tmpvar_18;
  tmpvar_18 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec2 tmpvar_19;
  tmpvar_19 = (texture2DGradARB (_BumpMap, uv_3, tmpvar_16.xy, tmpvar_16.zw).wy - vec2(0.5, 0.5));
  localCoords_2.x = (tmpvar_19.x * 0.25);
  localCoords_2.y = (tmpvar_19.y * 0.5);
  uv_3.x = (uv_3.x - 0.5);
  vec2 tmpvar_20;
  tmpvar_20 = (uv_3 + localCoords_2);
  uv_3 = tmpvar_20;
  norm_1.z = cos((6.28319 * tmpvar_20.x));
  norm_1.x = sin((6.28319 * tmpvar_20.x));
  norm_1.y = cos((3.14159 * tmpvar_20.y));
  vec3 tmpvar_21;
  tmpvar_21 = -(norm_1);
  norm_1 = tmpvar_21;
  vec3 tmpvar_22;
  tmpvar_22 = abs(xlv_TEXCOORD6);
  float tmpvar_23;
  tmpvar_23 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  vec4 tmpvar_24;
  tmpvar_24 = (mix ((xlv_TEXCOORD1 + mix ((0.25 * (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_18)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_18)), tmpvar_22.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_18)), tmpvar_22.yyyy) - 0.5)), vec4(0.0, 0.0, 0.0, 0.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))), tmpvar_17, vec4(tmpvar_23)) * _Color);
  color_4 = tmpvar_24;
  float tmpvar_25;
  tmpvar_25 = mix (clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), clamp (dot (tmpvar_21, -(_SunDir)), 0.0, 1.0), tmpvar_23);
  vec4 tmpvar_26;
  tmpvar_26 = texture2D (_LightTexture0, vec2(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)));
  vec4 shadowVals_27;
  shadowVals_27.x = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD4 + vec3(0.0078125, 0.0078125, 0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_27.y = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD4 + vec3(-0.0078125, -0.0078125, 0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_27.z = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD4 + vec3(-0.0078125, 0.0078125, -0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_27.w = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD4 + vec3(0.0078125, -0.0078125, -0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_28;
  tmpvar_28 = lessThan (shadowVals_27, vec4(((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97)));
  vec4 tmpvar_29;
  tmpvar_29 = _LightShadowData.xxxx;
  float tmpvar_30;
  if (tmpvar_28.x) {
    tmpvar_30 = tmpvar_29.x;
  } else {
    tmpvar_30 = 1.0;
  };
  float tmpvar_31;
  if (tmpvar_28.y) {
    tmpvar_31 = tmpvar_29.y;
  } else {
    tmpvar_31 = 1.0;
  };
  float tmpvar_32;
  if (tmpvar_28.z) {
    tmpvar_32 = tmpvar_29.z;
  } else {
    tmpvar_32 = 1.0;
  };
  float tmpvar_33;
  if (tmpvar_28.w) {
    tmpvar_33 = tmpvar_29.w;
  } else {
    tmpvar_33 = 1.0;
  };
  vec4 tmpvar_34;
  tmpvar_34.x = tmpvar_30;
  tmpvar_34.y = tmpvar_31;
  tmpvar_34.z = tmpvar_32;
  tmpvar_34.w = tmpvar_33;
  vec3 tmpvar_35;
  tmpvar_35 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_25) * 4.0) * (tmpvar_26.w * dot (tmpvar_34, vec4(0.25, 0.25, 0.25, 0.25)))), 0.0, 1.0))), 0.0, 1.0) * clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0));
  color_4.xyz = (tmpvar_24.xyz + (_Albedo * tmpvar_35));
  color_4.xyz = (color_4.xyz * tmpvar_35);
  color_4.w = 1.0;
  gl_FragData[0] = color_4;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_LightPositionRange]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 32 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
def c14, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
mov r1.xyz, v2
mov r1.w, c14.x
dp4 r2.z, r1, c6
dp4 r2.x, r1, c4
dp4 r2.y, r1, c5
mov r0.zw, v4.xyxy
mov r0.xy, v3
dp4 r2.w, r0, r0
rsq r1.x, r2.w
mul r0.xyz, r1.x, r0
mov o7.xyz, -r0
dp3 r0.w, r2, r2
rsq r0.w, r0.w
mul o6.xyz, r0.w, r2
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
dp4 r0.w, v0, c7
add r1.xyz, -r0, c12
dp3 r1.x, r1, r1
rsq r1.x, r1.x
mov o2, v1
dp4 o4.z, r0, c10
dp4 o4.y, r0, c9
dp4 o4.x, r0, c8
rcp o1.x, r1.x
mov o3.xyz, v2
add o5.xyz, r0, -c13
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  highp vec3 p_2;
  p_2 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_1;
  highp vec4 tmpvar_4;
  tmpvar_4.x = _glesMultiTexCoord0.x;
  tmpvar_4.y = _glesMultiTexCoord0.y;
  tmpvar_4.z = _glesMultiTexCoord1.x;
  tmpvar_4.w = _glesMultiTexCoord1.y;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_4).xyz);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float terminator_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float TNdotL_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump float handoff_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec3 norm_11;
  highp vec2 localCoords_12;
  mediump vec4 encnorm_13;
  mediump float vertLerp_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD6.zy * _DetailScale);
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zx * _DetailScale);
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.xy * _DetailScale);
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  highp float tmpvar_37;
  tmpvar_37 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_14 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailVertTex, tmpvar_34);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailTex, tmpvar_31);
  mediump vec4 tmpvar_40;
  tmpvar_40 = mix (tmpvar_38, tmpvar_39, vec4(vertLerp_14));
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailVertTex, tmpvar_35);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailTex, tmpvar_32);
  mediump vec4 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41, tmpvar_42, vec4(vertLerp_14));
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailVertTex, tmpvar_36);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, tmpvar_33);
  mediump vec4 tmpvar_46;
  tmpvar_46 = mix (tmpvar_44, tmpvar_45, vec4(vertLerp_14));
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2DGradEXT (_BumpMap, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  encnorm_13 = tmpvar_47;
  mediump vec2 tmpvar_48;
  tmpvar_48 = encnorm_13.wy;
  localCoords_12 = tmpvar_48;
  highp vec2 tmpvar_49;
  tmpvar_49 = (localCoords_12 - vec2(0.5, 0.5));
  localCoords_12.x = (tmpvar_49.x * 0.25);
  localCoords_12.y = (tmpvar_49.y * 0.5);
  uv_16.x = (uv_16.x - 0.5);
  highp vec2 tmpvar_50;
  tmpvar_50 = (uv_16 + localCoords_12);
  uv_16 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = cos((6.28319 * tmpvar_50.x));
  norm_11.z = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = sin((6.28319 * tmpvar_50.x));
  norm_11.x = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = cos((3.14159 * tmpvar_50.y));
  norm_11.y = tmpvar_53;
  mediump vec3 tmpvar_54;
  tmpvar_54 = -(norm_11);
  norm_11 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_56;
  tmpvar_56 = mix (tmpvar_46, tmpvar_40, tmpvar_55.xxxx);
  detail_10 = tmpvar_56;
  highp vec4 tmpvar_57;
  tmpvar_57 = (0.25 * (mix (detail_10, tmpvar_43, tmpvar_55.yyyy) - 0.5));
  detail_10 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_9 = tmpvar_58;
  mediump vec4 tmpvar_59;
  tmpvar_59 = mix (detail_10, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_9));
  highp vec4 tmpvar_60;
  tmpvar_60 = (xlv_TEXCOORD1 + tmpvar_59);
  color_17 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_8 = tmpvar_61;
  mediump vec4 tmpvar_62;
  tmpvar_62 = (mix (color_17, main_15, vec4(handoff_8)) * _Color);
  color_17 = tmpvar_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = clamp (dot (xlv_TEXCOORD5, lightDirection_6), 0.0, 1.0);
  TNdotL_5 = tmpvar_65;
  mediump float tmpvar_66;
  tmpvar_66 = mix (TNdotL_5, clamp (dot (tmpvar_54, -(_SunDir)), 0.0, 1.0), handoff_8);
  highp float tmpvar_67;
  tmpvar_67 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_68;
  tmpvar_68 = texture2D (_LightTexture0, vec2(tmpvar_67));
  highp float tmpvar_69;
  mediump vec4 shadows_70;
  highp vec4 shadowVals_71;
  highp float tmpvar_72;
  tmpvar_72 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  highp vec3 vec_73;
  vec_73 = (xlv_TEXCOORD4 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 packDist_74;
  lowp vec4 tmpvar_75;
  tmpvar_75 = textureCube (_ShadowMapTexture, vec_73);
  packDist_74 = tmpvar_75;
  shadowVals_71.x = dot (packDist_74, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_76;
  vec_76 = (xlv_TEXCOORD4 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 packDist_77;
  lowp vec4 tmpvar_78;
  tmpvar_78 = textureCube (_ShadowMapTexture, vec_76);
  packDist_77 = tmpvar_78;
  shadowVals_71.y = dot (packDist_77, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_79;
  vec_79 = (xlv_TEXCOORD4 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 packDist_80;
  lowp vec4 tmpvar_81;
  tmpvar_81 = textureCube (_ShadowMapTexture, vec_79);
  packDist_80 = tmpvar_81;
  shadowVals_71.z = dot (packDist_80, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_82;
  vec_82 = (xlv_TEXCOORD4 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 packDist_83;
  lowp vec4 tmpvar_84;
  tmpvar_84 = textureCube (_ShadowMapTexture, vec_82);
  packDist_83 = tmpvar_84;
  shadowVals_71.w = dot (packDist_83, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_85;
  tmpvar_85 = lessThan (shadowVals_71, vec4(tmpvar_72));
  highp vec4 tmpvar_86;
  tmpvar_86 = _LightShadowData.xxxx;
  highp float tmpvar_87;
  if (tmpvar_85.x) {
    tmpvar_87 = tmpvar_86.x;
  } else {
    tmpvar_87 = 1.0;
  };
  highp float tmpvar_88;
  if (tmpvar_85.y) {
    tmpvar_88 = tmpvar_86.y;
  } else {
    tmpvar_88 = 1.0;
  };
  highp float tmpvar_89;
  if (tmpvar_85.z) {
    tmpvar_89 = tmpvar_86.z;
  } else {
    tmpvar_89 = 1.0;
  };
  highp float tmpvar_90;
  if (tmpvar_85.w) {
    tmpvar_90 = tmpvar_86.w;
  } else {
    tmpvar_90 = 1.0;
  };
  highp vec4 tmpvar_91;
  tmpvar_91.x = tmpvar_87;
  tmpvar_91.y = tmpvar_88;
  tmpvar_91.z = tmpvar_89;
  tmpvar_91.w = tmpvar_90;
  shadows_70 = tmpvar_91;
  mediump float tmpvar_92;
  tmpvar_92 = dot (shadows_70, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_69 = tmpvar_92;
  highp float tmpvar_93;
  tmpvar_93 = (tmpvar_68.w * tmpvar_69);
  atten_4 = tmpvar_93;
  mediump float tmpvar_94;
  tmpvar_94 = clamp ((((_LightColor0.w * tmpvar_66) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_95;
  tmpvar_95 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_94)), 0.0, 1.0);
  light_3 = tmpvar_95;
  highp float tmpvar_96;
  tmpvar_96 = clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0);
  terminator_2 = tmpvar_96;
  mediump vec3 tmpvar_97;
  tmpvar_97 = (light_3 * terminator_2);
  light_3 = tmpvar_97;
  highp vec3 tmpvar_98;
  tmpvar_98 = (tmpvar_62.xyz + (_Albedo * tmpvar_97));
  color_17.xyz = tmpvar_98;
  color_17.xyz = (color_17.xyz * tmpvar_97);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  highp vec3 p_2;
  p_2 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_1;
  highp vec4 tmpvar_4;
  tmpvar_4.x = _glesMultiTexCoord0.x;
  tmpvar_4.y = _glesMultiTexCoord0.y;
  tmpvar_4.z = _glesMultiTexCoord1.x;
  tmpvar_4.w = _glesMultiTexCoord1.y;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_4).xyz);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float terminator_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float TNdotL_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump float handoff_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec3 norm_11;
  highp vec2 localCoords_12;
  mediump vec4 encnorm_13;
  mediump float vertLerp_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD6.zy * _DetailScale);
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zx * _DetailScale);
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.xy * _DetailScale);
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  highp float tmpvar_37;
  tmpvar_37 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_14 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailVertTex, tmpvar_34);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailTex, tmpvar_31);
  mediump vec4 tmpvar_40;
  tmpvar_40 = mix (tmpvar_38, tmpvar_39, vec4(vertLerp_14));
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailVertTex, tmpvar_35);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailTex, tmpvar_32);
  mediump vec4 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41, tmpvar_42, vec4(vertLerp_14));
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailVertTex, tmpvar_36);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, tmpvar_33);
  mediump vec4 tmpvar_46;
  tmpvar_46 = mix (tmpvar_44, tmpvar_45, vec4(vertLerp_14));
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2DGradEXT (_BumpMap, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  encnorm_13 = tmpvar_47;
  mediump vec2 tmpvar_48;
  tmpvar_48 = encnorm_13.wy;
  localCoords_12 = tmpvar_48;
  highp vec2 tmpvar_49;
  tmpvar_49 = (localCoords_12 - vec2(0.5, 0.5));
  localCoords_12.x = (tmpvar_49.x * 0.25);
  localCoords_12.y = (tmpvar_49.y * 0.5);
  uv_16.x = (uv_16.x - 0.5);
  highp vec2 tmpvar_50;
  tmpvar_50 = (uv_16 + localCoords_12);
  uv_16 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = cos((6.28319 * tmpvar_50.x));
  norm_11.z = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = sin((6.28319 * tmpvar_50.x));
  norm_11.x = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = cos((3.14159 * tmpvar_50.y));
  norm_11.y = tmpvar_53;
  mediump vec3 tmpvar_54;
  tmpvar_54 = -(norm_11);
  norm_11 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_56;
  tmpvar_56 = mix (tmpvar_46, tmpvar_40, tmpvar_55.xxxx);
  detail_10 = tmpvar_56;
  highp vec4 tmpvar_57;
  tmpvar_57 = (0.25 * (mix (detail_10, tmpvar_43, tmpvar_55.yyyy) - 0.5));
  detail_10 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_9 = tmpvar_58;
  mediump vec4 tmpvar_59;
  tmpvar_59 = mix (detail_10, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_9));
  highp vec4 tmpvar_60;
  tmpvar_60 = (xlv_TEXCOORD1 + tmpvar_59);
  color_17 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_8 = tmpvar_61;
  mediump vec4 tmpvar_62;
  tmpvar_62 = (mix (color_17, main_15, vec4(handoff_8)) * _Color);
  color_17 = tmpvar_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = clamp (dot (xlv_TEXCOORD5, lightDirection_6), 0.0, 1.0);
  TNdotL_5 = tmpvar_65;
  mediump float tmpvar_66;
  tmpvar_66 = mix (TNdotL_5, clamp (dot (tmpvar_54, -(_SunDir)), 0.0, 1.0), handoff_8);
  highp float tmpvar_67;
  tmpvar_67 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_68;
  tmpvar_68 = texture2D (_LightTexture0, vec2(tmpvar_67));
  highp float tmpvar_69;
  mediump vec4 shadows_70;
  highp vec4 shadowVals_71;
  highp float tmpvar_72;
  tmpvar_72 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  highp vec3 vec_73;
  vec_73 = (xlv_TEXCOORD4 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 packDist_74;
  lowp vec4 tmpvar_75;
  tmpvar_75 = textureCube (_ShadowMapTexture, vec_73);
  packDist_74 = tmpvar_75;
  shadowVals_71.x = dot (packDist_74, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_76;
  vec_76 = (xlv_TEXCOORD4 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 packDist_77;
  lowp vec4 tmpvar_78;
  tmpvar_78 = textureCube (_ShadowMapTexture, vec_76);
  packDist_77 = tmpvar_78;
  shadowVals_71.y = dot (packDist_77, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_79;
  vec_79 = (xlv_TEXCOORD4 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 packDist_80;
  lowp vec4 tmpvar_81;
  tmpvar_81 = textureCube (_ShadowMapTexture, vec_79);
  packDist_80 = tmpvar_81;
  shadowVals_71.z = dot (packDist_80, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_82;
  vec_82 = (xlv_TEXCOORD4 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 packDist_83;
  lowp vec4 tmpvar_84;
  tmpvar_84 = textureCube (_ShadowMapTexture, vec_82);
  packDist_83 = tmpvar_84;
  shadowVals_71.w = dot (packDist_83, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_85;
  tmpvar_85 = lessThan (shadowVals_71, vec4(tmpvar_72));
  highp vec4 tmpvar_86;
  tmpvar_86 = _LightShadowData.xxxx;
  highp float tmpvar_87;
  if (tmpvar_85.x) {
    tmpvar_87 = tmpvar_86.x;
  } else {
    tmpvar_87 = 1.0;
  };
  highp float tmpvar_88;
  if (tmpvar_85.y) {
    tmpvar_88 = tmpvar_86.y;
  } else {
    tmpvar_88 = 1.0;
  };
  highp float tmpvar_89;
  if (tmpvar_85.z) {
    tmpvar_89 = tmpvar_86.z;
  } else {
    tmpvar_89 = 1.0;
  };
  highp float tmpvar_90;
  if (tmpvar_85.w) {
    tmpvar_90 = tmpvar_86.w;
  } else {
    tmpvar_90 = 1.0;
  };
  highp vec4 tmpvar_91;
  tmpvar_91.x = tmpvar_87;
  tmpvar_91.y = tmpvar_88;
  tmpvar_91.z = tmpvar_89;
  tmpvar_91.w = tmpvar_90;
  shadows_70 = tmpvar_91;
  mediump float tmpvar_92;
  tmpvar_92 = dot (shadows_70, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_69 = tmpvar_92;
  highp float tmpvar_93;
  tmpvar_93 = (tmpvar_68.w * tmpvar_69);
  atten_4 = tmpvar_93;
  mediump float tmpvar_94;
  tmpvar_94 = clamp ((((_LightColor0.w * tmpvar_66) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_95;
  tmpvar_95 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_94)), 0.0, 1.0);
  light_3 = tmpvar_95;
  highp float tmpvar_96;
  tmpvar_96 = clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0);
  terminator_2 = tmpvar_96;
  mediump vec3 tmpvar_97;
  tmpvar_97 = (light_3 * terminator_2);
  light_3 = tmpvar_97;
  highp vec3 tmpvar_98;
  tmpvar_98 = (tmpvar_62.xyz + (_Albedo * tmpvar_97));
  color_17.xyz = tmpvar_98;
  color_17.xyz = (color_17.xyz * tmpvar_97);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 336
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 437
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 objnormal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
};
#line 427
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
#line 346
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 359
#line 367
#line 381
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 414
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 418
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 422
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp mat4 _Rotation;
#line 426
uniform highp mat4 _InvRotation;
#line 449
#line 475
#line 449
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 453
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    #line 457
    o.color = v.color;
    o.objnormal = v.normal;
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    o._ShadowCoord = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    #line 462
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.objnormal);
    xlv_TEXCOORD3 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereCoords);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
vec2 xll_vecTSel_vb2_vf2_vf2 (bvec2 a, vec2 b, vec2 c) {
  return vec2 (a.x ? b.x : c.x, a.y ? b.y : c.y);
}
vec3 xll_vecTSel_vb3_vf3_vf3 (bvec3 a, vec3 b, vec3 c) {
  return vec3 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z);
}
vec4 xll_vecTSel_vb4_vf4_vf4 (bvec4 a, vec4 b, vec4 c) {
  return vec4 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z, a.w ? b.w : c.w);
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 336
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 437
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 objnormal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
};
#line 427
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
#line 346
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 359
#line 367
#line 381
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 414
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 418
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 422
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp mat4 _Rotation;
#line 426
uniform highp mat4 _InvRotation;
#line 449
#line 475
#line 464
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 466
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 470
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 215
highp float DecodeFloatRGBA( in highp vec4 enc ) {
    highp vec4 kDecodeDot = vec4( 1.0, 0.00392157, 1.53787e-05, 6.22737e-09);
    return dot( enc, kDecodeDot);
}
#line 316
highp float SampleCubeDistance( in highp vec3 vec ) {
    highp vec4 packDist = texture( _ShadowMapTexture, vec);
    #line 319
    return DecodeFloatRGBA( packDist);
}
#line 321
highp float unityCubeShadow( in highp vec3 vec ) {
    #line 323
    highp float mydist = (length(vec) * _LightPositionRange.w);
    mydist *= 0.97;
    highp float z = 0.0078125;
    highp vec4 shadowVals;
    #line 327
    shadowVals.x = SampleCubeDistance( (vec + vec3( z, z, z)));
    shadowVals.y = SampleCubeDistance( (vec + vec3( (-z), (-z), z)));
    shadowVals.z = SampleCubeDistance( (vec + vec3( (-z), z, (-z))));
    shadowVals.w = SampleCubeDistance( (vec + vec3( z, (-z), (-z))));
    #line 331
    mediump vec4 shadows = xll_vecTSel_vb4_vf4_vf4 (lessThan( shadowVals, vec4( mydist)), vec4( _LightShadowData.xxxx), vec4( 1.0));
    return dot( shadows, vec4( 0.25));
}
#line 475
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    #line 479
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 483
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    highp vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    highp vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    highp vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    #line 487
    highp vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    highp vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    highp vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, (-IN.sphereCoords))) - 0.95)) + 0.5));
    #line 491
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    #line 495
    highp vec2 localCoords = encnorm.wy;
    localCoords -= vec2( 0.5);
    localCoords.x *= 0.25;
    localCoords.y *= 0.5;
    #line 499
    uv.x -= 0.5;
    uv += localCoords;
    mediump vec3 norm;
    norm.z = cos((6.28319 * uv.x));
    #line 503
    norm.x = sin((6.28319 * uv.x));
    norm.y = cos((3.14159 * uv.y));
    norm = (-norm);
    sphereNrm = abs(sphereNrm);
    #line 507
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = (0.25 * (mix( detail, detailY, vec4( sphereNrm.y)) - 0.5));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (IN.color + mix( detail.xyzw, vec4( 0.0), vec4( detailLevel)));
    #line 511
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    color = mix( color, main, vec4( handoff));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 515
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    #line 519
    lowp float atten = (texture( _LightTexture0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * unityCubeShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    mediump float terminator = xll_saturate_f(floor((1.01 + dot( IN.sphereCoords, _SunDir))));
    #line 523
    light *= terminator;
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    color.w = 1.0;
    #line 527
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.objnormal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec4 _LightPositionRange;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec4 tmpvar_3;
  tmpvar_3.x = gl_MultiTexCoord0.x;
  tmpvar_3.y = gl_MultiTexCoord0.y;
  tmpvar_3.z = gl_MultiTexCoord1.x;
  tmpvar_3.w = gl_MultiTexCoord1.y;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_3).xyz);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _LightPositionRange;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec3 norm_1;
  vec2 localCoords_2;
  vec2 uv_3;
  vec4 color_4;
  float r_5;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_6;
    y_over_x_6 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * r_5));
  uv_3.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_9;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_10;
    y_over_x_10 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_11;
    float x_12;
    x_12 = (y_over_x_10 * inversesqrt(((y_over_x_10 * y_over_x_10) + 1.0)));
    s_11 = (sign(x_12) * (1.5708 - (sqrt((1.0 - abs(x_12))) * (1.5708 + (abs(x_12) * (-0.214602 + (abs(x_12) * (0.0865667 + (abs(x_12) * -0.0310296)))))))));
    r_9 = s_11;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_9 = (s_11 + 3.14159);
      } else {
        r_9 = (r_9 - 3.14159);
      };
    };
  } else {
    r_9 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_13;
  tmpvar_13 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_14;
  tmpvar_14 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_15;
  tmpvar_15 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(tmpvar_13);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(tmpvar_13);
  vec4 tmpvar_17;
  tmpvar_17 = texture2DGradARB (_MainTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  float tmpvar_18;
  tmpvar_18 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec2 tmpvar_19;
  tmpvar_19 = (texture2DGradARB (_BumpMap, uv_3, tmpvar_16.xy, tmpvar_16.zw).wy - vec2(0.5, 0.5));
  localCoords_2.x = (tmpvar_19.x * 0.25);
  localCoords_2.y = (tmpvar_19.y * 0.5);
  uv_3.x = (uv_3.x - 0.5);
  vec2 tmpvar_20;
  tmpvar_20 = (uv_3 + localCoords_2);
  uv_3 = tmpvar_20;
  norm_1.z = cos((6.28319 * tmpvar_20.x));
  norm_1.x = sin((6.28319 * tmpvar_20.x));
  norm_1.y = cos((3.14159 * tmpvar_20.y));
  vec3 tmpvar_21;
  tmpvar_21 = -(norm_1);
  norm_1 = tmpvar_21;
  vec3 tmpvar_22;
  tmpvar_22 = abs(xlv_TEXCOORD6);
  float tmpvar_23;
  tmpvar_23 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  vec4 tmpvar_24;
  tmpvar_24 = (mix ((xlv_TEXCOORD1 + mix ((0.25 * (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_18)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_18)), tmpvar_22.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_18)), tmpvar_22.yyyy) - 0.5)), vec4(0.0, 0.0, 0.0, 0.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))), tmpvar_17, vec4(tmpvar_23)) * _Color);
  color_4 = tmpvar_24;
  float tmpvar_25;
  tmpvar_25 = mix (clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), clamp (dot (tmpvar_21, -(_SunDir)), 0.0, 1.0), tmpvar_23);
  vec4 tmpvar_26;
  tmpvar_26 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)));
  vec4 tmpvar_27;
  tmpvar_27 = textureCube (_LightTexture0, xlv_TEXCOORD3);
  vec4 shadowVals_28;
  shadowVals_28.x = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD4 + vec3(0.0078125, 0.0078125, 0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_28.y = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD4 + vec3(-0.0078125, -0.0078125, 0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_28.z = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD4 + vec3(-0.0078125, 0.0078125, -0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_28.w = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD4 + vec3(0.0078125, -0.0078125, -0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_29;
  tmpvar_29 = lessThan (shadowVals_28, vec4(((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97)));
  vec4 tmpvar_30;
  tmpvar_30 = _LightShadowData.xxxx;
  float tmpvar_31;
  if (tmpvar_29.x) {
    tmpvar_31 = tmpvar_30.x;
  } else {
    tmpvar_31 = 1.0;
  };
  float tmpvar_32;
  if (tmpvar_29.y) {
    tmpvar_32 = tmpvar_30.y;
  } else {
    tmpvar_32 = 1.0;
  };
  float tmpvar_33;
  if (tmpvar_29.z) {
    tmpvar_33 = tmpvar_30.z;
  } else {
    tmpvar_33 = 1.0;
  };
  float tmpvar_34;
  if (tmpvar_29.w) {
    tmpvar_34 = tmpvar_30.w;
  } else {
    tmpvar_34 = 1.0;
  };
  vec4 tmpvar_35;
  tmpvar_35.x = tmpvar_31;
  tmpvar_35.y = tmpvar_32;
  tmpvar_35.z = tmpvar_33;
  tmpvar_35.w = tmpvar_34;
  vec3 tmpvar_36;
  tmpvar_36 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_25) * 4.0) * ((tmpvar_26.w * tmpvar_27.w) * dot (tmpvar_35, vec4(0.25, 0.25, 0.25, 0.25)))), 0.0, 1.0))), 0.0, 1.0) * clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0));
  color_4.xyz = (tmpvar_24.xyz + (_Albedo * tmpvar_36));
  color_4.xyz = (color_4.xyz * tmpvar_36);
  color_4.w = 1.0;
  gl_FragData[0] = color_4;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_LightPositionRange]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 32 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
def c14, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
mov r1.xyz, v2
mov r1.w, c14.x
dp4 r2.z, r1, c6
dp4 r2.x, r1, c4
dp4 r2.y, r1, c5
mov r0.zw, v4.xyxy
mov r0.xy, v3
dp4 r2.w, r0, r0
rsq r1.x, r2.w
mul r0.xyz, r1.x, r0
mov o7.xyz, -r0
dp3 r0.w, r2, r2
rsq r0.w, r0.w
mul o6.xyz, r0.w, r2
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
dp4 r0.w, v0, c7
add r1.xyz, -r0, c12
dp3 r1.x, r1, r1
rsq r1.x, r1.x
mov o2, v1
dp4 o4.z, r0, c10
dp4 o4.y, r0, c9
dp4 o4.x, r0, c8
rcp o1.x, r1.x
mov o3.xyz, v2
add o5.xyz, r0, -c13
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  highp vec3 p_2;
  p_2 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_1;
  highp vec4 tmpvar_4;
  tmpvar_4.x = _glesMultiTexCoord0.x;
  tmpvar_4.y = _glesMultiTexCoord0.y;
  tmpvar_4.z = _glesMultiTexCoord1.x;
  tmpvar_4.w = _glesMultiTexCoord1.y;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_4).xyz);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float terminator_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float TNdotL_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump float handoff_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec3 norm_11;
  highp vec2 localCoords_12;
  mediump vec4 encnorm_13;
  mediump float vertLerp_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD6.zy * _DetailScale);
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zx * _DetailScale);
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.xy * _DetailScale);
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  highp float tmpvar_37;
  tmpvar_37 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_14 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailVertTex, tmpvar_34);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailTex, tmpvar_31);
  mediump vec4 tmpvar_40;
  tmpvar_40 = mix (tmpvar_38, tmpvar_39, vec4(vertLerp_14));
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailVertTex, tmpvar_35);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailTex, tmpvar_32);
  mediump vec4 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41, tmpvar_42, vec4(vertLerp_14));
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailVertTex, tmpvar_36);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, tmpvar_33);
  mediump vec4 tmpvar_46;
  tmpvar_46 = mix (tmpvar_44, tmpvar_45, vec4(vertLerp_14));
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2DGradEXT (_BumpMap, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  encnorm_13 = tmpvar_47;
  mediump vec2 tmpvar_48;
  tmpvar_48 = encnorm_13.wy;
  localCoords_12 = tmpvar_48;
  highp vec2 tmpvar_49;
  tmpvar_49 = (localCoords_12 - vec2(0.5, 0.5));
  localCoords_12.x = (tmpvar_49.x * 0.25);
  localCoords_12.y = (tmpvar_49.y * 0.5);
  uv_16.x = (uv_16.x - 0.5);
  highp vec2 tmpvar_50;
  tmpvar_50 = (uv_16 + localCoords_12);
  uv_16 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = cos((6.28319 * tmpvar_50.x));
  norm_11.z = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = sin((6.28319 * tmpvar_50.x));
  norm_11.x = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = cos((3.14159 * tmpvar_50.y));
  norm_11.y = tmpvar_53;
  mediump vec3 tmpvar_54;
  tmpvar_54 = -(norm_11);
  norm_11 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_56;
  tmpvar_56 = mix (tmpvar_46, tmpvar_40, tmpvar_55.xxxx);
  detail_10 = tmpvar_56;
  highp vec4 tmpvar_57;
  tmpvar_57 = (0.25 * (mix (detail_10, tmpvar_43, tmpvar_55.yyyy) - 0.5));
  detail_10 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_9 = tmpvar_58;
  mediump vec4 tmpvar_59;
  tmpvar_59 = mix (detail_10, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_9));
  highp vec4 tmpvar_60;
  tmpvar_60 = (xlv_TEXCOORD1 + tmpvar_59);
  color_17 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_8 = tmpvar_61;
  mediump vec4 tmpvar_62;
  tmpvar_62 = (mix (color_17, main_15, vec4(handoff_8)) * _Color);
  color_17 = tmpvar_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = clamp (dot (xlv_TEXCOORD5, lightDirection_6), 0.0, 1.0);
  TNdotL_5 = tmpvar_65;
  mediump float tmpvar_66;
  tmpvar_66 = mix (TNdotL_5, clamp (dot (tmpvar_54, -(_SunDir)), 0.0, 1.0), handoff_8);
  highp float tmpvar_67;
  tmpvar_67 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_68;
  tmpvar_68 = texture2D (_LightTextureB0, vec2(tmpvar_67));
  lowp vec4 tmpvar_69;
  tmpvar_69 = textureCube (_LightTexture0, xlv_TEXCOORD3);
  highp float tmpvar_70;
  mediump vec4 shadows_71;
  highp vec4 shadowVals_72;
  highp float tmpvar_73;
  tmpvar_73 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  highp vec3 vec_74;
  vec_74 = (xlv_TEXCOORD4 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 packDist_75;
  lowp vec4 tmpvar_76;
  tmpvar_76 = textureCube (_ShadowMapTexture, vec_74);
  packDist_75 = tmpvar_76;
  shadowVals_72.x = dot (packDist_75, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_77;
  vec_77 = (xlv_TEXCOORD4 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 packDist_78;
  lowp vec4 tmpvar_79;
  tmpvar_79 = textureCube (_ShadowMapTexture, vec_77);
  packDist_78 = tmpvar_79;
  shadowVals_72.y = dot (packDist_78, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_80;
  vec_80 = (xlv_TEXCOORD4 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 packDist_81;
  lowp vec4 tmpvar_82;
  tmpvar_82 = textureCube (_ShadowMapTexture, vec_80);
  packDist_81 = tmpvar_82;
  shadowVals_72.z = dot (packDist_81, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_83;
  vec_83 = (xlv_TEXCOORD4 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 packDist_84;
  lowp vec4 tmpvar_85;
  tmpvar_85 = textureCube (_ShadowMapTexture, vec_83);
  packDist_84 = tmpvar_85;
  shadowVals_72.w = dot (packDist_84, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_86;
  tmpvar_86 = lessThan (shadowVals_72, vec4(tmpvar_73));
  highp vec4 tmpvar_87;
  tmpvar_87 = _LightShadowData.xxxx;
  highp float tmpvar_88;
  if (tmpvar_86.x) {
    tmpvar_88 = tmpvar_87.x;
  } else {
    tmpvar_88 = 1.0;
  };
  highp float tmpvar_89;
  if (tmpvar_86.y) {
    tmpvar_89 = tmpvar_87.y;
  } else {
    tmpvar_89 = 1.0;
  };
  highp float tmpvar_90;
  if (tmpvar_86.z) {
    tmpvar_90 = tmpvar_87.z;
  } else {
    tmpvar_90 = 1.0;
  };
  highp float tmpvar_91;
  if (tmpvar_86.w) {
    tmpvar_91 = tmpvar_87.w;
  } else {
    tmpvar_91 = 1.0;
  };
  highp vec4 tmpvar_92;
  tmpvar_92.x = tmpvar_88;
  tmpvar_92.y = tmpvar_89;
  tmpvar_92.z = tmpvar_90;
  tmpvar_92.w = tmpvar_91;
  shadows_71 = tmpvar_92;
  mediump float tmpvar_93;
  tmpvar_93 = dot (shadows_71, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_70 = tmpvar_93;
  highp float tmpvar_94;
  tmpvar_94 = ((tmpvar_68.w * tmpvar_69.w) * tmpvar_70);
  atten_4 = tmpvar_94;
  mediump float tmpvar_95;
  tmpvar_95 = clamp ((((_LightColor0.w * tmpvar_66) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_96;
  tmpvar_96 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_95)), 0.0, 1.0);
  light_3 = tmpvar_96;
  highp float tmpvar_97;
  tmpvar_97 = clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0);
  terminator_2 = tmpvar_97;
  mediump vec3 tmpvar_98;
  tmpvar_98 = (light_3 * terminator_2);
  light_3 = tmpvar_98;
  highp vec3 tmpvar_99;
  tmpvar_99 = (tmpvar_62.xyz + (_Albedo * tmpvar_98));
  color_17.xyz = tmpvar_99;
  color_17.xyz = (color_17.xyz * tmpvar_98);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  highp vec3 p_2;
  p_2 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_1;
  highp vec4 tmpvar_4;
  tmpvar_4.x = _glesMultiTexCoord0.x;
  tmpvar_4.y = _glesMultiTexCoord0.y;
  tmpvar_4.z = _glesMultiTexCoord1.x;
  tmpvar_4.w = _glesMultiTexCoord1.y;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_4).xyz);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float terminator_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float TNdotL_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump float handoff_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec3 norm_11;
  highp vec2 localCoords_12;
  mediump vec4 encnorm_13;
  mediump float vertLerp_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD6.zy * _DetailScale);
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zx * _DetailScale);
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.xy * _DetailScale);
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  highp float tmpvar_37;
  tmpvar_37 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_14 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailVertTex, tmpvar_34);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailTex, tmpvar_31);
  mediump vec4 tmpvar_40;
  tmpvar_40 = mix (tmpvar_38, tmpvar_39, vec4(vertLerp_14));
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailVertTex, tmpvar_35);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailTex, tmpvar_32);
  mediump vec4 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41, tmpvar_42, vec4(vertLerp_14));
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailVertTex, tmpvar_36);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, tmpvar_33);
  mediump vec4 tmpvar_46;
  tmpvar_46 = mix (tmpvar_44, tmpvar_45, vec4(vertLerp_14));
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2DGradEXT (_BumpMap, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  encnorm_13 = tmpvar_47;
  mediump vec2 tmpvar_48;
  tmpvar_48 = encnorm_13.wy;
  localCoords_12 = tmpvar_48;
  highp vec2 tmpvar_49;
  tmpvar_49 = (localCoords_12 - vec2(0.5, 0.5));
  localCoords_12.x = (tmpvar_49.x * 0.25);
  localCoords_12.y = (tmpvar_49.y * 0.5);
  uv_16.x = (uv_16.x - 0.5);
  highp vec2 tmpvar_50;
  tmpvar_50 = (uv_16 + localCoords_12);
  uv_16 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = cos((6.28319 * tmpvar_50.x));
  norm_11.z = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = sin((6.28319 * tmpvar_50.x));
  norm_11.x = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = cos((3.14159 * tmpvar_50.y));
  norm_11.y = tmpvar_53;
  mediump vec3 tmpvar_54;
  tmpvar_54 = -(norm_11);
  norm_11 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_56;
  tmpvar_56 = mix (tmpvar_46, tmpvar_40, tmpvar_55.xxxx);
  detail_10 = tmpvar_56;
  highp vec4 tmpvar_57;
  tmpvar_57 = (0.25 * (mix (detail_10, tmpvar_43, tmpvar_55.yyyy) - 0.5));
  detail_10 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_9 = tmpvar_58;
  mediump vec4 tmpvar_59;
  tmpvar_59 = mix (detail_10, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_9));
  highp vec4 tmpvar_60;
  tmpvar_60 = (xlv_TEXCOORD1 + tmpvar_59);
  color_17 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_8 = tmpvar_61;
  mediump vec4 tmpvar_62;
  tmpvar_62 = (mix (color_17, main_15, vec4(handoff_8)) * _Color);
  color_17 = tmpvar_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = clamp (dot (xlv_TEXCOORD5, lightDirection_6), 0.0, 1.0);
  TNdotL_5 = tmpvar_65;
  mediump float tmpvar_66;
  tmpvar_66 = mix (TNdotL_5, clamp (dot (tmpvar_54, -(_SunDir)), 0.0, 1.0), handoff_8);
  highp float tmpvar_67;
  tmpvar_67 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_68;
  tmpvar_68 = texture2D (_LightTextureB0, vec2(tmpvar_67));
  lowp vec4 tmpvar_69;
  tmpvar_69 = textureCube (_LightTexture0, xlv_TEXCOORD3);
  highp float tmpvar_70;
  mediump vec4 shadows_71;
  highp vec4 shadowVals_72;
  highp float tmpvar_73;
  tmpvar_73 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  highp vec3 vec_74;
  vec_74 = (xlv_TEXCOORD4 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 packDist_75;
  lowp vec4 tmpvar_76;
  tmpvar_76 = textureCube (_ShadowMapTexture, vec_74);
  packDist_75 = tmpvar_76;
  shadowVals_72.x = dot (packDist_75, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_77;
  vec_77 = (xlv_TEXCOORD4 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 packDist_78;
  lowp vec4 tmpvar_79;
  tmpvar_79 = textureCube (_ShadowMapTexture, vec_77);
  packDist_78 = tmpvar_79;
  shadowVals_72.y = dot (packDist_78, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_80;
  vec_80 = (xlv_TEXCOORD4 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 packDist_81;
  lowp vec4 tmpvar_82;
  tmpvar_82 = textureCube (_ShadowMapTexture, vec_80);
  packDist_81 = tmpvar_82;
  shadowVals_72.z = dot (packDist_81, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_83;
  vec_83 = (xlv_TEXCOORD4 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 packDist_84;
  lowp vec4 tmpvar_85;
  tmpvar_85 = textureCube (_ShadowMapTexture, vec_83);
  packDist_84 = tmpvar_85;
  shadowVals_72.w = dot (packDist_84, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_86;
  tmpvar_86 = lessThan (shadowVals_72, vec4(tmpvar_73));
  highp vec4 tmpvar_87;
  tmpvar_87 = _LightShadowData.xxxx;
  highp float tmpvar_88;
  if (tmpvar_86.x) {
    tmpvar_88 = tmpvar_87.x;
  } else {
    tmpvar_88 = 1.0;
  };
  highp float tmpvar_89;
  if (tmpvar_86.y) {
    tmpvar_89 = tmpvar_87.y;
  } else {
    tmpvar_89 = 1.0;
  };
  highp float tmpvar_90;
  if (tmpvar_86.z) {
    tmpvar_90 = tmpvar_87.z;
  } else {
    tmpvar_90 = 1.0;
  };
  highp float tmpvar_91;
  if (tmpvar_86.w) {
    tmpvar_91 = tmpvar_87.w;
  } else {
    tmpvar_91 = 1.0;
  };
  highp vec4 tmpvar_92;
  tmpvar_92.x = tmpvar_88;
  tmpvar_92.y = tmpvar_89;
  tmpvar_92.z = tmpvar_90;
  tmpvar_92.w = tmpvar_91;
  shadows_71 = tmpvar_92;
  mediump float tmpvar_93;
  tmpvar_93 = dot (shadows_71, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_70 = tmpvar_93;
  highp float tmpvar_94;
  tmpvar_94 = ((tmpvar_68.w * tmpvar_69.w) * tmpvar_70);
  atten_4 = tmpvar_94;
  mediump float tmpvar_95;
  tmpvar_95 = clamp ((((_LightColor0.w * tmpvar_66) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_96;
  tmpvar_96 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_95)), 0.0, 1.0);
  light_3 = tmpvar_96;
  highp float tmpvar_97;
  tmpvar_97 = clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0);
  terminator_2 = tmpvar_97;
  mediump vec3 tmpvar_98;
  tmpvar_98 = (light_3 * terminator_2);
  light_3 = tmpvar_98;
  highp vec3 tmpvar_99;
  tmpvar_99 = (tmpvar_62.xyz + (_Albedo * tmpvar_98));
  color_17.xyz = tmpvar_99;
  color_17.xyz = (color_17.xyz * tmpvar_98);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 337
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 438
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 objnormal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
};
#line 428
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform samplerCube _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 347
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 360
#line 368
#line 382
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 415
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 419
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 423
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp mat4 _Rotation;
#line 427
uniform highp mat4 _InvRotation;
#line 450
#line 476
#line 450
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 454
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    #line 458
    o.color = v.color;
    o.objnormal = v.normal;
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    o._ShadowCoord = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    #line 463
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.objnormal);
    xlv_TEXCOORD3 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereCoords);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
vec2 xll_vecTSel_vb2_vf2_vf2 (bvec2 a, vec2 b, vec2 c) {
  return vec2 (a.x ? b.x : c.x, a.y ? b.y : c.y);
}
vec3 xll_vecTSel_vb3_vf3_vf3 (bvec3 a, vec3 b, vec3 c) {
  return vec3 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z);
}
vec4 xll_vecTSel_vb4_vf4_vf4 (bvec4 a, vec4 b, vec4 c) {
  return vec4 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z, a.w ? b.w : c.w);
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 337
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 438
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 objnormal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
};
#line 428
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform samplerCube _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 347
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 360
#line 368
#line 382
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 415
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 419
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 423
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp mat4 _Rotation;
#line 427
uniform highp mat4 _InvRotation;
#line 450
#line 476
#line 465
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 467
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 471
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 215
highp float DecodeFloatRGBA( in highp vec4 enc ) {
    highp vec4 kDecodeDot = vec4( 1.0, 0.00392157, 1.53787e-05, 6.22737e-09);
    return dot( enc, kDecodeDot);
}
#line 316
highp float SampleCubeDistance( in highp vec3 vec ) {
    highp vec4 packDist = texture( _ShadowMapTexture, vec);
    #line 319
    return DecodeFloatRGBA( packDist);
}
#line 321
highp float unityCubeShadow( in highp vec3 vec ) {
    #line 323
    highp float mydist = (length(vec) * _LightPositionRange.w);
    mydist *= 0.97;
    highp float z = 0.0078125;
    highp vec4 shadowVals;
    #line 327
    shadowVals.x = SampleCubeDistance( (vec + vec3( z, z, z)));
    shadowVals.y = SampleCubeDistance( (vec + vec3( (-z), (-z), z)));
    shadowVals.z = SampleCubeDistance( (vec + vec3( (-z), z, (-z))));
    shadowVals.w = SampleCubeDistance( (vec + vec3( z, (-z), (-z))));
    #line 331
    mediump vec4 shadows = xll_vecTSel_vb4_vf4_vf4 (lessThan( shadowVals, vec4( mydist)), vec4( _LightShadowData.xxxx), vec4( 1.0));
    return dot( shadows, vec4( 0.25));
}
#line 476
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    #line 480
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 484
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    highp vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    highp vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    highp vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    #line 488
    highp vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    highp vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    highp vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, (-IN.sphereCoords))) - 0.95)) + 0.5));
    #line 492
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    #line 496
    highp vec2 localCoords = encnorm.wy;
    localCoords -= vec2( 0.5);
    localCoords.x *= 0.25;
    localCoords.y *= 0.5;
    #line 500
    uv.x -= 0.5;
    uv += localCoords;
    mediump vec3 norm;
    norm.z = cos((6.28319 * uv.x));
    #line 504
    norm.x = sin((6.28319 * uv.x));
    norm.y = cos((3.14159 * uv.y));
    norm = (-norm);
    sphereNrm = abs(sphereNrm);
    #line 508
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = (0.25 * (mix( detail, detailY, vec4( sphereNrm.y)) - 0.5));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (IN.color + mix( detail.xyzw, vec4( 0.0), vec4( detailLevel)));
    #line 512
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    color = mix( color, main, vec4( handoff));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 516
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    #line 520
    lowp float atten = ((texture( _LightTextureB0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * texture( _LightTexture0, IN._LightCoord).w) * unityCubeShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    mediump float terminator = xll_saturate_f(floor((1.01 + dot( IN.sphereCoords, _SunDir))));
    #line 524
    light *= terminator;
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    color.w = 1.0;
    #line 528
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.objnormal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec4 tmpvar_3;
  tmpvar_3.x = gl_MultiTexCoord0.x;
  tmpvar_3.y = gl_MultiTexCoord0.y;
  tmpvar_3.z = gl_MultiTexCoord1.x;
  tmpvar_3.w = gl_MultiTexCoord1.y;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_3).xyz);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec3 norm_2;
  vec2 localCoords_3;
  vec4 cityoverlay_4;
  vec2 uv_5;
  vec4 color_6;
  float r_7;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_5.x = (0.5 + (0.159155 * r_7));
  uv_5.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_11;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_12;
    y_over_x_12 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_13;
    float x_14;
    x_14 = (y_over_x_12 * inversesqrt(((y_over_x_12 * y_over_x_12) + 1.0)));
    s_13 = (sign(x_14) * (1.5708 - (sqrt((1.0 - abs(x_14))) * (1.5708 + (abs(x_14) * (-0.214602 + (abs(x_14) * (0.0865667 + (abs(x_14) * -0.0310296)))))))));
    r_11 = s_13;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_11 = (s_13 + 3.14159);
      } else {
        r_11 = (r_11 - 3.14159);
      };
    };
  } else {
    r_11 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_15;
  tmpvar_15 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_16;
  tmpvar_16 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_17;
  tmpvar_17 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_18;
  tmpvar_18.x = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_18.y = dFdx(tmpvar_15);
  tmpvar_18.z = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_18.w = dFdy(tmpvar_15);
  vec4 tmpvar_19;
  tmpvar_19 = texture2DGradARB (_MainTex, uv_5, tmpvar_18.xy, tmpvar_18.zw);
  float tmpvar_20;
  tmpvar_20 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_21;
  tmpvar_21 = texture2DGradARB (_CityOverlayTex, uv_5, tmpvar_18.xy, tmpvar_18.zw);
  cityoverlay_4.xyz = tmpvar_21.xyz;
  vec2 tmpvar_22;
  tmpvar_22 = (texture2DGradARB (_BumpMap, uv_5, tmpvar_18.xy, tmpvar_18.zw).wy - vec2(0.5, 0.5));
  localCoords_3.x = (tmpvar_22.x * 0.25);
  localCoords_3.y = (tmpvar_22.y * 0.5);
  uv_5.x = (uv_5.x - 0.5);
  vec2 tmpvar_23;
  tmpvar_23 = (uv_5 + localCoords_3);
  uv_5 = tmpvar_23;
  norm_2.z = cos((6.28319 * tmpvar_23.x));
  norm_2.x = sin((6.28319 * tmpvar_23.x));
  norm_2.y = cos((3.14159 * tmpvar_23.y));
  vec3 tmpvar_24;
  tmpvar_24 = -(norm_2);
  norm_2 = tmpvar_24;
  vec3 tmpvar_25;
  tmpvar_25 = abs(xlv_TEXCOORD6);
  float tmpvar_26;
  tmpvar_26 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  cityoverlay_4.w = (tmpvar_21.w * clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0));
  vec4 tmpvar_27;
  tmpvar_27 = (cityoverlay_4 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_25.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_25.yyyy));
  citydarkoverlay_1.xyz = tmpvar_27.xyz;
  vec4 tmpvar_28;
  tmpvar_28 = (cityoverlay_4 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_25.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_25.yyyy));
  vec4 tmpvar_29;
  tmpvar_29 = (mix (mix ((xlv_TEXCOORD1 + mix ((0.25 * (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_20)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_20)), tmpvar_25.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_20)), tmpvar_25.yyyy) - 0.5)), vec4(0.0, 0.0, 0.0, 0.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))), tmpvar_19, vec4(tmpvar_26)), tmpvar_28, tmpvar_28.wwww) * _Color);
  color_6.w = tmpvar_29.w;
  float tmpvar_30;
  tmpvar_30 = clamp (dot (tmpvar_24, -(_SunDir)), 0.0, 1.0);
  float tmpvar_31;
  tmpvar_31 = texture2D (_LightTexture0, vec2(dot (xlv_TEXCOORD3, xlv_TEXCOORD3))).w;
  vec3 tmpvar_32;
  tmpvar_32 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * mix (clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), tmpvar_30, tmpvar_26)) * 4.0) * tmpvar_31), 0.0, 1.0))), 0.0, 1.0) * clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0));
  color_6.xyz = (tmpvar_29.xyz + (_Albedo * tmpvar_32));
  color_6.xyz = (color_6.xyz * tmpvar_32);
  citydarkoverlay_1.w = (tmpvar_27.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_30 - 0.01)) / 0.99) * 4.0) * tmpvar_31), 0.0, 1.0), 0.0, 1.0)));
  color_6.xyz = mix (color_6, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_6.w = 1.0;
  gl_FragData[0] = color_6;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 31 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord5 o5
dcl_texcoord6 o6
def c13, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
mov r1.xyz, v2
mov r1.w, c13.x
dp4 r2.z, r1, c6
dp4 r2.x, r1, c4
dp4 r2.y, r1, c5
mov r0.zw, v4.xyxy
mov r0.xy, v3
dp4 r2.w, r0, r0
rsq r1.x, r2.w
mul r0.xyz, r1.x, r0
mov o6.xyz, -r0
dp3 r0.w, r2, r2
rsq r0.w, r0.w
mul o5.xyz, r0.w, r2
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
dp4 r0.w, v0, c7
add r1.xyz, -r0, c12
dp3 r1.x, r1, r1
rsq r1.x, r1.x
mov o2, v1
dp4 o4.z, r0, c10
dp4 o4.y, r0, c9
dp4 o4.x, r0, c8
rcp o1.x, r1.x
mov o3.xyz, v2
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  highp vec3 p_2;
  p_2 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_1;
  highp vec4 tmpvar_4;
  tmpvar_4.x = _glesMultiTexCoord0.x;
  tmpvar_4.y = _glesMultiTexCoord0.y;
  tmpvar_4.z = _glesMultiTexCoord1.x;
  tmpvar_4.w = _glesMultiTexCoord1.y;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_4).xyz);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float terminator_2;
  mediump vec3 light_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float handoff_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec3 norm_11;
  highp vec2 localCoords_12;
  mediump vec4 encnorm_13;
  mediump vec4 citylightoverlaydetailZ_14;
  mediump vec4 citylightoverlaydetailY_15;
  mediump vec4 citylightoverlaydetailX_16;
  mediump vec4 citydarkoverlaydetailZ_17;
  mediump vec4 citydarkoverlaydetailY_18;
  mediump vec4 citydarkoverlaydetailX_19;
  mediump vec4 cityoverlay_20;
  mediump float vertLerp_21;
  mediump vec4 main_22;
  highp vec2 uv_23;
  mediump vec4 color_24;
  highp float r_25;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_23.x = (0.5 + (0.159155 * r_25));
  uv_23.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_29;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_30;
    y_over_x_30 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_31;
    highp float x_32;
    x_32 = (y_over_x_30 * inversesqrt(((y_over_x_30 * y_over_x_30) + 1.0)));
    s_31 = (sign(x_32) * (1.5708 - (sqrt((1.0 - abs(x_32))) * (1.5708 + (abs(x_32) * (-0.214602 + (abs(x_32) * (0.0865667 + (abs(x_32) * -0.0310296)))))))));
    r_29 = s_31;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_29 = (s_31 + 3.14159);
      } else {
        r_29 = (r_29 - 3.14159);
      };
    };
  } else {
    r_29 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_33;
  tmpvar_33 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_34;
  tmpvar_34 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_36;
  tmpvar_36.x = (0.159155 * sqrt(dot (tmpvar_34, tmpvar_34)));
  tmpvar_36.y = dFdx(tmpvar_33);
  tmpvar_36.z = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_36.w = dFdy(tmpvar_33);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2DGradEXT (_MainTex, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  main_22 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD6.zy * _DetailScale);
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD6.zx * _DetailScale);
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.xy * _DetailScale);
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  highp float tmpvar_44;
  tmpvar_44 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_21 = tmpvar_44;
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, tmpvar_41);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, tmpvar_38);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_21));
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailVertTex, tmpvar_42);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailTex, tmpvar_39);
  mediump vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_49, vec4(vertLerp_21));
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailVertTex, tmpvar_43);
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailTex, tmpvar_40);
  mediump vec4 tmpvar_53;
  tmpvar_53 = mix (tmpvar_51, tmpvar_52, vec4(vertLerp_21));
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2DGradEXT (_CityOverlayTex, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  cityoverlay_20 = tmpvar_54;
  lowp vec4 tmpvar_55;
  highp vec2 P_56;
  P_56 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_55 = texture2D (_CityDarkOverlayDetailTex, P_56);
  citydarkoverlaydetailX_19 = tmpvar_55;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityDarkOverlayDetailTex, P_58);
  citydarkoverlaydetailY_18 = tmpvar_57;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_59 = texture2D (_CityDarkOverlayDetailTex, P_60);
  citydarkoverlaydetailZ_17 = tmpvar_59;
  lowp vec4 tmpvar_61;
  highp vec2 P_62;
  P_62 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_61 = texture2D (_CityLightOverlayDetailTex, P_62);
  citylightoverlaydetailX_16 = tmpvar_61;
  lowp vec4 tmpvar_63;
  highp vec2 P_64;
  P_64 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_63 = texture2D (_CityLightOverlayDetailTex, P_64);
  citylightoverlaydetailY_15 = tmpvar_63;
  lowp vec4 tmpvar_65;
  highp vec2 P_66;
  P_66 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_65 = texture2D (_CityLightOverlayDetailTex, P_66);
  citylightoverlaydetailZ_14 = tmpvar_65;
  lowp vec4 tmpvar_67;
  tmpvar_67 = texture2DGradEXT (_BumpMap, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  encnorm_13 = tmpvar_67;
  mediump vec2 tmpvar_68;
  tmpvar_68 = encnorm_13.wy;
  localCoords_12 = tmpvar_68;
  highp vec2 tmpvar_69;
  tmpvar_69 = (localCoords_12 - vec2(0.5, 0.5));
  localCoords_12.x = (tmpvar_69.x * 0.25);
  localCoords_12.y = (tmpvar_69.y * 0.5);
  uv_23.x = (uv_23.x - 0.5);
  highp vec2 tmpvar_70;
  tmpvar_70 = (uv_23 + localCoords_12);
  uv_23 = tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = cos((6.28319 * tmpvar_70.x));
  norm_11.z = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = sin((6.28319 * tmpvar_70.x));
  norm_11.x = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = cos((3.14159 * tmpvar_70.y));
  norm_11.y = tmpvar_73;
  mediump vec3 tmpvar_74;
  tmpvar_74 = -(norm_11);
  norm_11 = tmpvar_74;
  highp vec3 tmpvar_75;
  tmpvar_75 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (tmpvar_53, tmpvar_47, tmpvar_75.xxxx);
  detail_10 = tmpvar_76;
  highp vec4 tmpvar_77;
  tmpvar_77 = (0.25 * (mix (detail_10, tmpvar_50, tmpvar_75.yyyy) - 0.5));
  detail_10 = tmpvar_77;
  highp float tmpvar_78;
  tmpvar_78 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_9 = tmpvar_78;
  mediump vec4 tmpvar_79;
  tmpvar_79 = mix (detail_10, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_9));
  highp vec4 tmpvar_80;
  tmpvar_80 = (xlv_TEXCOORD1 + tmpvar_79);
  color_24 = tmpvar_80;
  highp float tmpvar_81;
  tmpvar_81 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_8 = tmpvar_81;
  highp float tmpvar_82;
  tmpvar_82 = clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0);
  cityoverlay_20.w = (cityoverlay_20.w * tmpvar_82);
  highp vec4 tmpvar_83;
  tmpvar_83 = mix (citydarkoverlaydetailZ_17, citydarkoverlaydetailX_19, tmpvar_75.xxxx);
  detail_10 = tmpvar_83;
  highp vec4 tmpvar_84;
  tmpvar_84 = mix (detail_10, citydarkoverlaydetailY_18, tmpvar_75.yyyy);
  detail_10 = tmpvar_84;
  mediump vec4 tmpvar_85;
  tmpvar_85 = (cityoverlay_20 * detail_10);
  citydarkoverlay_7.xyz = tmpvar_85.xyz;
  highp vec4 tmpvar_86;
  tmpvar_86 = mix (citylightoverlaydetailZ_14, citylightoverlaydetailX_16, tmpvar_75.xxxx);
  detail_10 = tmpvar_86;
  highp vec4 tmpvar_87;
  tmpvar_87 = mix (detail_10, citylightoverlaydetailY_15, tmpvar_75.yyyy);
  detail_10 = tmpvar_87;
  mediump vec4 tmpvar_88;
  tmpvar_88 = (cityoverlay_20 * detail_10);
  mediump vec4 tmpvar_89;
  tmpvar_89 = (mix (mix (color_24, main_22, vec4(handoff_8)), tmpvar_88, tmpvar_88.wwww) * _Color);
  color_24.w = tmpvar_89.w;
  highp vec3 tmpvar_90;
  tmpvar_90 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_90;
  highp vec3 tmpvar_91;
  tmpvar_91 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_91;
  highp float tmpvar_92;
  tmpvar_92 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_92;
  mediump float tmpvar_93;
  tmpvar_93 = clamp (dot (tmpvar_74, -(_SunDir)), 0.0, 1.0);
  highp float tmpvar_94;
  tmpvar_94 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp float tmpvar_95;
  tmpvar_95 = texture2D (_LightTexture0, vec2(tmpvar_94)).w;
  mediump float tmpvar_96;
  tmpvar_96 = clamp ((((_LightColor0.w * mix (TNdotL_4, tmpvar_93, handoff_8)) * 4.0) * tmpvar_95), 0.0, 1.0);
  highp vec3 tmpvar_97;
  tmpvar_97 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_96)), 0.0, 1.0);
  light_3 = tmpvar_97;
  highp float tmpvar_98;
  tmpvar_98 = clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0);
  terminator_2 = tmpvar_98;
  mediump vec3 tmpvar_99;
  tmpvar_99 = (light_3 * terminator_2);
  light_3 = tmpvar_99;
  highp vec3 tmpvar_100;
  tmpvar_100 = (tmpvar_89.xyz + (_Albedo * tmpvar_99));
  color_24.xyz = tmpvar_100;
  color_24.xyz = (color_24.xyz * tmpvar_99);
  citydarkoverlay_7.w = (tmpvar_85.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_93 - 0.01)) / 0.99) * 4.0) * tmpvar_95), 0.0, 1.0), 0.0, 1.0)));
  color_24.xyz = mix (color_24, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_24.w = 1.0;
  tmpvar_1 = color_24;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  highp vec3 p_2;
  p_2 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_1;
  highp vec4 tmpvar_4;
  tmpvar_4.x = _glesMultiTexCoord0.x;
  tmpvar_4.y = _glesMultiTexCoord0.y;
  tmpvar_4.z = _glesMultiTexCoord1.x;
  tmpvar_4.w = _glesMultiTexCoord1.y;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_4).xyz);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float terminator_2;
  mediump vec3 light_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float handoff_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec3 norm_11;
  highp vec2 localCoords_12;
  mediump vec4 encnorm_13;
  mediump vec4 citylightoverlaydetailZ_14;
  mediump vec4 citylightoverlaydetailY_15;
  mediump vec4 citylightoverlaydetailX_16;
  mediump vec4 citydarkoverlaydetailZ_17;
  mediump vec4 citydarkoverlaydetailY_18;
  mediump vec4 citydarkoverlaydetailX_19;
  mediump vec4 cityoverlay_20;
  mediump float vertLerp_21;
  mediump vec4 main_22;
  highp vec2 uv_23;
  mediump vec4 color_24;
  highp float r_25;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_23.x = (0.5 + (0.159155 * r_25));
  uv_23.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_29;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_30;
    y_over_x_30 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_31;
    highp float x_32;
    x_32 = (y_over_x_30 * inversesqrt(((y_over_x_30 * y_over_x_30) + 1.0)));
    s_31 = (sign(x_32) * (1.5708 - (sqrt((1.0 - abs(x_32))) * (1.5708 + (abs(x_32) * (-0.214602 + (abs(x_32) * (0.0865667 + (abs(x_32) * -0.0310296)))))))));
    r_29 = s_31;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_29 = (s_31 + 3.14159);
      } else {
        r_29 = (r_29 - 3.14159);
      };
    };
  } else {
    r_29 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_33;
  tmpvar_33 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_34;
  tmpvar_34 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_36;
  tmpvar_36.x = (0.159155 * sqrt(dot (tmpvar_34, tmpvar_34)));
  tmpvar_36.y = dFdx(tmpvar_33);
  tmpvar_36.z = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_36.w = dFdy(tmpvar_33);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2DGradEXT (_MainTex, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  main_22 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD6.zy * _DetailScale);
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD6.zx * _DetailScale);
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.xy * _DetailScale);
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  highp float tmpvar_44;
  tmpvar_44 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_21 = tmpvar_44;
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, tmpvar_41);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, tmpvar_38);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_21));
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailVertTex, tmpvar_42);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailTex, tmpvar_39);
  mediump vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_49, vec4(vertLerp_21));
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailVertTex, tmpvar_43);
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailTex, tmpvar_40);
  mediump vec4 tmpvar_53;
  tmpvar_53 = mix (tmpvar_51, tmpvar_52, vec4(vertLerp_21));
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2DGradEXT (_CityOverlayTex, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  cityoverlay_20 = tmpvar_54;
  lowp vec4 tmpvar_55;
  highp vec2 P_56;
  P_56 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_55 = texture2D (_CityDarkOverlayDetailTex, P_56);
  citydarkoverlaydetailX_19 = tmpvar_55;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityDarkOverlayDetailTex, P_58);
  citydarkoverlaydetailY_18 = tmpvar_57;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_59 = texture2D (_CityDarkOverlayDetailTex, P_60);
  citydarkoverlaydetailZ_17 = tmpvar_59;
  lowp vec4 tmpvar_61;
  highp vec2 P_62;
  P_62 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_61 = texture2D (_CityLightOverlayDetailTex, P_62);
  citylightoverlaydetailX_16 = tmpvar_61;
  lowp vec4 tmpvar_63;
  highp vec2 P_64;
  P_64 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_63 = texture2D (_CityLightOverlayDetailTex, P_64);
  citylightoverlaydetailY_15 = tmpvar_63;
  lowp vec4 tmpvar_65;
  highp vec2 P_66;
  P_66 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_65 = texture2D (_CityLightOverlayDetailTex, P_66);
  citylightoverlaydetailZ_14 = tmpvar_65;
  lowp vec4 tmpvar_67;
  tmpvar_67 = texture2DGradEXT (_BumpMap, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  encnorm_13 = tmpvar_67;
  mediump vec2 tmpvar_68;
  tmpvar_68 = encnorm_13.wy;
  localCoords_12 = tmpvar_68;
  highp vec2 tmpvar_69;
  tmpvar_69 = (localCoords_12 - vec2(0.5, 0.5));
  localCoords_12.x = (tmpvar_69.x * 0.25);
  localCoords_12.y = (tmpvar_69.y * 0.5);
  uv_23.x = (uv_23.x - 0.5);
  highp vec2 tmpvar_70;
  tmpvar_70 = (uv_23 + localCoords_12);
  uv_23 = tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = cos((6.28319 * tmpvar_70.x));
  norm_11.z = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = sin((6.28319 * tmpvar_70.x));
  norm_11.x = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = cos((3.14159 * tmpvar_70.y));
  norm_11.y = tmpvar_73;
  mediump vec3 tmpvar_74;
  tmpvar_74 = -(norm_11);
  norm_11 = tmpvar_74;
  highp vec3 tmpvar_75;
  tmpvar_75 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (tmpvar_53, tmpvar_47, tmpvar_75.xxxx);
  detail_10 = tmpvar_76;
  highp vec4 tmpvar_77;
  tmpvar_77 = (0.25 * (mix (detail_10, tmpvar_50, tmpvar_75.yyyy) - 0.5));
  detail_10 = tmpvar_77;
  highp float tmpvar_78;
  tmpvar_78 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_9 = tmpvar_78;
  mediump vec4 tmpvar_79;
  tmpvar_79 = mix (detail_10, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_9));
  highp vec4 tmpvar_80;
  tmpvar_80 = (xlv_TEXCOORD1 + tmpvar_79);
  color_24 = tmpvar_80;
  highp float tmpvar_81;
  tmpvar_81 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_8 = tmpvar_81;
  highp float tmpvar_82;
  tmpvar_82 = clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0);
  cityoverlay_20.w = (cityoverlay_20.w * tmpvar_82);
  highp vec4 tmpvar_83;
  tmpvar_83 = mix (citydarkoverlaydetailZ_17, citydarkoverlaydetailX_19, tmpvar_75.xxxx);
  detail_10 = tmpvar_83;
  highp vec4 tmpvar_84;
  tmpvar_84 = mix (detail_10, citydarkoverlaydetailY_18, tmpvar_75.yyyy);
  detail_10 = tmpvar_84;
  mediump vec4 tmpvar_85;
  tmpvar_85 = (cityoverlay_20 * detail_10);
  citydarkoverlay_7.xyz = tmpvar_85.xyz;
  highp vec4 tmpvar_86;
  tmpvar_86 = mix (citylightoverlaydetailZ_14, citylightoverlaydetailX_16, tmpvar_75.xxxx);
  detail_10 = tmpvar_86;
  highp vec4 tmpvar_87;
  tmpvar_87 = mix (detail_10, citylightoverlaydetailY_15, tmpvar_75.yyyy);
  detail_10 = tmpvar_87;
  mediump vec4 tmpvar_88;
  tmpvar_88 = (cityoverlay_20 * detail_10);
  mediump vec4 tmpvar_89;
  tmpvar_89 = (mix (mix (color_24, main_22, vec4(handoff_8)), tmpvar_88, tmpvar_88.wwww) * _Color);
  color_24.w = tmpvar_89.w;
  highp vec3 tmpvar_90;
  tmpvar_90 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_90;
  highp vec3 tmpvar_91;
  tmpvar_91 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_91;
  highp float tmpvar_92;
  tmpvar_92 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_92;
  mediump float tmpvar_93;
  tmpvar_93 = clamp (dot (tmpvar_74, -(_SunDir)), 0.0, 1.0);
  highp float tmpvar_94;
  tmpvar_94 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp float tmpvar_95;
  tmpvar_95 = texture2D (_LightTexture0, vec2(tmpvar_94)).w;
  mediump float tmpvar_96;
  tmpvar_96 = clamp ((((_LightColor0.w * mix (TNdotL_4, tmpvar_93, handoff_8)) * 4.0) * tmpvar_95), 0.0, 1.0);
  highp vec3 tmpvar_97;
  tmpvar_97 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_96)), 0.0, 1.0);
  light_3 = tmpvar_97;
  highp float tmpvar_98;
  tmpvar_98 = clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0);
  terminator_2 = tmpvar_98;
  mediump vec3 tmpvar_99;
  tmpvar_99 = (light_3 * terminator_2);
  light_3 = tmpvar_99;
  highp vec3 tmpvar_100;
  tmpvar_100 = (tmpvar_89.xyz + (_Albedo * tmpvar_99));
  color_24.xyz = tmpvar_100;
  color_24.xyz = (color_24.xyz * tmpvar_99);
  citydarkoverlay_7.w = (tmpvar_85.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_93 - 0.01)) / 0.99) * 4.0) * tmpvar_95), 0.0, 1.0), 0.0, 1.0)));
  color_24.xyz = mix (color_24, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_24.w = 1.0;
  tmpvar_1 = color_24;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 422
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 objnormal;
    highp vec3 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
};
#line 412
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 395
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 399
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 403
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp mat4 _Rotation;
#line 407
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 411
uniform sampler2D _CityLightOverlayDetailTex;
#line 433
#line 458
#line 433
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 437
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    #line 441
    o.color = v.color;
    o.objnormal = v.normal;
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    #line 445
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.objnormal);
    xlv_TEXCOORD3 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereCoords);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 422
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 objnormal;
    highp vec3 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
};
#line 412
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 395
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 399
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 403
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp mat4 _Rotation;
#line 407
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 411
uniform sampler2D _CityLightOverlayDetailTex;
#line 433
#line 458
#line 447
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 449
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 453
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 458
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    #line 462
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 466
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    highp vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    highp vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    highp vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    #line 470
    highp vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    highp vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    highp vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, (-IN.sphereCoords))) - 0.95)) + 0.5));
    #line 474
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    #line 478
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    #line 482
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    highp vec2 localCoords = encnorm.wy;
    #line 486
    localCoords -= vec2( 0.5);
    localCoords.x *= 0.25;
    localCoords.y *= 0.5;
    uv.x -= 0.5;
    #line 490
    uv += localCoords;
    mediump vec3 norm;
    norm.z = cos((6.28319 * uv.x));
    norm.x = sin((6.28319 * uv.x));
    #line 494
    norm.y = cos((3.14159 * uv.y));
    norm = (-norm);
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    #line 498
    detail = (0.25 * (mix( detail, detailY, vec4( sphereNrm.y)) - 0.5));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (IN.color + mix( detail.xyzw, vec4( 0.0), vec4( detailLevel)));
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    #line 502
    color = mix( color, main, vec4( handoff));
    cityoverlay.w *= xll_saturate_f(floor((IN.color.w + 0.99)));
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    #line 506
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    #line 510
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    #line 514
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    lowp float atten = (texture( _LightTexture0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * 1.0);
    #line 518
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    mediump float terminator = xll_saturate_f(floor((1.01 + dot( IN.sphereCoords, _SunDir))));
    light *= terminator;
    #line 522
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (SNdotL - 0.01)) / 0.99) * 4.0) * atten));
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    #line 526
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.objnormal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec4 tmpvar_3;
  tmpvar_3.x = gl_MultiTexCoord0.x;
  tmpvar_3.y = gl_MultiTexCoord0.y;
  tmpvar_3.z = gl_MultiTexCoord1.x;
  tmpvar_3.w = gl_MultiTexCoord1.y;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_3).xyz);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec3 norm_2;
  vec2 localCoords_3;
  vec4 cityoverlay_4;
  vec2 uv_5;
  vec4 color_6;
  float r_7;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_5.x = (0.5 + (0.159155 * r_7));
  uv_5.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_11;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_12;
    y_over_x_12 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_13;
    float x_14;
    x_14 = (y_over_x_12 * inversesqrt(((y_over_x_12 * y_over_x_12) + 1.0)));
    s_13 = (sign(x_14) * (1.5708 - (sqrt((1.0 - abs(x_14))) * (1.5708 + (abs(x_14) * (-0.214602 + (abs(x_14) * (0.0865667 + (abs(x_14) * -0.0310296)))))))));
    r_11 = s_13;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_11 = (s_13 + 3.14159);
      } else {
        r_11 = (r_11 - 3.14159);
      };
    };
  } else {
    r_11 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_15;
  tmpvar_15 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_16;
  tmpvar_16 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_17;
  tmpvar_17 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_18;
  tmpvar_18.x = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_18.y = dFdx(tmpvar_15);
  tmpvar_18.z = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_18.w = dFdy(tmpvar_15);
  vec4 tmpvar_19;
  tmpvar_19 = texture2DGradARB (_MainTex, uv_5, tmpvar_18.xy, tmpvar_18.zw);
  float tmpvar_20;
  tmpvar_20 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_21;
  tmpvar_21 = texture2DGradARB (_CityOverlayTex, uv_5, tmpvar_18.xy, tmpvar_18.zw);
  cityoverlay_4.xyz = tmpvar_21.xyz;
  vec2 tmpvar_22;
  tmpvar_22 = (texture2DGradARB (_BumpMap, uv_5, tmpvar_18.xy, tmpvar_18.zw).wy - vec2(0.5, 0.5));
  localCoords_3.x = (tmpvar_22.x * 0.25);
  localCoords_3.y = (tmpvar_22.y * 0.5);
  uv_5.x = (uv_5.x - 0.5);
  vec2 tmpvar_23;
  tmpvar_23 = (uv_5 + localCoords_3);
  uv_5 = tmpvar_23;
  norm_2.z = cos((6.28319 * tmpvar_23.x));
  norm_2.x = sin((6.28319 * tmpvar_23.x));
  norm_2.y = cos((3.14159 * tmpvar_23.y));
  vec3 tmpvar_24;
  tmpvar_24 = -(norm_2);
  norm_2 = tmpvar_24;
  vec3 tmpvar_25;
  tmpvar_25 = abs(xlv_TEXCOORD6);
  float tmpvar_26;
  tmpvar_26 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  cityoverlay_4.w = (tmpvar_21.w * clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0));
  vec4 tmpvar_27;
  tmpvar_27 = (cityoverlay_4 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_25.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_25.yyyy));
  citydarkoverlay_1.xyz = tmpvar_27.xyz;
  vec4 tmpvar_28;
  tmpvar_28 = (cityoverlay_4 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_25.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_25.yyyy));
  vec4 tmpvar_29;
  tmpvar_29 = (mix (mix ((xlv_TEXCOORD1 + mix ((0.25 * (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_20)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_20)), tmpvar_25.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_20)), tmpvar_25.yyyy) - 0.5)), vec4(0.0, 0.0, 0.0, 0.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))), tmpvar_19, vec4(tmpvar_26)), tmpvar_28, tmpvar_28.wwww) * _Color);
  color_6.w = tmpvar_29.w;
  float tmpvar_30;
  tmpvar_30 = clamp (dot (tmpvar_24, -(_SunDir)), 0.0, 1.0);
  vec3 tmpvar_31;
  tmpvar_31 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * mix (clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), tmpvar_30, tmpvar_26)) * 4.0), 0.0, 1.0))), 0.0, 1.0) * clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0));
  color_6.xyz = (tmpvar_29.xyz + (_Albedo * tmpvar_31));
  color_6.xyz = (color_6.xyz * tmpvar_31);
  citydarkoverlay_1.w = (tmpvar_27.w * (1.0 - clamp (clamp ((((_LightColor0.w * (tmpvar_30 - 0.01)) / 0.99) * 4.0), 0.0, 1.0), 0.0, 1.0)));
  color_6.xyz = mix (color_6, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_6.w = 1.0;
  gl_FragData[0] = color_6;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
"vs_3_0
; 27 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord5 o4
dcl_texcoord6 o5
def c9, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
mov r0.xyz, v2
mov r0.w, c9.x
dp4 r1.z, r0, c6
dp4 r1.x, r0, c4
dp4 r1.y, r0, c5
dp3 r0.x, r1, r1
rsq r1.w, r0.x
mul o4.xyz, r1.w, r1
mov r0.zw, v4.xyxy
mov r0.xy, v3
dp4 r0.w, r0, r0
rsq r0.w, r0.w
mul r0.xyz, r0.w, r0
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
add r1.xyz, -r1, c8
dp3 r0.w, r1, r1
mov o5.xyz, -r0
rsq r0.x, r0.w
mov o2, v1
rcp o1.x, r0.x
mov o3.xyz, v2
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  highp vec3 p_2;
  p_2 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_1;
  highp vec4 tmpvar_4;
  tmpvar_4.x = _glesMultiTexCoord0.x;
  tmpvar_4.y = _glesMultiTexCoord0.y;
  tmpvar_4.z = _glesMultiTexCoord1.x;
  tmpvar_4.w = _glesMultiTexCoord1.y;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_4).xyz);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float terminator_2;
  mediump vec3 light_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float handoff_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec3 norm_11;
  highp vec2 localCoords_12;
  mediump vec4 encnorm_13;
  mediump vec4 citylightoverlaydetailZ_14;
  mediump vec4 citylightoverlaydetailY_15;
  mediump vec4 citylightoverlaydetailX_16;
  mediump vec4 citydarkoverlaydetailZ_17;
  mediump vec4 citydarkoverlaydetailY_18;
  mediump vec4 citydarkoverlaydetailX_19;
  mediump vec4 cityoverlay_20;
  mediump float vertLerp_21;
  mediump vec4 main_22;
  highp vec2 uv_23;
  mediump vec4 color_24;
  highp float r_25;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_23.x = (0.5 + (0.159155 * r_25));
  uv_23.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_29;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_30;
    y_over_x_30 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_31;
    highp float x_32;
    x_32 = (y_over_x_30 * inversesqrt(((y_over_x_30 * y_over_x_30) + 1.0)));
    s_31 = (sign(x_32) * (1.5708 - (sqrt((1.0 - abs(x_32))) * (1.5708 + (abs(x_32) * (-0.214602 + (abs(x_32) * (0.0865667 + (abs(x_32) * -0.0310296)))))))));
    r_29 = s_31;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_29 = (s_31 + 3.14159);
      } else {
        r_29 = (r_29 - 3.14159);
      };
    };
  } else {
    r_29 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_33;
  tmpvar_33 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_34;
  tmpvar_34 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_36;
  tmpvar_36.x = (0.159155 * sqrt(dot (tmpvar_34, tmpvar_34)));
  tmpvar_36.y = dFdx(tmpvar_33);
  tmpvar_36.z = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_36.w = dFdy(tmpvar_33);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2DGradEXT (_MainTex, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  main_22 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD6.zy * _DetailScale);
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD6.zx * _DetailScale);
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.xy * _DetailScale);
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  highp float tmpvar_44;
  tmpvar_44 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_21 = tmpvar_44;
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, tmpvar_41);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, tmpvar_38);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_21));
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailVertTex, tmpvar_42);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailTex, tmpvar_39);
  mediump vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_49, vec4(vertLerp_21));
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailVertTex, tmpvar_43);
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailTex, tmpvar_40);
  mediump vec4 tmpvar_53;
  tmpvar_53 = mix (tmpvar_51, tmpvar_52, vec4(vertLerp_21));
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2DGradEXT (_CityOverlayTex, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  cityoverlay_20 = tmpvar_54;
  lowp vec4 tmpvar_55;
  highp vec2 P_56;
  P_56 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_55 = texture2D (_CityDarkOverlayDetailTex, P_56);
  citydarkoverlaydetailX_19 = tmpvar_55;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityDarkOverlayDetailTex, P_58);
  citydarkoverlaydetailY_18 = tmpvar_57;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_59 = texture2D (_CityDarkOverlayDetailTex, P_60);
  citydarkoverlaydetailZ_17 = tmpvar_59;
  lowp vec4 tmpvar_61;
  highp vec2 P_62;
  P_62 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_61 = texture2D (_CityLightOverlayDetailTex, P_62);
  citylightoverlaydetailX_16 = tmpvar_61;
  lowp vec4 tmpvar_63;
  highp vec2 P_64;
  P_64 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_63 = texture2D (_CityLightOverlayDetailTex, P_64);
  citylightoverlaydetailY_15 = tmpvar_63;
  lowp vec4 tmpvar_65;
  highp vec2 P_66;
  P_66 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_65 = texture2D (_CityLightOverlayDetailTex, P_66);
  citylightoverlaydetailZ_14 = tmpvar_65;
  lowp vec4 tmpvar_67;
  tmpvar_67 = texture2DGradEXT (_BumpMap, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  encnorm_13 = tmpvar_67;
  mediump vec2 tmpvar_68;
  tmpvar_68 = encnorm_13.wy;
  localCoords_12 = tmpvar_68;
  highp vec2 tmpvar_69;
  tmpvar_69 = (localCoords_12 - vec2(0.5, 0.5));
  localCoords_12.x = (tmpvar_69.x * 0.25);
  localCoords_12.y = (tmpvar_69.y * 0.5);
  uv_23.x = (uv_23.x - 0.5);
  highp vec2 tmpvar_70;
  tmpvar_70 = (uv_23 + localCoords_12);
  uv_23 = tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = cos((6.28319 * tmpvar_70.x));
  norm_11.z = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = sin((6.28319 * tmpvar_70.x));
  norm_11.x = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = cos((3.14159 * tmpvar_70.y));
  norm_11.y = tmpvar_73;
  mediump vec3 tmpvar_74;
  tmpvar_74 = -(norm_11);
  norm_11 = tmpvar_74;
  highp vec3 tmpvar_75;
  tmpvar_75 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (tmpvar_53, tmpvar_47, tmpvar_75.xxxx);
  detail_10 = tmpvar_76;
  highp vec4 tmpvar_77;
  tmpvar_77 = (0.25 * (mix (detail_10, tmpvar_50, tmpvar_75.yyyy) - 0.5));
  detail_10 = tmpvar_77;
  highp float tmpvar_78;
  tmpvar_78 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_9 = tmpvar_78;
  mediump vec4 tmpvar_79;
  tmpvar_79 = mix (detail_10, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_9));
  highp vec4 tmpvar_80;
  tmpvar_80 = (xlv_TEXCOORD1 + tmpvar_79);
  color_24 = tmpvar_80;
  highp float tmpvar_81;
  tmpvar_81 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_8 = tmpvar_81;
  highp float tmpvar_82;
  tmpvar_82 = clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0);
  cityoverlay_20.w = (cityoverlay_20.w * tmpvar_82);
  highp vec4 tmpvar_83;
  tmpvar_83 = mix (citydarkoverlaydetailZ_17, citydarkoverlaydetailX_19, tmpvar_75.xxxx);
  detail_10 = tmpvar_83;
  highp vec4 tmpvar_84;
  tmpvar_84 = mix (detail_10, citydarkoverlaydetailY_18, tmpvar_75.yyyy);
  detail_10 = tmpvar_84;
  mediump vec4 tmpvar_85;
  tmpvar_85 = (cityoverlay_20 * detail_10);
  citydarkoverlay_7.xyz = tmpvar_85.xyz;
  highp vec4 tmpvar_86;
  tmpvar_86 = mix (citylightoverlaydetailZ_14, citylightoverlaydetailX_16, tmpvar_75.xxxx);
  detail_10 = tmpvar_86;
  highp vec4 tmpvar_87;
  tmpvar_87 = mix (detail_10, citylightoverlaydetailY_15, tmpvar_75.yyyy);
  detail_10 = tmpvar_87;
  mediump vec4 tmpvar_88;
  tmpvar_88 = (cityoverlay_20 * detail_10);
  mediump vec4 tmpvar_89;
  tmpvar_89 = (mix (mix (color_24, main_22, vec4(handoff_8)), tmpvar_88, tmpvar_88.wwww) * _Color);
  color_24.w = tmpvar_89.w;
  highp vec3 tmpvar_90;
  tmpvar_90 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_90;
  lowp vec3 tmpvar_91;
  tmpvar_91 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_91;
  highp float tmpvar_92;
  tmpvar_92 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_92;
  mediump float tmpvar_93;
  tmpvar_93 = clamp (dot (tmpvar_74, -(_SunDir)), 0.0, 1.0);
  mediump float tmpvar_94;
  tmpvar_94 = clamp (((_LightColor0.w * mix (TNdotL_4, tmpvar_93, handoff_8)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_95;
  tmpvar_95 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_94)), 0.0, 1.0);
  light_3 = tmpvar_95;
  highp float tmpvar_96;
  tmpvar_96 = clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0);
  terminator_2 = tmpvar_96;
  mediump vec3 tmpvar_97;
  tmpvar_97 = (light_3 * terminator_2);
  light_3 = tmpvar_97;
  highp vec3 tmpvar_98;
  tmpvar_98 = (tmpvar_89.xyz + (_Albedo * tmpvar_97));
  color_24.xyz = tmpvar_98;
  color_24.xyz = (color_24.xyz * tmpvar_97);
  citydarkoverlay_7.w = (tmpvar_85.w * (1.0 - clamp (clamp ((((_LightColor0.w * (tmpvar_93 - 0.01)) / 0.99) * 4.0), 0.0, 1.0), 0.0, 1.0)));
  color_24.xyz = mix (color_24, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_24.w = 1.0;
  tmpvar_1 = color_24;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  highp vec3 p_2;
  p_2 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_1;
  highp vec4 tmpvar_4;
  tmpvar_4.x = _glesMultiTexCoord0.x;
  tmpvar_4.y = _glesMultiTexCoord0.y;
  tmpvar_4.z = _glesMultiTexCoord1.x;
  tmpvar_4.w = _glesMultiTexCoord1.y;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_4).xyz);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float terminator_2;
  mediump vec3 light_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float handoff_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec3 norm_11;
  highp vec2 localCoords_12;
  mediump vec4 encnorm_13;
  mediump vec4 citylightoverlaydetailZ_14;
  mediump vec4 citylightoverlaydetailY_15;
  mediump vec4 citylightoverlaydetailX_16;
  mediump vec4 citydarkoverlaydetailZ_17;
  mediump vec4 citydarkoverlaydetailY_18;
  mediump vec4 citydarkoverlaydetailX_19;
  mediump vec4 cityoverlay_20;
  mediump float vertLerp_21;
  mediump vec4 main_22;
  highp vec2 uv_23;
  mediump vec4 color_24;
  highp float r_25;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_23.x = (0.5 + (0.159155 * r_25));
  uv_23.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_29;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_30;
    y_over_x_30 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_31;
    highp float x_32;
    x_32 = (y_over_x_30 * inversesqrt(((y_over_x_30 * y_over_x_30) + 1.0)));
    s_31 = (sign(x_32) * (1.5708 - (sqrt((1.0 - abs(x_32))) * (1.5708 + (abs(x_32) * (-0.214602 + (abs(x_32) * (0.0865667 + (abs(x_32) * -0.0310296)))))))));
    r_29 = s_31;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_29 = (s_31 + 3.14159);
      } else {
        r_29 = (r_29 - 3.14159);
      };
    };
  } else {
    r_29 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_33;
  tmpvar_33 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_34;
  tmpvar_34 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_36;
  tmpvar_36.x = (0.159155 * sqrt(dot (tmpvar_34, tmpvar_34)));
  tmpvar_36.y = dFdx(tmpvar_33);
  tmpvar_36.z = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_36.w = dFdy(tmpvar_33);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2DGradEXT (_MainTex, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  main_22 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD6.zy * _DetailScale);
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD6.zx * _DetailScale);
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.xy * _DetailScale);
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  highp float tmpvar_44;
  tmpvar_44 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_21 = tmpvar_44;
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, tmpvar_41);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, tmpvar_38);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_21));
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailVertTex, tmpvar_42);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailTex, tmpvar_39);
  mediump vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_49, vec4(vertLerp_21));
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailVertTex, tmpvar_43);
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailTex, tmpvar_40);
  mediump vec4 tmpvar_53;
  tmpvar_53 = mix (tmpvar_51, tmpvar_52, vec4(vertLerp_21));
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2DGradEXT (_CityOverlayTex, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  cityoverlay_20 = tmpvar_54;
  lowp vec4 tmpvar_55;
  highp vec2 P_56;
  P_56 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_55 = texture2D (_CityDarkOverlayDetailTex, P_56);
  citydarkoverlaydetailX_19 = tmpvar_55;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityDarkOverlayDetailTex, P_58);
  citydarkoverlaydetailY_18 = tmpvar_57;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_59 = texture2D (_CityDarkOverlayDetailTex, P_60);
  citydarkoverlaydetailZ_17 = tmpvar_59;
  lowp vec4 tmpvar_61;
  highp vec2 P_62;
  P_62 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_61 = texture2D (_CityLightOverlayDetailTex, P_62);
  citylightoverlaydetailX_16 = tmpvar_61;
  lowp vec4 tmpvar_63;
  highp vec2 P_64;
  P_64 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_63 = texture2D (_CityLightOverlayDetailTex, P_64);
  citylightoverlaydetailY_15 = tmpvar_63;
  lowp vec4 tmpvar_65;
  highp vec2 P_66;
  P_66 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_65 = texture2D (_CityLightOverlayDetailTex, P_66);
  citylightoverlaydetailZ_14 = tmpvar_65;
  lowp vec4 tmpvar_67;
  tmpvar_67 = texture2DGradEXT (_BumpMap, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  encnorm_13 = tmpvar_67;
  mediump vec2 tmpvar_68;
  tmpvar_68 = encnorm_13.wy;
  localCoords_12 = tmpvar_68;
  highp vec2 tmpvar_69;
  tmpvar_69 = (localCoords_12 - vec2(0.5, 0.5));
  localCoords_12.x = (tmpvar_69.x * 0.25);
  localCoords_12.y = (tmpvar_69.y * 0.5);
  uv_23.x = (uv_23.x - 0.5);
  highp vec2 tmpvar_70;
  tmpvar_70 = (uv_23 + localCoords_12);
  uv_23 = tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = cos((6.28319 * tmpvar_70.x));
  norm_11.z = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = sin((6.28319 * tmpvar_70.x));
  norm_11.x = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = cos((3.14159 * tmpvar_70.y));
  norm_11.y = tmpvar_73;
  mediump vec3 tmpvar_74;
  tmpvar_74 = -(norm_11);
  norm_11 = tmpvar_74;
  highp vec3 tmpvar_75;
  tmpvar_75 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (tmpvar_53, tmpvar_47, tmpvar_75.xxxx);
  detail_10 = tmpvar_76;
  highp vec4 tmpvar_77;
  tmpvar_77 = (0.25 * (mix (detail_10, tmpvar_50, tmpvar_75.yyyy) - 0.5));
  detail_10 = tmpvar_77;
  highp float tmpvar_78;
  tmpvar_78 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_9 = tmpvar_78;
  mediump vec4 tmpvar_79;
  tmpvar_79 = mix (detail_10, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_9));
  highp vec4 tmpvar_80;
  tmpvar_80 = (xlv_TEXCOORD1 + tmpvar_79);
  color_24 = tmpvar_80;
  highp float tmpvar_81;
  tmpvar_81 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_8 = tmpvar_81;
  highp float tmpvar_82;
  tmpvar_82 = clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0);
  cityoverlay_20.w = (cityoverlay_20.w * tmpvar_82);
  highp vec4 tmpvar_83;
  tmpvar_83 = mix (citydarkoverlaydetailZ_17, citydarkoverlaydetailX_19, tmpvar_75.xxxx);
  detail_10 = tmpvar_83;
  highp vec4 tmpvar_84;
  tmpvar_84 = mix (detail_10, citydarkoverlaydetailY_18, tmpvar_75.yyyy);
  detail_10 = tmpvar_84;
  mediump vec4 tmpvar_85;
  tmpvar_85 = (cityoverlay_20 * detail_10);
  citydarkoverlay_7.xyz = tmpvar_85.xyz;
  highp vec4 tmpvar_86;
  tmpvar_86 = mix (citylightoverlaydetailZ_14, citylightoverlaydetailX_16, tmpvar_75.xxxx);
  detail_10 = tmpvar_86;
  highp vec4 tmpvar_87;
  tmpvar_87 = mix (detail_10, citylightoverlaydetailY_15, tmpvar_75.yyyy);
  detail_10 = tmpvar_87;
  mediump vec4 tmpvar_88;
  tmpvar_88 = (cityoverlay_20 * detail_10);
  mediump vec4 tmpvar_89;
  tmpvar_89 = (mix (mix (color_24, main_22, vec4(handoff_8)), tmpvar_88, tmpvar_88.wwww) * _Color);
  color_24.w = tmpvar_89.w;
  highp vec3 tmpvar_90;
  tmpvar_90 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_90;
  lowp vec3 tmpvar_91;
  tmpvar_91 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_91;
  highp float tmpvar_92;
  tmpvar_92 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_92;
  mediump float tmpvar_93;
  tmpvar_93 = clamp (dot (tmpvar_74, -(_SunDir)), 0.0, 1.0);
  mediump float tmpvar_94;
  tmpvar_94 = clamp (((_LightColor0.w * mix (TNdotL_4, tmpvar_93, handoff_8)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_95;
  tmpvar_95 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_94)), 0.0, 1.0);
  light_3 = tmpvar_95;
  highp float tmpvar_96;
  tmpvar_96 = clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0);
  terminator_2 = tmpvar_96;
  mediump vec3 tmpvar_97;
  tmpvar_97 = (light_3 * terminator_2);
  light_3 = tmpvar_97;
  highp vec3 tmpvar_98;
  tmpvar_98 = (tmpvar_89.xyz + (_Albedo * tmpvar_97));
  color_24.xyz = tmpvar_98;
  color_24.xyz = (color_24.xyz * tmpvar_97);
  citydarkoverlay_7.w = (tmpvar_85.w * (1.0 - clamp (clamp ((((_LightColor0.w * (tmpvar_93 - 0.01)) / 0.99) * 4.0), 0.0, 1.0), 0.0, 1.0)));
  color_24.xyz = mix (color_24, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_24.w = 1.0;
  tmpvar_1 = color_24;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 420
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 objnormal;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
};
#line 410
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 393
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 397
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 401
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp mat4 _Rotation;
#line 405
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 409
uniform sampler2D _CityLightOverlayDetailTex;
#line 430
#line 443
#line 430
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 434
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    #line 438
    o.color = v.color;
    o.objnormal = v.normal;
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.objnormal);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereCoords);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 420
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 objnormal;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
};
#line 410
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 393
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 397
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 401
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp mat4 _Rotation;
#line 405
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 409
uniform sampler2D _CityLightOverlayDetailTex;
#line 430
#line 443
#line 443
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 447
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 451
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 454
lowp vec4 frag( in v2f IN ) {
    #line 456
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 460
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    highp vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 464
    highp vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    highp vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    highp vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    highp vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 468
    highp vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, (-IN.sphereCoords))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 472
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    #line 476
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    #line 480
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    highp vec2 localCoords = encnorm.wy;
    localCoords -= vec2( 0.5);
    localCoords.x *= 0.25;
    #line 484
    localCoords.y *= 0.5;
    uv.x -= 0.5;
    uv += localCoords;
    mediump vec3 norm;
    #line 488
    norm.z = cos((6.28319 * uv.x));
    norm.x = sin((6.28319 * uv.x));
    norm.y = cos((3.14159 * uv.y));
    norm = (-norm);
    #line 492
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = (0.25 * (mix( detail, detailY, vec4( sphereNrm.y)) - 0.5));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    #line 496
    color = (IN.color + mix( detail.xyzw, vec4( 0.0), vec4( detailLevel)));
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    color = mix( color, main, vec4( handoff));
    cityoverlay.w *= xll_saturate_f(floor((IN.color.w + 0.99)));
    #line 500
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    #line 504
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    #line 508
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    #line 512
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    lowp float atten = 1.0;
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    #line 516
    mediump float terminator = xll_saturate_f(floor((1.01 + dot( IN.sphereCoords, _SunDir))));
    light *= terminator;
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    #line 520
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (SNdotL - 0.01)) / 0.99) * 4.0) * atten));
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    #line 524
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.objnormal = vec3(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec4 tmpvar_3;
  tmpvar_3.x = gl_MultiTexCoord0.x;
  tmpvar_3.y = gl_MultiTexCoord0.y;
  tmpvar_3.z = gl_MultiTexCoord1.x;
  tmpvar_3.w = gl_MultiTexCoord1.y;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_3).xyz);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec3 norm_2;
  vec2 localCoords_3;
  vec4 cityoverlay_4;
  vec2 uv_5;
  vec4 color_6;
  float r_7;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_5.x = (0.5 + (0.159155 * r_7));
  uv_5.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_11;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_12;
    y_over_x_12 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_13;
    float x_14;
    x_14 = (y_over_x_12 * inversesqrt(((y_over_x_12 * y_over_x_12) + 1.0)));
    s_13 = (sign(x_14) * (1.5708 - (sqrt((1.0 - abs(x_14))) * (1.5708 + (abs(x_14) * (-0.214602 + (abs(x_14) * (0.0865667 + (abs(x_14) * -0.0310296)))))))));
    r_11 = s_13;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_11 = (s_13 + 3.14159);
      } else {
        r_11 = (r_11 - 3.14159);
      };
    };
  } else {
    r_11 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_15;
  tmpvar_15 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_16;
  tmpvar_16 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_17;
  tmpvar_17 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_18;
  tmpvar_18.x = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_18.y = dFdx(tmpvar_15);
  tmpvar_18.z = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_18.w = dFdy(tmpvar_15);
  vec4 tmpvar_19;
  tmpvar_19 = texture2DGradARB (_MainTex, uv_5, tmpvar_18.xy, tmpvar_18.zw);
  float tmpvar_20;
  tmpvar_20 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_21;
  tmpvar_21 = texture2DGradARB (_CityOverlayTex, uv_5, tmpvar_18.xy, tmpvar_18.zw);
  cityoverlay_4.xyz = tmpvar_21.xyz;
  vec2 tmpvar_22;
  tmpvar_22 = (texture2DGradARB (_BumpMap, uv_5, tmpvar_18.xy, tmpvar_18.zw).wy - vec2(0.5, 0.5));
  localCoords_3.x = (tmpvar_22.x * 0.25);
  localCoords_3.y = (tmpvar_22.y * 0.5);
  uv_5.x = (uv_5.x - 0.5);
  vec2 tmpvar_23;
  tmpvar_23 = (uv_5 + localCoords_3);
  uv_5 = tmpvar_23;
  norm_2.z = cos((6.28319 * tmpvar_23.x));
  norm_2.x = sin((6.28319 * tmpvar_23.x));
  norm_2.y = cos((3.14159 * tmpvar_23.y));
  vec3 tmpvar_24;
  tmpvar_24 = -(norm_2);
  norm_2 = tmpvar_24;
  vec3 tmpvar_25;
  tmpvar_25 = abs(xlv_TEXCOORD6);
  float tmpvar_26;
  tmpvar_26 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  cityoverlay_4.w = (tmpvar_21.w * clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0));
  vec4 tmpvar_27;
  tmpvar_27 = (cityoverlay_4 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_25.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_25.yyyy));
  citydarkoverlay_1.xyz = tmpvar_27.xyz;
  vec4 tmpvar_28;
  tmpvar_28 = (cityoverlay_4 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_25.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_25.yyyy));
  vec4 tmpvar_29;
  tmpvar_29 = (mix (mix ((xlv_TEXCOORD1 + mix ((0.25 * (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_20)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_20)), tmpvar_25.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_20)), tmpvar_25.yyyy) - 0.5)), vec4(0.0, 0.0, 0.0, 0.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))), tmpvar_19, vec4(tmpvar_26)), tmpvar_28, tmpvar_28.wwww) * _Color);
  color_6.w = tmpvar_29.w;
  float tmpvar_30;
  tmpvar_30 = clamp (dot (tmpvar_24, -(_SunDir)), 0.0, 1.0);
  float tmpvar_31;
  tmpvar_31 = ((float((xlv_TEXCOORD3.z > 0.0)) * texture2D (_LightTexture0, ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5)).w) * texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz))).w);
  vec3 tmpvar_32;
  tmpvar_32 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * mix (clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), tmpvar_30, tmpvar_26)) * 4.0) * tmpvar_31), 0.0, 1.0))), 0.0, 1.0) * clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0));
  color_6.xyz = (tmpvar_29.xyz + (_Albedo * tmpvar_32));
  color_6.xyz = (color_6.xyz * tmpvar_32);
  citydarkoverlay_1.w = (tmpvar_27.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_30 - 0.01)) / 0.99) * 4.0) * tmpvar_31), 0.0, 1.0), 0.0, 1.0)));
  color_6.xyz = mix (color_6, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_6.w = 1.0;
  gl_FragData[0] = color_6;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 32 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord5 o5
dcl_texcoord6 o6
def c13, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
mov r1.xyz, v2
mov r1.w, c13.x
dp4 r2.z, r1, c6
dp4 r2.x, r1, c4
dp4 r2.y, r1, c5
mov r0.zw, v4.xyxy
mov r0.xy, v3
dp4 r2.w, r0, r0
rsq r1.x, r2.w
mul r0.xyz, r1.x, r0
mov o6.xyz, -r0
dp3 r0.w, r2, r2
rsq r0.w, r0.w
mul o5.xyz, r0.w, r2
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
dp4 r0.w, v0, c7
add r1.xyz, -r0, c12
dp3 r1.x, r1, r1
rsq r1.x, r1.x
mov o2, v1
dp4 o4.w, r0, c11
dp4 o4.z, r0, c10
dp4 o4.y, r0, c9
dp4 o4.x, r0, c8
rcp o1.x, r1.x
mov o3.xyz, v2
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  highp vec3 p_2;
  p_2 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_1;
  highp vec4 tmpvar_4;
  tmpvar_4.x = _glesMultiTexCoord0.x;
  tmpvar_4.y = _glesMultiTexCoord0.y;
  tmpvar_4.z = _glesMultiTexCoord1.x;
  tmpvar_4.w = _glesMultiTexCoord1.y;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_4).xyz);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float terminator_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float TNdotL_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump vec4 citydarkoverlay_8;
  mediump float handoff_9;
  mediump float detailLevel_10;
  mediump vec4 detail_11;
  mediump vec3 norm_12;
  highp vec2 localCoords_13;
  mediump vec4 encnorm_14;
  mediump vec4 citylightoverlaydetailZ_15;
  mediump vec4 citylightoverlaydetailY_16;
  mediump vec4 citylightoverlaydetailX_17;
  mediump vec4 citydarkoverlaydetailZ_18;
  mediump vec4 citydarkoverlaydetailY_19;
  mediump vec4 citydarkoverlaydetailX_20;
  mediump vec4 cityoverlay_21;
  mediump float vertLerp_22;
  mediump vec4 main_23;
  highp vec2 uv_24;
  mediump vec4 color_25;
  highp float r_26;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_26));
  uv_24.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_30;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_31;
    y_over_x_31 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_32;
    highp float x_33;
    x_33 = (y_over_x_31 * inversesqrt(((y_over_x_31 * y_over_x_31) + 1.0)));
    s_32 = (sign(x_33) * (1.5708 - (sqrt((1.0 - abs(x_33))) * (1.5708 + (abs(x_33) * (-0.214602 + (abs(x_33) * (0.0865667 + (abs(x_33) * -0.0310296)))))))));
    r_30 = s_32;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_30 = (s_32 + 3.14159);
      } else {
        r_30 = (r_30 - 3.14159);
      };
    };
  } else {
    r_30 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_34;
  tmpvar_34 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_MainTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  main_23 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD6.zy * _DetailScale);
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zx * _DetailScale);
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.xy * _DetailScale);
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  highp float tmpvar_45;
  tmpvar_45 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_22 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailVertTex, tmpvar_42);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailTex, tmpvar_39);
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_47, vec4(vertLerp_22));
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailVertTex, tmpvar_43);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailTex, tmpvar_40);
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (tmpvar_49, tmpvar_50, vec4(vertLerp_22));
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailVertTex, tmpvar_44);
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailTex, tmpvar_41);
  mediump vec4 tmpvar_54;
  tmpvar_54 = mix (tmpvar_52, tmpvar_53, vec4(vertLerp_22));
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2DGradEXT (_CityOverlayTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  cityoverlay_21 = tmpvar_55;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_56 = texture2D (_CityDarkOverlayDetailTex, P_57);
  citydarkoverlaydetailX_20 = tmpvar_56;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityDarkOverlayDetailTex, P_59);
  citydarkoverlaydetailY_19 = tmpvar_58;
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_60 = texture2D (_CityDarkOverlayDetailTex, P_61);
  citydarkoverlaydetailZ_18 = tmpvar_60;
  lowp vec4 tmpvar_62;
  highp vec2 P_63;
  P_63 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_62 = texture2D (_CityLightOverlayDetailTex, P_63);
  citylightoverlaydetailX_17 = tmpvar_62;
  lowp vec4 tmpvar_64;
  highp vec2 P_65;
  P_65 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_64 = texture2D (_CityLightOverlayDetailTex, P_65);
  citylightoverlaydetailY_16 = tmpvar_64;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_66 = texture2D (_CityLightOverlayDetailTex, P_67);
  citylightoverlaydetailZ_15 = tmpvar_66;
  lowp vec4 tmpvar_68;
  tmpvar_68 = texture2DGradEXT (_BumpMap, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  encnorm_14 = tmpvar_68;
  mediump vec2 tmpvar_69;
  tmpvar_69 = encnorm_14.wy;
  localCoords_13 = tmpvar_69;
  highp vec2 tmpvar_70;
  tmpvar_70 = (localCoords_13 - vec2(0.5, 0.5));
  localCoords_13.x = (tmpvar_70.x * 0.25);
  localCoords_13.y = (tmpvar_70.y * 0.5);
  uv_24.x = (uv_24.x - 0.5);
  highp vec2 tmpvar_71;
  tmpvar_71 = (uv_24 + localCoords_13);
  uv_24 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = cos((6.28319 * tmpvar_71.x));
  norm_12.z = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = sin((6.28319 * tmpvar_71.x));
  norm_12.x = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = cos((3.14159 * tmpvar_71.y));
  norm_12.y = tmpvar_74;
  mediump vec3 tmpvar_75;
  tmpvar_75 = -(norm_12);
  norm_12 = tmpvar_75;
  highp vec3 tmpvar_76;
  tmpvar_76 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (tmpvar_54, tmpvar_48, tmpvar_76.xxxx);
  detail_11 = tmpvar_77;
  highp vec4 tmpvar_78;
  tmpvar_78 = (0.25 * (mix (detail_11, tmpvar_51, tmpvar_76.yyyy) - 0.5));
  detail_11 = tmpvar_78;
  highp float tmpvar_79;
  tmpvar_79 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_10 = tmpvar_79;
  mediump vec4 tmpvar_80;
  tmpvar_80 = mix (detail_11, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_10));
  highp vec4 tmpvar_81;
  tmpvar_81 = (xlv_TEXCOORD1 + tmpvar_80);
  color_25 = tmpvar_81;
  highp float tmpvar_82;
  tmpvar_82 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_9 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0);
  cityoverlay_21.w = (cityoverlay_21.w * tmpvar_83);
  highp vec4 tmpvar_84;
  tmpvar_84 = mix (citydarkoverlaydetailZ_18, citydarkoverlaydetailX_20, tmpvar_76.xxxx);
  detail_11 = tmpvar_84;
  highp vec4 tmpvar_85;
  tmpvar_85 = mix (detail_11, citydarkoverlaydetailY_19, tmpvar_76.yyyy);
  detail_11 = tmpvar_85;
  mediump vec4 tmpvar_86;
  tmpvar_86 = (cityoverlay_21 * detail_11);
  citydarkoverlay_8.xyz = tmpvar_86.xyz;
  highp vec4 tmpvar_87;
  tmpvar_87 = mix (citylightoverlaydetailZ_15, citylightoverlaydetailX_17, tmpvar_76.xxxx);
  detail_11 = tmpvar_87;
  highp vec4 tmpvar_88;
  tmpvar_88 = mix (detail_11, citylightoverlaydetailY_16, tmpvar_76.yyyy);
  detail_11 = tmpvar_88;
  mediump vec4 tmpvar_89;
  tmpvar_89 = (cityoverlay_21 * detail_11);
  mediump vec4 tmpvar_90;
  tmpvar_90 = (mix (mix (color_25, main_23, vec4(handoff_9)), tmpvar_89, tmpvar_89.wwww) * _Color);
  color_25.w = tmpvar_90.w;
  highp vec3 tmpvar_91;
  tmpvar_91 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_91;
  highp vec3 tmpvar_92;
  tmpvar_92 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_92;
  highp float tmpvar_93;
  tmpvar_93 = clamp (dot (xlv_TEXCOORD5, lightDirection_6), 0.0, 1.0);
  TNdotL_5 = tmpvar_93;
  mediump float tmpvar_94;
  tmpvar_94 = clamp (dot (tmpvar_75, -(_SunDir)), 0.0, 1.0);
  lowp vec4 tmpvar_95;
  highp vec2 P_96;
  P_96 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_95 = texture2D (_LightTexture0, P_96);
  highp float tmpvar_97;
  tmpvar_97 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_98;
  tmpvar_98 = texture2D (_LightTextureB0, vec2(tmpvar_97));
  highp float tmpvar_99;
  tmpvar_99 = ((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_95.w) * tmpvar_98.w);
  atten_4 = tmpvar_99;
  mediump float tmpvar_100;
  tmpvar_100 = clamp ((((_LightColor0.w * mix (TNdotL_5, tmpvar_94, handoff_9)) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_101;
  tmpvar_101 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_100)), 0.0, 1.0);
  light_3 = tmpvar_101;
  highp float tmpvar_102;
  tmpvar_102 = clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0);
  terminator_2 = tmpvar_102;
  mediump vec3 tmpvar_103;
  tmpvar_103 = (light_3 * terminator_2);
  light_3 = tmpvar_103;
  highp vec3 tmpvar_104;
  tmpvar_104 = (tmpvar_90.xyz + (_Albedo * tmpvar_103));
  color_25.xyz = tmpvar_104;
  color_25.xyz = (color_25.xyz * tmpvar_103);
  citydarkoverlay_8.w = (tmpvar_86.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_94 - 0.01)) / 0.99) * 4.0) * atten_4), 0.0, 1.0), 0.0, 1.0)));
  color_25.xyz = mix (color_25, citydarkoverlay_8, citydarkoverlay_8.wwww).xyz;
  color_25.w = 1.0;
  tmpvar_1 = color_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  highp vec3 p_2;
  p_2 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_1;
  highp vec4 tmpvar_4;
  tmpvar_4.x = _glesMultiTexCoord0.x;
  tmpvar_4.y = _glesMultiTexCoord0.y;
  tmpvar_4.z = _glesMultiTexCoord1.x;
  tmpvar_4.w = _glesMultiTexCoord1.y;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_4).xyz);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float terminator_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float TNdotL_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump vec4 citydarkoverlay_8;
  mediump float handoff_9;
  mediump float detailLevel_10;
  mediump vec4 detail_11;
  mediump vec3 norm_12;
  highp vec2 localCoords_13;
  mediump vec4 encnorm_14;
  mediump vec4 citylightoverlaydetailZ_15;
  mediump vec4 citylightoverlaydetailY_16;
  mediump vec4 citylightoverlaydetailX_17;
  mediump vec4 citydarkoverlaydetailZ_18;
  mediump vec4 citydarkoverlaydetailY_19;
  mediump vec4 citydarkoverlaydetailX_20;
  mediump vec4 cityoverlay_21;
  mediump float vertLerp_22;
  mediump vec4 main_23;
  highp vec2 uv_24;
  mediump vec4 color_25;
  highp float r_26;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_26));
  uv_24.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_30;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_31;
    y_over_x_31 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_32;
    highp float x_33;
    x_33 = (y_over_x_31 * inversesqrt(((y_over_x_31 * y_over_x_31) + 1.0)));
    s_32 = (sign(x_33) * (1.5708 - (sqrt((1.0 - abs(x_33))) * (1.5708 + (abs(x_33) * (-0.214602 + (abs(x_33) * (0.0865667 + (abs(x_33) * -0.0310296)))))))));
    r_30 = s_32;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_30 = (s_32 + 3.14159);
      } else {
        r_30 = (r_30 - 3.14159);
      };
    };
  } else {
    r_30 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_34;
  tmpvar_34 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_MainTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  main_23 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD6.zy * _DetailScale);
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zx * _DetailScale);
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.xy * _DetailScale);
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  highp float tmpvar_45;
  tmpvar_45 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_22 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailVertTex, tmpvar_42);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailTex, tmpvar_39);
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_47, vec4(vertLerp_22));
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailVertTex, tmpvar_43);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailTex, tmpvar_40);
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (tmpvar_49, tmpvar_50, vec4(vertLerp_22));
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailVertTex, tmpvar_44);
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailTex, tmpvar_41);
  mediump vec4 tmpvar_54;
  tmpvar_54 = mix (tmpvar_52, tmpvar_53, vec4(vertLerp_22));
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2DGradEXT (_CityOverlayTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  cityoverlay_21 = tmpvar_55;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_56 = texture2D (_CityDarkOverlayDetailTex, P_57);
  citydarkoverlaydetailX_20 = tmpvar_56;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityDarkOverlayDetailTex, P_59);
  citydarkoverlaydetailY_19 = tmpvar_58;
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_60 = texture2D (_CityDarkOverlayDetailTex, P_61);
  citydarkoverlaydetailZ_18 = tmpvar_60;
  lowp vec4 tmpvar_62;
  highp vec2 P_63;
  P_63 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_62 = texture2D (_CityLightOverlayDetailTex, P_63);
  citylightoverlaydetailX_17 = tmpvar_62;
  lowp vec4 tmpvar_64;
  highp vec2 P_65;
  P_65 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_64 = texture2D (_CityLightOverlayDetailTex, P_65);
  citylightoverlaydetailY_16 = tmpvar_64;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_66 = texture2D (_CityLightOverlayDetailTex, P_67);
  citylightoverlaydetailZ_15 = tmpvar_66;
  lowp vec4 tmpvar_68;
  tmpvar_68 = texture2DGradEXT (_BumpMap, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  encnorm_14 = tmpvar_68;
  mediump vec2 tmpvar_69;
  tmpvar_69 = encnorm_14.wy;
  localCoords_13 = tmpvar_69;
  highp vec2 tmpvar_70;
  tmpvar_70 = (localCoords_13 - vec2(0.5, 0.5));
  localCoords_13.x = (tmpvar_70.x * 0.25);
  localCoords_13.y = (tmpvar_70.y * 0.5);
  uv_24.x = (uv_24.x - 0.5);
  highp vec2 tmpvar_71;
  tmpvar_71 = (uv_24 + localCoords_13);
  uv_24 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = cos((6.28319 * tmpvar_71.x));
  norm_12.z = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = sin((6.28319 * tmpvar_71.x));
  norm_12.x = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = cos((3.14159 * tmpvar_71.y));
  norm_12.y = tmpvar_74;
  mediump vec3 tmpvar_75;
  tmpvar_75 = -(norm_12);
  norm_12 = tmpvar_75;
  highp vec3 tmpvar_76;
  tmpvar_76 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (tmpvar_54, tmpvar_48, tmpvar_76.xxxx);
  detail_11 = tmpvar_77;
  highp vec4 tmpvar_78;
  tmpvar_78 = (0.25 * (mix (detail_11, tmpvar_51, tmpvar_76.yyyy) - 0.5));
  detail_11 = tmpvar_78;
  highp float tmpvar_79;
  tmpvar_79 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_10 = tmpvar_79;
  mediump vec4 tmpvar_80;
  tmpvar_80 = mix (detail_11, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_10));
  highp vec4 tmpvar_81;
  tmpvar_81 = (xlv_TEXCOORD1 + tmpvar_80);
  color_25 = tmpvar_81;
  highp float tmpvar_82;
  tmpvar_82 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_9 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0);
  cityoverlay_21.w = (cityoverlay_21.w * tmpvar_83);
  highp vec4 tmpvar_84;
  tmpvar_84 = mix (citydarkoverlaydetailZ_18, citydarkoverlaydetailX_20, tmpvar_76.xxxx);
  detail_11 = tmpvar_84;
  highp vec4 tmpvar_85;
  tmpvar_85 = mix (detail_11, citydarkoverlaydetailY_19, tmpvar_76.yyyy);
  detail_11 = tmpvar_85;
  mediump vec4 tmpvar_86;
  tmpvar_86 = (cityoverlay_21 * detail_11);
  citydarkoverlay_8.xyz = tmpvar_86.xyz;
  highp vec4 tmpvar_87;
  tmpvar_87 = mix (citylightoverlaydetailZ_15, citylightoverlaydetailX_17, tmpvar_76.xxxx);
  detail_11 = tmpvar_87;
  highp vec4 tmpvar_88;
  tmpvar_88 = mix (detail_11, citylightoverlaydetailY_16, tmpvar_76.yyyy);
  detail_11 = tmpvar_88;
  mediump vec4 tmpvar_89;
  tmpvar_89 = (cityoverlay_21 * detail_11);
  mediump vec4 tmpvar_90;
  tmpvar_90 = (mix (mix (color_25, main_23, vec4(handoff_9)), tmpvar_89, tmpvar_89.wwww) * _Color);
  color_25.w = tmpvar_90.w;
  highp vec3 tmpvar_91;
  tmpvar_91 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_91;
  highp vec3 tmpvar_92;
  tmpvar_92 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_92;
  highp float tmpvar_93;
  tmpvar_93 = clamp (dot (xlv_TEXCOORD5, lightDirection_6), 0.0, 1.0);
  TNdotL_5 = tmpvar_93;
  mediump float tmpvar_94;
  tmpvar_94 = clamp (dot (tmpvar_75, -(_SunDir)), 0.0, 1.0);
  lowp vec4 tmpvar_95;
  highp vec2 P_96;
  P_96 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_95 = texture2D (_LightTexture0, P_96);
  highp float tmpvar_97;
  tmpvar_97 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_98;
  tmpvar_98 = texture2D (_LightTextureB0, vec2(tmpvar_97));
  highp float tmpvar_99;
  tmpvar_99 = ((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_95.w) * tmpvar_98.w);
  atten_4 = tmpvar_99;
  mediump float tmpvar_100;
  tmpvar_100 = clamp ((((_LightColor0.w * mix (TNdotL_5, tmpvar_94, handoff_9)) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_101;
  tmpvar_101 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_100)), 0.0, 1.0);
  light_3 = tmpvar_101;
  highp float tmpvar_102;
  tmpvar_102 = clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0);
  terminator_2 = tmpvar_102;
  mediump vec3 tmpvar_103;
  tmpvar_103 = (light_3 * terminator_2);
  light_3 = tmpvar_103;
  highp vec3 tmpvar_104;
  tmpvar_104 = (tmpvar_90.xyz + (_Albedo * tmpvar_103));
  color_25.xyz = tmpvar_104;
  color_25.xyz = (color_25.xyz * tmpvar_103);
  citydarkoverlay_8.w = (tmpvar_86.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_94 - 0.01)) / 0.99) * 4.0) * atten_4), 0.0, 1.0), 0.0, 1.0)));
  color_25.xyz = mix (color_25, citydarkoverlay_8, citydarkoverlay_8.wwww).xyz;
  color_25.w = 1.0;
  tmpvar_1 = color_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 326
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 431
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 objnormal;
    highp vec4 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
};
#line 421
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 336
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 349
#line 357
#line 371
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 404
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 408
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 412
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp mat4 _Rotation;
#line 416
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 420
uniform sampler2D _CityLightOverlayDetailTex;
#line 442
#line 467
#line 442
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 446
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    #line 450
    o.color = v.color;
    o.objnormal = v.normal;
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    #line 454
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.objnormal);
    xlv_TEXCOORD3 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereCoords);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 326
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 431
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 objnormal;
    highp vec4 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
};
#line 421
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 336
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 349
#line 357
#line 371
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 404
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 408
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 412
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp mat4 _Rotation;
#line 416
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 420
uniform sampler2D _CityLightOverlayDetailTex;
#line 442
#line 467
#line 456
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 458
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 462
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 322
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    #line 324
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 318
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    #line 320
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 467
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    #line 471
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 475
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    highp vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    highp vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    highp vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    #line 479
    highp vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    highp vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    highp vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, (-IN.sphereCoords))) - 0.95)) + 0.5));
    #line 483
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    #line 487
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    #line 491
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    highp vec2 localCoords = encnorm.wy;
    #line 495
    localCoords -= vec2( 0.5);
    localCoords.x *= 0.25;
    localCoords.y *= 0.5;
    uv.x -= 0.5;
    #line 499
    uv += localCoords;
    mediump vec3 norm;
    norm.z = cos((6.28319 * uv.x));
    norm.x = sin((6.28319 * uv.x));
    #line 503
    norm.y = cos((3.14159 * uv.y));
    norm = (-norm);
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    #line 507
    detail = (0.25 * (mix( detail, detailY, vec4( sphereNrm.y)) - 0.5));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (IN.color + mix( detail.xyzw, vec4( 0.0), vec4( detailLevel)));
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    #line 511
    color = mix( color, main, vec4( handoff));
    cityoverlay.w *= xll_saturate_f(floor((IN.color.w + 0.99)));
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    #line 515
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    #line 519
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    #line 523
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * 1.0);
    #line 527
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    mediump float terminator = xll_saturate_f(floor((1.01 + dot( IN.sphereCoords, _SunDir))));
    light *= terminator;
    #line 531
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (SNdotL - 0.01)) / 0.99) * 4.0) * atten));
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    #line 535
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.objnormal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec4 tmpvar_3;
  tmpvar_3.x = gl_MultiTexCoord0.x;
  tmpvar_3.y = gl_MultiTexCoord0.y;
  tmpvar_3.z = gl_MultiTexCoord1.x;
  tmpvar_3.w = gl_MultiTexCoord1.y;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_3).xyz);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec3 norm_2;
  vec2 localCoords_3;
  vec4 cityoverlay_4;
  vec2 uv_5;
  vec4 color_6;
  float r_7;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_5.x = (0.5 + (0.159155 * r_7));
  uv_5.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_11;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_12;
    y_over_x_12 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_13;
    float x_14;
    x_14 = (y_over_x_12 * inversesqrt(((y_over_x_12 * y_over_x_12) + 1.0)));
    s_13 = (sign(x_14) * (1.5708 - (sqrt((1.0 - abs(x_14))) * (1.5708 + (abs(x_14) * (-0.214602 + (abs(x_14) * (0.0865667 + (abs(x_14) * -0.0310296)))))))));
    r_11 = s_13;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_11 = (s_13 + 3.14159);
      } else {
        r_11 = (r_11 - 3.14159);
      };
    };
  } else {
    r_11 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_15;
  tmpvar_15 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_16;
  tmpvar_16 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_17;
  tmpvar_17 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_18;
  tmpvar_18.x = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_18.y = dFdx(tmpvar_15);
  tmpvar_18.z = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_18.w = dFdy(tmpvar_15);
  vec4 tmpvar_19;
  tmpvar_19 = texture2DGradARB (_MainTex, uv_5, tmpvar_18.xy, tmpvar_18.zw);
  float tmpvar_20;
  tmpvar_20 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_21;
  tmpvar_21 = texture2DGradARB (_CityOverlayTex, uv_5, tmpvar_18.xy, tmpvar_18.zw);
  cityoverlay_4.xyz = tmpvar_21.xyz;
  vec2 tmpvar_22;
  tmpvar_22 = (texture2DGradARB (_BumpMap, uv_5, tmpvar_18.xy, tmpvar_18.zw).wy - vec2(0.5, 0.5));
  localCoords_3.x = (tmpvar_22.x * 0.25);
  localCoords_3.y = (tmpvar_22.y * 0.5);
  uv_5.x = (uv_5.x - 0.5);
  vec2 tmpvar_23;
  tmpvar_23 = (uv_5 + localCoords_3);
  uv_5 = tmpvar_23;
  norm_2.z = cos((6.28319 * tmpvar_23.x));
  norm_2.x = sin((6.28319 * tmpvar_23.x));
  norm_2.y = cos((3.14159 * tmpvar_23.y));
  vec3 tmpvar_24;
  tmpvar_24 = -(norm_2);
  norm_2 = tmpvar_24;
  vec3 tmpvar_25;
  tmpvar_25 = abs(xlv_TEXCOORD6);
  float tmpvar_26;
  tmpvar_26 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  cityoverlay_4.w = (tmpvar_21.w * clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0));
  vec4 tmpvar_27;
  tmpvar_27 = (cityoverlay_4 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_25.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_25.yyyy));
  citydarkoverlay_1.xyz = tmpvar_27.xyz;
  vec4 tmpvar_28;
  tmpvar_28 = (cityoverlay_4 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_25.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_25.yyyy));
  vec4 tmpvar_29;
  tmpvar_29 = (mix (mix ((xlv_TEXCOORD1 + mix ((0.25 * (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_20)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_20)), tmpvar_25.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_20)), tmpvar_25.yyyy) - 0.5)), vec4(0.0, 0.0, 0.0, 0.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))), tmpvar_19, vec4(tmpvar_26)), tmpvar_28, tmpvar_28.wwww) * _Color);
  color_6.w = tmpvar_29.w;
  float tmpvar_30;
  tmpvar_30 = clamp (dot (tmpvar_24, -(_SunDir)), 0.0, 1.0);
  float tmpvar_31;
  tmpvar_31 = (texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3, xlv_TEXCOORD3))).w * textureCube (_LightTexture0, xlv_TEXCOORD3).w);
  vec3 tmpvar_32;
  tmpvar_32 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * mix (clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), tmpvar_30, tmpvar_26)) * 4.0) * tmpvar_31), 0.0, 1.0))), 0.0, 1.0) * clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0));
  color_6.xyz = (tmpvar_29.xyz + (_Albedo * tmpvar_32));
  color_6.xyz = (color_6.xyz * tmpvar_32);
  citydarkoverlay_1.w = (tmpvar_27.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_30 - 0.01)) / 0.99) * 4.0) * tmpvar_31), 0.0, 1.0), 0.0, 1.0)));
  color_6.xyz = mix (color_6, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_6.w = 1.0;
  gl_FragData[0] = color_6;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 31 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord5 o5
dcl_texcoord6 o6
def c13, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
mov r1.xyz, v2
mov r1.w, c13.x
dp4 r2.z, r1, c6
dp4 r2.x, r1, c4
dp4 r2.y, r1, c5
mov r0.zw, v4.xyxy
mov r0.xy, v3
dp4 r2.w, r0, r0
rsq r1.x, r2.w
mul r0.xyz, r1.x, r0
mov o6.xyz, -r0
dp3 r0.w, r2, r2
rsq r0.w, r0.w
mul o5.xyz, r0.w, r2
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
dp4 r0.w, v0, c7
add r1.xyz, -r0, c12
dp3 r1.x, r1, r1
rsq r1.x, r1.x
mov o2, v1
dp4 o4.z, r0, c10
dp4 o4.y, r0, c9
dp4 o4.x, r0, c8
rcp o1.x, r1.x
mov o3.xyz, v2
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  highp vec3 p_2;
  p_2 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_1;
  highp vec4 tmpvar_4;
  tmpvar_4.x = _glesMultiTexCoord0.x;
  tmpvar_4.y = _glesMultiTexCoord0.y;
  tmpvar_4.z = _glesMultiTexCoord1.x;
  tmpvar_4.w = _glesMultiTexCoord1.y;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_4).xyz);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float terminator_2;
  mediump vec3 light_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float handoff_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec3 norm_11;
  highp vec2 localCoords_12;
  mediump vec4 encnorm_13;
  mediump vec4 citylightoverlaydetailZ_14;
  mediump vec4 citylightoverlaydetailY_15;
  mediump vec4 citylightoverlaydetailX_16;
  mediump vec4 citydarkoverlaydetailZ_17;
  mediump vec4 citydarkoverlaydetailY_18;
  mediump vec4 citydarkoverlaydetailX_19;
  mediump vec4 cityoverlay_20;
  mediump float vertLerp_21;
  mediump vec4 main_22;
  highp vec2 uv_23;
  mediump vec4 color_24;
  highp float r_25;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_23.x = (0.5 + (0.159155 * r_25));
  uv_23.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_29;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_30;
    y_over_x_30 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_31;
    highp float x_32;
    x_32 = (y_over_x_30 * inversesqrt(((y_over_x_30 * y_over_x_30) + 1.0)));
    s_31 = (sign(x_32) * (1.5708 - (sqrt((1.0 - abs(x_32))) * (1.5708 + (abs(x_32) * (-0.214602 + (abs(x_32) * (0.0865667 + (abs(x_32) * -0.0310296)))))))));
    r_29 = s_31;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_29 = (s_31 + 3.14159);
      } else {
        r_29 = (r_29 - 3.14159);
      };
    };
  } else {
    r_29 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_33;
  tmpvar_33 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_34;
  tmpvar_34 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_36;
  tmpvar_36.x = (0.159155 * sqrt(dot (tmpvar_34, tmpvar_34)));
  tmpvar_36.y = dFdx(tmpvar_33);
  tmpvar_36.z = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_36.w = dFdy(tmpvar_33);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2DGradEXT (_MainTex, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  main_22 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD6.zy * _DetailScale);
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD6.zx * _DetailScale);
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.xy * _DetailScale);
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  highp float tmpvar_44;
  tmpvar_44 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_21 = tmpvar_44;
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, tmpvar_41);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, tmpvar_38);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_21));
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailVertTex, tmpvar_42);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailTex, tmpvar_39);
  mediump vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_49, vec4(vertLerp_21));
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailVertTex, tmpvar_43);
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailTex, tmpvar_40);
  mediump vec4 tmpvar_53;
  tmpvar_53 = mix (tmpvar_51, tmpvar_52, vec4(vertLerp_21));
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2DGradEXT (_CityOverlayTex, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  cityoverlay_20 = tmpvar_54;
  lowp vec4 tmpvar_55;
  highp vec2 P_56;
  P_56 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_55 = texture2D (_CityDarkOverlayDetailTex, P_56);
  citydarkoverlaydetailX_19 = tmpvar_55;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityDarkOverlayDetailTex, P_58);
  citydarkoverlaydetailY_18 = tmpvar_57;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_59 = texture2D (_CityDarkOverlayDetailTex, P_60);
  citydarkoverlaydetailZ_17 = tmpvar_59;
  lowp vec4 tmpvar_61;
  highp vec2 P_62;
  P_62 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_61 = texture2D (_CityLightOverlayDetailTex, P_62);
  citylightoverlaydetailX_16 = tmpvar_61;
  lowp vec4 tmpvar_63;
  highp vec2 P_64;
  P_64 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_63 = texture2D (_CityLightOverlayDetailTex, P_64);
  citylightoverlaydetailY_15 = tmpvar_63;
  lowp vec4 tmpvar_65;
  highp vec2 P_66;
  P_66 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_65 = texture2D (_CityLightOverlayDetailTex, P_66);
  citylightoverlaydetailZ_14 = tmpvar_65;
  lowp vec4 tmpvar_67;
  tmpvar_67 = texture2DGradEXT (_BumpMap, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  encnorm_13 = tmpvar_67;
  mediump vec2 tmpvar_68;
  tmpvar_68 = encnorm_13.wy;
  localCoords_12 = tmpvar_68;
  highp vec2 tmpvar_69;
  tmpvar_69 = (localCoords_12 - vec2(0.5, 0.5));
  localCoords_12.x = (tmpvar_69.x * 0.25);
  localCoords_12.y = (tmpvar_69.y * 0.5);
  uv_23.x = (uv_23.x - 0.5);
  highp vec2 tmpvar_70;
  tmpvar_70 = (uv_23 + localCoords_12);
  uv_23 = tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = cos((6.28319 * tmpvar_70.x));
  norm_11.z = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = sin((6.28319 * tmpvar_70.x));
  norm_11.x = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = cos((3.14159 * tmpvar_70.y));
  norm_11.y = tmpvar_73;
  mediump vec3 tmpvar_74;
  tmpvar_74 = -(norm_11);
  norm_11 = tmpvar_74;
  highp vec3 tmpvar_75;
  tmpvar_75 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (tmpvar_53, tmpvar_47, tmpvar_75.xxxx);
  detail_10 = tmpvar_76;
  highp vec4 tmpvar_77;
  tmpvar_77 = (0.25 * (mix (detail_10, tmpvar_50, tmpvar_75.yyyy) - 0.5));
  detail_10 = tmpvar_77;
  highp float tmpvar_78;
  tmpvar_78 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_9 = tmpvar_78;
  mediump vec4 tmpvar_79;
  tmpvar_79 = mix (detail_10, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_9));
  highp vec4 tmpvar_80;
  tmpvar_80 = (xlv_TEXCOORD1 + tmpvar_79);
  color_24 = tmpvar_80;
  highp float tmpvar_81;
  tmpvar_81 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_8 = tmpvar_81;
  highp float tmpvar_82;
  tmpvar_82 = clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0);
  cityoverlay_20.w = (cityoverlay_20.w * tmpvar_82);
  highp vec4 tmpvar_83;
  tmpvar_83 = mix (citydarkoverlaydetailZ_17, citydarkoverlaydetailX_19, tmpvar_75.xxxx);
  detail_10 = tmpvar_83;
  highp vec4 tmpvar_84;
  tmpvar_84 = mix (detail_10, citydarkoverlaydetailY_18, tmpvar_75.yyyy);
  detail_10 = tmpvar_84;
  mediump vec4 tmpvar_85;
  tmpvar_85 = (cityoverlay_20 * detail_10);
  citydarkoverlay_7.xyz = tmpvar_85.xyz;
  highp vec4 tmpvar_86;
  tmpvar_86 = mix (citylightoverlaydetailZ_14, citylightoverlaydetailX_16, tmpvar_75.xxxx);
  detail_10 = tmpvar_86;
  highp vec4 tmpvar_87;
  tmpvar_87 = mix (detail_10, citylightoverlaydetailY_15, tmpvar_75.yyyy);
  detail_10 = tmpvar_87;
  mediump vec4 tmpvar_88;
  tmpvar_88 = (cityoverlay_20 * detail_10);
  mediump vec4 tmpvar_89;
  tmpvar_89 = (mix (mix (color_24, main_22, vec4(handoff_8)), tmpvar_88, tmpvar_88.wwww) * _Color);
  color_24.w = tmpvar_89.w;
  highp vec3 tmpvar_90;
  tmpvar_90 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_90;
  highp vec3 tmpvar_91;
  tmpvar_91 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_91;
  highp float tmpvar_92;
  tmpvar_92 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_92;
  mediump float tmpvar_93;
  tmpvar_93 = clamp (dot (tmpvar_74, -(_SunDir)), 0.0, 1.0);
  highp float tmpvar_94;
  tmpvar_94 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp float tmpvar_95;
  tmpvar_95 = (texture2D (_LightTextureB0, vec2(tmpvar_94)).w * textureCube (_LightTexture0, xlv_TEXCOORD3).w);
  mediump float tmpvar_96;
  tmpvar_96 = clamp ((((_LightColor0.w * mix (TNdotL_4, tmpvar_93, handoff_8)) * 4.0) * tmpvar_95), 0.0, 1.0);
  highp vec3 tmpvar_97;
  tmpvar_97 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_96)), 0.0, 1.0);
  light_3 = tmpvar_97;
  highp float tmpvar_98;
  tmpvar_98 = clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0);
  terminator_2 = tmpvar_98;
  mediump vec3 tmpvar_99;
  tmpvar_99 = (light_3 * terminator_2);
  light_3 = tmpvar_99;
  highp vec3 tmpvar_100;
  tmpvar_100 = (tmpvar_89.xyz + (_Albedo * tmpvar_99));
  color_24.xyz = tmpvar_100;
  color_24.xyz = (color_24.xyz * tmpvar_99);
  citydarkoverlay_7.w = (tmpvar_85.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_93 - 0.01)) / 0.99) * 4.0) * tmpvar_95), 0.0, 1.0), 0.0, 1.0)));
  color_24.xyz = mix (color_24, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_24.w = 1.0;
  tmpvar_1 = color_24;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  highp vec3 p_2;
  p_2 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_1;
  highp vec4 tmpvar_4;
  tmpvar_4.x = _glesMultiTexCoord0.x;
  tmpvar_4.y = _glesMultiTexCoord0.y;
  tmpvar_4.z = _glesMultiTexCoord1.x;
  tmpvar_4.w = _glesMultiTexCoord1.y;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_4).xyz);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float terminator_2;
  mediump vec3 light_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float handoff_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec3 norm_11;
  highp vec2 localCoords_12;
  mediump vec4 encnorm_13;
  mediump vec4 citylightoverlaydetailZ_14;
  mediump vec4 citylightoverlaydetailY_15;
  mediump vec4 citylightoverlaydetailX_16;
  mediump vec4 citydarkoverlaydetailZ_17;
  mediump vec4 citydarkoverlaydetailY_18;
  mediump vec4 citydarkoverlaydetailX_19;
  mediump vec4 cityoverlay_20;
  mediump float vertLerp_21;
  mediump vec4 main_22;
  highp vec2 uv_23;
  mediump vec4 color_24;
  highp float r_25;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_23.x = (0.5 + (0.159155 * r_25));
  uv_23.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_29;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_30;
    y_over_x_30 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_31;
    highp float x_32;
    x_32 = (y_over_x_30 * inversesqrt(((y_over_x_30 * y_over_x_30) + 1.0)));
    s_31 = (sign(x_32) * (1.5708 - (sqrt((1.0 - abs(x_32))) * (1.5708 + (abs(x_32) * (-0.214602 + (abs(x_32) * (0.0865667 + (abs(x_32) * -0.0310296)))))))));
    r_29 = s_31;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_29 = (s_31 + 3.14159);
      } else {
        r_29 = (r_29 - 3.14159);
      };
    };
  } else {
    r_29 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_33;
  tmpvar_33 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_34;
  tmpvar_34 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_36;
  tmpvar_36.x = (0.159155 * sqrt(dot (tmpvar_34, tmpvar_34)));
  tmpvar_36.y = dFdx(tmpvar_33);
  tmpvar_36.z = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_36.w = dFdy(tmpvar_33);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2DGradEXT (_MainTex, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  main_22 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD6.zy * _DetailScale);
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD6.zx * _DetailScale);
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.xy * _DetailScale);
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  highp float tmpvar_44;
  tmpvar_44 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_21 = tmpvar_44;
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, tmpvar_41);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, tmpvar_38);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_21));
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailVertTex, tmpvar_42);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailTex, tmpvar_39);
  mediump vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_49, vec4(vertLerp_21));
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailVertTex, tmpvar_43);
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailTex, tmpvar_40);
  mediump vec4 tmpvar_53;
  tmpvar_53 = mix (tmpvar_51, tmpvar_52, vec4(vertLerp_21));
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2DGradEXT (_CityOverlayTex, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  cityoverlay_20 = tmpvar_54;
  lowp vec4 tmpvar_55;
  highp vec2 P_56;
  P_56 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_55 = texture2D (_CityDarkOverlayDetailTex, P_56);
  citydarkoverlaydetailX_19 = tmpvar_55;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityDarkOverlayDetailTex, P_58);
  citydarkoverlaydetailY_18 = tmpvar_57;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_59 = texture2D (_CityDarkOverlayDetailTex, P_60);
  citydarkoverlaydetailZ_17 = tmpvar_59;
  lowp vec4 tmpvar_61;
  highp vec2 P_62;
  P_62 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_61 = texture2D (_CityLightOverlayDetailTex, P_62);
  citylightoverlaydetailX_16 = tmpvar_61;
  lowp vec4 tmpvar_63;
  highp vec2 P_64;
  P_64 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_63 = texture2D (_CityLightOverlayDetailTex, P_64);
  citylightoverlaydetailY_15 = tmpvar_63;
  lowp vec4 tmpvar_65;
  highp vec2 P_66;
  P_66 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_65 = texture2D (_CityLightOverlayDetailTex, P_66);
  citylightoverlaydetailZ_14 = tmpvar_65;
  lowp vec4 tmpvar_67;
  tmpvar_67 = texture2DGradEXT (_BumpMap, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  encnorm_13 = tmpvar_67;
  mediump vec2 tmpvar_68;
  tmpvar_68 = encnorm_13.wy;
  localCoords_12 = tmpvar_68;
  highp vec2 tmpvar_69;
  tmpvar_69 = (localCoords_12 - vec2(0.5, 0.5));
  localCoords_12.x = (tmpvar_69.x * 0.25);
  localCoords_12.y = (tmpvar_69.y * 0.5);
  uv_23.x = (uv_23.x - 0.5);
  highp vec2 tmpvar_70;
  tmpvar_70 = (uv_23 + localCoords_12);
  uv_23 = tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = cos((6.28319 * tmpvar_70.x));
  norm_11.z = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = sin((6.28319 * tmpvar_70.x));
  norm_11.x = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = cos((3.14159 * tmpvar_70.y));
  norm_11.y = tmpvar_73;
  mediump vec3 tmpvar_74;
  tmpvar_74 = -(norm_11);
  norm_11 = tmpvar_74;
  highp vec3 tmpvar_75;
  tmpvar_75 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (tmpvar_53, tmpvar_47, tmpvar_75.xxxx);
  detail_10 = tmpvar_76;
  highp vec4 tmpvar_77;
  tmpvar_77 = (0.25 * (mix (detail_10, tmpvar_50, tmpvar_75.yyyy) - 0.5));
  detail_10 = tmpvar_77;
  highp float tmpvar_78;
  tmpvar_78 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_9 = tmpvar_78;
  mediump vec4 tmpvar_79;
  tmpvar_79 = mix (detail_10, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_9));
  highp vec4 tmpvar_80;
  tmpvar_80 = (xlv_TEXCOORD1 + tmpvar_79);
  color_24 = tmpvar_80;
  highp float tmpvar_81;
  tmpvar_81 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_8 = tmpvar_81;
  highp float tmpvar_82;
  tmpvar_82 = clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0);
  cityoverlay_20.w = (cityoverlay_20.w * tmpvar_82);
  highp vec4 tmpvar_83;
  tmpvar_83 = mix (citydarkoverlaydetailZ_17, citydarkoverlaydetailX_19, tmpvar_75.xxxx);
  detail_10 = tmpvar_83;
  highp vec4 tmpvar_84;
  tmpvar_84 = mix (detail_10, citydarkoverlaydetailY_18, tmpvar_75.yyyy);
  detail_10 = tmpvar_84;
  mediump vec4 tmpvar_85;
  tmpvar_85 = (cityoverlay_20 * detail_10);
  citydarkoverlay_7.xyz = tmpvar_85.xyz;
  highp vec4 tmpvar_86;
  tmpvar_86 = mix (citylightoverlaydetailZ_14, citylightoverlaydetailX_16, tmpvar_75.xxxx);
  detail_10 = tmpvar_86;
  highp vec4 tmpvar_87;
  tmpvar_87 = mix (detail_10, citylightoverlaydetailY_15, tmpvar_75.yyyy);
  detail_10 = tmpvar_87;
  mediump vec4 tmpvar_88;
  tmpvar_88 = (cityoverlay_20 * detail_10);
  mediump vec4 tmpvar_89;
  tmpvar_89 = (mix (mix (color_24, main_22, vec4(handoff_8)), tmpvar_88, tmpvar_88.wwww) * _Color);
  color_24.w = tmpvar_89.w;
  highp vec3 tmpvar_90;
  tmpvar_90 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_90;
  highp vec3 tmpvar_91;
  tmpvar_91 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_91;
  highp float tmpvar_92;
  tmpvar_92 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_92;
  mediump float tmpvar_93;
  tmpvar_93 = clamp (dot (tmpvar_74, -(_SunDir)), 0.0, 1.0);
  highp float tmpvar_94;
  tmpvar_94 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp float tmpvar_95;
  tmpvar_95 = (texture2D (_LightTextureB0, vec2(tmpvar_94)).w * textureCube (_LightTexture0, xlv_TEXCOORD3).w);
  mediump float tmpvar_96;
  tmpvar_96 = clamp ((((_LightColor0.w * mix (TNdotL_4, tmpvar_93, handoff_8)) * 4.0) * tmpvar_95), 0.0, 1.0);
  highp vec3 tmpvar_97;
  tmpvar_97 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_96)), 0.0, 1.0);
  light_3 = tmpvar_97;
  highp float tmpvar_98;
  tmpvar_98 = clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0);
  terminator_2 = tmpvar_98;
  mediump vec3 tmpvar_99;
  tmpvar_99 = (light_3 * terminator_2);
  light_3 = tmpvar_99;
  highp vec3 tmpvar_100;
  tmpvar_100 = (tmpvar_89.xyz + (_Albedo * tmpvar_99));
  color_24.xyz = tmpvar_100;
  color_24.xyz = (color_24.xyz * tmpvar_99);
  citydarkoverlay_7.w = (tmpvar_85.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_93 - 0.01)) / 0.99) * 4.0) * tmpvar_95), 0.0, 1.0), 0.0, 1.0)));
  color_24.xyz = mix (color_24, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_24.w = 1.0;
  tmpvar_1 = color_24;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 318
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 423
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 objnormal;
    highp vec3 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
};
#line 413
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 328
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 341
#line 349
#line 363
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 396
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 400
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 404
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp mat4 _Rotation;
#line 408
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 412
uniform sampler2D _CityLightOverlayDetailTex;
#line 434
#line 459
#line 434
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 438
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    #line 442
    o.color = v.color;
    o.objnormal = v.normal;
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    #line 446
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.objnormal);
    xlv_TEXCOORD3 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereCoords);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 318
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 423
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 objnormal;
    highp vec3 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
};
#line 413
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 328
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 341
#line 349
#line 363
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 396
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 400
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 404
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp mat4 _Rotation;
#line 408
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 412
uniform sampler2D _CityLightOverlayDetailTex;
#line 434
#line 459
#line 448
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 450
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 454
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 459
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    #line 463
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 467
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    highp vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    highp vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    highp vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    #line 471
    highp vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    highp vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    highp vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, (-IN.sphereCoords))) - 0.95)) + 0.5));
    #line 475
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    #line 479
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    #line 483
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    highp vec2 localCoords = encnorm.wy;
    #line 487
    localCoords -= vec2( 0.5);
    localCoords.x *= 0.25;
    localCoords.y *= 0.5;
    uv.x -= 0.5;
    #line 491
    uv += localCoords;
    mediump vec3 norm;
    norm.z = cos((6.28319 * uv.x));
    norm.x = sin((6.28319 * uv.x));
    #line 495
    norm.y = cos((3.14159 * uv.y));
    norm = (-norm);
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    #line 499
    detail = (0.25 * (mix( detail, detailY, vec4( sphereNrm.y)) - 0.5));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (IN.color + mix( detail.xyzw, vec4( 0.0), vec4( detailLevel)));
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    #line 503
    color = mix( color, main, vec4( handoff));
    cityoverlay.w *= xll_saturate_f(floor((IN.color.w + 0.99)));
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    #line 507
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    #line 511
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    #line 515
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    lowp float atten = ((texture( _LightTextureB0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * texture( _LightTexture0, IN._LightCoord).w) * 1.0);
    #line 519
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    mediump float terminator = xll_saturate_f(floor((1.01 + dot( IN.sphereCoords, _SunDir))));
    light *= terminator;
    #line 523
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (SNdotL - 0.01)) / 0.99) * 4.0) * atten));
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    #line 527
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.objnormal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec2 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec4 tmpvar_3;
  tmpvar_3.x = gl_MultiTexCoord0.x;
  tmpvar_3.y = gl_MultiTexCoord0.y;
  tmpvar_3.z = gl_MultiTexCoord1.x;
  tmpvar_3.w = gl_MultiTexCoord1.y;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xy;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_3).xyz);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec2 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec3 norm_2;
  vec2 localCoords_3;
  vec4 cityoverlay_4;
  vec2 uv_5;
  vec4 color_6;
  float r_7;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_5.x = (0.5 + (0.159155 * r_7));
  uv_5.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_11;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_12;
    y_over_x_12 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_13;
    float x_14;
    x_14 = (y_over_x_12 * inversesqrt(((y_over_x_12 * y_over_x_12) + 1.0)));
    s_13 = (sign(x_14) * (1.5708 - (sqrt((1.0 - abs(x_14))) * (1.5708 + (abs(x_14) * (-0.214602 + (abs(x_14) * (0.0865667 + (abs(x_14) * -0.0310296)))))))));
    r_11 = s_13;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_11 = (s_13 + 3.14159);
      } else {
        r_11 = (r_11 - 3.14159);
      };
    };
  } else {
    r_11 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_15;
  tmpvar_15 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_16;
  tmpvar_16 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_17;
  tmpvar_17 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_18;
  tmpvar_18.x = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_18.y = dFdx(tmpvar_15);
  tmpvar_18.z = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_18.w = dFdy(tmpvar_15);
  vec4 tmpvar_19;
  tmpvar_19 = texture2DGradARB (_MainTex, uv_5, tmpvar_18.xy, tmpvar_18.zw);
  float tmpvar_20;
  tmpvar_20 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_21;
  tmpvar_21 = texture2DGradARB (_CityOverlayTex, uv_5, tmpvar_18.xy, tmpvar_18.zw);
  cityoverlay_4.xyz = tmpvar_21.xyz;
  vec2 tmpvar_22;
  tmpvar_22 = (texture2DGradARB (_BumpMap, uv_5, tmpvar_18.xy, tmpvar_18.zw).wy - vec2(0.5, 0.5));
  localCoords_3.x = (tmpvar_22.x * 0.25);
  localCoords_3.y = (tmpvar_22.y * 0.5);
  uv_5.x = (uv_5.x - 0.5);
  vec2 tmpvar_23;
  tmpvar_23 = (uv_5 + localCoords_3);
  uv_5 = tmpvar_23;
  norm_2.z = cos((6.28319 * tmpvar_23.x));
  norm_2.x = sin((6.28319 * tmpvar_23.x));
  norm_2.y = cos((3.14159 * tmpvar_23.y));
  vec3 tmpvar_24;
  tmpvar_24 = -(norm_2);
  norm_2 = tmpvar_24;
  vec3 tmpvar_25;
  tmpvar_25 = abs(xlv_TEXCOORD6);
  float tmpvar_26;
  tmpvar_26 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  cityoverlay_4.w = (tmpvar_21.w * clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0));
  vec4 tmpvar_27;
  tmpvar_27 = (cityoverlay_4 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_25.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_25.yyyy));
  citydarkoverlay_1.xyz = tmpvar_27.xyz;
  vec4 tmpvar_28;
  tmpvar_28 = (cityoverlay_4 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_25.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_25.yyyy));
  vec4 tmpvar_29;
  tmpvar_29 = (mix (mix ((xlv_TEXCOORD1 + mix ((0.25 * (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_20)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_20)), tmpvar_25.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_20)), tmpvar_25.yyyy) - 0.5)), vec4(0.0, 0.0, 0.0, 0.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))), tmpvar_19, vec4(tmpvar_26)), tmpvar_28, tmpvar_28.wwww) * _Color);
  color_6.w = tmpvar_29.w;
  float tmpvar_30;
  tmpvar_30 = clamp (dot (tmpvar_24, -(_SunDir)), 0.0, 1.0);
  float tmpvar_31;
  tmpvar_31 = texture2D (_LightTexture0, xlv_TEXCOORD3).w;
  vec3 tmpvar_32;
  tmpvar_32 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * mix (clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), tmpvar_30, tmpvar_26)) * 4.0) * tmpvar_31), 0.0, 1.0))), 0.0, 1.0) * clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0));
  color_6.xyz = (tmpvar_29.xyz + (_Albedo * tmpvar_32));
  color_6.xyz = (color_6.xyz * tmpvar_32);
  citydarkoverlay_1.w = (tmpvar_27.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_30 - 0.01)) / 0.99) * 4.0) * tmpvar_31), 0.0, 1.0), 0.0, 1.0)));
  color_6.xyz = mix (color_6, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_6.w = 1.0;
  gl_FragData[0] = color_6;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 30 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord5 o5
dcl_texcoord6 o6
def c13, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
mov r1.xyz, v2
mov r1.w, c13.x
dp4 r2.z, r1, c6
dp4 r2.x, r1, c4
dp4 r2.y, r1, c5
mov r0.zw, v4.xyxy
mov r0.xy, v3
dp4 r2.w, r0, r0
rsq r1.x, r2.w
mul r0.xyz, r1.x, r0
mov o6.xyz, -r0
dp3 r0.w, r2, r2
rsq r0.w, r0.w
mul o5.xyz, r0.w, r2
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
dp4 r0.w, v0, c7
add r1.xyz, -r0, c12
dp3 r1.x, r1, r1
rsq r1.x, r1.x
mov o2, v1
dp4 o4.y, r0, c9
dp4 o4.x, r0, c8
rcp o1.x, r1.x
mov o3.xyz, v2
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  highp vec3 p_2;
  p_2 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_1;
  highp vec4 tmpvar_4;
  tmpvar_4.x = _glesMultiTexCoord0.x;
  tmpvar_4.y = _glesMultiTexCoord0.y;
  tmpvar_4.z = _glesMultiTexCoord1.x;
  tmpvar_4.w = _glesMultiTexCoord1.y;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_4).xyz);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float terminator_2;
  mediump vec3 light_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float handoff_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec3 norm_11;
  highp vec2 localCoords_12;
  mediump vec4 encnorm_13;
  mediump vec4 citylightoverlaydetailZ_14;
  mediump vec4 citylightoverlaydetailY_15;
  mediump vec4 citylightoverlaydetailX_16;
  mediump vec4 citydarkoverlaydetailZ_17;
  mediump vec4 citydarkoverlaydetailY_18;
  mediump vec4 citydarkoverlaydetailX_19;
  mediump vec4 cityoverlay_20;
  mediump float vertLerp_21;
  mediump vec4 main_22;
  highp vec2 uv_23;
  mediump vec4 color_24;
  highp float r_25;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_23.x = (0.5 + (0.159155 * r_25));
  uv_23.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_29;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_30;
    y_over_x_30 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_31;
    highp float x_32;
    x_32 = (y_over_x_30 * inversesqrt(((y_over_x_30 * y_over_x_30) + 1.0)));
    s_31 = (sign(x_32) * (1.5708 - (sqrt((1.0 - abs(x_32))) * (1.5708 + (abs(x_32) * (-0.214602 + (abs(x_32) * (0.0865667 + (abs(x_32) * -0.0310296)))))))));
    r_29 = s_31;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_29 = (s_31 + 3.14159);
      } else {
        r_29 = (r_29 - 3.14159);
      };
    };
  } else {
    r_29 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_33;
  tmpvar_33 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_34;
  tmpvar_34 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_36;
  tmpvar_36.x = (0.159155 * sqrt(dot (tmpvar_34, tmpvar_34)));
  tmpvar_36.y = dFdx(tmpvar_33);
  tmpvar_36.z = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_36.w = dFdy(tmpvar_33);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2DGradEXT (_MainTex, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  main_22 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD6.zy * _DetailScale);
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD6.zx * _DetailScale);
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.xy * _DetailScale);
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  highp float tmpvar_44;
  tmpvar_44 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_21 = tmpvar_44;
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, tmpvar_41);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, tmpvar_38);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_21));
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailVertTex, tmpvar_42);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailTex, tmpvar_39);
  mediump vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_49, vec4(vertLerp_21));
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailVertTex, tmpvar_43);
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailTex, tmpvar_40);
  mediump vec4 tmpvar_53;
  tmpvar_53 = mix (tmpvar_51, tmpvar_52, vec4(vertLerp_21));
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2DGradEXT (_CityOverlayTex, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  cityoverlay_20 = tmpvar_54;
  lowp vec4 tmpvar_55;
  highp vec2 P_56;
  P_56 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_55 = texture2D (_CityDarkOverlayDetailTex, P_56);
  citydarkoverlaydetailX_19 = tmpvar_55;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityDarkOverlayDetailTex, P_58);
  citydarkoverlaydetailY_18 = tmpvar_57;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_59 = texture2D (_CityDarkOverlayDetailTex, P_60);
  citydarkoverlaydetailZ_17 = tmpvar_59;
  lowp vec4 tmpvar_61;
  highp vec2 P_62;
  P_62 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_61 = texture2D (_CityLightOverlayDetailTex, P_62);
  citylightoverlaydetailX_16 = tmpvar_61;
  lowp vec4 tmpvar_63;
  highp vec2 P_64;
  P_64 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_63 = texture2D (_CityLightOverlayDetailTex, P_64);
  citylightoverlaydetailY_15 = tmpvar_63;
  lowp vec4 tmpvar_65;
  highp vec2 P_66;
  P_66 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_65 = texture2D (_CityLightOverlayDetailTex, P_66);
  citylightoverlaydetailZ_14 = tmpvar_65;
  lowp vec4 tmpvar_67;
  tmpvar_67 = texture2DGradEXT (_BumpMap, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  encnorm_13 = tmpvar_67;
  mediump vec2 tmpvar_68;
  tmpvar_68 = encnorm_13.wy;
  localCoords_12 = tmpvar_68;
  highp vec2 tmpvar_69;
  tmpvar_69 = (localCoords_12 - vec2(0.5, 0.5));
  localCoords_12.x = (tmpvar_69.x * 0.25);
  localCoords_12.y = (tmpvar_69.y * 0.5);
  uv_23.x = (uv_23.x - 0.5);
  highp vec2 tmpvar_70;
  tmpvar_70 = (uv_23 + localCoords_12);
  uv_23 = tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = cos((6.28319 * tmpvar_70.x));
  norm_11.z = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = sin((6.28319 * tmpvar_70.x));
  norm_11.x = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = cos((3.14159 * tmpvar_70.y));
  norm_11.y = tmpvar_73;
  mediump vec3 tmpvar_74;
  tmpvar_74 = -(norm_11);
  norm_11 = tmpvar_74;
  highp vec3 tmpvar_75;
  tmpvar_75 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (tmpvar_53, tmpvar_47, tmpvar_75.xxxx);
  detail_10 = tmpvar_76;
  highp vec4 tmpvar_77;
  tmpvar_77 = (0.25 * (mix (detail_10, tmpvar_50, tmpvar_75.yyyy) - 0.5));
  detail_10 = tmpvar_77;
  highp float tmpvar_78;
  tmpvar_78 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_9 = tmpvar_78;
  mediump vec4 tmpvar_79;
  tmpvar_79 = mix (detail_10, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_9));
  highp vec4 tmpvar_80;
  tmpvar_80 = (xlv_TEXCOORD1 + tmpvar_79);
  color_24 = tmpvar_80;
  highp float tmpvar_81;
  tmpvar_81 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_8 = tmpvar_81;
  highp float tmpvar_82;
  tmpvar_82 = clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0);
  cityoverlay_20.w = (cityoverlay_20.w * tmpvar_82);
  highp vec4 tmpvar_83;
  tmpvar_83 = mix (citydarkoverlaydetailZ_17, citydarkoverlaydetailX_19, tmpvar_75.xxxx);
  detail_10 = tmpvar_83;
  highp vec4 tmpvar_84;
  tmpvar_84 = mix (detail_10, citydarkoverlaydetailY_18, tmpvar_75.yyyy);
  detail_10 = tmpvar_84;
  mediump vec4 tmpvar_85;
  tmpvar_85 = (cityoverlay_20 * detail_10);
  citydarkoverlay_7.xyz = tmpvar_85.xyz;
  highp vec4 tmpvar_86;
  tmpvar_86 = mix (citylightoverlaydetailZ_14, citylightoverlaydetailX_16, tmpvar_75.xxxx);
  detail_10 = tmpvar_86;
  highp vec4 tmpvar_87;
  tmpvar_87 = mix (detail_10, citylightoverlaydetailY_15, tmpvar_75.yyyy);
  detail_10 = tmpvar_87;
  mediump vec4 tmpvar_88;
  tmpvar_88 = (cityoverlay_20 * detail_10);
  mediump vec4 tmpvar_89;
  tmpvar_89 = (mix (mix (color_24, main_22, vec4(handoff_8)), tmpvar_88, tmpvar_88.wwww) * _Color);
  color_24.w = tmpvar_89.w;
  highp vec3 tmpvar_90;
  tmpvar_90 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_90;
  lowp vec3 tmpvar_91;
  tmpvar_91 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_91;
  highp float tmpvar_92;
  tmpvar_92 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_92;
  mediump float tmpvar_93;
  tmpvar_93 = clamp (dot (tmpvar_74, -(_SunDir)), 0.0, 1.0);
  lowp float tmpvar_94;
  tmpvar_94 = texture2D (_LightTexture0, xlv_TEXCOORD3).w;
  mediump float tmpvar_95;
  tmpvar_95 = clamp ((((_LightColor0.w * mix (TNdotL_4, tmpvar_93, handoff_8)) * 4.0) * tmpvar_94), 0.0, 1.0);
  highp vec3 tmpvar_96;
  tmpvar_96 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_95)), 0.0, 1.0);
  light_3 = tmpvar_96;
  highp float tmpvar_97;
  tmpvar_97 = clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0);
  terminator_2 = tmpvar_97;
  mediump vec3 tmpvar_98;
  tmpvar_98 = (light_3 * terminator_2);
  light_3 = tmpvar_98;
  highp vec3 tmpvar_99;
  tmpvar_99 = (tmpvar_89.xyz + (_Albedo * tmpvar_98));
  color_24.xyz = tmpvar_99;
  color_24.xyz = (color_24.xyz * tmpvar_98);
  citydarkoverlay_7.w = (tmpvar_85.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_93 - 0.01)) / 0.99) * 4.0) * tmpvar_94), 0.0, 1.0), 0.0, 1.0)));
  color_24.xyz = mix (color_24, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_24.w = 1.0;
  tmpvar_1 = color_24;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  highp vec3 p_2;
  p_2 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_1;
  highp vec4 tmpvar_4;
  tmpvar_4.x = _glesMultiTexCoord0.x;
  tmpvar_4.y = _glesMultiTexCoord0.y;
  tmpvar_4.z = _glesMultiTexCoord1.x;
  tmpvar_4.w = _glesMultiTexCoord1.y;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_4).xyz);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float terminator_2;
  mediump vec3 light_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float handoff_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec3 norm_11;
  highp vec2 localCoords_12;
  mediump vec4 encnorm_13;
  mediump vec4 citylightoverlaydetailZ_14;
  mediump vec4 citylightoverlaydetailY_15;
  mediump vec4 citylightoverlaydetailX_16;
  mediump vec4 citydarkoverlaydetailZ_17;
  mediump vec4 citydarkoverlaydetailY_18;
  mediump vec4 citydarkoverlaydetailX_19;
  mediump vec4 cityoverlay_20;
  mediump float vertLerp_21;
  mediump vec4 main_22;
  highp vec2 uv_23;
  mediump vec4 color_24;
  highp float r_25;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_23.x = (0.5 + (0.159155 * r_25));
  uv_23.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_29;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_30;
    y_over_x_30 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_31;
    highp float x_32;
    x_32 = (y_over_x_30 * inversesqrt(((y_over_x_30 * y_over_x_30) + 1.0)));
    s_31 = (sign(x_32) * (1.5708 - (sqrt((1.0 - abs(x_32))) * (1.5708 + (abs(x_32) * (-0.214602 + (abs(x_32) * (0.0865667 + (abs(x_32) * -0.0310296)))))))));
    r_29 = s_31;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_29 = (s_31 + 3.14159);
      } else {
        r_29 = (r_29 - 3.14159);
      };
    };
  } else {
    r_29 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_33;
  tmpvar_33 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_34;
  tmpvar_34 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_36;
  tmpvar_36.x = (0.159155 * sqrt(dot (tmpvar_34, tmpvar_34)));
  tmpvar_36.y = dFdx(tmpvar_33);
  tmpvar_36.z = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_36.w = dFdy(tmpvar_33);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2DGradEXT (_MainTex, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  main_22 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD6.zy * _DetailScale);
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD6.zx * _DetailScale);
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.xy * _DetailScale);
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  highp float tmpvar_44;
  tmpvar_44 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_21 = tmpvar_44;
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, tmpvar_41);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, tmpvar_38);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_21));
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailVertTex, tmpvar_42);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailTex, tmpvar_39);
  mediump vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_49, vec4(vertLerp_21));
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailVertTex, tmpvar_43);
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailTex, tmpvar_40);
  mediump vec4 tmpvar_53;
  tmpvar_53 = mix (tmpvar_51, tmpvar_52, vec4(vertLerp_21));
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2DGradEXT (_CityOverlayTex, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  cityoverlay_20 = tmpvar_54;
  lowp vec4 tmpvar_55;
  highp vec2 P_56;
  P_56 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_55 = texture2D (_CityDarkOverlayDetailTex, P_56);
  citydarkoverlaydetailX_19 = tmpvar_55;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityDarkOverlayDetailTex, P_58);
  citydarkoverlaydetailY_18 = tmpvar_57;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_59 = texture2D (_CityDarkOverlayDetailTex, P_60);
  citydarkoverlaydetailZ_17 = tmpvar_59;
  lowp vec4 tmpvar_61;
  highp vec2 P_62;
  P_62 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_61 = texture2D (_CityLightOverlayDetailTex, P_62);
  citylightoverlaydetailX_16 = tmpvar_61;
  lowp vec4 tmpvar_63;
  highp vec2 P_64;
  P_64 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_63 = texture2D (_CityLightOverlayDetailTex, P_64);
  citylightoverlaydetailY_15 = tmpvar_63;
  lowp vec4 tmpvar_65;
  highp vec2 P_66;
  P_66 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_65 = texture2D (_CityLightOverlayDetailTex, P_66);
  citylightoverlaydetailZ_14 = tmpvar_65;
  lowp vec4 tmpvar_67;
  tmpvar_67 = texture2DGradEXT (_BumpMap, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  encnorm_13 = tmpvar_67;
  mediump vec2 tmpvar_68;
  tmpvar_68 = encnorm_13.wy;
  localCoords_12 = tmpvar_68;
  highp vec2 tmpvar_69;
  tmpvar_69 = (localCoords_12 - vec2(0.5, 0.5));
  localCoords_12.x = (tmpvar_69.x * 0.25);
  localCoords_12.y = (tmpvar_69.y * 0.5);
  uv_23.x = (uv_23.x - 0.5);
  highp vec2 tmpvar_70;
  tmpvar_70 = (uv_23 + localCoords_12);
  uv_23 = tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = cos((6.28319 * tmpvar_70.x));
  norm_11.z = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = sin((6.28319 * tmpvar_70.x));
  norm_11.x = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = cos((3.14159 * tmpvar_70.y));
  norm_11.y = tmpvar_73;
  mediump vec3 tmpvar_74;
  tmpvar_74 = -(norm_11);
  norm_11 = tmpvar_74;
  highp vec3 tmpvar_75;
  tmpvar_75 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (tmpvar_53, tmpvar_47, tmpvar_75.xxxx);
  detail_10 = tmpvar_76;
  highp vec4 tmpvar_77;
  tmpvar_77 = (0.25 * (mix (detail_10, tmpvar_50, tmpvar_75.yyyy) - 0.5));
  detail_10 = tmpvar_77;
  highp float tmpvar_78;
  tmpvar_78 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_9 = tmpvar_78;
  mediump vec4 tmpvar_79;
  tmpvar_79 = mix (detail_10, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_9));
  highp vec4 tmpvar_80;
  tmpvar_80 = (xlv_TEXCOORD1 + tmpvar_79);
  color_24 = tmpvar_80;
  highp float tmpvar_81;
  tmpvar_81 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_8 = tmpvar_81;
  highp float tmpvar_82;
  tmpvar_82 = clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0);
  cityoverlay_20.w = (cityoverlay_20.w * tmpvar_82);
  highp vec4 tmpvar_83;
  tmpvar_83 = mix (citydarkoverlaydetailZ_17, citydarkoverlaydetailX_19, tmpvar_75.xxxx);
  detail_10 = tmpvar_83;
  highp vec4 tmpvar_84;
  tmpvar_84 = mix (detail_10, citydarkoverlaydetailY_18, tmpvar_75.yyyy);
  detail_10 = tmpvar_84;
  mediump vec4 tmpvar_85;
  tmpvar_85 = (cityoverlay_20 * detail_10);
  citydarkoverlay_7.xyz = tmpvar_85.xyz;
  highp vec4 tmpvar_86;
  tmpvar_86 = mix (citylightoverlaydetailZ_14, citylightoverlaydetailX_16, tmpvar_75.xxxx);
  detail_10 = tmpvar_86;
  highp vec4 tmpvar_87;
  tmpvar_87 = mix (detail_10, citylightoverlaydetailY_15, tmpvar_75.yyyy);
  detail_10 = tmpvar_87;
  mediump vec4 tmpvar_88;
  tmpvar_88 = (cityoverlay_20 * detail_10);
  mediump vec4 tmpvar_89;
  tmpvar_89 = (mix (mix (color_24, main_22, vec4(handoff_8)), tmpvar_88, tmpvar_88.wwww) * _Color);
  color_24.w = tmpvar_89.w;
  highp vec3 tmpvar_90;
  tmpvar_90 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_90;
  lowp vec3 tmpvar_91;
  tmpvar_91 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_91;
  highp float tmpvar_92;
  tmpvar_92 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_92;
  mediump float tmpvar_93;
  tmpvar_93 = clamp (dot (tmpvar_74, -(_SunDir)), 0.0, 1.0);
  lowp float tmpvar_94;
  tmpvar_94 = texture2D (_LightTexture0, xlv_TEXCOORD3).w;
  mediump float tmpvar_95;
  tmpvar_95 = clamp ((((_LightColor0.w * mix (TNdotL_4, tmpvar_93, handoff_8)) * 4.0) * tmpvar_94), 0.0, 1.0);
  highp vec3 tmpvar_96;
  tmpvar_96 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_95)), 0.0, 1.0);
  light_3 = tmpvar_96;
  highp float tmpvar_97;
  tmpvar_97 = clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0);
  terminator_2 = tmpvar_97;
  mediump vec3 tmpvar_98;
  tmpvar_98 = (light_3 * terminator_2);
  light_3 = tmpvar_98;
  highp vec3 tmpvar_99;
  tmpvar_99 = (tmpvar_89.xyz + (_Albedo * tmpvar_98));
  color_24.xyz = tmpvar_99;
  color_24.xyz = (color_24.xyz * tmpvar_98);
  citydarkoverlay_7.w = (tmpvar_85.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_93 - 0.01)) / 0.99) * 4.0) * tmpvar_94), 0.0, 1.0), 0.0, 1.0)));
  color_24.xyz = mix (color_24, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_24.w = 1.0;
  tmpvar_1 = color_24;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 422
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 objnormal;
    highp vec2 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
};
#line 412
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 395
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 399
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 403
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp mat4 _Rotation;
#line 407
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 411
uniform sampler2D _CityLightOverlayDetailTex;
#line 433
#line 458
#line 433
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 437
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    #line 441
    o.color = v.color;
    o.objnormal = v.normal;
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xy;
    #line 445
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec2 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.objnormal);
    xlv_TEXCOORD3 = vec2(xl_retval._LightCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereCoords);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 422
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 objnormal;
    highp vec2 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
};
#line 412
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 395
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 399
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 403
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp mat4 _Rotation;
#line 407
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 411
uniform sampler2D _CityLightOverlayDetailTex;
#line 433
#line 458
#line 447
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 449
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 453
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 458
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    #line 462
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 466
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    highp vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    highp vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    highp vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    #line 470
    highp vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    highp vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    highp vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, (-IN.sphereCoords))) - 0.95)) + 0.5));
    #line 474
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    #line 478
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    #line 482
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    highp vec2 localCoords = encnorm.wy;
    #line 486
    localCoords -= vec2( 0.5);
    localCoords.x *= 0.25;
    localCoords.y *= 0.5;
    uv.x -= 0.5;
    #line 490
    uv += localCoords;
    mediump vec3 norm;
    norm.z = cos((6.28319 * uv.x));
    norm.x = sin((6.28319 * uv.x));
    #line 494
    norm.y = cos((3.14159 * uv.y));
    norm = (-norm);
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    #line 498
    detail = (0.25 * (mix( detail, detailY, vec4( sphereNrm.y)) - 0.5));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (IN.color + mix( detail.xyzw, vec4( 0.0), vec4( detailLevel)));
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    #line 502
    color = mix( color, main, vec4( handoff));
    cityoverlay.w *= xll_saturate_f(floor((IN.color.w + 0.99)));
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    #line 506
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    #line 510
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    #line 514
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    lowp float atten = (texture( _LightTexture0, IN._LightCoord).w * 1.0);
    #line 518
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    mediump float terminator = xll_saturate_f(floor((1.01 + dot( IN.sphereCoords, _SunDir))));
    light *= terminator;
    #line 522
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (SNdotL - 0.01)) / 0.99) * 4.0) * atten));
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    #line 526
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec2 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.objnormal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec2(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform mat4 unity_World2Shadow[4];
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec4 tmpvar_3;
  tmpvar_3.x = gl_MultiTexCoord0.x;
  tmpvar_3.y = gl_MultiTexCoord0.y;
  tmpvar_3.z = gl_MultiTexCoord1.x;
  tmpvar_3.w = gl_MultiTexCoord1.y;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * gl_Vertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_3).xyz);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec3 norm_2;
  vec2 localCoords_3;
  vec4 cityoverlay_4;
  vec2 uv_5;
  vec4 color_6;
  float r_7;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_5.x = (0.5 + (0.159155 * r_7));
  uv_5.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_11;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_12;
    y_over_x_12 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_13;
    float x_14;
    x_14 = (y_over_x_12 * inversesqrt(((y_over_x_12 * y_over_x_12) + 1.0)));
    s_13 = (sign(x_14) * (1.5708 - (sqrt((1.0 - abs(x_14))) * (1.5708 + (abs(x_14) * (-0.214602 + (abs(x_14) * (0.0865667 + (abs(x_14) * -0.0310296)))))))));
    r_11 = s_13;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_11 = (s_13 + 3.14159);
      } else {
        r_11 = (r_11 - 3.14159);
      };
    };
  } else {
    r_11 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_15;
  tmpvar_15 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_16;
  tmpvar_16 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_17;
  tmpvar_17 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_18;
  tmpvar_18.x = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_18.y = dFdx(tmpvar_15);
  tmpvar_18.z = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_18.w = dFdy(tmpvar_15);
  vec4 tmpvar_19;
  tmpvar_19 = texture2DGradARB (_MainTex, uv_5, tmpvar_18.xy, tmpvar_18.zw);
  float tmpvar_20;
  tmpvar_20 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_21;
  tmpvar_21 = texture2DGradARB (_CityOverlayTex, uv_5, tmpvar_18.xy, tmpvar_18.zw);
  cityoverlay_4.xyz = tmpvar_21.xyz;
  vec2 tmpvar_22;
  tmpvar_22 = (texture2DGradARB (_BumpMap, uv_5, tmpvar_18.xy, tmpvar_18.zw).wy - vec2(0.5, 0.5));
  localCoords_3.x = (tmpvar_22.x * 0.25);
  localCoords_3.y = (tmpvar_22.y * 0.5);
  uv_5.x = (uv_5.x - 0.5);
  vec2 tmpvar_23;
  tmpvar_23 = (uv_5 + localCoords_3);
  uv_5 = tmpvar_23;
  norm_2.z = cos((6.28319 * tmpvar_23.x));
  norm_2.x = sin((6.28319 * tmpvar_23.x));
  norm_2.y = cos((3.14159 * tmpvar_23.y));
  vec3 tmpvar_24;
  tmpvar_24 = -(norm_2);
  norm_2 = tmpvar_24;
  vec3 tmpvar_25;
  tmpvar_25 = abs(xlv_TEXCOORD6);
  float tmpvar_26;
  tmpvar_26 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  cityoverlay_4.w = (tmpvar_21.w * clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0));
  vec4 tmpvar_27;
  tmpvar_27 = (cityoverlay_4 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_25.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_25.yyyy));
  citydarkoverlay_1 = tmpvar_27;
  vec4 tmpvar_28;
  tmpvar_28 = (cityoverlay_4 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_25.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_25.yyyy));
  vec4 tmpvar_29;
  tmpvar_29 = (mix (mix ((xlv_TEXCOORD1 + mix ((0.25 * (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_20)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_20)), tmpvar_25.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_20)), tmpvar_25.yyyy) - 0.5)), vec4(0.0, 0.0, 0.0, 0.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))), tmpvar_19, vec4(tmpvar_26)), tmpvar_28, tmpvar_28.wwww) * _Color);
  color_6 = tmpvar_29;
  float tmpvar_30;
  tmpvar_30 = clamp (dot (tmpvar_24, -(_SunDir)), 0.0, 1.0);
  float tmpvar_31;
  tmpvar_31 = mix (clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), tmpvar_30, tmpvar_26);
  vec4 tmpvar_32;
  tmpvar_32 = texture2D (_LightTexture0, ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5));
  vec4 tmpvar_33;
  tmpvar_33 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz)));
  vec4 tmpvar_34;
  tmpvar_34 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD4);
  float tmpvar_35;
  if ((tmpvar_34.x < (xlv_TEXCOORD4.z / xlv_TEXCOORD4.w))) {
    tmpvar_35 = _LightShadowData.x;
  } else {
    tmpvar_35 = 1.0;
  };
  float tmpvar_36;
  tmpvar_36 = (((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_32.w) * tmpvar_33.w) * tmpvar_35);
  vec3 tmpvar_37;
  tmpvar_37 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_31) * 4.0) * tmpvar_36), 0.0, 1.0))), 0.0, 1.0) * clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0));
  color_6.xyz = (tmpvar_29.xyz + (_Albedo * tmpvar_37));
  color_6.xyz = (color_6.xyz * tmpvar_37);
  citydarkoverlay_1.w = (tmpvar_27.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_30 - 0.01)) / 0.99) * 4.0) * tmpvar_36), 0.0, 1.0), 0.0, 1.0)));
  color_6.xyz = mix (color_6, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_6.w = 1.0;
  gl_FragData[0] = color_6;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Matrix 4 [unity_World2Shadow0]
Matrix 8 [_Object2World]
Matrix 12 [_LightMatrix0]
"vs_3_0
; 36 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
def c17, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
mov r1.xyz, v2
mov r1.w, c17.x
dp4 r2.z, r1, c10
dp4 r2.x, r1, c8
dp4 r2.y, r1, c9
mov r0.zw, v4.xyxy
mov r0.xy, v3
dp4 r2.w, r0, r0
rsq r1.x, r2.w
mul r0.xyz, r1.x, r0
mov o7.xyz, -r0
dp3 r0.w, r2, r2
rsq r0.w, r0.w
mul o6.xyz, r0.w, r2
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
dp4 r0.w, v0, c11
add r1.xyz, -r0, c16
dp3 r1.x, r1, r1
rsq r1.x, r1.x
mov o2, v1
dp4 o4.w, r0, c15
dp4 o4.z, r0, c14
dp4 o4.y, r0, c13
dp4 o4.x, r0, c12
dp4 o5.w, r0, c7
dp4 o5.z, r0, c6
dp4 o5.y, r0, c5
dp4 o5.x, r0, c4
rcp o1.x, r1.x
mov o3.xyz, v2
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  highp vec3 p_2;
  p_2 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_1;
  highp vec4 tmpvar_4;
  tmpvar_4.x = _glesMultiTexCoord0.x;
  tmpvar_4.y = _glesMultiTexCoord0.y;
  tmpvar_4.z = _glesMultiTexCoord1.x;
  tmpvar_4.w = _glesMultiTexCoord1.y;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_4).xyz);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float terminator_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float TNdotL_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump vec4 citydarkoverlay_8;
  mediump float handoff_9;
  mediump float detailLevel_10;
  mediump vec4 detail_11;
  mediump vec3 norm_12;
  highp vec2 localCoords_13;
  mediump vec4 encnorm_14;
  mediump vec4 citylightoverlaydetailZ_15;
  mediump vec4 citylightoverlaydetailY_16;
  mediump vec4 citylightoverlaydetailX_17;
  mediump vec4 citydarkoverlaydetailZ_18;
  mediump vec4 citydarkoverlaydetailY_19;
  mediump vec4 citydarkoverlaydetailX_20;
  mediump vec4 cityoverlay_21;
  mediump float vertLerp_22;
  mediump vec4 main_23;
  highp vec2 uv_24;
  mediump vec4 color_25;
  highp float r_26;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_26));
  uv_24.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_30;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_31;
    y_over_x_31 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_32;
    highp float x_33;
    x_33 = (y_over_x_31 * inversesqrt(((y_over_x_31 * y_over_x_31) + 1.0)));
    s_32 = (sign(x_33) * (1.5708 - (sqrt((1.0 - abs(x_33))) * (1.5708 + (abs(x_33) * (-0.214602 + (abs(x_33) * (0.0865667 + (abs(x_33) * -0.0310296)))))))));
    r_30 = s_32;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_30 = (s_32 + 3.14159);
      } else {
        r_30 = (r_30 - 3.14159);
      };
    };
  } else {
    r_30 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_34;
  tmpvar_34 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_MainTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  main_23 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD6.zy * _DetailScale);
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zx * _DetailScale);
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.xy * _DetailScale);
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  highp float tmpvar_45;
  tmpvar_45 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_22 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailVertTex, tmpvar_42);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailTex, tmpvar_39);
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_47, vec4(vertLerp_22));
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailVertTex, tmpvar_43);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailTex, tmpvar_40);
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (tmpvar_49, tmpvar_50, vec4(vertLerp_22));
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailVertTex, tmpvar_44);
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailTex, tmpvar_41);
  mediump vec4 tmpvar_54;
  tmpvar_54 = mix (tmpvar_52, tmpvar_53, vec4(vertLerp_22));
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2DGradEXT (_CityOverlayTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  cityoverlay_21 = tmpvar_55;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_56 = texture2D (_CityDarkOverlayDetailTex, P_57);
  citydarkoverlaydetailX_20 = tmpvar_56;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityDarkOverlayDetailTex, P_59);
  citydarkoverlaydetailY_19 = tmpvar_58;
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_60 = texture2D (_CityDarkOverlayDetailTex, P_61);
  citydarkoverlaydetailZ_18 = tmpvar_60;
  lowp vec4 tmpvar_62;
  highp vec2 P_63;
  P_63 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_62 = texture2D (_CityLightOverlayDetailTex, P_63);
  citylightoverlaydetailX_17 = tmpvar_62;
  lowp vec4 tmpvar_64;
  highp vec2 P_65;
  P_65 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_64 = texture2D (_CityLightOverlayDetailTex, P_65);
  citylightoverlaydetailY_16 = tmpvar_64;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_66 = texture2D (_CityLightOverlayDetailTex, P_67);
  citylightoverlaydetailZ_15 = tmpvar_66;
  lowp vec4 tmpvar_68;
  tmpvar_68 = texture2DGradEXT (_BumpMap, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  encnorm_14 = tmpvar_68;
  mediump vec2 tmpvar_69;
  tmpvar_69 = encnorm_14.wy;
  localCoords_13 = tmpvar_69;
  highp vec2 tmpvar_70;
  tmpvar_70 = (localCoords_13 - vec2(0.5, 0.5));
  localCoords_13.x = (tmpvar_70.x * 0.25);
  localCoords_13.y = (tmpvar_70.y * 0.5);
  uv_24.x = (uv_24.x - 0.5);
  highp vec2 tmpvar_71;
  tmpvar_71 = (uv_24 + localCoords_13);
  uv_24 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = cos((6.28319 * tmpvar_71.x));
  norm_12.z = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = sin((6.28319 * tmpvar_71.x));
  norm_12.x = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = cos((3.14159 * tmpvar_71.y));
  norm_12.y = tmpvar_74;
  mediump vec3 tmpvar_75;
  tmpvar_75 = -(norm_12);
  norm_12 = tmpvar_75;
  highp vec3 tmpvar_76;
  tmpvar_76 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (tmpvar_54, tmpvar_48, tmpvar_76.xxxx);
  detail_11 = tmpvar_77;
  highp vec4 tmpvar_78;
  tmpvar_78 = (0.25 * (mix (detail_11, tmpvar_51, tmpvar_76.yyyy) - 0.5));
  detail_11 = tmpvar_78;
  highp float tmpvar_79;
  tmpvar_79 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_10 = tmpvar_79;
  mediump vec4 tmpvar_80;
  tmpvar_80 = mix (detail_11, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_10));
  highp vec4 tmpvar_81;
  tmpvar_81 = (xlv_TEXCOORD1 + tmpvar_80);
  color_25 = tmpvar_81;
  highp float tmpvar_82;
  tmpvar_82 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_9 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0);
  cityoverlay_21.w = (cityoverlay_21.w * tmpvar_83);
  highp vec4 tmpvar_84;
  tmpvar_84 = mix (citydarkoverlaydetailZ_18, citydarkoverlaydetailX_20, tmpvar_76.xxxx);
  detail_11 = tmpvar_84;
  highp vec4 tmpvar_85;
  tmpvar_85 = mix (detail_11, citydarkoverlaydetailY_19, tmpvar_76.yyyy);
  detail_11 = tmpvar_85;
  mediump vec4 tmpvar_86;
  tmpvar_86 = (cityoverlay_21 * detail_11);
  citydarkoverlay_8 = tmpvar_86;
  highp vec4 tmpvar_87;
  tmpvar_87 = mix (citylightoverlaydetailZ_15, citylightoverlaydetailX_17, tmpvar_76.xxxx);
  detail_11 = tmpvar_87;
  highp vec4 tmpvar_88;
  tmpvar_88 = mix (detail_11, citylightoverlaydetailY_16, tmpvar_76.yyyy);
  detail_11 = tmpvar_88;
  mediump vec4 tmpvar_89;
  tmpvar_89 = (cityoverlay_21 * detail_11);
  mediump vec4 tmpvar_90;
  tmpvar_90 = (mix (mix (color_25, main_23, vec4(handoff_9)), tmpvar_89, tmpvar_89.wwww) * _Color);
  color_25 = tmpvar_90;
  highp vec3 tmpvar_91;
  tmpvar_91 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_91;
  highp vec3 tmpvar_92;
  tmpvar_92 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_92;
  highp float tmpvar_93;
  tmpvar_93 = clamp (dot (xlv_TEXCOORD5, lightDirection_6), 0.0, 1.0);
  TNdotL_5 = tmpvar_93;
  mediump float tmpvar_94;
  tmpvar_94 = clamp (dot (tmpvar_75, -(_SunDir)), 0.0, 1.0);
  mediump float tmpvar_95;
  tmpvar_95 = mix (TNdotL_5, tmpvar_94, handoff_9);
  lowp vec4 tmpvar_96;
  highp vec2 P_97;
  P_97 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_96 = texture2D (_LightTexture0, P_97);
  highp float tmpvar_98;
  tmpvar_98 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_99;
  tmpvar_99 = texture2D (_LightTextureB0, vec2(tmpvar_98));
  lowp float tmpvar_100;
  mediump float shadow_101;
  lowp vec4 tmpvar_102;
  tmpvar_102 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD4);
  highp float tmpvar_103;
  if ((tmpvar_102.x < (xlv_TEXCOORD4.z / xlv_TEXCOORD4.w))) {
    tmpvar_103 = _LightShadowData.x;
  } else {
    tmpvar_103 = 1.0;
  };
  shadow_101 = tmpvar_103;
  tmpvar_100 = shadow_101;
  highp float tmpvar_104;
  tmpvar_104 = (((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_96.w) * tmpvar_99.w) * tmpvar_100);
  atten_4 = tmpvar_104;
  mediump float tmpvar_105;
  tmpvar_105 = clamp ((((_LightColor0.w * tmpvar_95) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_106;
  tmpvar_106 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_105)), 0.0, 1.0);
  light_3 = tmpvar_106;
  highp float tmpvar_107;
  tmpvar_107 = clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0);
  terminator_2 = tmpvar_107;
  mediump vec3 tmpvar_108;
  tmpvar_108 = (light_3 * terminator_2);
  light_3 = tmpvar_108;
  highp vec3 tmpvar_109;
  tmpvar_109 = (tmpvar_90.xyz + (_Albedo * tmpvar_108));
  color_25.xyz = tmpvar_109;
  color_25.xyz = (color_25.xyz * tmpvar_108);
  citydarkoverlay_8.w = (tmpvar_86.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_94 - 0.01)) / 0.99) * 4.0) * atten_4), 0.0, 1.0), 0.0, 1.0)));
  color_25.xyz = mix (color_25, citydarkoverlay_8, citydarkoverlay_8.wwww).xyz;
  color_25.w = 1.0;
  tmpvar_1 = color_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  highp vec3 p_2;
  p_2 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_1;
  highp vec4 tmpvar_4;
  tmpvar_4.x = _glesMultiTexCoord0.x;
  tmpvar_4.y = _glesMultiTexCoord0.y;
  tmpvar_4.z = _glesMultiTexCoord1.x;
  tmpvar_4.w = _glesMultiTexCoord1.y;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_4).xyz);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float terminator_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float TNdotL_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump vec4 citydarkoverlay_8;
  mediump float handoff_9;
  mediump float detailLevel_10;
  mediump vec4 detail_11;
  mediump vec3 norm_12;
  highp vec2 localCoords_13;
  mediump vec4 encnorm_14;
  mediump vec4 citylightoverlaydetailZ_15;
  mediump vec4 citylightoverlaydetailY_16;
  mediump vec4 citylightoverlaydetailX_17;
  mediump vec4 citydarkoverlaydetailZ_18;
  mediump vec4 citydarkoverlaydetailY_19;
  mediump vec4 citydarkoverlaydetailX_20;
  mediump vec4 cityoverlay_21;
  mediump float vertLerp_22;
  mediump vec4 main_23;
  highp vec2 uv_24;
  mediump vec4 color_25;
  highp float r_26;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_26));
  uv_24.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_30;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_31;
    y_over_x_31 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_32;
    highp float x_33;
    x_33 = (y_over_x_31 * inversesqrt(((y_over_x_31 * y_over_x_31) + 1.0)));
    s_32 = (sign(x_33) * (1.5708 - (sqrt((1.0 - abs(x_33))) * (1.5708 + (abs(x_33) * (-0.214602 + (abs(x_33) * (0.0865667 + (abs(x_33) * -0.0310296)))))))));
    r_30 = s_32;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_30 = (s_32 + 3.14159);
      } else {
        r_30 = (r_30 - 3.14159);
      };
    };
  } else {
    r_30 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_34;
  tmpvar_34 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_MainTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  main_23 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD6.zy * _DetailScale);
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zx * _DetailScale);
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.xy * _DetailScale);
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  highp float tmpvar_45;
  tmpvar_45 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_22 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailVertTex, tmpvar_42);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailTex, tmpvar_39);
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_47, vec4(vertLerp_22));
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailVertTex, tmpvar_43);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailTex, tmpvar_40);
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (tmpvar_49, tmpvar_50, vec4(vertLerp_22));
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailVertTex, tmpvar_44);
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailTex, tmpvar_41);
  mediump vec4 tmpvar_54;
  tmpvar_54 = mix (tmpvar_52, tmpvar_53, vec4(vertLerp_22));
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2DGradEXT (_CityOverlayTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  cityoverlay_21 = tmpvar_55;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_56 = texture2D (_CityDarkOverlayDetailTex, P_57);
  citydarkoverlaydetailX_20 = tmpvar_56;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityDarkOverlayDetailTex, P_59);
  citydarkoverlaydetailY_19 = tmpvar_58;
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_60 = texture2D (_CityDarkOverlayDetailTex, P_61);
  citydarkoverlaydetailZ_18 = tmpvar_60;
  lowp vec4 tmpvar_62;
  highp vec2 P_63;
  P_63 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_62 = texture2D (_CityLightOverlayDetailTex, P_63);
  citylightoverlaydetailX_17 = tmpvar_62;
  lowp vec4 tmpvar_64;
  highp vec2 P_65;
  P_65 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_64 = texture2D (_CityLightOverlayDetailTex, P_65);
  citylightoverlaydetailY_16 = tmpvar_64;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_66 = texture2D (_CityLightOverlayDetailTex, P_67);
  citylightoverlaydetailZ_15 = tmpvar_66;
  lowp vec4 tmpvar_68;
  tmpvar_68 = texture2DGradEXT (_BumpMap, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  encnorm_14 = tmpvar_68;
  mediump vec2 tmpvar_69;
  tmpvar_69 = encnorm_14.wy;
  localCoords_13 = tmpvar_69;
  highp vec2 tmpvar_70;
  tmpvar_70 = (localCoords_13 - vec2(0.5, 0.5));
  localCoords_13.x = (tmpvar_70.x * 0.25);
  localCoords_13.y = (tmpvar_70.y * 0.5);
  uv_24.x = (uv_24.x - 0.5);
  highp vec2 tmpvar_71;
  tmpvar_71 = (uv_24 + localCoords_13);
  uv_24 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = cos((6.28319 * tmpvar_71.x));
  norm_12.z = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = sin((6.28319 * tmpvar_71.x));
  norm_12.x = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = cos((3.14159 * tmpvar_71.y));
  norm_12.y = tmpvar_74;
  mediump vec3 tmpvar_75;
  tmpvar_75 = -(norm_12);
  norm_12 = tmpvar_75;
  highp vec3 tmpvar_76;
  tmpvar_76 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (tmpvar_54, tmpvar_48, tmpvar_76.xxxx);
  detail_11 = tmpvar_77;
  highp vec4 tmpvar_78;
  tmpvar_78 = (0.25 * (mix (detail_11, tmpvar_51, tmpvar_76.yyyy) - 0.5));
  detail_11 = tmpvar_78;
  highp float tmpvar_79;
  tmpvar_79 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_10 = tmpvar_79;
  mediump vec4 tmpvar_80;
  tmpvar_80 = mix (detail_11, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_10));
  highp vec4 tmpvar_81;
  tmpvar_81 = (xlv_TEXCOORD1 + tmpvar_80);
  color_25 = tmpvar_81;
  highp float tmpvar_82;
  tmpvar_82 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_9 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0);
  cityoverlay_21.w = (cityoverlay_21.w * tmpvar_83);
  highp vec4 tmpvar_84;
  tmpvar_84 = mix (citydarkoverlaydetailZ_18, citydarkoverlaydetailX_20, tmpvar_76.xxxx);
  detail_11 = tmpvar_84;
  highp vec4 tmpvar_85;
  tmpvar_85 = mix (detail_11, citydarkoverlaydetailY_19, tmpvar_76.yyyy);
  detail_11 = tmpvar_85;
  mediump vec4 tmpvar_86;
  tmpvar_86 = (cityoverlay_21 * detail_11);
  citydarkoverlay_8 = tmpvar_86;
  highp vec4 tmpvar_87;
  tmpvar_87 = mix (citylightoverlaydetailZ_15, citylightoverlaydetailX_17, tmpvar_76.xxxx);
  detail_11 = tmpvar_87;
  highp vec4 tmpvar_88;
  tmpvar_88 = mix (detail_11, citylightoverlaydetailY_16, tmpvar_76.yyyy);
  detail_11 = tmpvar_88;
  mediump vec4 tmpvar_89;
  tmpvar_89 = (cityoverlay_21 * detail_11);
  mediump vec4 tmpvar_90;
  tmpvar_90 = (mix (mix (color_25, main_23, vec4(handoff_9)), tmpvar_89, tmpvar_89.wwww) * _Color);
  color_25 = tmpvar_90;
  highp vec3 tmpvar_91;
  tmpvar_91 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_91;
  highp vec3 tmpvar_92;
  tmpvar_92 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_92;
  highp float tmpvar_93;
  tmpvar_93 = clamp (dot (xlv_TEXCOORD5, lightDirection_6), 0.0, 1.0);
  TNdotL_5 = tmpvar_93;
  mediump float tmpvar_94;
  tmpvar_94 = clamp (dot (tmpvar_75, -(_SunDir)), 0.0, 1.0);
  mediump float tmpvar_95;
  tmpvar_95 = mix (TNdotL_5, tmpvar_94, handoff_9);
  lowp vec4 tmpvar_96;
  highp vec2 P_97;
  P_97 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_96 = texture2D (_LightTexture0, P_97);
  highp float tmpvar_98;
  tmpvar_98 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_99;
  tmpvar_99 = texture2D (_LightTextureB0, vec2(tmpvar_98));
  lowp float tmpvar_100;
  mediump float shadow_101;
  lowp vec4 tmpvar_102;
  tmpvar_102 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD4);
  highp float tmpvar_103;
  if ((tmpvar_102.x < (xlv_TEXCOORD4.z / xlv_TEXCOORD4.w))) {
    tmpvar_103 = _LightShadowData.x;
  } else {
    tmpvar_103 = 1.0;
  };
  shadow_101 = tmpvar_103;
  tmpvar_100 = shadow_101;
  highp float tmpvar_104;
  tmpvar_104 = (((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_96.w) * tmpvar_99.w) * tmpvar_100);
  atten_4 = tmpvar_104;
  mediump float tmpvar_105;
  tmpvar_105 = clamp ((((_LightColor0.w * tmpvar_95) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_106;
  tmpvar_106 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_105)), 0.0, 1.0);
  light_3 = tmpvar_106;
  highp float tmpvar_107;
  tmpvar_107 = clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0);
  terminator_2 = tmpvar_107;
  mediump vec3 tmpvar_108;
  tmpvar_108 = (light_3 * terminator_2);
  light_3 = tmpvar_108;
  highp vec3 tmpvar_109;
  tmpvar_109 = (tmpvar_90.xyz + (_Albedo * tmpvar_108));
  color_25.xyz = tmpvar_109;
  color_25.xyz = (color_25.xyz * tmpvar_108);
  citydarkoverlay_8.w = (tmpvar_86.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_94 - 0.01)) / 0.99) * 4.0) * atten_4), 0.0, 1.0), 0.0, 1.0)));
  color_25.xyz = mix (color_25, citydarkoverlay_8, citydarkoverlay_8.wwww).xyz;
  color_25.w = 1.0;
  tmpvar_1 = color_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 332
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 437
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 objnormal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
};
#line 427
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 323
uniform sampler2D _LightTextureB0;
#line 328
#line 342
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 355
#line 363
#line 377
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 410
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 414
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 418
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp mat4 _Rotation;
#line 422
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 426
uniform sampler2D _CityLightOverlayDetailTex;
#line 449
#line 475
#line 449
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 453
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    #line 457
    o.color = v.color;
    o.objnormal = v.normal;
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    #line 462
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.objnormal);
    xlv_TEXCOORD3 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereCoords);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 332
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 437
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 objnormal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
};
#line 427
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 323
uniform sampler2D _LightTextureB0;
#line 328
#line 342
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 355
#line 363
#line 377
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 410
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 414
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 418
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp mat4 _Rotation;
#line 422
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 426
uniform sampler2D _CityLightOverlayDetailTex;
#line 449
#line 475
#line 464
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 466
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 470
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 328
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 324
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 316
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    mediump float shadow = (( (textureProj( _ShadowMapTexture, shadowCoord).x < (shadowCoord.z / shadowCoord.w)) ) ? ( _LightShadowData.x ) : ( 1.0 ));
    #line 319
    return shadow;
}
#line 475
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    #line 479
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 483
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    highp vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    highp vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    highp vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    #line 487
    highp vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    highp vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    highp vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, (-IN.sphereCoords))) - 0.95)) + 0.5));
    #line 491
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    #line 495
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    #line 499
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    highp vec2 localCoords = encnorm.wy;
    #line 503
    localCoords -= vec2( 0.5);
    localCoords.x *= 0.25;
    localCoords.y *= 0.5;
    uv.x -= 0.5;
    #line 507
    uv += localCoords;
    mediump vec3 norm;
    norm.z = cos((6.28319 * uv.x));
    norm.x = sin((6.28319 * uv.x));
    #line 511
    norm.y = cos((3.14159 * uv.y));
    norm = (-norm);
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    #line 515
    detail = (0.25 * (mix( detail, detailY, vec4( sphereNrm.y)) - 0.5));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (IN.color + mix( detail.xyzw, vec4( 0.0), vec4( detailLevel)));
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    #line 519
    color = mix( color, main, vec4( handoff));
    cityoverlay.w *= xll_saturate_f(floor((IN.color.w + 0.99)));
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    #line 523
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    #line 527
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    #line 531
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * unitySampleShadow( IN._ShadowCoord));
    #line 535
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    mediump float terminator = xll_saturate_f(floor((1.01 + dot( IN.sphereCoords, _SunDir))));
    light *= terminator;
    #line 539
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (SNdotL - 0.01)) / 0.99) * 4.0) * atten));
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    #line 543
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.objnormal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform mat4 unity_World2Shadow[4];
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec4 tmpvar_3;
  tmpvar_3.x = gl_MultiTexCoord0.x;
  tmpvar_3.y = gl_MultiTexCoord0.y;
  tmpvar_3.z = gl_MultiTexCoord1.x;
  tmpvar_3.w = gl_MultiTexCoord1.y;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * gl_Vertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_3).xyz);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform sampler2DShadow _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec3 norm_2;
  vec2 localCoords_3;
  vec4 cityoverlay_4;
  vec2 uv_5;
  vec4 color_6;
  float r_7;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_5.x = (0.5 + (0.159155 * r_7));
  uv_5.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_11;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_12;
    y_over_x_12 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_13;
    float x_14;
    x_14 = (y_over_x_12 * inversesqrt(((y_over_x_12 * y_over_x_12) + 1.0)));
    s_13 = (sign(x_14) * (1.5708 - (sqrt((1.0 - abs(x_14))) * (1.5708 + (abs(x_14) * (-0.214602 + (abs(x_14) * (0.0865667 + (abs(x_14) * -0.0310296)))))))));
    r_11 = s_13;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_11 = (s_13 + 3.14159);
      } else {
        r_11 = (r_11 - 3.14159);
      };
    };
  } else {
    r_11 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_15;
  tmpvar_15 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_16;
  tmpvar_16 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_17;
  tmpvar_17 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_18;
  tmpvar_18.x = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_18.y = dFdx(tmpvar_15);
  tmpvar_18.z = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_18.w = dFdy(tmpvar_15);
  vec4 tmpvar_19;
  tmpvar_19 = texture2DGradARB (_MainTex, uv_5, tmpvar_18.xy, tmpvar_18.zw);
  float tmpvar_20;
  tmpvar_20 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_21;
  tmpvar_21 = texture2DGradARB (_CityOverlayTex, uv_5, tmpvar_18.xy, tmpvar_18.zw);
  cityoverlay_4.xyz = tmpvar_21.xyz;
  vec2 tmpvar_22;
  tmpvar_22 = (texture2DGradARB (_BumpMap, uv_5, tmpvar_18.xy, tmpvar_18.zw).wy - vec2(0.5, 0.5));
  localCoords_3.x = (tmpvar_22.x * 0.25);
  localCoords_3.y = (tmpvar_22.y * 0.5);
  uv_5.x = (uv_5.x - 0.5);
  vec2 tmpvar_23;
  tmpvar_23 = (uv_5 + localCoords_3);
  uv_5 = tmpvar_23;
  norm_2.z = cos((6.28319 * tmpvar_23.x));
  norm_2.x = sin((6.28319 * tmpvar_23.x));
  norm_2.y = cos((3.14159 * tmpvar_23.y));
  vec3 tmpvar_24;
  tmpvar_24 = -(norm_2);
  norm_2 = tmpvar_24;
  vec3 tmpvar_25;
  tmpvar_25 = abs(xlv_TEXCOORD6);
  float tmpvar_26;
  tmpvar_26 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  cityoverlay_4.w = (tmpvar_21.w * clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0));
  vec4 tmpvar_27;
  tmpvar_27 = (cityoverlay_4 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_25.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_25.yyyy));
  citydarkoverlay_1.xyz = tmpvar_27.xyz;
  vec4 tmpvar_28;
  tmpvar_28 = (cityoverlay_4 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_25.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_25.yyyy));
  vec4 tmpvar_29;
  tmpvar_29 = (mix (mix ((xlv_TEXCOORD1 + mix ((0.25 * (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_20)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_20)), tmpvar_25.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_20)), tmpvar_25.yyyy) - 0.5)), vec4(0.0, 0.0, 0.0, 0.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))), tmpvar_19, vec4(tmpvar_26)), tmpvar_28, tmpvar_28.wwww) * _Color);
  color_6.w = tmpvar_29.w;
  float tmpvar_30;
  tmpvar_30 = clamp (dot (tmpvar_24, -(_SunDir)), 0.0, 1.0);
  float tmpvar_31;
  tmpvar_31 = (((float((xlv_TEXCOORD3.z > 0.0)) * texture2D (_LightTexture0, ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5)).w) * texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz))).w) * (_LightShadowData.x + (shadow2DProj (_ShadowMapTexture, xlv_TEXCOORD4).x * (1.0 - _LightShadowData.x))));
  vec3 tmpvar_32;
  tmpvar_32 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * mix (clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), tmpvar_30, tmpvar_26)) * 4.0) * tmpvar_31), 0.0, 1.0))), 0.0, 1.0) * clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0));
  color_6.xyz = (tmpvar_29.xyz + (_Albedo * tmpvar_32));
  color_6.xyz = (color_6.xyz * tmpvar_32);
  citydarkoverlay_1.w = (tmpvar_27.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_30 - 0.01)) / 0.99) * 4.0) * tmpvar_31), 0.0, 1.0), 0.0, 1.0)));
  color_6.xyz = mix (color_6, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_6.w = 1.0;
  gl_FragData[0] = color_6;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Matrix 4 [unity_World2Shadow0]
Matrix 8 [_Object2World]
Matrix 12 [_LightMatrix0]
"vs_3_0
; 36 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
def c17, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
mov r1.xyz, v2
mov r1.w, c17.x
dp4 r2.z, r1, c10
dp4 r2.x, r1, c8
dp4 r2.y, r1, c9
mov r0.zw, v4.xyxy
mov r0.xy, v3
dp4 r2.w, r0, r0
rsq r1.x, r2.w
mul r0.xyz, r1.x, r0
mov o7.xyz, -r0
dp3 r0.w, r2, r2
rsq r0.w, r0.w
mul o6.xyz, r0.w, r2
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
dp4 r0.w, v0, c11
add r1.xyz, -r0, c16
dp3 r1.x, r1, r1
rsq r1.x, r1.x
mov o2, v1
dp4 o4.w, r0, c15
dp4 o4.z, r0, c14
dp4 o4.y, r0, c13
dp4 o4.x, r0, c12
dp4 o5.w, r0, c7
dp4 o5.z, r0, c6
dp4 o5.y, r0, c5
dp4 o5.x, r0, c4
rcp o1.x, r1.x
mov o3.xyz, v2
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  highp vec3 p_2;
  p_2 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_1;
  highp vec4 tmpvar_4;
  tmpvar_4.x = _glesMultiTexCoord0.x;
  tmpvar_4.y = _glesMultiTexCoord0.y;
  tmpvar_4.z = _glesMultiTexCoord1.x;
  tmpvar_4.w = _glesMultiTexCoord1.y;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_4).xyz);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shadow_samplers : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float terminator_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float TNdotL_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump vec4 citydarkoverlay_8;
  mediump float handoff_9;
  mediump float detailLevel_10;
  mediump vec4 detail_11;
  mediump vec3 norm_12;
  highp vec2 localCoords_13;
  mediump vec4 encnorm_14;
  mediump vec4 citylightoverlaydetailZ_15;
  mediump vec4 citylightoverlaydetailY_16;
  mediump vec4 citylightoverlaydetailX_17;
  mediump vec4 citydarkoverlaydetailZ_18;
  mediump vec4 citydarkoverlaydetailY_19;
  mediump vec4 citydarkoverlaydetailX_20;
  mediump vec4 cityoverlay_21;
  mediump float vertLerp_22;
  mediump vec4 main_23;
  highp vec2 uv_24;
  mediump vec4 color_25;
  highp float r_26;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_26));
  uv_24.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_30;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_31;
    y_over_x_31 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_32;
    highp float x_33;
    x_33 = (y_over_x_31 * inversesqrt(((y_over_x_31 * y_over_x_31) + 1.0)));
    s_32 = (sign(x_33) * (1.5708 - (sqrt((1.0 - abs(x_33))) * (1.5708 + (abs(x_33) * (-0.214602 + (abs(x_33) * (0.0865667 + (abs(x_33) * -0.0310296)))))))));
    r_30 = s_32;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_30 = (s_32 + 3.14159);
      } else {
        r_30 = (r_30 - 3.14159);
      };
    };
  } else {
    r_30 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_34;
  tmpvar_34 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_MainTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  main_23 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD6.zy * _DetailScale);
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zx * _DetailScale);
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.xy * _DetailScale);
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  highp float tmpvar_45;
  tmpvar_45 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_22 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailVertTex, tmpvar_42);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailTex, tmpvar_39);
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_47, vec4(vertLerp_22));
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailVertTex, tmpvar_43);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailTex, tmpvar_40);
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (tmpvar_49, tmpvar_50, vec4(vertLerp_22));
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailVertTex, tmpvar_44);
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailTex, tmpvar_41);
  mediump vec4 tmpvar_54;
  tmpvar_54 = mix (tmpvar_52, tmpvar_53, vec4(vertLerp_22));
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2DGradEXT (_CityOverlayTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  cityoverlay_21 = tmpvar_55;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_56 = texture2D (_CityDarkOverlayDetailTex, P_57);
  citydarkoverlaydetailX_20 = tmpvar_56;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityDarkOverlayDetailTex, P_59);
  citydarkoverlaydetailY_19 = tmpvar_58;
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_60 = texture2D (_CityDarkOverlayDetailTex, P_61);
  citydarkoverlaydetailZ_18 = tmpvar_60;
  lowp vec4 tmpvar_62;
  highp vec2 P_63;
  P_63 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_62 = texture2D (_CityLightOverlayDetailTex, P_63);
  citylightoverlaydetailX_17 = tmpvar_62;
  lowp vec4 tmpvar_64;
  highp vec2 P_65;
  P_65 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_64 = texture2D (_CityLightOverlayDetailTex, P_65);
  citylightoverlaydetailY_16 = tmpvar_64;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_66 = texture2D (_CityLightOverlayDetailTex, P_67);
  citylightoverlaydetailZ_15 = tmpvar_66;
  lowp vec4 tmpvar_68;
  tmpvar_68 = texture2DGradEXT (_BumpMap, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  encnorm_14 = tmpvar_68;
  mediump vec2 tmpvar_69;
  tmpvar_69 = encnorm_14.wy;
  localCoords_13 = tmpvar_69;
  highp vec2 tmpvar_70;
  tmpvar_70 = (localCoords_13 - vec2(0.5, 0.5));
  localCoords_13.x = (tmpvar_70.x * 0.25);
  localCoords_13.y = (tmpvar_70.y * 0.5);
  uv_24.x = (uv_24.x - 0.5);
  highp vec2 tmpvar_71;
  tmpvar_71 = (uv_24 + localCoords_13);
  uv_24 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = cos((6.28319 * tmpvar_71.x));
  norm_12.z = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = sin((6.28319 * tmpvar_71.x));
  norm_12.x = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = cos((3.14159 * tmpvar_71.y));
  norm_12.y = tmpvar_74;
  mediump vec3 tmpvar_75;
  tmpvar_75 = -(norm_12);
  norm_12 = tmpvar_75;
  highp vec3 tmpvar_76;
  tmpvar_76 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (tmpvar_54, tmpvar_48, tmpvar_76.xxxx);
  detail_11 = tmpvar_77;
  highp vec4 tmpvar_78;
  tmpvar_78 = (0.25 * (mix (detail_11, tmpvar_51, tmpvar_76.yyyy) - 0.5));
  detail_11 = tmpvar_78;
  highp float tmpvar_79;
  tmpvar_79 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_10 = tmpvar_79;
  mediump vec4 tmpvar_80;
  tmpvar_80 = mix (detail_11, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_10));
  highp vec4 tmpvar_81;
  tmpvar_81 = (xlv_TEXCOORD1 + tmpvar_80);
  color_25 = tmpvar_81;
  highp float tmpvar_82;
  tmpvar_82 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_9 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0);
  cityoverlay_21.w = (cityoverlay_21.w * tmpvar_83);
  highp vec4 tmpvar_84;
  tmpvar_84 = mix (citydarkoverlaydetailZ_18, citydarkoverlaydetailX_20, tmpvar_76.xxxx);
  detail_11 = tmpvar_84;
  highp vec4 tmpvar_85;
  tmpvar_85 = mix (detail_11, citydarkoverlaydetailY_19, tmpvar_76.yyyy);
  detail_11 = tmpvar_85;
  mediump vec4 tmpvar_86;
  tmpvar_86 = (cityoverlay_21 * detail_11);
  citydarkoverlay_8.xyz = tmpvar_86.xyz;
  highp vec4 tmpvar_87;
  tmpvar_87 = mix (citylightoverlaydetailZ_15, citylightoverlaydetailX_17, tmpvar_76.xxxx);
  detail_11 = tmpvar_87;
  highp vec4 tmpvar_88;
  tmpvar_88 = mix (detail_11, citylightoverlaydetailY_16, tmpvar_76.yyyy);
  detail_11 = tmpvar_88;
  mediump vec4 tmpvar_89;
  tmpvar_89 = (cityoverlay_21 * detail_11);
  mediump vec4 tmpvar_90;
  tmpvar_90 = (mix (mix (color_25, main_23, vec4(handoff_9)), tmpvar_89, tmpvar_89.wwww) * _Color);
  color_25.w = tmpvar_90.w;
  highp vec3 tmpvar_91;
  tmpvar_91 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_91;
  highp vec3 tmpvar_92;
  tmpvar_92 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_92;
  highp float tmpvar_93;
  tmpvar_93 = clamp (dot (xlv_TEXCOORD5, lightDirection_6), 0.0, 1.0);
  TNdotL_5 = tmpvar_93;
  mediump float tmpvar_94;
  tmpvar_94 = clamp (dot (tmpvar_75, -(_SunDir)), 0.0, 1.0);
  lowp vec4 tmpvar_95;
  highp vec2 P_96;
  P_96 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_95 = texture2D (_LightTexture0, P_96);
  highp float tmpvar_97;
  tmpvar_97 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_98;
  tmpvar_98 = texture2D (_LightTextureB0, vec2(tmpvar_97));
  lowp float tmpvar_99;
  mediump float shadow_100;
  lowp float tmpvar_101;
  tmpvar_101 = shadow2DProjEXT (_ShadowMapTexture, xlv_TEXCOORD4);
  shadow_100 = tmpvar_101;
  highp float tmpvar_102;
  tmpvar_102 = (_LightShadowData.x + (shadow_100 * (1.0 - _LightShadowData.x)));
  shadow_100 = tmpvar_102;
  tmpvar_99 = shadow_100;
  highp float tmpvar_103;
  tmpvar_103 = (((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_95.w) * tmpvar_98.w) * tmpvar_99);
  atten_4 = tmpvar_103;
  mediump float tmpvar_104;
  tmpvar_104 = clamp ((((_LightColor0.w * mix (TNdotL_5, tmpvar_94, handoff_9)) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_105;
  tmpvar_105 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_104)), 0.0, 1.0);
  light_3 = tmpvar_105;
  highp float tmpvar_106;
  tmpvar_106 = clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0);
  terminator_2 = tmpvar_106;
  mediump vec3 tmpvar_107;
  tmpvar_107 = (light_3 * terminator_2);
  light_3 = tmpvar_107;
  highp vec3 tmpvar_108;
  tmpvar_108 = (tmpvar_90.xyz + (_Albedo * tmpvar_107));
  color_25.xyz = tmpvar_108;
  color_25.xyz = (color_25.xyz * tmpvar_107);
  citydarkoverlay_8.w = (tmpvar_86.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_94 - 0.01)) / 0.99) * 4.0) * atten_4), 0.0, 1.0), 0.0, 1.0)));
  color_25.xyz = mix (color_25, citydarkoverlay_8, citydarkoverlay_8.wwww).xyz;
  color_25.w = 1.0;
  tmpvar_1 = color_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 333
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 438
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 objnormal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
};
#line 428
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 323
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 343
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 356
#line 364
#line 378
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 411
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 415
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 419
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp mat4 _Rotation;
#line 423
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 427
uniform sampler2D _CityLightOverlayDetailTex;
#line 450
#line 476
#line 450
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 454
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    #line 458
    o.color = v.color;
    o.objnormal = v.normal;
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    #line 463
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.objnormal);
    xlv_TEXCOORD3 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereCoords);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_shadow2Dproj(mediump sampler2DShadow s, vec4 coord) { return textureProj (s, coord); }
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 333
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 438
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 objnormal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
};
#line 428
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 323
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 343
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 356
#line 364
#line 378
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 411
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 415
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 419
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp mat4 _Rotation;
#line 423
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 427
uniform sampler2D _CityLightOverlayDetailTex;
#line 450
#line 476
#line 465
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 467
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 471
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 329
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    #line 331
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 325
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    #line 327
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 316
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    mediump float shadow = xll_shadow2Dproj( _ShadowMapTexture, shadowCoord);
    #line 319
    shadow = (_LightShadowData.x + (shadow * (1.0 - _LightShadowData.x)));
    return shadow;
}
#line 476
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    #line 480
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 484
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    highp vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    highp vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    highp vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    #line 488
    highp vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    highp vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    highp vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, (-IN.sphereCoords))) - 0.95)) + 0.5));
    #line 492
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    #line 496
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    #line 500
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    highp vec2 localCoords = encnorm.wy;
    #line 504
    localCoords -= vec2( 0.5);
    localCoords.x *= 0.25;
    localCoords.y *= 0.5;
    uv.x -= 0.5;
    #line 508
    uv += localCoords;
    mediump vec3 norm;
    norm.z = cos((6.28319 * uv.x));
    norm.x = sin((6.28319 * uv.x));
    #line 512
    norm.y = cos((3.14159 * uv.y));
    norm = (-norm);
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    #line 516
    detail = (0.25 * (mix( detail, detailY, vec4( sphereNrm.y)) - 0.5));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (IN.color + mix( detail.xyzw, vec4( 0.0), vec4( detailLevel)));
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    #line 520
    color = mix( color, main, vec4( handoff));
    cityoverlay.w *= xll_saturate_f(floor((IN.color.w + 0.99)));
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    #line 524
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    #line 528
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    #line 532
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * unitySampleShadow( IN._ShadowCoord));
    #line 536
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    mediump float terminator = xll_saturate_f(floor((1.01 + dot( IN.sphereCoords, _SunDir))));
    light *= terminator;
    #line 540
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (SNdotL - 0.01)) / 0.99) * 4.0) * atten));
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    #line 544
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.objnormal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _Object2World;

uniform vec4 _ProjectionParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec3 p_2;
  p_2 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = gl_Normal;
  vec4 tmpvar_4;
  tmpvar_4.x = gl_MultiTexCoord0.x;
  tmpvar_4.y = gl_MultiTexCoord0.y;
  tmpvar_4.z = gl_MultiTexCoord1.x;
  tmpvar_4.w = gl_MultiTexCoord1.y;
  vec4 o_5;
  vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_1 * 0.5);
  vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_1.zw;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD3 = o_5;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_4).xyz);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec3 norm_2;
  vec2 localCoords_3;
  vec4 cityoverlay_4;
  vec2 uv_5;
  vec4 color_6;
  float r_7;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_5.x = (0.5 + (0.159155 * r_7));
  uv_5.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_11;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_12;
    y_over_x_12 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_13;
    float x_14;
    x_14 = (y_over_x_12 * inversesqrt(((y_over_x_12 * y_over_x_12) + 1.0)));
    s_13 = (sign(x_14) * (1.5708 - (sqrt((1.0 - abs(x_14))) * (1.5708 + (abs(x_14) * (-0.214602 + (abs(x_14) * (0.0865667 + (abs(x_14) * -0.0310296)))))))));
    r_11 = s_13;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_11 = (s_13 + 3.14159);
      } else {
        r_11 = (r_11 - 3.14159);
      };
    };
  } else {
    r_11 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_15;
  tmpvar_15 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_16;
  tmpvar_16 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_17;
  tmpvar_17 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_18;
  tmpvar_18.x = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_18.y = dFdx(tmpvar_15);
  tmpvar_18.z = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_18.w = dFdy(tmpvar_15);
  vec4 tmpvar_19;
  tmpvar_19 = texture2DGradARB (_MainTex, uv_5, tmpvar_18.xy, tmpvar_18.zw);
  float tmpvar_20;
  tmpvar_20 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_21;
  tmpvar_21 = texture2DGradARB (_CityOverlayTex, uv_5, tmpvar_18.xy, tmpvar_18.zw);
  cityoverlay_4.xyz = tmpvar_21.xyz;
  vec2 tmpvar_22;
  tmpvar_22 = (texture2DGradARB (_BumpMap, uv_5, tmpvar_18.xy, tmpvar_18.zw).wy - vec2(0.5, 0.5));
  localCoords_3.x = (tmpvar_22.x * 0.25);
  localCoords_3.y = (tmpvar_22.y * 0.5);
  uv_5.x = (uv_5.x - 0.5);
  vec2 tmpvar_23;
  tmpvar_23 = (uv_5 + localCoords_3);
  uv_5 = tmpvar_23;
  norm_2.z = cos((6.28319 * tmpvar_23.x));
  norm_2.x = sin((6.28319 * tmpvar_23.x));
  norm_2.y = cos((3.14159 * tmpvar_23.y));
  vec3 tmpvar_24;
  tmpvar_24 = -(norm_2);
  norm_2 = tmpvar_24;
  vec3 tmpvar_25;
  tmpvar_25 = abs(xlv_TEXCOORD6);
  float tmpvar_26;
  tmpvar_26 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  cityoverlay_4.w = (tmpvar_21.w * clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0));
  vec4 tmpvar_27;
  tmpvar_27 = (cityoverlay_4 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_25.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_25.yyyy));
  citydarkoverlay_1.xyz = tmpvar_27.xyz;
  vec4 tmpvar_28;
  tmpvar_28 = (cityoverlay_4 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_25.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_25.yyyy));
  vec4 tmpvar_29;
  tmpvar_29 = (mix (mix ((xlv_TEXCOORD1 + mix ((0.25 * (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_20)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_20)), tmpvar_25.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_20)), tmpvar_25.yyyy) - 0.5)), vec4(0.0, 0.0, 0.0, 0.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))), tmpvar_19, vec4(tmpvar_26)), tmpvar_28, tmpvar_28.wwww) * _Color);
  color_6.w = tmpvar_29.w;
  float tmpvar_30;
  tmpvar_30 = clamp (dot (tmpvar_24, -(_SunDir)), 0.0, 1.0);
  vec4 tmpvar_31;
  tmpvar_31 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD3);
  vec3 tmpvar_32;
  tmpvar_32 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * mix (clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), tmpvar_30, tmpvar_26)) * 4.0) * tmpvar_31.x), 0.0, 1.0))), 0.0, 1.0) * clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0));
  color_6.xyz = (tmpvar_29.xyz + (_Albedo * tmpvar_32));
  color_6.xyz = (color_6.xyz * tmpvar_32);
  citydarkoverlay_1.w = (tmpvar_27.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_30 - 0.01)) / 0.99) * 4.0) * tmpvar_31.x), 0.0, 1.0), 0.0, 1.0)));
  color_6.xyz = mix (color_6, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_6.w = 1.0;
  gl_FragData[0] = color_6;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_WorldSpaceCameraPos]
Vector 9 [_ProjectionParams]
Vector 10 [_ScreenParams]
Matrix 4 [_Object2World]
"vs_3_0
; 32 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord5 o5
dcl_texcoord6 o6
def c11, 0.00000000, 0.50000000, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
mov r1.xyz, v2
mov r1.w, c11.x
dp4 r0.z, r1, c6
dp4 r0.x, r1, c4
dp4 r0.y, r1, c5
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o5.xyz, r0.w, r0
dp4 r0.w, v0, c3
dp4 r0.x, v0, c0
dp4 r0.y, v0, c1
mul r2.xyz, r0.xyww, c11.y
mul r2.y, r2, c9.x
mov r1.zw, v4.xyxy
mov r1.xy, v3
dp4 r1.w, r1, r1
rsq r0.z, r1.w
mul r1.xyz, r0.z, r1
mov o6.xyz, -r1
dp4 r0.z, v0, c2
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
add r1.xyz, -r1, c8
mov o0, r0
dp3 r0.x, r1, r1
rsq r0.x, r0.x
mad o4.xy, r2.z, c10.zwzw, r2
mov o2, v1
mov o4.zw, r0
rcp o1.x, r0.x
mov o3.xyz, v2
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  highp vec3 p_2;
  p_2 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_1;
  highp vec4 tmpvar_4;
  tmpvar_4.x = _glesMultiTexCoord0.x;
  tmpvar_4.y = _glesMultiTexCoord0.y;
  tmpvar_4.z = _glesMultiTexCoord1.x;
  tmpvar_4.w = _glesMultiTexCoord1.y;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_4).xyz);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float terminator_2;
  mediump vec3 light_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float handoff_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec3 norm_11;
  highp vec2 localCoords_12;
  mediump vec4 encnorm_13;
  mediump vec4 citylightoverlaydetailZ_14;
  mediump vec4 citylightoverlaydetailY_15;
  mediump vec4 citylightoverlaydetailX_16;
  mediump vec4 citydarkoverlaydetailZ_17;
  mediump vec4 citydarkoverlaydetailY_18;
  mediump vec4 citydarkoverlaydetailX_19;
  mediump vec4 cityoverlay_20;
  mediump float vertLerp_21;
  mediump vec4 main_22;
  highp vec2 uv_23;
  mediump vec4 color_24;
  highp float r_25;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_23.x = (0.5 + (0.159155 * r_25));
  uv_23.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_29;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_30;
    y_over_x_30 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_31;
    highp float x_32;
    x_32 = (y_over_x_30 * inversesqrt(((y_over_x_30 * y_over_x_30) + 1.0)));
    s_31 = (sign(x_32) * (1.5708 - (sqrt((1.0 - abs(x_32))) * (1.5708 + (abs(x_32) * (-0.214602 + (abs(x_32) * (0.0865667 + (abs(x_32) * -0.0310296)))))))));
    r_29 = s_31;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_29 = (s_31 + 3.14159);
      } else {
        r_29 = (r_29 - 3.14159);
      };
    };
  } else {
    r_29 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_33;
  tmpvar_33 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_34;
  tmpvar_34 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_36;
  tmpvar_36.x = (0.159155 * sqrt(dot (tmpvar_34, tmpvar_34)));
  tmpvar_36.y = dFdx(tmpvar_33);
  tmpvar_36.z = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_36.w = dFdy(tmpvar_33);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2DGradEXT (_MainTex, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  main_22 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD6.zy * _DetailScale);
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD6.zx * _DetailScale);
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.xy * _DetailScale);
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  highp float tmpvar_44;
  tmpvar_44 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_21 = tmpvar_44;
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, tmpvar_41);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, tmpvar_38);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_21));
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailVertTex, tmpvar_42);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailTex, tmpvar_39);
  mediump vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_49, vec4(vertLerp_21));
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailVertTex, tmpvar_43);
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailTex, tmpvar_40);
  mediump vec4 tmpvar_53;
  tmpvar_53 = mix (tmpvar_51, tmpvar_52, vec4(vertLerp_21));
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2DGradEXT (_CityOverlayTex, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  cityoverlay_20 = tmpvar_54;
  lowp vec4 tmpvar_55;
  highp vec2 P_56;
  P_56 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_55 = texture2D (_CityDarkOverlayDetailTex, P_56);
  citydarkoverlaydetailX_19 = tmpvar_55;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityDarkOverlayDetailTex, P_58);
  citydarkoverlaydetailY_18 = tmpvar_57;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_59 = texture2D (_CityDarkOverlayDetailTex, P_60);
  citydarkoverlaydetailZ_17 = tmpvar_59;
  lowp vec4 tmpvar_61;
  highp vec2 P_62;
  P_62 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_61 = texture2D (_CityLightOverlayDetailTex, P_62);
  citylightoverlaydetailX_16 = tmpvar_61;
  lowp vec4 tmpvar_63;
  highp vec2 P_64;
  P_64 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_63 = texture2D (_CityLightOverlayDetailTex, P_64);
  citylightoverlaydetailY_15 = tmpvar_63;
  lowp vec4 tmpvar_65;
  highp vec2 P_66;
  P_66 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_65 = texture2D (_CityLightOverlayDetailTex, P_66);
  citylightoverlaydetailZ_14 = tmpvar_65;
  lowp vec4 tmpvar_67;
  tmpvar_67 = texture2DGradEXT (_BumpMap, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  encnorm_13 = tmpvar_67;
  mediump vec2 tmpvar_68;
  tmpvar_68 = encnorm_13.wy;
  localCoords_12 = tmpvar_68;
  highp vec2 tmpvar_69;
  tmpvar_69 = (localCoords_12 - vec2(0.5, 0.5));
  localCoords_12.x = (tmpvar_69.x * 0.25);
  localCoords_12.y = (tmpvar_69.y * 0.5);
  uv_23.x = (uv_23.x - 0.5);
  highp vec2 tmpvar_70;
  tmpvar_70 = (uv_23 + localCoords_12);
  uv_23 = tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = cos((6.28319 * tmpvar_70.x));
  norm_11.z = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = sin((6.28319 * tmpvar_70.x));
  norm_11.x = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = cos((3.14159 * tmpvar_70.y));
  norm_11.y = tmpvar_73;
  mediump vec3 tmpvar_74;
  tmpvar_74 = -(norm_11);
  norm_11 = tmpvar_74;
  highp vec3 tmpvar_75;
  tmpvar_75 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (tmpvar_53, tmpvar_47, tmpvar_75.xxxx);
  detail_10 = tmpvar_76;
  highp vec4 tmpvar_77;
  tmpvar_77 = (0.25 * (mix (detail_10, tmpvar_50, tmpvar_75.yyyy) - 0.5));
  detail_10 = tmpvar_77;
  highp float tmpvar_78;
  tmpvar_78 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_9 = tmpvar_78;
  mediump vec4 tmpvar_79;
  tmpvar_79 = mix (detail_10, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_9));
  highp vec4 tmpvar_80;
  tmpvar_80 = (xlv_TEXCOORD1 + tmpvar_79);
  color_24 = tmpvar_80;
  highp float tmpvar_81;
  tmpvar_81 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_8 = tmpvar_81;
  highp float tmpvar_82;
  tmpvar_82 = clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0);
  cityoverlay_20.w = (cityoverlay_20.w * tmpvar_82);
  highp vec4 tmpvar_83;
  tmpvar_83 = mix (citydarkoverlaydetailZ_17, citydarkoverlaydetailX_19, tmpvar_75.xxxx);
  detail_10 = tmpvar_83;
  highp vec4 tmpvar_84;
  tmpvar_84 = mix (detail_10, citydarkoverlaydetailY_18, tmpvar_75.yyyy);
  detail_10 = tmpvar_84;
  mediump vec4 tmpvar_85;
  tmpvar_85 = (cityoverlay_20 * detail_10);
  citydarkoverlay_7.xyz = tmpvar_85.xyz;
  highp vec4 tmpvar_86;
  tmpvar_86 = mix (citylightoverlaydetailZ_14, citylightoverlaydetailX_16, tmpvar_75.xxxx);
  detail_10 = tmpvar_86;
  highp vec4 tmpvar_87;
  tmpvar_87 = mix (detail_10, citylightoverlaydetailY_15, tmpvar_75.yyyy);
  detail_10 = tmpvar_87;
  mediump vec4 tmpvar_88;
  tmpvar_88 = (cityoverlay_20 * detail_10);
  mediump vec4 tmpvar_89;
  tmpvar_89 = (mix (mix (color_24, main_22, vec4(handoff_8)), tmpvar_88, tmpvar_88.wwww) * _Color);
  color_24.w = tmpvar_89.w;
  highp vec3 tmpvar_90;
  tmpvar_90 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_90;
  lowp vec3 tmpvar_91;
  tmpvar_91 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_91;
  highp float tmpvar_92;
  tmpvar_92 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_92;
  mediump float tmpvar_93;
  tmpvar_93 = clamp (dot (tmpvar_74, -(_SunDir)), 0.0, 1.0);
  lowp float tmpvar_94;
  mediump float lightShadowDataX_95;
  highp float dist_96;
  lowp float tmpvar_97;
  tmpvar_97 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD3).x;
  dist_96 = tmpvar_97;
  highp float tmpvar_98;
  tmpvar_98 = _LightShadowData.x;
  lightShadowDataX_95 = tmpvar_98;
  highp float tmpvar_99;
  tmpvar_99 = max (float((dist_96 > (xlv_TEXCOORD3.z / xlv_TEXCOORD3.w))), lightShadowDataX_95);
  tmpvar_94 = tmpvar_99;
  mediump float tmpvar_100;
  tmpvar_100 = clamp ((((_LightColor0.w * mix (TNdotL_4, tmpvar_93, handoff_8)) * 4.0) * tmpvar_94), 0.0, 1.0);
  highp vec3 tmpvar_101;
  tmpvar_101 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_100)), 0.0, 1.0);
  light_3 = tmpvar_101;
  highp float tmpvar_102;
  tmpvar_102 = clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0);
  terminator_2 = tmpvar_102;
  mediump vec3 tmpvar_103;
  tmpvar_103 = (light_3 * terminator_2);
  light_3 = tmpvar_103;
  highp vec3 tmpvar_104;
  tmpvar_104 = (tmpvar_89.xyz + (_Albedo * tmpvar_103));
  color_24.xyz = tmpvar_104;
  color_24.xyz = (color_24.xyz * tmpvar_103);
  citydarkoverlay_7.w = (tmpvar_85.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_93 - 0.01)) / 0.99) * 4.0) * tmpvar_94), 0.0, 1.0), 0.0, 1.0)));
  color_24.xyz = mix (color_24, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_24.w = 1.0;
  tmpvar_1 = color_24;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  highp vec4 tmpvar_5;
  tmpvar_5.x = _glesMultiTexCoord0.x;
  tmpvar_5.y = _glesMultiTexCoord0.y;
  tmpvar_5.z = _glesMultiTexCoord1.x;
  tmpvar_5.w = _glesMultiTexCoord1.y;
  highp vec4 o_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_8;
  tmpvar_8.x = tmpvar_7.x;
  tmpvar_8.y = (tmpvar_7.y * _ProjectionParams.x);
  o_6.xy = (tmpvar_8 + tmpvar_7.w);
  o_6.zw = tmpvar_2.zw;
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_6;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_5).xyz);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float terminator_2;
  mediump vec3 light_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float handoff_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec3 norm_11;
  highp vec2 localCoords_12;
  mediump vec4 encnorm_13;
  mediump vec4 citylightoverlaydetailZ_14;
  mediump vec4 citylightoverlaydetailY_15;
  mediump vec4 citylightoverlaydetailX_16;
  mediump vec4 citydarkoverlaydetailZ_17;
  mediump vec4 citydarkoverlaydetailY_18;
  mediump vec4 citydarkoverlaydetailX_19;
  mediump vec4 cityoverlay_20;
  mediump float vertLerp_21;
  mediump vec4 main_22;
  highp vec2 uv_23;
  mediump vec4 color_24;
  highp float r_25;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_23.x = (0.5 + (0.159155 * r_25));
  uv_23.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_29;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_30;
    y_over_x_30 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_31;
    highp float x_32;
    x_32 = (y_over_x_30 * inversesqrt(((y_over_x_30 * y_over_x_30) + 1.0)));
    s_31 = (sign(x_32) * (1.5708 - (sqrt((1.0 - abs(x_32))) * (1.5708 + (abs(x_32) * (-0.214602 + (abs(x_32) * (0.0865667 + (abs(x_32) * -0.0310296)))))))));
    r_29 = s_31;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_29 = (s_31 + 3.14159);
      } else {
        r_29 = (r_29 - 3.14159);
      };
    };
  } else {
    r_29 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_33;
  tmpvar_33 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_34;
  tmpvar_34 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_36;
  tmpvar_36.x = (0.159155 * sqrt(dot (tmpvar_34, tmpvar_34)));
  tmpvar_36.y = dFdx(tmpvar_33);
  tmpvar_36.z = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_36.w = dFdy(tmpvar_33);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2DGradEXT (_MainTex, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  main_22 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD6.zy * _DetailScale);
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD6.zx * _DetailScale);
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.xy * _DetailScale);
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  highp float tmpvar_44;
  tmpvar_44 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_21 = tmpvar_44;
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, tmpvar_41);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, tmpvar_38);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_21));
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailVertTex, tmpvar_42);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailTex, tmpvar_39);
  mediump vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_49, vec4(vertLerp_21));
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailVertTex, tmpvar_43);
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailTex, tmpvar_40);
  mediump vec4 tmpvar_53;
  tmpvar_53 = mix (tmpvar_51, tmpvar_52, vec4(vertLerp_21));
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2DGradEXT (_CityOverlayTex, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  cityoverlay_20 = tmpvar_54;
  lowp vec4 tmpvar_55;
  highp vec2 P_56;
  P_56 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_55 = texture2D (_CityDarkOverlayDetailTex, P_56);
  citydarkoverlaydetailX_19 = tmpvar_55;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityDarkOverlayDetailTex, P_58);
  citydarkoverlaydetailY_18 = tmpvar_57;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_59 = texture2D (_CityDarkOverlayDetailTex, P_60);
  citydarkoverlaydetailZ_17 = tmpvar_59;
  lowp vec4 tmpvar_61;
  highp vec2 P_62;
  P_62 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_61 = texture2D (_CityLightOverlayDetailTex, P_62);
  citylightoverlaydetailX_16 = tmpvar_61;
  lowp vec4 tmpvar_63;
  highp vec2 P_64;
  P_64 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_63 = texture2D (_CityLightOverlayDetailTex, P_64);
  citylightoverlaydetailY_15 = tmpvar_63;
  lowp vec4 tmpvar_65;
  highp vec2 P_66;
  P_66 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_65 = texture2D (_CityLightOverlayDetailTex, P_66);
  citylightoverlaydetailZ_14 = tmpvar_65;
  lowp vec4 tmpvar_67;
  tmpvar_67 = texture2DGradEXT (_BumpMap, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  encnorm_13 = tmpvar_67;
  mediump vec2 tmpvar_68;
  tmpvar_68 = encnorm_13.wy;
  localCoords_12 = tmpvar_68;
  highp vec2 tmpvar_69;
  tmpvar_69 = (localCoords_12 - vec2(0.5, 0.5));
  localCoords_12.x = (tmpvar_69.x * 0.25);
  localCoords_12.y = (tmpvar_69.y * 0.5);
  uv_23.x = (uv_23.x - 0.5);
  highp vec2 tmpvar_70;
  tmpvar_70 = (uv_23 + localCoords_12);
  uv_23 = tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = cos((6.28319 * tmpvar_70.x));
  norm_11.z = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = sin((6.28319 * tmpvar_70.x));
  norm_11.x = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = cos((3.14159 * tmpvar_70.y));
  norm_11.y = tmpvar_73;
  mediump vec3 tmpvar_74;
  tmpvar_74 = -(norm_11);
  norm_11 = tmpvar_74;
  highp vec3 tmpvar_75;
  tmpvar_75 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (tmpvar_53, tmpvar_47, tmpvar_75.xxxx);
  detail_10 = tmpvar_76;
  highp vec4 tmpvar_77;
  tmpvar_77 = (0.25 * (mix (detail_10, tmpvar_50, tmpvar_75.yyyy) - 0.5));
  detail_10 = tmpvar_77;
  highp float tmpvar_78;
  tmpvar_78 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_9 = tmpvar_78;
  mediump vec4 tmpvar_79;
  tmpvar_79 = mix (detail_10, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_9));
  highp vec4 tmpvar_80;
  tmpvar_80 = (xlv_TEXCOORD1 + tmpvar_79);
  color_24 = tmpvar_80;
  highp float tmpvar_81;
  tmpvar_81 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_8 = tmpvar_81;
  highp float tmpvar_82;
  tmpvar_82 = clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0);
  cityoverlay_20.w = (cityoverlay_20.w * tmpvar_82);
  highp vec4 tmpvar_83;
  tmpvar_83 = mix (citydarkoverlaydetailZ_17, citydarkoverlaydetailX_19, tmpvar_75.xxxx);
  detail_10 = tmpvar_83;
  highp vec4 tmpvar_84;
  tmpvar_84 = mix (detail_10, citydarkoverlaydetailY_18, tmpvar_75.yyyy);
  detail_10 = tmpvar_84;
  mediump vec4 tmpvar_85;
  tmpvar_85 = (cityoverlay_20 * detail_10);
  citydarkoverlay_7.xyz = tmpvar_85.xyz;
  highp vec4 tmpvar_86;
  tmpvar_86 = mix (citylightoverlaydetailZ_14, citylightoverlaydetailX_16, tmpvar_75.xxxx);
  detail_10 = tmpvar_86;
  highp vec4 tmpvar_87;
  tmpvar_87 = mix (detail_10, citylightoverlaydetailY_15, tmpvar_75.yyyy);
  detail_10 = tmpvar_87;
  mediump vec4 tmpvar_88;
  tmpvar_88 = (cityoverlay_20 * detail_10);
  mediump vec4 tmpvar_89;
  tmpvar_89 = (mix (mix (color_24, main_22, vec4(handoff_8)), tmpvar_88, tmpvar_88.wwww) * _Color);
  color_24.w = tmpvar_89.w;
  highp vec3 tmpvar_90;
  tmpvar_90 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_90;
  lowp vec3 tmpvar_91;
  tmpvar_91 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_91;
  highp float tmpvar_92;
  tmpvar_92 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_92;
  mediump float tmpvar_93;
  tmpvar_93 = clamp (dot (tmpvar_74, -(_SunDir)), 0.0, 1.0);
  lowp vec4 tmpvar_94;
  tmpvar_94 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD3);
  mediump float tmpvar_95;
  tmpvar_95 = clamp ((((_LightColor0.w * mix (TNdotL_4, tmpvar_93, handoff_8)) * 4.0) * tmpvar_94.x), 0.0, 1.0);
  highp vec3 tmpvar_96;
  tmpvar_96 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_95)), 0.0, 1.0);
  light_3 = tmpvar_96;
  highp float tmpvar_97;
  tmpvar_97 = clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0);
  terminator_2 = tmpvar_97;
  mediump vec3 tmpvar_98;
  tmpvar_98 = (light_3 * terminator_2);
  light_3 = tmpvar_98;
  highp vec3 tmpvar_99;
  tmpvar_99 = (tmpvar_89.xyz + (_Albedo * tmpvar_98));
  color_24.xyz = tmpvar_99;
  color_24.xyz = (color_24.xyz * tmpvar_98);
  citydarkoverlay_7.w = (tmpvar_85.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_93 - 0.01)) / 0.99) * 4.0) * tmpvar_94.x), 0.0, 1.0), 0.0, 1.0)));
  color_24.xyz = mix (color_24, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_24.w = 1.0;
  tmpvar_1 = color_24;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 323
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 428
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 objnormal;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
};
#line 418
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 333
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 346
#line 354
#line 368
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 401
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 405
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 409
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp mat4 _Rotation;
#line 413
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 417
uniform sampler2D _CityLightOverlayDetailTex;
#line 439
#line 464
#line 439
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 443
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    #line 447
    o.color = v.color;
    o.objnormal = v.normal;
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    #line 451
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.objnormal);
    xlv_TEXCOORD3 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereCoords);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 323
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 428
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 objnormal;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
};
#line 418
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 333
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 346
#line 354
#line 368
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 401
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 405
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 409
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp mat4 _Rotation;
#line 413
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 417
uniform sampler2D _CityLightOverlayDetailTex;
#line 439
#line 464
#line 453
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 455
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 459
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 317
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    #line 319
    highp float dist = textureProj( _ShadowMapTexture, shadowCoord).x;
    mediump float lightShadowDataX = _LightShadowData.x;
    return max( float((dist > (shadowCoord.z / shadowCoord.w))), lightShadowDataX);
}
#line 464
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    #line 468
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 472
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    highp vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    highp vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    highp vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    #line 476
    highp vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    highp vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    highp vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, (-IN.sphereCoords))) - 0.95)) + 0.5));
    #line 480
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    #line 484
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    #line 488
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    highp vec2 localCoords = encnorm.wy;
    #line 492
    localCoords -= vec2( 0.5);
    localCoords.x *= 0.25;
    localCoords.y *= 0.5;
    uv.x -= 0.5;
    #line 496
    uv += localCoords;
    mediump vec3 norm;
    norm.z = cos((6.28319 * uv.x));
    norm.x = sin((6.28319 * uv.x));
    #line 500
    norm.y = cos((3.14159 * uv.y));
    norm = (-norm);
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    #line 504
    detail = (0.25 * (mix( detail, detailY, vec4( sphereNrm.y)) - 0.5));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (IN.color + mix( detail.xyzw, vec4( 0.0), vec4( detailLevel)));
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    #line 508
    color = mix( color, main, vec4( handoff));
    cityoverlay.w *= xll_saturate_f(floor((IN.color.w + 0.99)));
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    #line 512
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    #line 516
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    #line 520
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    lowp float atten = unitySampleShadow( IN._ShadowCoord);
    #line 524
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    mediump float terminator = xll_saturate_f(floor((1.01 + dot( IN.sphereCoords, _SunDir))));
    light *= terminator;
    #line 528
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (SNdotL - 0.01)) / 0.99) * 4.0) * atten));
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    #line 532
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.objnormal = vec3(xlv_TEXCOORD2);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec2 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec4 _ProjectionParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec3 p_2;
  p_2 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = gl_Normal;
  vec4 tmpvar_4;
  tmpvar_4.x = gl_MultiTexCoord0.x;
  tmpvar_4.y = gl_MultiTexCoord0.y;
  tmpvar_4.z = gl_MultiTexCoord1.x;
  tmpvar_4.w = gl_MultiTexCoord1.y;
  vec4 o_5;
  vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_1 * 0.5);
  vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_1.zw;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xy;
  xlv_TEXCOORD4 = o_5;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_4).xyz);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec2 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec3 norm_2;
  vec2 localCoords_3;
  vec4 cityoverlay_4;
  vec2 uv_5;
  vec4 color_6;
  float r_7;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_5.x = (0.5 + (0.159155 * r_7));
  uv_5.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_11;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_12;
    y_over_x_12 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_13;
    float x_14;
    x_14 = (y_over_x_12 * inversesqrt(((y_over_x_12 * y_over_x_12) + 1.0)));
    s_13 = (sign(x_14) * (1.5708 - (sqrt((1.0 - abs(x_14))) * (1.5708 + (abs(x_14) * (-0.214602 + (abs(x_14) * (0.0865667 + (abs(x_14) * -0.0310296)))))))));
    r_11 = s_13;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_11 = (s_13 + 3.14159);
      } else {
        r_11 = (r_11 - 3.14159);
      };
    };
  } else {
    r_11 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_15;
  tmpvar_15 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_16;
  tmpvar_16 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_17;
  tmpvar_17 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_18;
  tmpvar_18.x = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_18.y = dFdx(tmpvar_15);
  tmpvar_18.z = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_18.w = dFdy(tmpvar_15);
  vec4 tmpvar_19;
  tmpvar_19 = texture2DGradARB (_MainTex, uv_5, tmpvar_18.xy, tmpvar_18.zw);
  float tmpvar_20;
  tmpvar_20 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_21;
  tmpvar_21 = texture2DGradARB (_CityOverlayTex, uv_5, tmpvar_18.xy, tmpvar_18.zw);
  cityoverlay_4.xyz = tmpvar_21.xyz;
  vec2 tmpvar_22;
  tmpvar_22 = (texture2DGradARB (_BumpMap, uv_5, tmpvar_18.xy, tmpvar_18.zw).wy - vec2(0.5, 0.5));
  localCoords_3.x = (tmpvar_22.x * 0.25);
  localCoords_3.y = (tmpvar_22.y * 0.5);
  uv_5.x = (uv_5.x - 0.5);
  vec2 tmpvar_23;
  tmpvar_23 = (uv_5 + localCoords_3);
  uv_5 = tmpvar_23;
  norm_2.z = cos((6.28319 * tmpvar_23.x));
  norm_2.x = sin((6.28319 * tmpvar_23.x));
  norm_2.y = cos((3.14159 * tmpvar_23.y));
  vec3 tmpvar_24;
  tmpvar_24 = -(norm_2);
  norm_2 = tmpvar_24;
  vec3 tmpvar_25;
  tmpvar_25 = abs(xlv_TEXCOORD6);
  float tmpvar_26;
  tmpvar_26 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  cityoverlay_4.w = (tmpvar_21.w * clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0));
  vec4 tmpvar_27;
  tmpvar_27 = (cityoverlay_4 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_25.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_25.yyyy));
  citydarkoverlay_1.xyz = tmpvar_27.xyz;
  vec4 tmpvar_28;
  tmpvar_28 = (cityoverlay_4 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_25.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_25.yyyy));
  vec4 tmpvar_29;
  tmpvar_29 = (mix (mix ((xlv_TEXCOORD1 + mix ((0.25 * (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_20)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_20)), tmpvar_25.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_20)), tmpvar_25.yyyy) - 0.5)), vec4(0.0, 0.0, 0.0, 0.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))), tmpvar_19, vec4(tmpvar_26)), tmpvar_28, tmpvar_28.wwww) * _Color);
  color_6.w = tmpvar_29.w;
  float tmpvar_30;
  tmpvar_30 = clamp (dot (tmpvar_24, -(_SunDir)), 0.0, 1.0);
  float tmpvar_31;
  tmpvar_31 = (texture2D (_LightTexture0, xlv_TEXCOORD3).w * texture2DProj (_ShadowMapTexture, xlv_TEXCOORD4).x);
  vec3 tmpvar_32;
  tmpvar_32 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * mix (clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), tmpvar_30, tmpvar_26)) * 4.0) * tmpvar_31), 0.0, 1.0))), 0.0, 1.0) * clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0));
  color_6.xyz = (tmpvar_29.xyz + (_Albedo * tmpvar_32));
  color_6.xyz = (color_6.xyz * tmpvar_32);
  citydarkoverlay_1.w = (tmpvar_27.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_30 - 0.01)) / 0.99) * 4.0) * tmpvar_31), 0.0, 1.0), 0.0, 1.0)));
  color_6.xyz = mix (color_6, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_6.w = 1.0;
  gl_FragData[0] = color_6;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_ProjectionParams]
Vector 14 [_ScreenParams]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 35 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
def c15, 0.00000000, 0.50000000, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
mov r1.xyz, v2
mov r1.w, c15.x
dp4 r0.z, r1, c6
dp4 r0.x, r1, c4
dp4 r0.y, r1, c5
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o6.xyz, r0.w, r0
dp4 r2.w, v0, c3
dp4 r2.z, v0, c2
mov r0.zw, v4.xyxy
mov r0.xy, v3
dp4 r0.w, r0, r0
rsq r0.w, r0.w
mul r0.xyz, r0.w, r0
mov o7.xyz, -r0
dp4 r0.x, v0, c4
dp4 r0.z, v0, c6
dp4 r0.y, v0, c5
dp4 r0.w, v0, c7
dp4 r2.x, v0, c0
dp4 r2.y, v0, c1
mul r1.xyz, r2.xyww, c15.y
mul r1.y, r1, c13.x
mad o5.xy, r1.z, c14.zwzw, r1
add r1.xyz, -r0, c12
dp4 o4.y, r0, c9
dp3 r1.x, r1, r1
dp4 o4.x, r0, c8
rsq r0.x, r1.x
mov o0, r2
mov o2, v1
mov o5.zw, r2
rcp o1.x, r0.x
mov o3.xyz, v2
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  highp vec3 p_2;
  p_2 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_1;
  highp vec4 tmpvar_4;
  tmpvar_4.x = _glesMultiTexCoord0.x;
  tmpvar_4.y = _glesMultiTexCoord0.y;
  tmpvar_4.z = _glesMultiTexCoord1.x;
  tmpvar_4.w = _glesMultiTexCoord1.y;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_4).xyz);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float terminator_2;
  mediump vec3 light_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float handoff_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec3 norm_11;
  highp vec2 localCoords_12;
  mediump vec4 encnorm_13;
  mediump vec4 citylightoverlaydetailZ_14;
  mediump vec4 citylightoverlaydetailY_15;
  mediump vec4 citylightoverlaydetailX_16;
  mediump vec4 citydarkoverlaydetailZ_17;
  mediump vec4 citydarkoverlaydetailY_18;
  mediump vec4 citydarkoverlaydetailX_19;
  mediump vec4 cityoverlay_20;
  mediump float vertLerp_21;
  mediump vec4 main_22;
  highp vec2 uv_23;
  mediump vec4 color_24;
  highp float r_25;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_23.x = (0.5 + (0.159155 * r_25));
  uv_23.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_29;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_30;
    y_over_x_30 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_31;
    highp float x_32;
    x_32 = (y_over_x_30 * inversesqrt(((y_over_x_30 * y_over_x_30) + 1.0)));
    s_31 = (sign(x_32) * (1.5708 - (sqrt((1.0 - abs(x_32))) * (1.5708 + (abs(x_32) * (-0.214602 + (abs(x_32) * (0.0865667 + (abs(x_32) * -0.0310296)))))))));
    r_29 = s_31;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_29 = (s_31 + 3.14159);
      } else {
        r_29 = (r_29 - 3.14159);
      };
    };
  } else {
    r_29 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_33;
  tmpvar_33 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_34;
  tmpvar_34 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_36;
  tmpvar_36.x = (0.159155 * sqrt(dot (tmpvar_34, tmpvar_34)));
  tmpvar_36.y = dFdx(tmpvar_33);
  tmpvar_36.z = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_36.w = dFdy(tmpvar_33);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2DGradEXT (_MainTex, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  main_22 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD6.zy * _DetailScale);
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD6.zx * _DetailScale);
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.xy * _DetailScale);
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  highp float tmpvar_44;
  tmpvar_44 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_21 = tmpvar_44;
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, tmpvar_41);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, tmpvar_38);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_21));
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailVertTex, tmpvar_42);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailTex, tmpvar_39);
  mediump vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_49, vec4(vertLerp_21));
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailVertTex, tmpvar_43);
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailTex, tmpvar_40);
  mediump vec4 tmpvar_53;
  tmpvar_53 = mix (tmpvar_51, tmpvar_52, vec4(vertLerp_21));
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2DGradEXT (_CityOverlayTex, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  cityoverlay_20 = tmpvar_54;
  lowp vec4 tmpvar_55;
  highp vec2 P_56;
  P_56 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_55 = texture2D (_CityDarkOverlayDetailTex, P_56);
  citydarkoverlaydetailX_19 = tmpvar_55;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityDarkOverlayDetailTex, P_58);
  citydarkoverlaydetailY_18 = tmpvar_57;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_59 = texture2D (_CityDarkOverlayDetailTex, P_60);
  citydarkoverlaydetailZ_17 = tmpvar_59;
  lowp vec4 tmpvar_61;
  highp vec2 P_62;
  P_62 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_61 = texture2D (_CityLightOverlayDetailTex, P_62);
  citylightoverlaydetailX_16 = tmpvar_61;
  lowp vec4 tmpvar_63;
  highp vec2 P_64;
  P_64 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_63 = texture2D (_CityLightOverlayDetailTex, P_64);
  citylightoverlaydetailY_15 = tmpvar_63;
  lowp vec4 tmpvar_65;
  highp vec2 P_66;
  P_66 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_65 = texture2D (_CityLightOverlayDetailTex, P_66);
  citylightoverlaydetailZ_14 = tmpvar_65;
  lowp vec4 tmpvar_67;
  tmpvar_67 = texture2DGradEXT (_BumpMap, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  encnorm_13 = tmpvar_67;
  mediump vec2 tmpvar_68;
  tmpvar_68 = encnorm_13.wy;
  localCoords_12 = tmpvar_68;
  highp vec2 tmpvar_69;
  tmpvar_69 = (localCoords_12 - vec2(0.5, 0.5));
  localCoords_12.x = (tmpvar_69.x * 0.25);
  localCoords_12.y = (tmpvar_69.y * 0.5);
  uv_23.x = (uv_23.x - 0.5);
  highp vec2 tmpvar_70;
  tmpvar_70 = (uv_23 + localCoords_12);
  uv_23 = tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = cos((6.28319 * tmpvar_70.x));
  norm_11.z = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = sin((6.28319 * tmpvar_70.x));
  norm_11.x = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = cos((3.14159 * tmpvar_70.y));
  norm_11.y = tmpvar_73;
  mediump vec3 tmpvar_74;
  tmpvar_74 = -(norm_11);
  norm_11 = tmpvar_74;
  highp vec3 tmpvar_75;
  tmpvar_75 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (tmpvar_53, tmpvar_47, tmpvar_75.xxxx);
  detail_10 = tmpvar_76;
  highp vec4 tmpvar_77;
  tmpvar_77 = (0.25 * (mix (detail_10, tmpvar_50, tmpvar_75.yyyy) - 0.5));
  detail_10 = tmpvar_77;
  highp float tmpvar_78;
  tmpvar_78 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_9 = tmpvar_78;
  mediump vec4 tmpvar_79;
  tmpvar_79 = mix (detail_10, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_9));
  highp vec4 tmpvar_80;
  tmpvar_80 = (xlv_TEXCOORD1 + tmpvar_79);
  color_24 = tmpvar_80;
  highp float tmpvar_81;
  tmpvar_81 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_8 = tmpvar_81;
  highp float tmpvar_82;
  tmpvar_82 = clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0);
  cityoverlay_20.w = (cityoverlay_20.w * tmpvar_82);
  highp vec4 tmpvar_83;
  tmpvar_83 = mix (citydarkoverlaydetailZ_17, citydarkoverlaydetailX_19, tmpvar_75.xxxx);
  detail_10 = tmpvar_83;
  highp vec4 tmpvar_84;
  tmpvar_84 = mix (detail_10, citydarkoverlaydetailY_18, tmpvar_75.yyyy);
  detail_10 = tmpvar_84;
  mediump vec4 tmpvar_85;
  tmpvar_85 = (cityoverlay_20 * detail_10);
  citydarkoverlay_7.xyz = tmpvar_85.xyz;
  highp vec4 tmpvar_86;
  tmpvar_86 = mix (citylightoverlaydetailZ_14, citylightoverlaydetailX_16, tmpvar_75.xxxx);
  detail_10 = tmpvar_86;
  highp vec4 tmpvar_87;
  tmpvar_87 = mix (detail_10, citylightoverlaydetailY_15, tmpvar_75.yyyy);
  detail_10 = tmpvar_87;
  mediump vec4 tmpvar_88;
  tmpvar_88 = (cityoverlay_20 * detail_10);
  mediump vec4 tmpvar_89;
  tmpvar_89 = (mix (mix (color_24, main_22, vec4(handoff_8)), tmpvar_88, tmpvar_88.wwww) * _Color);
  color_24.w = tmpvar_89.w;
  highp vec3 tmpvar_90;
  tmpvar_90 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_90;
  lowp vec3 tmpvar_91;
  tmpvar_91 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_91;
  highp float tmpvar_92;
  tmpvar_92 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_92;
  mediump float tmpvar_93;
  tmpvar_93 = clamp (dot (tmpvar_74, -(_SunDir)), 0.0, 1.0);
  lowp float tmpvar_94;
  mediump float lightShadowDataX_95;
  highp float dist_96;
  lowp float tmpvar_97;
  tmpvar_97 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD4).x;
  dist_96 = tmpvar_97;
  highp float tmpvar_98;
  tmpvar_98 = _LightShadowData.x;
  lightShadowDataX_95 = tmpvar_98;
  highp float tmpvar_99;
  tmpvar_99 = max (float((dist_96 > (xlv_TEXCOORD4.z / xlv_TEXCOORD4.w))), lightShadowDataX_95);
  tmpvar_94 = tmpvar_99;
  lowp float tmpvar_100;
  tmpvar_100 = (texture2D (_LightTexture0, xlv_TEXCOORD3).w * tmpvar_94);
  mediump float tmpvar_101;
  tmpvar_101 = clamp ((((_LightColor0.w * mix (TNdotL_4, tmpvar_93, handoff_8)) * 4.0) * tmpvar_100), 0.0, 1.0);
  highp vec3 tmpvar_102;
  tmpvar_102 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_101)), 0.0, 1.0);
  light_3 = tmpvar_102;
  highp float tmpvar_103;
  tmpvar_103 = clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0);
  terminator_2 = tmpvar_103;
  mediump vec3 tmpvar_104;
  tmpvar_104 = (light_3 * terminator_2);
  light_3 = tmpvar_104;
  highp vec3 tmpvar_105;
  tmpvar_105 = (tmpvar_89.xyz + (_Albedo * tmpvar_104));
  color_24.xyz = tmpvar_105;
  color_24.xyz = (color_24.xyz * tmpvar_104);
  citydarkoverlay_7.w = (tmpvar_85.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_93 - 0.01)) / 0.99) * 4.0) * tmpvar_100), 0.0, 1.0), 0.0, 1.0)));
  color_24.xyz = mix (color_24, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_24.w = 1.0;
  tmpvar_1 = color_24;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  highp vec4 tmpvar_5;
  tmpvar_5.x = _glesMultiTexCoord0.x;
  tmpvar_5.y = _glesMultiTexCoord0.y;
  tmpvar_5.z = _glesMultiTexCoord1.x;
  tmpvar_5.w = _glesMultiTexCoord1.y;
  highp vec4 o_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_8;
  tmpvar_8.x = tmpvar_7.x;
  tmpvar_8.y = (tmpvar_7.y * _ProjectionParams.x);
  o_6.xy = (tmpvar_8 + tmpvar_7.w);
  o_6.zw = tmpvar_2.zw;
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD4 = o_6;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_5).xyz);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float terminator_2;
  mediump vec3 light_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float handoff_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec3 norm_11;
  highp vec2 localCoords_12;
  mediump vec4 encnorm_13;
  mediump vec4 citylightoverlaydetailZ_14;
  mediump vec4 citylightoverlaydetailY_15;
  mediump vec4 citylightoverlaydetailX_16;
  mediump vec4 citydarkoverlaydetailZ_17;
  mediump vec4 citydarkoverlaydetailY_18;
  mediump vec4 citydarkoverlaydetailX_19;
  mediump vec4 cityoverlay_20;
  mediump float vertLerp_21;
  mediump vec4 main_22;
  highp vec2 uv_23;
  mediump vec4 color_24;
  highp float r_25;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_23.x = (0.5 + (0.159155 * r_25));
  uv_23.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_29;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_30;
    y_over_x_30 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_31;
    highp float x_32;
    x_32 = (y_over_x_30 * inversesqrt(((y_over_x_30 * y_over_x_30) + 1.0)));
    s_31 = (sign(x_32) * (1.5708 - (sqrt((1.0 - abs(x_32))) * (1.5708 + (abs(x_32) * (-0.214602 + (abs(x_32) * (0.0865667 + (abs(x_32) * -0.0310296)))))))));
    r_29 = s_31;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_29 = (s_31 + 3.14159);
      } else {
        r_29 = (r_29 - 3.14159);
      };
    };
  } else {
    r_29 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_33;
  tmpvar_33 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_34;
  tmpvar_34 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_36;
  tmpvar_36.x = (0.159155 * sqrt(dot (tmpvar_34, tmpvar_34)));
  tmpvar_36.y = dFdx(tmpvar_33);
  tmpvar_36.z = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_36.w = dFdy(tmpvar_33);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2DGradEXT (_MainTex, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  main_22 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD6.zy * _DetailScale);
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD6.zx * _DetailScale);
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.xy * _DetailScale);
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  highp float tmpvar_44;
  tmpvar_44 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_21 = tmpvar_44;
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, tmpvar_41);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, tmpvar_38);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_21));
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailVertTex, tmpvar_42);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailTex, tmpvar_39);
  mediump vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_49, vec4(vertLerp_21));
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailVertTex, tmpvar_43);
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailTex, tmpvar_40);
  mediump vec4 tmpvar_53;
  tmpvar_53 = mix (tmpvar_51, tmpvar_52, vec4(vertLerp_21));
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2DGradEXT (_CityOverlayTex, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  cityoverlay_20 = tmpvar_54;
  lowp vec4 tmpvar_55;
  highp vec2 P_56;
  P_56 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_55 = texture2D (_CityDarkOverlayDetailTex, P_56);
  citydarkoverlaydetailX_19 = tmpvar_55;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityDarkOverlayDetailTex, P_58);
  citydarkoverlaydetailY_18 = tmpvar_57;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_59 = texture2D (_CityDarkOverlayDetailTex, P_60);
  citydarkoverlaydetailZ_17 = tmpvar_59;
  lowp vec4 tmpvar_61;
  highp vec2 P_62;
  P_62 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_61 = texture2D (_CityLightOverlayDetailTex, P_62);
  citylightoverlaydetailX_16 = tmpvar_61;
  lowp vec4 tmpvar_63;
  highp vec2 P_64;
  P_64 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_63 = texture2D (_CityLightOverlayDetailTex, P_64);
  citylightoverlaydetailY_15 = tmpvar_63;
  lowp vec4 tmpvar_65;
  highp vec2 P_66;
  P_66 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_65 = texture2D (_CityLightOverlayDetailTex, P_66);
  citylightoverlaydetailZ_14 = tmpvar_65;
  lowp vec4 tmpvar_67;
  tmpvar_67 = texture2DGradEXT (_BumpMap, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  encnorm_13 = tmpvar_67;
  mediump vec2 tmpvar_68;
  tmpvar_68 = encnorm_13.wy;
  localCoords_12 = tmpvar_68;
  highp vec2 tmpvar_69;
  tmpvar_69 = (localCoords_12 - vec2(0.5, 0.5));
  localCoords_12.x = (tmpvar_69.x * 0.25);
  localCoords_12.y = (tmpvar_69.y * 0.5);
  uv_23.x = (uv_23.x - 0.5);
  highp vec2 tmpvar_70;
  tmpvar_70 = (uv_23 + localCoords_12);
  uv_23 = tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = cos((6.28319 * tmpvar_70.x));
  norm_11.z = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = sin((6.28319 * tmpvar_70.x));
  norm_11.x = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = cos((3.14159 * tmpvar_70.y));
  norm_11.y = tmpvar_73;
  mediump vec3 tmpvar_74;
  tmpvar_74 = -(norm_11);
  norm_11 = tmpvar_74;
  highp vec3 tmpvar_75;
  tmpvar_75 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (tmpvar_53, tmpvar_47, tmpvar_75.xxxx);
  detail_10 = tmpvar_76;
  highp vec4 tmpvar_77;
  tmpvar_77 = (0.25 * (mix (detail_10, tmpvar_50, tmpvar_75.yyyy) - 0.5));
  detail_10 = tmpvar_77;
  highp float tmpvar_78;
  tmpvar_78 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_9 = tmpvar_78;
  mediump vec4 tmpvar_79;
  tmpvar_79 = mix (detail_10, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_9));
  highp vec4 tmpvar_80;
  tmpvar_80 = (xlv_TEXCOORD1 + tmpvar_79);
  color_24 = tmpvar_80;
  highp float tmpvar_81;
  tmpvar_81 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_8 = tmpvar_81;
  highp float tmpvar_82;
  tmpvar_82 = clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0);
  cityoverlay_20.w = (cityoverlay_20.w * tmpvar_82);
  highp vec4 tmpvar_83;
  tmpvar_83 = mix (citydarkoverlaydetailZ_17, citydarkoverlaydetailX_19, tmpvar_75.xxxx);
  detail_10 = tmpvar_83;
  highp vec4 tmpvar_84;
  tmpvar_84 = mix (detail_10, citydarkoverlaydetailY_18, tmpvar_75.yyyy);
  detail_10 = tmpvar_84;
  mediump vec4 tmpvar_85;
  tmpvar_85 = (cityoverlay_20 * detail_10);
  citydarkoverlay_7.xyz = tmpvar_85.xyz;
  highp vec4 tmpvar_86;
  tmpvar_86 = mix (citylightoverlaydetailZ_14, citylightoverlaydetailX_16, tmpvar_75.xxxx);
  detail_10 = tmpvar_86;
  highp vec4 tmpvar_87;
  tmpvar_87 = mix (detail_10, citylightoverlaydetailY_15, tmpvar_75.yyyy);
  detail_10 = tmpvar_87;
  mediump vec4 tmpvar_88;
  tmpvar_88 = (cityoverlay_20 * detail_10);
  mediump vec4 tmpvar_89;
  tmpvar_89 = (mix (mix (color_24, main_22, vec4(handoff_8)), tmpvar_88, tmpvar_88.wwww) * _Color);
  color_24.w = tmpvar_89.w;
  highp vec3 tmpvar_90;
  tmpvar_90 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_90;
  lowp vec3 tmpvar_91;
  tmpvar_91 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_91;
  highp float tmpvar_92;
  tmpvar_92 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_92;
  mediump float tmpvar_93;
  tmpvar_93 = clamp (dot (tmpvar_74, -(_SunDir)), 0.0, 1.0);
  lowp float tmpvar_94;
  tmpvar_94 = (texture2D (_LightTexture0, xlv_TEXCOORD3).w * texture2DProj (_ShadowMapTexture, xlv_TEXCOORD4).x);
  mediump float tmpvar_95;
  tmpvar_95 = clamp ((((_LightColor0.w * mix (TNdotL_4, tmpvar_93, handoff_8)) * 4.0) * tmpvar_94), 0.0, 1.0);
  highp vec3 tmpvar_96;
  tmpvar_96 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_95)), 0.0, 1.0);
  light_3 = tmpvar_96;
  highp float tmpvar_97;
  tmpvar_97 = clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0);
  terminator_2 = tmpvar_97;
  mediump vec3 tmpvar_98;
  tmpvar_98 = (light_3 * terminator_2);
  light_3 = tmpvar_98;
  highp vec3 tmpvar_99;
  tmpvar_99 = (tmpvar_89.xyz + (_Albedo * tmpvar_98));
  color_24.xyz = tmpvar_99;
  color_24.xyz = (color_24.xyz * tmpvar_98);
  citydarkoverlay_7.w = (tmpvar_85.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_93 - 0.01)) / 0.99) * 4.0) * tmpvar_94), 0.0, 1.0), 0.0, 1.0)));
  color_24.xyz = mix (color_24, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_24.w = 1.0;
  tmpvar_1 = color_24;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 325
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 430
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 objnormal;
    highp vec2 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
};
#line 420
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 323
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 335
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 348
#line 356
#line 370
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 403
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 407
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 411
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp mat4 _Rotation;
#line 415
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 419
uniform sampler2D _CityLightOverlayDetailTex;
#line 442
#line 468
#line 442
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 446
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    #line 450
    o.color = v.color;
    o.objnormal = v.normal;
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xy;
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    #line 455
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec2 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.objnormal);
    xlv_TEXCOORD3 = vec2(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereCoords);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 325
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 430
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 objnormal;
    highp vec2 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
};
#line 420
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 323
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 335
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 348
#line 356
#line 370
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 403
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 407
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 411
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp mat4 _Rotation;
#line 415
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 419
uniform sampler2D _CityLightOverlayDetailTex;
#line 442
#line 468
#line 457
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 459
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 463
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 317
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    #line 319
    highp float dist = textureProj( _ShadowMapTexture, shadowCoord).x;
    mediump float lightShadowDataX = _LightShadowData.x;
    return max( float((dist > (shadowCoord.z / shadowCoord.w))), lightShadowDataX);
}
#line 468
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    #line 472
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 476
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    highp vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    highp vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    highp vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    #line 480
    highp vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    highp vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    highp vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, (-IN.sphereCoords))) - 0.95)) + 0.5));
    #line 484
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    #line 488
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    #line 492
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    highp vec2 localCoords = encnorm.wy;
    #line 496
    localCoords -= vec2( 0.5);
    localCoords.x *= 0.25;
    localCoords.y *= 0.5;
    uv.x -= 0.5;
    #line 500
    uv += localCoords;
    mediump vec3 norm;
    norm.z = cos((6.28319 * uv.x));
    norm.x = sin((6.28319 * uv.x));
    #line 504
    norm.y = cos((3.14159 * uv.y));
    norm = (-norm);
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    #line 508
    detail = (0.25 * (mix( detail, detailY, vec4( sphereNrm.y)) - 0.5));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (IN.color + mix( detail.xyzw, vec4( 0.0), vec4( detailLevel)));
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    #line 512
    color = mix( color, main, vec4( handoff));
    cityoverlay.w *= xll_saturate_f(floor((IN.color.w + 0.99)));
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    #line 516
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    #line 520
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    #line 524
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    lowp float atten = (texture( _LightTexture0, IN._LightCoord).w * unitySampleShadow( IN._ShadowCoord));
    #line 528
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    mediump float terminator = xll_saturate_f(floor((1.01 + dot( IN.sphereCoords, _SunDir))));
    light *= terminator;
    #line 532
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (SNdotL - 0.01)) / 0.99) * 4.0) * atten));
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    #line 536
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec2 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.objnormal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec2(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec4 _LightPositionRange;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec4 tmpvar_3;
  tmpvar_3.x = gl_MultiTexCoord0.x;
  tmpvar_3.y = gl_MultiTexCoord0.y;
  tmpvar_3.z = gl_MultiTexCoord1.x;
  tmpvar_3.w = gl_MultiTexCoord1.y;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_3).xyz);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _LightPositionRange;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec3 norm_2;
  vec2 localCoords_3;
  vec4 cityoverlay_4;
  vec2 uv_5;
  vec4 color_6;
  float r_7;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_5.x = (0.5 + (0.159155 * r_7));
  uv_5.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_11;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_12;
    y_over_x_12 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_13;
    float x_14;
    x_14 = (y_over_x_12 * inversesqrt(((y_over_x_12 * y_over_x_12) + 1.0)));
    s_13 = (sign(x_14) * (1.5708 - (sqrt((1.0 - abs(x_14))) * (1.5708 + (abs(x_14) * (-0.214602 + (abs(x_14) * (0.0865667 + (abs(x_14) * -0.0310296)))))))));
    r_11 = s_13;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_11 = (s_13 + 3.14159);
      } else {
        r_11 = (r_11 - 3.14159);
      };
    };
  } else {
    r_11 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_15;
  tmpvar_15 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_16;
  tmpvar_16 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_17;
  tmpvar_17 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_18;
  tmpvar_18.x = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_18.y = dFdx(tmpvar_15);
  tmpvar_18.z = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_18.w = dFdy(tmpvar_15);
  vec4 tmpvar_19;
  tmpvar_19 = texture2DGradARB (_MainTex, uv_5, tmpvar_18.xy, tmpvar_18.zw);
  float tmpvar_20;
  tmpvar_20 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_21;
  tmpvar_21 = texture2DGradARB (_CityOverlayTex, uv_5, tmpvar_18.xy, tmpvar_18.zw);
  cityoverlay_4.xyz = tmpvar_21.xyz;
  vec2 tmpvar_22;
  tmpvar_22 = (texture2DGradARB (_BumpMap, uv_5, tmpvar_18.xy, tmpvar_18.zw).wy - vec2(0.5, 0.5));
  localCoords_3.x = (tmpvar_22.x * 0.25);
  localCoords_3.y = (tmpvar_22.y * 0.5);
  uv_5.x = (uv_5.x - 0.5);
  vec2 tmpvar_23;
  tmpvar_23 = (uv_5 + localCoords_3);
  uv_5 = tmpvar_23;
  norm_2.z = cos((6.28319 * tmpvar_23.x));
  norm_2.x = sin((6.28319 * tmpvar_23.x));
  norm_2.y = cos((3.14159 * tmpvar_23.y));
  vec3 tmpvar_24;
  tmpvar_24 = -(norm_2);
  norm_2 = tmpvar_24;
  vec3 tmpvar_25;
  tmpvar_25 = abs(xlv_TEXCOORD6);
  float tmpvar_26;
  tmpvar_26 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  cityoverlay_4.w = (tmpvar_21.w * clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0));
  vec4 tmpvar_27;
  tmpvar_27 = (cityoverlay_4 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_25.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_25.yyyy));
  citydarkoverlay_1 = tmpvar_27;
  vec4 tmpvar_28;
  tmpvar_28 = (cityoverlay_4 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_25.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_25.yyyy));
  vec4 tmpvar_29;
  tmpvar_29 = (mix (mix ((xlv_TEXCOORD1 + mix ((0.25 * (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_20)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_20)), tmpvar_25.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_20)), tmpvar_25.yyyy) - 0.5)), vec4(0.0, 0.0, 0.0, 0.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))), tmpvar_19, vec4(tmpvar_26)), tmpvar_28, tmpvar_28.wwww) * _Color);
  color_6 = tmpvar_29;
  float tmpvar_30;
  tmpvar_30 = clamp (dot (tmpvar_24, -(_SunDir)), 0.0, 1.0);
  float tmpvar_31;
  tmpvar_31 = mix (clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), tmpvar_30, tmpvar_26);
  vec4 tmpvar_32;
  tmpvar_32 = texture2D (_LightTexture0, vec2(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)));
  float tmpvar_33;
  tmpvar_33 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  float tmpvar_34;
  tmpvar_34 = dot (textureCube (_ShadowMapTexture, xlv_TEXCOORD4), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  float tmpvar_35;
  if ((tmpvar_34 < tmpvar_33)) {
    tmpvar_35 = _LightShadowData.x;
  } else {
    tmpvar_35 = 1.0;
  };
  float tmpvar_36;
  tmpvar_36 = (tmpvar_32.w * tmpvar_35);
  vec3 tmpvar_37;
  tmpvar_37 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_31) * 4.0) * tmpvar_36), 0.0, 1.0))), 0.0, 1.0) * clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0));
  color_6.xyz = (tmpvar_29.xyz + (_Albedo * tmpvar_37));
  color_6.xyz = (color_6.xyz * tmpvar_37);
  citydarkoverlay_1.w = (tmpvar_27.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_30 - 0.01)) / 0.99) * 4.0) * tmpvar_36), 0.0, 1.0), 0.0, 1.0)));
  color_6.xyz = mix (color_6, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_6.w = 1.0;
  gl_FragData[0] = color_6;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_LightPositionRange]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 32 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
def c14, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
mov r1.xyz, v2
mov r1.w, c14.x
dp4 r2.z, r1, c6
dp4 r2.x, r1, c4
dp4 r2.y, r1, c5
mov r0.zw, v4.xyxy
mov r0.xy, v3
dp4 r2.w, r0, r0
rsq r1.x, r2.w
mul r0.xyz, r1.x, r0
mov o7.xyz, -r0
dp3 r0.w, r2, r2
rsq r0.w, r0.w
mul o6.xyz, r0.w, r2
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
dp4 r0.w, v0, c7
add r1.xyz, -r0, c12
dp3 r1.x, r1, r1
rsq r1.x, r1.x
mov o2, v1
dp4 o4.z, r0, c10
dp4 o4.y, r0, c9
dp4 o4.x, r0, c8
rcp o1.x, r1.x
mov o3.xyz, v2
add o5.xyz, r0, -c13
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  highp vec3 p_2;
  p_2 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_1;
  highp vec4 tmpvar_4;
  tmpvar_4.x = _glesMultiTexCoord0.x;
  tmpvar_4.y = _glesMultiTexCoord0.y;
  tmpvar_4.z = _glesMultiTexCoord1.x;
  tmpvar_4.w = _glesMultiTexCoord1.y;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_4).xyz);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float terminator_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float TNdotL_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump vec4 citydarkoverlay_8;
  mediump float handoff_9;
  mediump float detailLevel_10;
  mediump vec4 detail_11;
  mediump vec3 norm_12;
  highp vec2 localCoords_13;
  mediump vec4 encnorm_14;
  mediump vec4 citylightoverlaydetailZ_15;
  mediump vec4 citylightoverlaydetailY_16;
  mediump vec4 citylightoverlaydetailX_17;
  mediump vec4 citydarkoverlaydetailZ_18;
  mediump vec4 citydarkoverlaydetailY_19;
  mediump vec4 citydarkoverlaydetailX_20;
  mediump vec4 cityoverlay_21;
  mediump float vertLerp_22;
  mediump vec4 main_23;
  highp vec2 uv_24;
  mediump vec4 color_25;
  highp float r_26;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_26));
  uv_24.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_30;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_31;
    y_over_x_31 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_32;
    highp float x_33;
    x_33 = (y_over_x_31 * inversesqrt(((y_over_x_31 * y_over_x_31) + 1.0)));
    s_32 = (sign(x_33) * (1.5708 - (sqrt((1.0 - abs(x_33))) * (1.5708 + (abs(x_33) * (-0.214602 + (abs(x_33) * (0.0865667 + (abs(x_33) * -0.0310296)))))))));
    r_30 = s_32;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_30 = (s_32 + 3.14159);
      } else {
        r_30 = (r_30 - 3.14159);
      };
    };
  } else {
    r_30 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_34;
  tmpvar_34 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_MainTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  main_23 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD6.zy * _DetailScale);
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zx * _DetailScale);
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.xy * _DetailScale);
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  highp float tmpvar_45;
  tmpvar_45 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_22 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailVertTex, tmpvar_42);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailTex, tmpvar_39);
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_47, vec4(vertLerp_22));
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailVertTex, tmpvar_43);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailTex, tmpvar_40);
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (tmpvar_49, tmpvar_50, vec4(vertLerp_22));
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailVertTex, tmpvar_44);
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailTex, tmpvar_41);
  mediump vec4 tmpvar_54;
  tmpvar_54 = mix (tmpvar_52, tmpvar_53, vec4(vertLerp_22));
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2DGradEXT (_CityOverlayTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  cityoverlay_21 = tmpvar_55;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_56 = texture2D (_CityDarkOverlayDetailTex, P_57);
  citydarkoverlaydetailX_20 = tmpvar_56;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityDarkOverlayDetailTex, P_59);
  citydarkoverlaydetailY_19 = tmpvar_58;
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_60 = texture2D (_CityDarkOverlayDetailTex, P_61);
  citydarkoverlaydetailZ_18 = tmpvar_60;
  lowp vec4 tmpvar_62;
  highp vec2 P_63;
  P_63 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_62 = texture2D (_CityLightOverlayDetailTex, P_63);
  citylightoverlaydetailX_17 = tmpvar_62;
  lowp vec4 tmpvar_64;
  highp vec2 P_65;
  P_65 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_64 = texture2D (_CityLightOverlayDetailTex, P_65);
  citylightoverlaydetailY_16 = tmpvar_64;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_66 = texture2D (_CityLightOverlayDetailTex, P_67);
  citylightoverlaydetailZ_15 = tmpvar_66;
  lowp vec4 tmpvar_68;
  tmpvar_68 = texture2DGradEXT (_BumpMap, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  encnorm_14 = tmpvar_68;
  mediump vec2 tmpvar_69;
  tmpvar_69 = encnorm_14.wy;
  localCoords_13 = tmpvar_69;
  highp vec2 tmpvar_70;
  tmpvar_70 = (localCoords_13 - vec2(0.5, 0.5));
  localCoords_13.x = (tmpvar_70.x * 0.25);
  localCoords_13.y = (tmpvar_70.y * 0.5);
  uv_24.x = (uv_24.x - 0.5);
  highp vec2 tmpvar_71;
  tmpvar_71 = (uv_24 + localCoords_13);
  uv_24 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = cos((6.28319 * tmpvar_71.x));
  norm_12.z = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = sin((6.28319 * tmpvar_71.x));
  norm_12.x = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = cos((3.14159 * tmpvar_71.y));
  norm_12.y = tmpvar_74;
  mediump vec3 tmpvar_75;
  tmpvar_75 = -(norm_12);
  norm_12 = tmpvar_75;
  highp vec3 tmpvar_76;
  tmpvar_76 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (tmpvar_54, tmpvar_48, tmpvar_76.xxxx);
  detail_11 = tmpvar_77;
  highp vec4 tmpvar_78;
  tmpvar_78 = (0.25 * (mix (detail_11, tmpvar_51, tmpvar_76.yyyy) - 0.5));
  detail_11 = tmpvar_78;
  highp float tmpvar_79;
  tmpvar_79 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_10 = tmpvar_79;
  mediump vec4 tmpvar_80;
  tmpvar_80 = mix (detail_11, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_10));
  highp vec4 tmpvar_81;
  tmpvar_81 = (xlv_TEXCOORD1 + tmpvar_80);
  color_25 = tmpvar_81;
  highp float tmpvar_82;
  tmpvar_82 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_9 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0);
  cityoverlay_21.w = (cityoverlay_21.w * tmpvar_83);
  highp vec4 tmpvar_84;
  tmpvar_84 = mix (citydarkoverlaydetailZ_18, citydarkoverlaydetailX_20, tmpvar_76.xxxx);
  detail_11 = tmpvar_84;
  highp vec4 tmpvar_85;
  tmpvar_85 = mix (detail_11, citydarkoverlaydetailY_19, tmpvar_76.yyyy);
  detail_11 = tmpvar_85;
  mediump vec4 tmpvar_86;
  tmpvar_86 = (cityoverlay_21 * detail_11);
  citydarkoverlay_8 = tmpvar_86;
  highp vec4 tmpvar_87;
  tmpvar_87 = mix (citylightoverlaydetailZ_15, citylightoverlaydetailX_17, tmpvar_76.xxxx);
  detail_11 = tmpvar_87;
  highp vec4 tmpvar_88;
  tmpvar_88 = mix (detail_11, citylightoverlaydetailY_16, tmpvar_76.yyyy);
  detail_11 = tmpvar_88;
  mediump vec4 tmpvar_89;
  tmpvar_89 = (cityoverlay_21 * detail_11);
  mediump vec4 tmpvar_90;
  tmpvar_90 = (mix (mix (color_25, main_23, vec4(handoff_9)), tmpvar_89, tmpvar_89.wwww) * _Color);
  color_25 = tmpvar_90;
  highp vec3 tmpvar_91;
  tmpvar_91 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_91;
  highp vec3 tmpvar_92;
  tmpvar_92 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_92;
  highp float tmpvar_93;
  tmpvar_93 = clamp (dot (xlv_TEXCOORD5, lightDirection_6), 0.0, 1.0);
  TNdotL_5 = tmpvar_93;
  mediump float tmpvar_94;
  tmpvar_94 = clamp (dot (tmpvar_75, -(_SunDir)), 0.0, 1.0);
  mediump float tmpvar_95;
  tmpvar_95 = mix (TNdotL_5, tmpvar_94, handoff_9);
  highp float tmpvar_96;
  tmpvar_96 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_97;
  tmpvar_97 = texture2D (_LightTexture0, vec2(tmpvar_96));
  highp float tmpvar_98;
  tmpvar_98 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  highp vec4 packDist_99;
  lowp vec4 tmpvar_100;
  tmpvar_100 = textureCube (_ShadowMapTexture, xlv_TEXCOORD4);
  packDist_99 = tmpvar_100;
  highp float tmpvar_101;
  tmpvar_101 = dot (packDist_99, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp float tmpvar_102;
  if ((tmpvar_101 < tmpvar_98)) {
    tmpvar_102 = _LightShadowData.x;
  } else {
    tmpvar_102 = 1.0;
  };
  highp float tmpvar_103;
  tmpvar_103 = (tmpvar_97.w * tmpvar_102);
  atten_4 = tmpvar_103;
  mediump float tmpvar_104;
  tmpvar_104 = clamp ((((_LightColor0.w * tmpvar_95) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_105;
  tmpvar_105 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_104)), 0.0, 1.0);
  light_3 = tmpvar_105;
  highp float tmpvar_106;
  tmpvar_106 = clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0);
  terminator_2 = tmpvar_106;
  mediump vec3 tmpvar_107;
  tmpvar_107 = (light_3 * terminator_2);
  light_3 = tmpvar_107;
  highp vec3 tmpvar_108;
  tmpvar_108 = (tmpvar_90.xyz + (_Albedo * tmpvar_107));
  color_25.xyz = tmpvar_108;
  color_25.xyz = (color_25.xyz * tmpvar_107);
  citydarkoverlay_8.w = (tmpvar_86.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_94 - 0.01)) / 0.99) * 4.0) * atten_4), 0.0, 1.0), 0.0, 1.0)));
  color_25.xyz = mix (color_25, citydarkoverlay_8, citydarkoverlay_8.wwww).xyz;
  color_25.w = 1.0;
  tmpvar_1 = color_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  highp vec3 p_2;
  p_2 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_1;
  highp vec4 tmpvar_4;
  tmpvar_4.x = _glesMultiTexCoord0.x;
  tmpvar_4.y = _glesMultiTexCoord0.y;
  tmpvar_4.z = _glesMultiTexCoord1.x;
  tmpvar_4.w = _glesMultiTexCoord1.y;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_4).xyz);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float terminator_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float TNdotL_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump vec4 citydarkoverlay_8;
  mediump float handoff_9;
  mediump float detailLevel_10;
  mediump vec4 detail_11;
  mediump vec3 norm_12;
  highp vec2 localCoords_13;
  mediump vec4 encnorm_14;
  mediump vec4 citylightoverlaydetailZ_15;
  mediump vec4 citylightoverlaydetailY_16;
  mediump vec4 citylightoverlaydetailX_17;
  mediump vec4 citydarkoverlaydetailZ_18;
  mediump vec4 citydarkoverlaydetailY_19;
  mediump vec4 citydarkoverlaydetailX_20;
  mediump vec4 cityoverlay_21;
  mediump float vertLerp_22;
  mediump vec4 main_23;
  highp vec2 uv_24;
  mediump vec4 color_25;
  highp float r_26;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_26));
  uv_24.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_30;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_31;
    y_over_x_31 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_32;
    highp float x_33;
    x_33 = (y_over_x_31 * inversesqrt(((y_over_x_31 * y_over_x_31) + 1.0)));
    s_32 = (sign(x_33) * (1.5708 - (sqrt((1.0 - abs(x_33))) * (1.5708 + (abs(x_33) * (-0.214602 + (abs(x_33) * (0.0865667 + (abs(x_33) * -0.0310296)))))))));
    r_30 = s_32;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_30 = (s_32 + 3.14159);
      } else {
        r_30 = (r_30 - 3.14159);
      };
    };
  } else {
    r_30 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_34;
  tmpvar_34 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_MainTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  main_23 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD6.zy * _DetailScale);
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zx * _DetailScale);
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.xy * _DetailScale);
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  highp float tmpvar_45;
  tmpvar_45 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_22 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailVertTex, tmpvar_42);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailTex, tmpvar_39);
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_47, vec4(vertLerp_22));
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailVertTex, tmpvar_43);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailTex, tmpvar_40);
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (tmpvar_49, tmpvar_50, vec4(vertLerp_22));
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailVertTex, tmpvar_44);
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailTex, tmpvar_41);
  mediump vec4 tmpvar_54;
  tmpvar_54 = mix (tmpvar_52, tmpvar_53, vec4(vertLerp_22));
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2DGradEXT (_CityOverlayTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  cityoverlay_21 = tmpvar_55;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_56 = texture2D (_CityDarkOverlayDetailTex, P_57);
  citydarkoverlaydetailX_20 = tmpvar_56;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityDarkOverlayDetailTex, P_59);
  citydarkoverlaydetailY_19 = tmpvar_58;
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_60 = texture2D (_CityDarkOverlayDetailTex, P_61);
  citydarkoverlaydetailZ_18 = tmpvar_60;
  lowp vec4 tmpvar_62;
  highp vec2 P_63;
  P_63 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_62 = texture2D (_CityLightOverlayDetailTex, P_63);
  citylightoverlaydetailX_17 = tmpvar_62;
  lowp vec4 tmpvar_64;
  highp vec2 P_65;
  P_65 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_64 = texture2D (_CityLightOverlayDetailTex, P_65);
  citylightoverlaydetailY_16 = tmpvar_64;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_66 = texture2D (_CityLightOverlayDetailTex, P_67);
  citylightoverlaydetailZ_15 = tmpvar_66;
  lowp vec4 tmpvar_68;
  tmpvar_68 = texture2DGradEXT (_BumpMap, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  encnorm_14 = tmpvar_68;
  mediump vec2 tmpvar_69;
  tmpvar_69 = encnorm_14.wy;
  localCoords_13 = tmpvar_69;
  highp vec2 tmpvar_70;
  tmpvar_70 = (localCoords_13 - vec2(0.5, 0.5));
  localCoords_13.x = (tmpvar_70.x * 0.25);
  localCoords_13.y = (tmpvar_70.y * 0.5);
  uv_24.x = (uv_24.x - 0.5);
  highp vec2 tmpvar_71;
  tmpvar_71 = (uv_24 + localCoords_13);
  uv_24 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = cos((6.28319 * tmpvar_71.x));
  norm_12.z = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = sin((6.28319 * tmpvar_71.x));
  norm_12.x = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = cos((3.14159 * tmpvar_71.y));
  norm_12.y = tmpvar_74;
  mediump vec3 tmpvar_75;
  tmpvar_75 = -(norm_12);
  norm_12 = tmpvar_75;
  highp vec3 tmpvar_76;
  tmpvar_76 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (tmpvar_54, tmpvar_48, tmpvar_76.xxxx);
  detail_11 = tmpvar_77;
  highp vec4 tmpvar_78;
  tmpvar_78 = (0.25 * (mix (detail_11, tmpvar_51, tmpvar_76.yyyy) - 0.5));
  detail_11 = tmpvar_78;
  highp float tmpvar_79;
  tmpvar_79 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_10 = tmpvar_79;
  mediump vec4 tmpvar_80;
  tmpvar_80 = mix (detail_11, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_10));
  highp vec4 tmpvar_81;
  tmpvar_81 = (xlv_TEXCOORD1 + tmpvar_80);
  color_25 = tmpvar_81;
  highp float tmpvar_82;
  tmpvar_82 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_9 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0);
  cityoverlay_21.w = (cityoverlay_21.w * tmpvar_83);
  highp vec4 tmpvar_84;
  tmpvar_84 = mix (citydarkoverlaydetailZ_18, citydarkoverlaydetailX_20, tmpvar_76.xxxx);
  detail_11 = tmpvar_84;
  highp vec4 tmpvar_85;
  tmpvar_85 = mix (detail_11, citydarkoverlaydetailY_19, tmpvar_76.yyyy);
  detail_11 = tmpvar_85;
  mediump vec4 tmpvar_86;
  tmpvar_86 = (cityoverlay_21 * detail_11);
  citydarkoverlay_8 = tmpvar_86;
  highp vec4 tmpvar_87;
  tmpvar_87 = mix (citylightoverlaydetailZ_15, citylightoverlaydetailX_17, tmpvar_76.xxxx);
  detail_11 = tmpvar_87;
  highp vec4 tmpvar_88;
  tmpvar_88 = mix (detail_11, citylightoverlaydetailY_16, tmpvar_76.yyyy);
  detail_11 = tmpvar_88;
  mediump vec4 tmpvar_89;
  tmpvar_89 = (cityoverlay_21 * detail_11);
  mediump vec4 tmpvar_90;
  tmpvar_90 = (mix (mix (color_25, main_23, vec4(handoff_9)), tmpvar_89, tmpvar_89.wwww) * _Color);
  color_25 = tmpvar_90;
  highp vec3 tmpvar_91;
  tmpvar_91 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_91;
  highp vec3 tmpvar_92;
  tmpvar_92 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_92;
  highp float tmpvar_93;
  tmpvar_93 = clamp (dot (xlv_TEXCOORD5, lightDirection_6), 0.0, 1.0);
  TNdotL_5 = tmpvar_93;
  mediump float tmpvar_94;
  tmpvar_94 = clamp (dot (tmpvar_75, -(_SunDir)), 0.0, 1.0);
  mediump float tmpvar_95;
  tmpvar_95 = mix (TNdotL_5, tmpvar_94, handoff_9);
  highp float tmpvar_96;
  tmpvar_96 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_97;
  tmpvar_97 = texture2D (_LightTexture0, vec2(tmpvar_96));
  highp float tmpvar_98;
  tmpvar_98 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  highp vec4 packDist_99;
  lowp vec4 tmpvar_100;
  tmpvar_100 = textureCube (_ShadowMapTexture, xlv_TEXCOORD4);
  packDist_99 = tmpvar_100;
  highp float tmpvar_101;
  tmpvar_101 = dot (packDist_99, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp float tmpvar_102;
  if ((tmpvar_101 < tmpvar_98)) {
    tmpvar_102 = _LightShadowData.x;
  } else {
    tmpvar_102 = 1.0;
  };
  highp float tmpvar_103;
  tmpvar_103 = (tmpvar_97.w * tmpvar_102);
  atten_4 = tmpvar_103;
  mediump float tmpvar_104;
  tmpvar_104 = clamp ((((_LightColor0.w * tmpvar_95) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_105;
  tmpvar_105 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_104)), 0.0, 1.0);
  light_3 = tmpvar_105;
  highp float tmpvar_106;
  tmpvar_106 = clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0);
  terminator_2 = tmpvar_106;
  mediump vec3 tmpvar_107;
  tmpvar_107 = (light_3 * terminator_2);
  light_3 = tmpvar_107;
  highp vec3 tmpvar_108;
  tmpvar_108 = (tmpvar_90.xyz + (_Albedo * tmpvar_107));
  color_25.xyz = tmpvar_108;
  color_25.xyz = (color_25.xyz * tmpvar_107);
  citydarkoverlay_8.w = (tmpvar_86.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_94 - 0.01)) / 0.99) * 4.0) * atten_4), 0.0, 1.0), 0.0, 1.0)));
  color_25.xyz = mix (color_25, citydarkoverlay_8, citydarkoverlay_8.wwww).xyz;
  color_25.w = 1.0;
  tmpvar_1 = color_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 330
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 435
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 objnormal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
};
#line 425
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 340
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 353
#line 361
#line 375
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 408
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 412
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 416
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp mat4 _Rotation;
#line 420
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 424
uniform sampler2D _CityLightOverlayDetailTex;
#line 447
#line 473
#line 447
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 451
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    #line 455
    o.color = v.color;
    o.objnormal = v.normal;
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    o._ShadowCoord = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    #line 460
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.objnormal);
    xlv_TEXCOORD3 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereCoords);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 330
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 435
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 objnormal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
};
#line 425
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 340
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 353
#line 361
#line 375
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 408
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 412
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 416
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp mat4 _Rotation;
#line 420
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 424
uniform sampler2D _CityLightOverlayDetailTex;
#line 447
#line 473
#line 462
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 464
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 468
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 215
highp float DecodeFloatRGBA( in highp vec4 enc ) {
    highp vec4 kDecodeDot = vec4( 1.0, 0.00392157, 1.53787e-05, 6.22737e-09);
    return dot( enc, kDecodeDot);
}
#line 316
highp float SampleCubeDistance( in highp vec3 vec ) {
    highp vec4 packDist = texture( _ShadowMapTexture, vec);
    #line 319
    return DecodeFloatRGBA( packDist);
}
#line 321
highp float unityCubeShadow( in highp vec3 vec ) {
    #line 323
    highp float mydist = (length(vec) * _LightPositionRange.w);
    mydist *= 0.97;
    highp float dist = SampleCubeDistance( vec);
    return (( (dist < mydist) ) ? ( _LightShadowData.x ) : ( 1.0 ));
}
#line 473
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    #line 477
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 481
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    highp vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    highp vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    highp vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    #line 485
    highp vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    highp vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    highp vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, (-IN.sphereCoords))) - 0.95)) + 0.5));
    #line 489
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    #line 493
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    #line 497
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    highp vec2 localCoords = encnorm.wy;
    #line 501
    localCoords -= vec2( 0.5);
    localCoords.x *= 0.25;
    localCoords.y *= 0.5;
    uv.x -= 0.5;
    #line 505
    uv += localCoords;
    mediump vec3 norm;
    norm.z = cos((6.28319 * uv.x));
    norm.x = sin((6.28319 * uv.x));
    #line 509
    norm.y = cos((3.14159 * uv.y));
    norm = (-norm);
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    #line 513
    detail = (0.25 * (mix( detail, detailY, vec4( sphereNrm.y)) - 0.5));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (IN.color + mix( detail.xyzw, vec4( 0.0), vec4( detailLevel)));
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    #line 517
    color = mix( color, main, vec4( handoff));
    cityoverlay.w *= xll_saturate_f(floor((IN.color.w + 0.99)));
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    #line 521
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    #line 525
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    #line 529
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    lowp float atten = (texture( _LightTexture0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * unityCubeShadow( IN._ShadowCoord));
    #line 533
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    mediump float terminator = xll_saturate_f(floor((1.01 + dot( IN.sphereCoords, _SunDir))));
    light *= terminator;
    #line 537
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (SNdotL - 0.01)) / 0.99) * 4.0) * atten));
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    #line 541
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.objnormal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec4 _LightPositionRange;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec4 tmpvar_3;
  tmpvar_3.x = gl_MultiTexCoord0.x;
  tmpvar_3.y = gl_MultiTexCoord0.y;
  tmpvar_3.z = gl_MultiTexCoord1.x;
  tmpvar_3.w = gl_MultiTexCoord1.y;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_3).xyz);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _LightPositionRange;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec3 norm_2;
  vec2 localCoords_3;
  vec4 cityoverlay_4;
  vec2 uv_5;
  vec4 color_6;
  float r_7;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_5.x = (0.5 + (0.159155 * r_7));
  uv_5.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_11;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_12;
    y_over_x_12 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_13;
    float x_14;
    x_14 = (y_over_x_12 * inversesqrt(((y_over_x_12 * y_over_x_12) + 1.0)));
    s_13 = (sign(x_14) * (1.5708 - (sqrt((1.0 - abs(x_14))) * (1.5708 + (abs(x_14) * (-0.214602 + (abs(x_14) * (0.0865667 + (abs(x_14) * -0.0310296)))))))));
    r_11 = s_13;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_11 = (s_13 + 3.14159);
      } else {
        r_11 = (r_11 - 3.14159);
      };
    };
  } else {
    r_11 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_15;
  tmpvar_15 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_16;
  tmpvar_16 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_17;
  tmpvar_17 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_18;
  tmpvar_18.x = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_18.y = dFdx(tmpvar_15);
  tmpvar_18.z = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_18.w = dFdy(tmpvar_15);
  vec4 tmpvar_19;
  tmpvar_19 = texture2DGradARB (_MainTex, uv_5, tmpvar_18.xy, tmpvar_18.zw);
  float tmpvar_20;
  tmpvar_20 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_21;
  tmpvar_21 = texture2DGradARB (_CityOverlayTex, uv_5, tmpvar_18.xy, tmpvar_18.zw);
  cityoverlay_4.xyz = tmpvar_21.xyz;
  vec2 tmpvar_22;
  tmpvar_22 = (texture2DGradARB (_BumpMap, uv_5, tmpvar_18.xy, tmpvar_18.zw).wy - vec2(0.5, 0.5));
  localCoords_3.x = (tmpvar_22.x * 0.25);
  localCoords_3.y = (tmpvar_22.y * 0.5);
  uv_5.x = (uv_5.x - 0.5);
  vec2 tmpvar_23;
  tmpvar_23 = (uv_5 + localCoords_3);
  uv_5 = tmpvar_23;
  norm_2.z = cos((6.28319 * tmpvar_23.x));
  norm_2.x = sin((6.28319 * tmpvar_23.x));
  norm_2.y = cos((3.14159 * tmpvar_23.y));
  vec3 tmpvar_24;
  tmpvar_24 = -(norm_2);
  norm_2 = tmpvar_24;
  vec3 tmpvar_25;
  tmpvar_25 = abs(xlv_TEXCOORD6);
  float tmpvar_26;
  tmpvar_26 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  cityoverlay_4.w = (tmpvar_21.w * clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0));
  vec4 tmpvar_27;
  tmpvar_27 = (cityoverlay_4 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_25.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_25.yyyy));
  citydarkoverlay_1 = tmpvar_27;
  vec4 tmpvar_28;
  tmpvar_28 = (cityoverlay_4 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_25.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_25.yyyy));
  vec4 tmpvar_29;
  tmpvar_29 = (mix (mix ((xlv_TEXCOORD1 + mix ((0.25 * (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_20)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_20)), tmpvar_25.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_20)), tmpvar_25.yyyy) - 0.5)), vec4(0.0, 0.0, 0.0, 0.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))), tmpvar_19, vec4(tmpvar_26)), tmpvar_28, tmpvar_28.wwww) * _Color);
  color_6 = tmpvar_29;
  float tmpvar_30;
  tmpvar_30 = clamp (dot (tmpvar_24, -(_SunDir)), 0.0, 1.0);
  float tmpvar_31;
  tmpvar_31 = mix (clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), tmpvar_30, tmpvar_26);
  vec4 tmpvar_32;
  tmpvar_32 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)));
  vec4 tmpvar_33;
  tmpvar_33 = textureCube (_LightTexture0, xlv_TEXCOORD3);
  float tmpvar_34;
  tmpvar_34 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  float tmpvar_35;
  tmpvar_35 = dot (textureCube (_ShadowMapTexture, xlv_TEXCOORD4), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  float tmpvar_36;
  if ((tmpvar_35 < tmpvar_34)) {
    tmpvar_36 = _LightShadowData.x;
  } else {
    tmpvar_36 = 1.0;
  };
  float tmpvar_37;
  tmpvar_37 = ((tmpvar_32.w * tmpvar_33.w) * tmpvar_36);
  vec3 tmpvar_38;
  tmpvar_38 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_31) * 4.0) * tmpvar_37), 0.0, 1.0))), 0.0, 1.0) * clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0));
  color_6.xyz = (tmpvar_29.xyz + (_Albedo * tmpvar_38));
  color_6.xyz = (color_6.xyz * tmpvar_38);
  citydarkoverlay_1.w = (tmpvar_27.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_30 - 0.01)) / 0.99) * 4.0) * tmpvar_37), 0.0, 1.0), 0.0, 1.0)));
  color_6.xyz = mix (color_6, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_6.w = 1.0;
  gl_FragData[0] = color_6;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_LightPositionRange]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 32 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
def c14, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
mov r1.xyz, v2
mov r1.w, c14.x
dp4 r2.z, r1, c6
dp4 r2.x, r1, c4
dp4 r2.y, r1, c5
mov r0.zw, v4.xyxy
mov r0.xy, v3
dp4 r2.w, r0, r0
rsq r1.x, r2.w
mul r0.xyz, r1.x, r0
mov o7.xyz, -r0
dp3 r0.w, r2, r2
rsq r0.w, r0.w
mul o6.xyz, r0.w, r2
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
dp4 r0.w, v0, c7
add r1.xyz, -r0, c12
dp3 r1.x, r1, r1
rsq r1.x, r1.x
mov o2, v1
dp4 o4.z, r0, c10
dp4 o4.y, r0, c9
dp4 o4.x, r0, c8
rcp o1.x, r1.x
mov o3.xyz, v2
add o5.xyz, r0, -c13
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  highp vec3 p_2;
  p_2 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_1;
  highp vec4 tmpvar_4;
  tmpvar_4.x = _glesMultiTexCoord0.x;
  tmpvar_4.y = _glesMultiTexCoord0.y;
  tmpvar_4.z = _glesMultiTexCoord1.x;
  tmpvar_4.w = _glesMultiTexCoord1.y;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_4).xyz);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float terminator_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float TNdotL_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump vec4 citydarkoverlay_8;
  mediump float handoff_9;
  mediump float detailLevel_10;
  mediump vec4 detail_11;
  mediump vec3 norm_12;
  highp vec2 localCoords_13;
  mediump vec4 encnorm_14;
  mediump vec4 citylightoverlaydetailZ_15;
  mediump vec4 citylightoverlaydetailY_16;
  mediump vec4 citylightoverlaydetailX_17;
  mediump vec4 citydarkoverlaydetailZ_18;
  mediump vec4 citydarkoverlaydetailY_19;
  mediump vec4 citydarkoverlaydetailX_20;
  mediump vec4 cityoverlay_21;
  mediump float vertLerp_22;
  mediump vec4 main_23;
  highp vec2 uv_24;
  mediump vec4 color_25;
  highp float r_26;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_26));
  uv_24.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_30;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_31;
    y_over_x_31 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_32;
    highp float x_33;
    x_33 = (y_over_x_31 * inversesqrt(((y_over_x_31 * y_over_x_31) + 1.0)));
    s_32 = (sign(x_33) * (1.5708 - (sqrt((1.0 - abs(x_33))) * (1.5708 + (abs(x_33) * (-0.214602 + (abs(x_33) * (0.0865667 + (abs(x_33) * -0.0310296)))))))));
    r_30 = s_32;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_30 = (s_32 + 3.14159);
      } else {
        r_30 = (r_30 - 3.14159);
      };
    };
  } else {
    r_30 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_34;
  tmpvar_34 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_MainTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  main_23 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD6.zy * _DetailScale);
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zx * _DetailScale);
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.xy * _DetailScale);
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  highp float tmpvar_45;
  tmpvar_45 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_22 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailVertTex, tmpvar_42);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailTex, tmpvar_39);
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_47, vec4(vertLerp_22));
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailVertTex, tmpvar_43);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailTex, tmpvar_40);
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (tmpvar_49, tmpvar_50, vec4(vertLerp_22));
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailVertTex, tmpvar_44);
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailTex, tmpvar_41);
  mediump vec4 tmpvar_54;
  tmpvar_54 = mix (tmpvar_52, tmpvar_53, vec4(vertLerp_22));
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2DGradEXT (_CityOverlayTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  cityoverlay_21 = tmpvar_55;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_56 = texture2D (_CityDarkOverlayDetailTex, P_57);
  citydarkoverlaydetailX_20 = tmpvar_56;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityDarkOverlayDetailTex, P_59);
  citydarkoverlaydetailY_19 = tmpvar_58;
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_60 = texture2D (_CityDarkOverlayDetailTex, P_61);
  citydarkoverlaydetailZ_18 = tmpvar_60;
  lowp vec4 tmpvar_62;
  highp vec2 P_63;
  P_63 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_62 = texture2D (_CityLightOverlayDetailTex, P_63);
  citylightoverlaydetailX_17 = tmpvar_62;
  lowp vec4 tmpvar_64;
  highp vec2 P_65;
  P_65 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_64 = texture2D (_CityLightOverlayDetailTex, P_65);
  citylightoverlaydetailY_16 = tmpvar_64;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_66 = texture2D (_CityLightOverlayDetailTex, P_67);
  citylightoverlaydetailZ_15 = tmpvar_66;
  lowp vec4 tmpvar_68;
  tmpvar_68 = texture2DGradEXT (_BumpMap, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  encnorm_14 = tmpvar_68;
  mediump vec2 tmpvar_69;
  tmpvar_69 = encnorm_14.wy;
  localCoords_13 = tmpvar_69;
  highp vec2 tmpvar_70;
  tmpvar_70 = (localCoords_13 - vec2(0.5, 0.5));
  localCoords_13.x = (tmpvar_70.x * 0.25);
  localCoords_13.y = (tmpvar_70.y * 0.5);
  uv_24.x = (uv_24.x - 0.5);
  highp vec2 tmpvar_71;
  tmpvar_71 = (uv_24 + localCoords_13);
  uv_24 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = cos((6.28319 * tmpvar_71.x));
  norm_12.z = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = sin((6.28319 * tmpvar_71.x));
  norm_12.x = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = cos((3.14159 * tmpvar_71.y));
  norm_12.y = tmpvar_74;
  mediump vec3 tmpvar_75;
  tmpvar_75 = -(norm_12);
  norm_12 = tmpvar_75;
  highp vec3 tmpvar_76;
  tmpvar_76 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (tmpvar_54, tmpvar_48, tmpvar_76.xxxx);
  detail_11 = tmpvar_77;
  highp vec4 tmpvar_78;
  tmpvar_78 = (0.25 * (mix (detail_11, tmpvar_51, tmpvar_76.yyyy) - 0.5));
  detail_11 = tmpvar_78;
  highp float tmpvar_79;
  tmpvar_79 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_10 = tmpvar_79;
  mediump vec4 tmpvar_80;
  tmpvar_80 = mix (detail_11, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_10));
  highp vec4 tmpvar_81;
  tmpvar_81 = (xlv_TEXCOORD1 + tmpvar_80);
  color_25 = tmpvar_81;
  highp float tmpvar_82;
  tmpvar_82 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_9 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0);
  cityoverlay_21.w = (cityoverlay_21.w * tmpvar_83);
  highp vec4 tmpvar_84;
  tmpvar_84 = mix (citydarkoverlaydetailZ_18, citydarkoverlaydetailX_20, tmpvar_76.xxxx);
  detail_11 = tmpvar_84;
  highp vec4 tmpvar_85;
  tmpvar_85 = mix (detail_11, citydarkoverlaydetailY_19, tmpvar_76.yyyy);
  detail_11 = tmpvar_85;
  mediump vec4 tmpvar_86;
  tmpvar_86 = (cityoverlay_21 * detail_11);
  citydarkoverlay_8 = tmpvar_86;
  highp vec4 tmpvar_87;
  tmpvar_87 = mix (citylightoverlaydetailZ_15, citylightoverlaydetailX_17, tmpvar_76.xxxx);
  detail_11 = tmpvar_87;
  highp vec4 tmpvar_88;
  tmpvar_88 = mix (detail_11, citylightoverlaydetailY_16, tmpvar_76.yyyy);
  detail_11 = tmpvar_88;
  mediump vec4 tmpvar_89;
  tmpvar_89 = (cityoverlay_21 * detail_11);
  mediump vec4 tmpvar_90;
  tmpvar_90 = (mix (mix (color_25, main_23, vec4(handoff_9)), tmpvar_89, tmpvar_89.wwww) * _Color);
  color_25 = tmpvar_90;
  highp vec3 tmpvar_91;
  tmpvar_91 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_91;
  highp vec3 tmpvar_92;
  tmpvar_92 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_92;
  highp float tmpvar_93;
  tmpvar_93 = clamp (dot (xlv_TEXCOORD5, lightDirection_6), 0.0, 1.0);
  TNdotL_5 = tmpvar_93;
  mediump float tmpvar_94;
  tmpvar_94 = clamp (dot (tmpvar_75, -(_SunDir)), 0.0, 1.0);
  mediump float tmpvar_95;
  tmpvar_95 = mix (TNdotL_5, tmpvar_94, handoff_9);
  highp float tmpvar_96;
  tmpvar_96 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_97;
  tmpvar_97 = texture2D (_LightTextureB0, vec2(tmpvar_96));
  lowp vec4 tmpvar_98;
  tmpvar_98 = textureCube (_LightTexture0, xlv_TEXCOORD3);
  highp float tmpvar_99;
  tmpvar_99 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  highp vec4 packDist_100;
  lowp vec4 tmpvar_101;
  tmpvar_101 = textureCube (_ShadowMapTexture, xlv_TEXCOORD4);
  packDist_100 = tmpvar_101;
  highp float tmpvar_102;
  tmpvar_102 = dot (packDist_100, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp float tmpvar_103;
  if ((tmpvar_102 < tmpvar_99)) {
    tmpvar_103 = _LightShadowData.x;
  } else {
    tmpvar_103 = 1.0;
  };
  highp float tmpvar_104;
  tmpvar_104 = ((tmpvar_97.w * tmpvar_98.w) * tmpvar_103);
  atten_4 = tmpvar_104;
  mediump float tmpvar_105;
  tmpvar_105 = clamp ((((_LightColor0.w * tmpvar_95) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_106;
  tmpvar_106 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_105)), 0.0, 1.0);
  light_3 = tmpvar_106;
  highp float tmpvar_107;
  tmpvar_107 = clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0);
  terminator_2 = tmpvar_107;
  mediump vec3 tmpvar_108;
  tmpvar_108 = (light_3 * terminator_2);
  light_3 = tmpvar_108;
  highp vec3 tmpvar_109;
  tmpvar_109 = (tmpvar_90.xyz + (_Albedo * tmpvar_108));
  color_25.xyz = tmpvar_109;
  color_25.xyz = (color_25.xyz * tmpvar_108);
  citydarkoverlay_8.w = (tmpvar_86.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_94 - 0.01)) / 0.99) * 4.0) * atten_4), 0.0, 1.0), 0.0, 1.0)));
  color_25.xyz = mix (color_25, citydarkoverlay_8, citydarkoverlay_8.wwww).xyz;
  color_25.w = 1.0;
  tmpvar_1 = color_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  highp vec3 p_2;
  p_2 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_1;
  highp vec4 tmpvar_4;
  tmpvar_4.x = _glesMultiTexCoord0.x;
  tmpvar_4.y = _glesMultiTexCoord0.y;
  tmpvar_4.z = _glesMultiTexCoord1.x;
  tmpvar_4.w = _glesMultiTexCoord1.y;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_4).xyz);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float terminator_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float TNdotL_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump vec4 citydarkoverlay_8;
  mediump float handoff_9;
  mediump float detailLevel_10;
  mediump vec4 detail_11;
  mediump vec3 norm_12;
  highp vec2 localCoords_13;
  mediump vec4 encnorm_14;
  mediump vec4 citylightoverlaydetailZ_15;
  mediump vec4 citylightoverlaydetailY_16;
  mediump vec4 citylightoverlaydetailX_17;
  mediump vec4 citydarkoverlaydetailZ_18;
  mediump vec4 citydarkoverlaydetailY_19;
  mediump vec4 citydarkoverlaydetailX_20;
  mediump vec4 cityoverlay_21;
  mediump float vertLerp_22;
  mediump vec4 main_23;
  highp vec2 uv_24;
  mediump vec4 color_25;
  highp float r_26;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_26));
  uv_24.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_30;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_31;
    y_over_x_31 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_32;
    highp float x_33;
    x_33 = (y_over_x_31 * inversesqrt(((y_over_x_31 * y_over_x_31) + 1.0)));
    s_32 = (sign(x_33) * (1.5708 - (sqrt((1.0 - abs(x_33))) * (1.5708 + (abs(x_33) * (-0.214602 + (abs(x_33) * (0.0865667 + (abs(x_33) * -0.0310296)))))))));
    r_30 = s_32;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_30 = (s_32 + 3.14159);
      } else {
        r_30 = (r_30 - 3.14159);
      };
    };
  } else {
    r_30 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_34;
  tmpvar_34 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_MainTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  main_23 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD6.zy * _DetailScale);
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zx * _DetailScale);
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.xy * _DetailScale);
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  highp float tmpvar_45;
  tmpvar_45 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_22 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailVertTex, tmpvar_42);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailTex, tmpvar_39);
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_47, vec4(vertLerp_22));
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailVertTex, tmpvar_43);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailTex, tmpvar_40);
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (tmpvar_49, tmpvar_50, vec4(vertLerp_22));
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailVertTex, tmpvar_44);
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailTex, tmpvar_41);
  mediump vec4 tmpvar_54;
  tmpvar_54 = mix (tmpvar_52, tmpvar_53, vec4(vertLerp_22));
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2DGradEXT (_CityOverlayTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  cityoverlay_21 = tmpvar_55;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_56 = texture2D (_CityDarkOverlayDetailTex, P_57);
  citydarkoverlaydetailX_20 = tmpvar_56;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityDarkOverlayDetailTex, P_59);
  citydarkoverlaydetailY_19 = tmpvar_58;
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_60 = texture2D (_CityDarkOverlayDetailTex, P_61);
  citydarkoverlaydetailZ_18 = tmpvar_60;
  lowp vec4 tmpvar_62;
  highp vec2 P_63;
  P_63 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_62 = texture2D (_CityLightOverlayDetailTex, P_63);
  citylightoverlaydetailX_17 = tmpvar_62;
  lowp vec4 tmpvar_64;
  highp vec2 P_65;
  P_65 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_64 = texture2D (_CityLightOverlayDetailTex, P_65);
  citylightoverlaydetailY_16 = tmpvar_64;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_66 = texture2D (_CityLightOverlayDetailTex, P_67);
  citylightoverlaydetailZ_15 = tmpvar_66;
  lowp vec4 tmpvar_68;
  tmpvar_68 = texture2DGradEXT (_BumpMap, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  encnorm_14 = tmpvar_68;
  mediump vec2 tmpvar_69;
  tmpvar_69 = encnorm_14.wy;
  localCoords_13 = tmpvar_69;
  highp vec2 tmpvar_70;
  tmpvar_70 = (localCoords_13 - vec2(0.5, 0.5));
  localCoords_13.x = (tmpvar_70.x * 0.25);
  localCoords_13.y = (tmpvar_70.y * 0.5);
  uv_24.x = (uv_24.x - 0.5);
  highp vec2 tmpvar_71;
  tmpvar_71 = (uv_24 + localCoords_13);
  uv_24 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = cos((6.28319 * tmpvar_71.x));
  norm_12.z = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = sin((6.28319 * tmpvar_71.x));
  norm_12.x = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = cos((3.14159 * tmpvar_71.y));
  norm_12.y = tmpvar_74;
  mediump vec3 tmpvar_75;
  tmpvar_75 = -(norm_12);
  norm_12 = tmpvar_75;
  highp vec3 tmpvar_76;
  tmpvar_76 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (tmpvar_54, tmpvar_48, tmpvar_76.xxxx);
  detail_11 = tmpvar_77;
  highp vec4 tmpvar_78;
  tmpvar_78 = (0.25 * (mix (detail_11, tmpvar_51, tmpvar_76.yyyy) - 0.5));
  detail_11 = tmpvar_78;
  highp float tmpvar_79;
  tmpvar_79 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_10 = tmpvar_79;
  mediump vec4 tmpvar_80;
  tmpvar_80 = mix (detail_11, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_10));
  highp vec4 tmpvar_81;
  tmpvar_81 = (xlv_TEXCOORD1 + tmpvar_80);
  color_25 = tmpvar_81;
  highp float tmpvar_82;
  tmpvar_82 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_9 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0);
  cityoverlay_21.w = (cityoverlay_21.w * tmpvar_83);
  highp vec4 tmpvar_84;
  tmpvar_84 = mix (citydarkoverlaydetailZ_18, citydarkoverlaydetailX_20, tmpvar_76.xxxx);
  detail_11 = tmpvar_84;
  highp vec4 tmpvar_85;
  tmpvar_85 = mix (detail_11, citydarkoverlaydetailY_19, tmpvar_76.yyyy);
  detail_11 = tmpvar_85;
  mediump vec4 tmpvar_86;
  tmpvar_86 = (cityoverlay_21 * detail_11);
  citydarkoverlay_8 = tmpvar_86;
  highp vec4 tmpvar_87;
  tmpvar_87 = mix (citylightoverlaydetailZ_15, citylightoverlaydetailX_17, tmpvar_76.xxxx);
  detail_11 = tmpvar_87;
  highp vec4 tmpvar_88;
  tmpvar_88 = mix (detail_11, citylightoverlaydetailY_16, tmpvar_76.yyyy);
  detail_11 = tmpvar_88;
  mediump vec4 tmpvar_89;
  tmpvar_89 = (cityoverlay_21 * detail_11);
  mediump vec4 tmpvar_90;
  tmpvar_90 = (mix (mix (color_25, main_23, vec4(handoff_9)), tmpvar_89, tmpvar_89.wwww) * _Color);
  color_25 = tmpvar_90;
  highp vec3 tmpvar_91;
  tmpvar_91 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_91;
  highp vec3 tmpvar_92;
  tmpvar_92 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_92;
  highp float tmpvar_93;
  tmpvar_93 = clamp (dot (xlv_TEXCOORD5, lightDirection_6), 0.0, 1.0);
  TNdotL_5 = tmpvar_93;
  mediump float tmpvar_94;
  tmpvar_94 = clamp (dot (tmpvar_75, -(_SunDir)), 0.0, 1.0);
  mediump float tmpvar_95;
  tmpvar_95 = mix (TNdotL_5, tmpvar_94, handoff_9);
  highp float tmpvar_96;
  tmpvar_96 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_97;
  tmpvar_97 = texture2D (_LightTextureB0, vec2(tmpvar_96));
  lowp vec4 tmpvar_98;
  tmpvar_98 = textureCube (_LightTexture0, xlv_TEXCOORD3);
  highp float tmpvar_99;
  tmpvar_99 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  highp vec4 packDist_100;
  lowp vec4 tmpvar_101;
  tmpvar_101 = textureCube (_ShadowMapTexture, xlv_TEXCOORD4);
  packDist_100 = tmpvar_101;
  highp float tmpvar_102;
  tmpvar_102 = dot (packDist_100, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp float tmpvar_103;
  if ((tmpvar_102 < tmpvar_99)) {
    tmpvar_103 = _LightShadowData.x;
  } else {
    tmpvar_103 = 1.0;
  };
  highp float tmpvar_104;
  tmpvar_104 = ((tmpvar_97.w * tmpvar_98.w) * tmpvar_103);
  atten_4 = tmpvar_104;
  mediump float tmpvar_105;
  tmpvar_105 = clamp ((((_LightColor0.w * tmpvar_95) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_106;
  tmpvar_106 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_105)), 0.0, 1.0);
  light_3 = tmpvar_106;
  highp float tmpvar_107;
  tmpvar_107 = clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0);
  terminator_2 = tmpvar_107;
  mediump vec3 tmpvar_108;
  tmpvar_108 = (light_3 * terminator_2);
  light_3 = tmpvar_108;
  highp vec3 tmpvar_109;
  tmpvar_109 = (tmpvar_90.xyz + (_Albedo * tmpvar_108));
  color_25.xyz = tmpvar_109;
  color_25.xyz = (color_25.xyz * tmpvar_108);
  citydarkoverlay_8.w = (tmpvar_86.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_94 - 0.01)) / 0.99) * 4.0) * atten_4), 0.0, 1.0), 0.0, 1.0)));
  color_25.xyz = mix (color_25, citydarkoverlay_8, citydarkoverlay_8.wwww).xyz;
  color_25.w = 1.0;
  tmpvar_1 = color_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 331
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 436
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 objnormal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
};
#line 426
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 341
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 354
#line 362
#line 376
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 409
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 413
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 417
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp mat4 _Rotation;
#line 421
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 425
uniform sampler2D _CityLightOverlayDetailTex;
#line 448
#line 474
#line 448
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 452
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    #line 456
    o.color = v.color;
    o.objnormal = v.normal;
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    o._ShadowCoord = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    #line 461
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.objnormal);
    xlv_TEXCOORD3 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereCoords);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 331
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 436
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 objnormal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
};
#line 426
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 341
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 354
#line 362
#line 376
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 409
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 413
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 417
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp mat4 _Rotation;
#line 421
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 425
uniform sampler2D _CityLightOverlayDetailTex;
#line 448
#line 474
#line 463
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 465
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 469
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 215
highp float DecodeFloatRGBA( in highp vec4 enc ) {
    highp vec4 kDecodeDot = vec4( 1.0, 0.00392157, 1.53787e-05, 6.22737e-09);
    return dot( enc, kDecodeDot);
}
#line 316
highp float SampleCubeDistance( in highp vec3 vec ) {
    highp vec4 packDist = texture( _ShadowMapTexture, vec);
    #line 319
    return DecodeFloatRGBA( packDist);
}
#line 321
highp float unityCubeShadow( in highp vec3 vec ) {
    #line 323
    highp float mydist = (length(vec) * _LightPositionRange.w);
    mydist *= 0.97;
    highp float dist = SampleCubeDistance( vec);
    return (( (dist < mydist) ) ? ( _LightShadowData.x ) : ( 1.0 ));
}
#line 474
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    #line 478
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 482
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    highp vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    highp vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    highp vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    #line 486
    highp vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    highp vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    highp vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, (-IN.sphereCoords))) - 0.95)) + 0.5));
    #line 490
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    #line 494
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    #line 498
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    highp vec2 localCoords = encnorm.wy;
    #line 502
    localCoords -= vec2( 0.5);
    localCoords.x *= 0.25;
    localCoords.y *= 0.5;
    uv.x -= 0.5;
    #line 506
    uv += localCoords;
    mediump vec3 norm;
    norm.z = cos((6.28319 * uv.x));
    norm.x = sin((6.28319 * uv.x));
    #line 510
    norm.y = cos((3.14159 * uv.y));
    norm = (-norm);
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    #line 514
    detail = (0.25 * (mix( detail, detailY, vec4( sphereNrm.y)) - 0.5));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (IN.color + mix( detail.xyzw, vec4( 0.0), vec4( detailLevel)));
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    #line 518
    color = mix( color, main, vec4( handoff));
    cityoverlay.w *= xll_saturate_f(floor((IN.color.w + 0.99)));
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    #line 522
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    #line 526
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    #line 530
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    lowp float atten = ((texture( _LightTextureB0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * texture( _LightTexture0, IN._LightCoord).w) * unityCubeShadow( IN._ShadowCoord));
    #line 534
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    mediump float terminator = xll_saturate_f(floor((1.01 + dot( IN.sphereCoords, _SunDir))));
    light *= terminator;
    #line 538
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (SNdotL - 0.01)) / 0.99) * 4.0) * atten));
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    #line 542
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.objnormal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform mat4 unity_World2Shadow[4];
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec4 tmpvar_3;
  tmpvar_3.x = gl_MultiTexCoord0.x;
  tmpvar_3.y = gl_MultiTexCoord0.y;
  tmpvar_3.z = gl_MultiTexCoord1.x;
  tmpvar_3.w = gl_MultiTexCoord1.y;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * gl_Vertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_3).xyz);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec3 norm_2;
  vec2 localCoords_3;
  vec4 cityoverlay_4;
  vec2 uv_5;
  vec4 color_6;
  float r_7;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_5.x = (0.5 + (0.159155 * r_7));
  uv_5.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_11;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_12;
    y_over_x_12 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_13;
    float x_14;
    x_14 = (y_over_x_12 * inversesqrt(((y_over_x_12 * y_over_x_12) + 1.0)));
    s_13 = (sign(x_14) * (1.5708 - (sqrt((1.0 - abs(x_14))) * (1.5708 + (abs(x_14) * (-0.214602 + (abs(x_14) * (0.0865667 + (abs(x_14) * -0.0310296)))))))));
    r_11 = s_13;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_11 = (s_13 + 3.14159);
      } else {
        r_11 = (r_11 - 3.14159);
      };
    };
  } else {
    r_11 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_15;
  tmpvar_15 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_16;
  tmpvar_16 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_17;
  tmpvar_17 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_18;
  tmpvar_18.x = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_18.y = dFdx(tmpvar_15);
  tmpvar_18.z = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_18.w = dFdy(tmpvar_15);
  vec4 tmpvar_19;
  tmpvar_19 = texture2DGradARB (_MainTex, uv_5, tmpvar_18.xy, tmpvar_18.zw);
  float tmpvar_20;
  tmpvar_20 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_21;
  tmpvar_21 = texture2DGradARB (_CityOverlayTex, uv_5, tmpvar_18.xy, tmpvar_18.zw);
  cityoverlay_4.xyz = tmpvar_21.xyz;
  vec2 tmpvar_22;
  tmpvar_22 = (texture2DGradARB (_BumpMap, uv_5, tmpvar_18.xy, tmpvar_18.zw).wy - vec2(0.5, 0.5));
  localCoords_3.x = (tmpvar_22.x * 0.25);
  localCoords_3.y = (tmpvar_22.y * 0.5);
  uv_5.x = (uv_5.x - 0.5);
  vec2 tmpvar_23;
  tmpvar_23 = (uv_5 + localCoords_3);
  uv_5 = tmpvar_23;
  norm_2.z = cos((6.28319 * tmpvar_23.x));
  norm_2.x = sin((6.28319 * tmpvar_23.x));
  norm_2.y = cos((3.14159 * tmpvar_23.y));
  vec3 tmpvar_24;
  tmpvar_24 = -(norm_2);
  norm_2 = tmpvar_24;
  vec3 tmpvar_25;
  tmpvar_25 = abs(xlv_TEXCOORD6);
  float tmpvar_26;
  tmpvar_26 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  cityoverlay_4.w = (tmpvar_21.w * clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0));
  vec4 tmpvar_27;
  tmpvar_27 = (cityoverlay_4 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_25.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_25.yyyy));
  citydarkoverlay_1 = tmpvar_27;
  vec4 tmpvar_28;
  tmpvar_28 = (cityoverlay_4 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_25.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_25.yyyy));
  vec4 tmpvar_29;
  tmpvar_29 = (mix (mix ((xlv_TEXCOORD1 + mix ((0.25 * (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_20)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_20)), tmpvar_25.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_20)), tmpvar_25.yyyy) - 0.5)), vec4(0.0, 0.0, 0.0, 0.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))), tmpvar_19, vec4(tmpvar_26)), tmpvar_28, tmpvar_28.wwww) * _Color);
  color_6 = tmpvar_29;
  float tmpvar_30;
  tmpvar_30 = clamp (dot (tmpvar_24, -(_SunDir)), 0.0, 1.0);
  float tmpvar_31;
  tmpvar_31 = mix (clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), tmpvar_30, tmpvar_26);
  vec4 tmpvar_32;
  tmpvar_32 = texture2D (_LightTexture0, ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5));
  vec4 tmpvar_33;
  tmpvar_33 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz)));
  vec4 shadowVals_34;
  vec3 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD4.xyz / xlv_TEXCOORD4.w);
  shadowVals_34.x = texture2D (_ShadowMapTexture, (tmpvar_35.xy + _ShadowOffsets[0].xy)).x;
  shadowVals_34.y = texture2D (_ShadowMapTexture, (tmpvar_35.xy + _ShadowOffsets[1].xy)).x;
  shadowVals_34.z = texture2D (_ShadowMapTexture, (tmpvar_35.xy + _ShadowOffsets[2].xy)).x;
  shadowVals_34.w = texture2D (_ShadowMapTexture, (tmpvar_35.xy + _ShadowOffsets[3].xy)).x;
  bvec4 tmpvar_36;
  tmpvar_36 = lessThan (shadowVals_34, tmpvar_35.zzzz);
  vec4 tmpvar_37;
  tmpvar_37 = _LightShadowData.xxxx;
  float tmpvar_38;
  if (tmpvar_36.x) {
    tmpvar_38 = tmpvar_37.x;
  } else {
    tmpvar_38 = 1.0;
  };
  float tmpvar_39;
  if (tmpvar_36.y) {
    tmpvar_39 = tmpvar_37.y;
  } else {
    tmpvar_39 = 1.0;
  };
  float tmpvar_40;
  if (tmpvar_36.z) {
    tmpvar_40 = tmpvar_37.z;
  } else {
    tmpvar_40 = 1.0;
  };
  float tmpvar_41;
  if (tmpvar_36.w) {
    tmpvar_41 = tmpvar_37.w;
  } else {
    tmpvar_41 = 1.0;
  };
  vec4 tmpvar_42;
  tmpvar_42.x = tmpvar_38;
  tmpvar_42.y = tmpvar_39;
  tmpvar_42.z = tmpvar_40;
  tmpvar_42.w = tmpvar_41;
  float tmpvar_43;
  tmpvar_43 = (((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_32.w) * tmpvar_33.w) * dot (tmpvar_42, vec4(0.25, 0.25, 0.25, 0.25)));
  vec3 tmpvar_44;
  tmpvar_44 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_31) * 4.0) * tmpvar_43), 0.0, 1.0))), 0.0, 1.0) * clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0));
  color_6.xyz = (tmpvar_29.xyz + (_Albedo * tmpvar_44));
  color_6.xyz = (color_6.xyz * tmpvar_44);
  citydarkoverlay_1.w = (tmpvar_27.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_30 - 0.01)) / 0.99) * 4.0) * tmpvar_43), 0.0, 1.0), 0.0, 1.0)));
  color_6.xyz = mix (color_6, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_6.w = 1.0;
  gl_FragData[0] = color_6;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Matrix 4 [unity_World2Shadow0]
Matrix 8 [_Object2World]
Matrix 12 [_LightMatrix0]
"vs_3_0
; 36 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
def c17, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
mov r1.xyz, v2
mov r1.w, c17.x
dp4 r2.z, r1, c10
dp4 r2.x, r1, c8
dp4 r2.y, r1, c9
mov r0.zw, v4.xyxy
mov r0.xy, v3
dp4 r2.w, r0, r0
rsq r1.x, r2.w
mul r0.xyz, r1.x, r0
mov o7.xyz, -r0
dp3 r0.w, r2, r2
rsq r0.w, r0.w
mul o6.xyz, r0.w, r2
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
dp4 r0.w, v0, c11
add r1.xyz, -r0, c16
dp3 r1.x, r1, r1
rsq r1.x, r1.x
mov o2, v1
dp4 o4.w, r0, c15
dp4 o4.z, r0, c14
dp4 o4.y, r0, c13
dp4 o4.x, r0, c12
dp4 o5.w, r0, c7
dp4 o5.z, r0, c6
dp4 o5.y, r0, c5
dp4 o5.x, r0, c4
rcp o1.x, r1.x
mov o3.xyz, v2
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  highp vec3 p_2;
  p_2 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_1;
  highp vec4 tmpvar_4;
  tmpvar_4.x = _glesMultiTexCoord0.x;
  tmpvar_4.y = _glesMultiTexCoord0.y;
  tmpvar_4.z = _glesMultiTexCoord1.x;
  tmpvar_4.w = _glesMultiTexCoord1.y;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_4).xyz);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float terminator_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float TNdotL_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump vec4 citydarkoverlay_8;
  mediump float handoff_9;
  mediump float detailLevel_10;
  mediump vec4 detail_11;
  mediump vec3 norm_12;
  highp vec2 localCoords_13;
  mediump vec4 encnorm_14;
  mediump vec4 citylightoverlaydetailZ_15;
  mediump vec4 citylightoverlaydetailY_16;
  mediump vec4 citylightoverlaydetailX_17;
  mediump vec4 citydarkoverlaydetailZ_18;
  mediump vec4 citydarkoverlaydetailY_19;
  mediump vec4 citydarkoverlaydetailX_20;
  mediump vec4 cityoverlay_21;
  mediump float vertLerp_22;
  mediump vec4 main_23;
  highp vec2 uv_24;
  mediump vec4 color_25;
  highp float r_26;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_26));
  uv_24.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_30;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_31;
    y_over_x_31 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_32;
    highp float x_33;
    x_33 = (y_over_x_31 * inversesqrt(((y_over_x_31 * y_over_x_31) + 1.0)));
    s_32 = (sign(x_33) * (1.5708 - (sqrt((1.0 - abs(x_33))) * (1.5708 + (abs(x_33) * (-0.214602 + (abs(x_33) * (0.0865667 + (abs(x_33) * -0.0310296)))))))));
    r_30 = s_32;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_30 = (s_32 + 3.14159);
      } else {
        r_30 = (r_30 - 3.14159);
      };
    };
  } else {
    r_30 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_34;
  tmpvar_34 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_MainTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  main_23 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD6.zy * _DetailScale);
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zx * _DetailScale);
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.xy * _DetailScale);
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  highp float tmpvar_45;
  tmpvar_45 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_22 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailVertTex, tmpvar_42);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailTex, tmpvar_39);
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_47, vec4(vertLerp_22));
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailVertTex, tmpvar_43);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailTex, tmpvar_40);
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (tmpvar_49, tmpvar_50, vec4(vertLerp_22));
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailVertTex, tmpvar_44);
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailTex, tmpvar_41);
  mediump vec4 tmpvar_54;
  tmpvar_54 = mix (tmpvar_52, tmpvar_53, vec4(vertLerp_22));
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2DGradEXT (_CityOverlayTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  cityoverlay_21 = tmpvar_55;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_56 = texture2D (_CityDarkOverlayDetailTex, P_57);
  citydarkoverlaydetailX_20 = tmpvar_56;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityDarkOverlayDetailTex, P_59);
  citydarkoverlaydetailY_19 = tmpvar_58;
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_60 = texture2D (_CityDarkOverlayDetailTex, P_61);
  citydarkoverlaydetailZ_18 = tmpvar_60;
  lowp vec4 tmpvar_62;
  highp vec2 P_63;
  P_63 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_62 = texture2D (_CityLightOverlayDetailTex, P_63);
  citylightoverlaydetailX_17 = tmpvar_62;
  lowp vec4 tmpvar_64;
  highp vec2 P_65;
  P_65 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_64 = texture2D (_CityLightOverlayDetailTex, P_65);
  citylightoverlaydetailY_16 = tmpvar_64;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_66 = texture2D (_CityLightOverlayDetailTex, P_67);
  citylightoverlaydetailZ_15 = tmpvar_66;
  lowp vec4 tmpvar_68;
  tmpvar_68 = texture2DGradEXT (_BumpMap, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  encnorm_14 = tmpvar_68;
  mediump vec2 tmpvar_69;
  tmpvar_69 = encnorm_14.wy;
  localCoords_13 = tmpvar_69;
  highp vec2 tmpvar_70;
  tmpvar_70 = (localCoords_13 - vec2(0.5, 0.5));
  localCoords_13.x = (tmpvar_70.x * 0.25);
  localCoords_13.y = (tmpvar_70.y * 0.5);
  uv_24.x = (uv_24.x - 0.5);
  highp vec2 tmpvar_71;
  tmpvar_71 = (uv_24 + localCoords_13);
  uv_24 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = cos((6.28319 * tmpvar_71.x));
  norm_12.z = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = sin((6.28319 * tmpvar_71.x));
  norm_12.x = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = cos((3.14159 * tmpvar_71.y));
  norm_12.y = tmpvar_74;
  mediump vec3 tmpvar_75;
  tmpvar_75 = -(norm_12);
  norm_12 = tmpvar_75;
  highp vec3 tmpvar_76;
  tmpvar_76 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (tmpvar_54, tmpvar_48, tmpvar_76.xxxx);
  detail_11 = tmpvar_77;
  highp vec4 tmpvar_78;
  tmpvar_78 = (0.25 * (mix (detail_11, tmpvar_51, tmpvar_76.yyyy) - 0.5));
  detail_11 = tmpvar_78;
  highp float tmpvar_79;
  tmpvar_79 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_10 = tmpvar_79;
  mediump vec4 tmpvar_80;
  tmpvar_80 = mix (detail_11, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_10));
  highp vec4 tmpvar_81;
  tmpvar_81 = (xlv_TEXCOORD1 + tmpvar_80);
  color_25 = tmpvar_81;
  highp float tmpvar_82;
  tmpvar_82 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_9 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0);
  cityoverlay_21.w = (cityoverlay_21.w * tmpvar_83);
  highp vec4 tmpvar_84;
  tmpvar_84 = mix (citydarkoverlaydetailZ_18, citydarkoverlaydetailX_20, tmpvar_76.xxxx);
  detail_11 = tmpvar_84;
  highp vec4 tmpvar_85;
  tmpvar_85 = mix (detail_11, citydarkoverlaydetailY_19, tmpvar_76.yyyy);
  detail_11 = tmpvar_85;
  mediump vec4 tmpvar_86;
  tmpvar_86 = (cityoverlay_21 * detail_11);
  citydarkoverlay_8 = tmpvar_86;
  highp vec4 tmpvar_87;
  tmpvar_87 = mix (citylightoverlaydetailZ_15, citylightoverlaydetailX_17, tmpvar_76.xxxx);
  detail_11 = tmpvar_87;
  highp vec4 tmpvar_88;
  tmpvar_88 = mix (detail_11, citylightoverlaydetailY_16, tmpvar_76.yyyy);
  detail_11 = tmpvar_88;
  mediump vec4 tmpvar_89;
  tmpvar_89 = (cityoverlay_21 * detail_11);
  mediump vec4 tmpvar_90;
  tmpvar_90 = (mix (mix (color_25, main_23, vec4(handoff_9)), tmpvar_89, tmpvar_89.wwww) * _Color);
  color_25 = tmpvar_90;
  highp vec3 tmpvar_91;
  tmpvar_91 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_91;
  highp vec3 tmpvar_92;
  tmpvar_92 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_92;
  highp float tmpvar_93;
  tmpvar_93 = clamp (dot (xlv_TEXCOORD5, lightDirection_6), 0.0, 1.0);
  TNdotL_5 = tmpvar_93;
  mediump float tmpvar_94;
  tmpvar_94 = clamp (dot (tmpvar_75, -(_SunDir)), 0.0, 1.0);
  mediump float tmpvar_95;
  tmpvar_95 = mix (TNdotL_5, tmpvar_94, handoff_9);
  lowp vec4 tmpvar_96;
  highp vec2 P_97;
  P_97 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_96 = texture2D (_LightTexture0, P_97);
  highp float tmpvar_98;
  tmpvar_98 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_99;
  tmpvar_99 = texture2D (_LightTextureB0, vec2(tmpvar_98));
  lowp float tmpvar_100;
  mediump vec4 shadows_101;
  highp vec4 shadowVals_102;
  highp vec3 tmpvar_103;
  tmpvar_103 = (xlv_TEXCOORD4.xyz / xlv_TEXCOORD4.w);
  highp vec2 P_104;
  P_104 = (tmpvar_103.xy + _ShadowOffsets[0].xy);
  lowp float tmpvar_105;
  tmpvar_105 = texture2D (_ShadowMapTexture, P_104).x;
  shadowVals_102.x = tmpvar_105;
  highp vec2 P_106;
  P_106 = (tmpvar_103.xy + _ShadowOffsets[1].xy);
  lowp float tmpvar_107;
  tmpvar_107 = texture2D (_ShadowMapTexture, P_106).x;
  shadowVals_102.y = tmpvar_107;
  highp vec2 P_108;
  P_108 = (tmpvar_103.xy + _ShadowOffsets[2].xy);
  lowp float tmpvar_109;
  tmpvar_109 = texture2D (_ShadowMapTexture, P_108).x;
  shadowVals_102.z = tmpvar_109;
  highp vec2 P_110;
  P_110 = (tmpvar_103.xy + _ShadowOffsets[3].xy);
  lowp float tmpvar_111;
  tmpvar_111 = texture2D (_ShadowMapTexture, P_110).x;
  shadowVals_102.w = tmpvar_111;
  bvec4 tmpvar_112;
  tmpvar_112 = lessThan (shadowVals_102, tmpvar_103.zzzz);
  highp vec4 tmpvar_113;
  tmpvar_113 = _LightShadowData.xxxx;
  highp float tmpvar_114;
  if (tmpvar_112.x) {
    tmpvar_114 = tmpvar_113.x;
  } else {
    tmpvar_114 = 1.0;
  };
  highp float tmpvar_115;
  if (tmpvar_112.y) {
    tmpvar_115 = tmpvar_113.y;
  } else {
    tmpvar_115 = 1.0;
  };
  highp float tmpvar_116;
  if (tmpvar_112.z) {
    tmpvar_116 = tmpvar_113.z;
  } else {
    tmpvar_116 = 1.0;
  };
  highp float tmpvar_117;
  if (tmpvar_112.w) {
    tmpvar_117 = tmpvar_113.w;
  } else {
    tmpvar_117 = 1.0;
  };
  highp vec4 tmpvar_118;
  tmpvar_118.x = tmpvar_114;
  tmpvar_118.y = tmpvar_115;
  tmpvar_118.z = tmpvar_116;
  tmpvar_118.w = tmpvar_117;
  shadows_101 = tmpvar_118;
  mediump float tmpvar_119;
  tmpvar_119 = dot (shadows_101, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_100 = tmpvar_119;
  highp float tmpvar_120;
  tmpvar_120 = (((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_96.w) * tmpvar_99.w) * tmpvar_100);
  atten_4 = tmpvar_120;
  mediump float tmpvar_121;
  tmpvar_121 = clamp ((((_LightColor0.w * tmpvar_95) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_122;
  tmpvar_122 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_121)), 0.0, 1.0);
  light_3 = tmpvar_122;
  highp float tmpvar_123;
  tmpvar_123 = clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0);
  terminator_2 = tmpvar_123;
  mediump vec3 tmpvar_124;
  tmpvar_124 = (light_3 * terminator_2);
  light_3 = tmpvar_124;
  highp vec3 tmpvar_125;
  tmpvar_125 = (tmpvar_90.xyz + (_Albedo * tmpvar_124));
  color_25.xyz = tmpvar_125;
  color_25.xyz = (color_25.xyz * tmpvar_124);
  citydarkoverlay_8.w = (tmpvar_86.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_94 - 0.01)) / 0.99) * 4.0) * atten_4), 0.0, 1.0), 0.0, 1.0)));
  color_25.xyz = mix (color_25, citydarkoverlay_8, citydarkoverlay_8.wwww).xyz;
  color_25.w = 1.0;
  tmpvar_1 = color_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  highp vec3 p_2;
  p_2 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_1;
  highp vec4 tmpvar_4;
  tmpvar_4.x = _glesMultiTexCoord0.x;
  tmpvar_4.y = _glesMultiTexCoord0.y;
  tmpvar_4.z = _glesMultiTexCoord1.x;
  tmpvar_4.w = _glesMultiTexCoord1.y;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_4).xyz);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float terminator_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float TNdotL_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump vec4 citydarkoverlay_8;
  mediump float handoff_9;
  mediump float detailLevel_10;
  mediump vec4 detail_11;
  mediump vec3 norm_12;
  highp vec2 localCoords_13;
  mediump vec4 encnorm_14;
  mediump vec4 citylightoverlaydetailZ_15;
  mediump vec4 citylightoverlaydetailY_16;
  mediump vec4 citylightoverlaydetailX_17;
  mediump vec4 citydarkoverlaydetailZ_18;
  mediump vec4 citydarkoverlaydetailY_19;
  mediump vec4 citydarkoverlaydetailX_20;
  mediump vec4 cityoverlay_21;
  mediump float vertLerp_22;
  mediump vec4 main_23;
  highp vec2 uv_24;
  mediump vec4 color_25;
  highp float r_26;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_26));
  uv_24.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_30;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_31;
    y_over_x_31 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_32;
    highp float x_33;
    x_33 = (y_over_x_31 * inversesqrt(((y_over_x_31 * y_over_x_31) + 1.0)));
    s_32 = (sign(x_33) * (1.5708 - (sqrt((1.0 - abs(x_33))) * (1.5708 + (abs(x_33) * (-0.214602 + (abs(x_33) * (0.0865667 + (abs(x_33) * -0.0310296)))))))));
    r_30 = s_32;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_30 = (s_32 + 3.14159);
      } else {
        r_30 = (r_30 - 3.14159);
      };
    };
  } else {
    r_30 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_34;
  tmpvar_34 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_MainTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  main_23 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD6.zy * _DetailScale);
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zx * _DetailScale);
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.xy * _DetailScale);
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  highp float tmpvar_45;
  tmpvar_45 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_22 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailVertTex, tmpvar_42);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailTex, tmpvar_39);
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_47, vec4(vertLerp_22));
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailVertTex, tmpvar_43);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailTex, tmpvar_40);
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (tmpvar_49, tmpvar_50, vec4(vertLerp_22));
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailVertTex, tmpvar_44);
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailTex, tmpvar_41);
  mediump vec4 tmpvar_54;
  tmpvar_54 = mix (tmpvar_52, tmpvar_53, vec4(vertLerp_22));
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2DGradEXT (_CityOverlayTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  cityoverlay_21 = tmpvar_55;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_56 = texture2D (_CityDarkOverlayDetailTex, P_57);
  citydarkoverlaydetailX_20 = tmpvar_56;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityDarkOverlayDetailTex, P_59);
  citydarkoverlaydetailY_19 = tmpvar_58;
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_60 = texture2D (_CityDarkOverlayDetailTex, P_61);
  citydarkoverlaydetailZ_18 = tmpvar_60;
  lowp vec4 tmpvar_62;
  highp vec2 P_63;
  P_63 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_62 = texture2D (_CityLightOverlayDetailTex, P_63);
  citylightoverlaydetailX_17 = tmpvar_62;
  lowp vec4 tmpvar_64;
  highp vec2 P_65;
  P_65 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_64 = texture2D (_CityLightOverlayDetailTex, P_65);
  citylightoverlaydetailY_16 = tmpvar_64;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_66 = texture2D (_CityLightOverlayDetailTex, P_67);
  citylightoverlaydetailZ_15 = tmpvar_66;
  lowp vec4 tmpvar_68;
  tmpvar_68 = texture2DGradEXT (_BumpMap, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  encnorm_14 = tmpvar_68;
  mediump vec2 tmpvar_69;
  tmpvar_69 = encnorm_14.wy;
  localCoords_13 = tmpvar_69;
  highp vec2 tmpvar_70;
  tmpvar_70 = (localCoords_13 - vec2(0.5, 0.5));
  localCoords_13.x = (tmpvar_70.x * 0.25);
  localCoords_13.y = (tmpvar_70.y * 0.5);
  uv_24.x = (uv_24.x - 0.5);
  highp vec2 tmpvar_71;
  tmpvar_71 = (uv_24 + localCoords_13);
  uv_24 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = cos((6.28319 * tmpvar_71.x));
  norm_12.z = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = sin((6.28319 * tmpvar_71.x));
  norm_12.x = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = cos((3.14159 * tmpvar_71.y));
  norm_12.y = tmpvar_74;
  mediump vec3 tmpvar_75;
  tmpvar_75 = -(norm_12);
  norm_12 = tmpvar_75;
  highp vec3 tmpvar_76;
  tmpvar_76 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (tmpvar_54, tmpvar_48, tmpvar_76.xxxx);
  detail_11 = tmpvar_77;
  highp vec4 tmpvar_78;
  tmpvar_78 = (0.25 * (mix (detail_11, tmpvar_51, tmpvar_76.yyyy) - 0.5));
  detail_11 = tmpvar_78;
  highp float tmpvar_79;
  tmpvar_79 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_10 = tmpvar_79;
  mediump vec4 tmpvar_80;
  tmpvar_80 = mix (detail_11, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_10));
  highp vec4 tmpvar_81;
  tmpvar_81 = (xlv_TEXCOORD1 + tmpvar_80);
  color_25 = tmpvar_81;
  highp float tmpvar_82;
  tmpvar_82 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_9 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0);
  cityoverlay_21.w = (cityoverlay_21.w * tmpvar_83);
  highp vec4 tmpvar_84;
  tmpvar_84 = mix (citydarkoverlaydetailZ_18, citydarkoverlaydetailX_20, tmpvar_76.xxxx);
  detail_11 = tmpvar_84;
  highp vec4 tmpvar_85;
  tmpvar_85 = mix (detail_11, citydarkoverlaydetailY_19, tmpvar_76.yyyy);
  detail_11 = tmpvar_85;
  mediump vec4 tmpvar_86;
  tmpvar_86 = (cityoverlay_21 * detail_11);
  citydarkoverlay_8 = tmpvar_86;
  highp vec4 tmpvar_87;
  tmpvar_87 = mix (citylightoverlaydetailZ_15, citylightoverlaydetailX_17, tmpvar_76.xxxx);
  detail_11 = tmpvar_87;
  highp vec4 tmpvar_88;
  tmpvar_88 = mix (detail_11, citylightoverlaydetailY_16, tmpvar_76.yyyy);
  detail_11 = tmpvar_88;
  mediump vec4 tmpvar_89;
  tmpvar_89 = (cityoverlay_21 * detail_11);
  mediump vec4 tmpvar_90;
  tmpvar_90 = (mix (mix (color_25, main_23, vec4(handoff_9)), tmpvar_89, tmpvar_89.wwww) * _Color);
  color_25 = tmpvar_90;
  highp vec3 tmpvar_91;
  tmpvar_91 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_91;
  highp vec3 tmpvar_92;
  tmpvar_92 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_92;
  highp float tmpvar_93;
  tmpvar_93 = clamp (dot (xlv_TEXCOORD5, lightDirection_6), 0.0, 1.0);
  TNdotL_5 = tmpvar_93;
  mediump float tmpvar_94;
  tmpvar_94 = clamp (dot (tmpvar_75, -(_SunDir)), 0.0, 1.0);
  mediump float tmpvar_95;
  tmpvar_95 = mix (TNdotL_5, tmpvar_94, handoff_9);
  lowp vec4 tmpvar_96;
  highp vec2 P_97;
  P_97 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_96 = texture2D (_LightTexture0, P_97);
  highp float tmpvar_98;
  tmpvar_98 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_99;
  tmpvar_99 = texture2D (_LightTextureB0, vec2(tmpvar_98));
  lowp float tmpvar_100;
  mediump vec4 shadows_101;
  highp vec4 shadowVals_102;
  highp vec3 tmpvar_103;
  tmpvar_103 = (xlv_TEXCOORD4.xyz / xlv_TEXCOORD4.w);
  highp vec2 P_104;
  P_104 = (tmpvar_103.xy + _ShadowOffsets[0].xy);
  lowp float tmpvar_105;
  tmpvar_105 = texture2D (_ShadowMapTexture, P_104).x;
  shadowVals_102.x = tmpvar_105;
  highp vec2 P_106;
  P_106 = (tmpvar_103.xy + _ShadowOffsets[1].xy);
  lowp float tmpvar_107;
  tmpvar_107 = texture2D (_ShadowMapTexture, P_106).x;
  shadowVals_102.y = tmpvar_107;
  highp vec2 P_108;
  P_108 = (tmpvar_103.xy + _ShadowOffsets[2].xy);
  lowp float tmpvar_109;
  tmpvar_109 = texture2D (_ShadowMapTexture, P_108).x;
  shadowVals_102.z = tmpvar_109;
  highp vec2 P_110;
  P_110 = (tmpvar_103.xy + _ShadowOffsets[3].xy);
  lowp float tmpvar_111;
  tmpvar_111 = texture2D (_ShadowMapTexture, P_110).x;
  shadowVals_102.w = tmpvar_111;
  bvec4 tmpvar_112;
  tmpvar_112 = lessThan (shadowVals_102, tmpvar_103.zzzz);
  highp vec4 tmpvar_113;
  tmpvar_113 = _LightShadowData.xxxx;
  highp float tmpvar_114;
  if (tmpvar_112.x) {
    tmpvar_114 = tmpvar_113.x;
  } else {
    tmpvar_114 = 1.0;
  };
  highp float tmpvar_115;
  if (tmpvar_112.y) {
    tmpvar_115 = tmpvar_113.y;
  } else {
    tmpvar_115 = 1.0;
  };
  highp float tmpvar_116;
  if (tmpvar_112.z) {
    tmpvar_116 = tmpvar_113.z;
  } else {
    tmpvar_116 = 1.0;
  };
  highp float tmpvar_117;
  if (tmpvar_112.w) {
    tmpvar_117 = tmpvar_113.w;
  } else {
    tmpvar_117 = 1.0;
  };
  highp vec4 tmpvar_118;
  tmpvar_118.x = tmpvar_114;
  tmpvar_118.y = tmpvar_115;
  tmpvar_118.z = tmpvar_116;
  tmpvar_118.w = tmpvar_117;
  shadows_101 = tmpvar_118;
  mediump float tmpvar_119;
  tmpvar_119 = dot (shadows_101, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_100 = tmpvar_119;
  highp float tmpvar_120;
  tmpvar_120 = (((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_96.w) * tmpvar_99.w) * tmpvar_100);
  atten_4 = tmpvar_120;
  mediump float tmpvar_121;
  tmpvar_121 = clamp ((((_LightColor0.w * tmpvar_95) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_122;
  tmpvar_122 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_121)), 0.0, 1.0);
  light_3 = tmpvar_122;
  highp float tmpvar_123;
  tmpvar_123 = clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0);
  terminator_2 = tmpvar_123;
  mediump vec3 tmpvar_124;
  tmpvar_124 = (light_3 * terminator_2);
  light_3 = tmpvar_124;
  highp vec3 tmpvar_125;
  tmpvar_125 = (tmpvar_90.xyz + (_Albedo * tmpvar_124));
  color_25.xyz = tmpvar_125;
  color_25.xyz = (color_25.xyz * tmpvar_124);
  citydarkoverlay_8.w = (tmpvar_86.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_94 - 0.01)) / 0.99) * 4.0) * atten_4), 0.0, 1.0), 0.0, 1.0)));
  color_25.xyz = mix (color_25, citydarkoverlay_8, citydarkoverlay_8.wwww).xyz;
  color_25.w = 1.0;
  tmpvar_1 = color_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 445
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 objnormal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
};
#line 435
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 418
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 422
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 426
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp mat4 _Rotation;
#line 430
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 434
uniform sampler2D _CityLightOverlayDetailTex;
#line 457
#line 483
#line 457
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 461
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    #line 465
    o.color = v.color;
    o.objnormal = v.normal;
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    #line 470
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.objnormal);
    xlv_TEXCOORD3 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereCoords);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
vec2 xll_vecTSel_vb2_vf2_vf2 (bvec2 a, vec2 b, vec2 c) {
  return vec2 (a.x ? b.x : c.x, a.y ? b.y : c.y);
}
vec3 xll_vecTSel_vb3_vf3_vf3 (bvec3 a, vec3 b, vec3 c) {
  return vec3 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z);
}
vec4 xll_vecTSel_vb4_vf4_vf4 (bvec4 a, vec4 b, vec4 c) {
  return vec4 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z, a.w ? b.w : c.w);
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 445
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 objnormal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
};
#line 435
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 418
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 422
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 426
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp mat4 _Rotation;
#line 430
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 434
uniform sampler2D _CityLightOverlayDetailTex;
#line 457
#line 483
#line 472
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 474
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 478
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 336
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 332
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 317
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    #line 319
    highp vec3 coord = (shadowCoord.xyz / shadowCoord.w);
    highp vec4 shadowVals;
    shadowVals.x = texture( _ShadowMapTexture, (vec2( coord) + _ShadowOffsets[0].xy)).x;
    shadowVals.y = texture( _ShadowMapTexture, (vec2( coord) + _ShadowOffsets[1].xy)).x;
    #line 323
    shadowVals.z = texture( _ShadowMapTexture, (vec2( coord) + _ShadowOffsets[2].xy)).x;
    shadowVals.w = texture( _ShadowMapTexture, (vec2( coord) + _ShadowOffsets[3].xy)).x;
    mediump vec4 shadows = xll_vecTSel_vb4_vf4_vf4 (lessThan( shadowVals, coord.zzzz), vec4( _LightShadowData.xxxx), vec4( 1.0));
    mediump float shadow = dot( shadows, vec4( 0.25));
    #line 327
    return shadow;
}
#line 483
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    #line 487
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 491
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    highp vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    highp vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    highp vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    #line 495
    highp vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    highp vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    highp vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, (-IN.sphereCoords))) - 0.95)) + 0.5));
    #line 499
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    #line 503
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    #line 507
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    highp vec2 localCoords = encnorm.wy;
    #line 511
    localCoords -= vec2( 0.5);
    localCoords.x *= 0.25;
    localCoords.y *= 0.5;
    uv.x -= 0.5;
    #line 515
    uv += localCoords;
    mediump vec3 norm;
    norm.z = cos((6.28319 * uv.x));
    norm.x = sin((6.28319 * uv.x));
    #line 519
    norm.y = cos((3.14159 * uv.y));
    norm = (-norm);
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    #line 523
    detail = (0.25 * (mix( detail, detailY, vec4( sphereNrm.y)) - 0.5));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (IN.color + mix( detail.xyzw, vec4( 0.0), vec4( detailLevel)));
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    #line 527
    color = mix( color, main, vec4( handoff));
    cityoverlay.w *= xll_saturate_f(floor((IN.color.w + 0.99)));
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    #line 531
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    #line 535
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    #line 539
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * unitySampleShadow( IN._ShadowCoord));
    #line 543
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    mediump float terminator = xll_saturate_f(floor((1.01 + dot( IN.sphereCoords, _SunDir))));
    light *= terminator;
    #line 547
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (SNdotL - 0.01)) / 0.99) * 4.0) * atten));
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    #line 551
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.objnormal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform mat4 unity_World2Shadow[4];
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec4 tmpvar_3;
  tmpvar_3.x = gl_MultiTexCoord0.x;
  tmpvar_3.y = gl_MultiTexCoord0.y;
  tmpvar_3.z = gl_MultiTexCoord1.x;
  tmpvar_3.w = gl_MultiTexCoord1.y;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * gl_Vertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_3).xyz);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform vec4 _ShadowOffsets[4];
uniform sampler2DShadow _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec3 norm_2;
  vec2 localCoords_3;
  vec4 cityoverlay_4;
  vec2 uv_5;
  vec4 color_6;
  float r_7;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_5.x = (0.5 + (0.159155 * r_7));
  uv_5.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_11;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_12;
    y_over_x_12 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_13;
    float x_14;
    x_14 = (y_over_x_12 * inversesqrt(((y_over_x_12 * y_over_x_12) + 1.0)));
    s_13 = (sign(x_14) * (1.5708 - (sqrt((1.0 - abs(x_14))) * (1.5708 + (abs(x_14) * (-0.214602 + (abs(x_14) * (0.0865667 + (abs(x_14) * -0.0310296)))))))));
    r_11 = s_13;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_11 = (s_13 + 3.14159);
      } else {
        r_11 = (r_11 - 3.14159);
      };
    };
  } else {
    r_11 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_15;
  tmpvar_15 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_16;
  tmpvar_16 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_17;
  tmpvar_17 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_18;
  tmpvar_18.x = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_18.y = dFdx(tmpvar_15);
  tmpvar_18.z = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_18.w = dFdy(tmpvar_15);
  vec4 tmpvar_19;
  tmpvar_19 = texture2DGradARB (_MainTex, uv_5, tmpvar_18.xy, tmpvar_18.zw);
  float tmpvar_20;
  tmpvar_20 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_21;
  tmpvar_21 = texture2DGradARB (_CityOverlayTex, uv_5, tmpvar_18.xy, tmpvar_18.zw);
  cityoverlay_4.xyz = tmpvar_21.xyz;
  vec2 tmpvar_22;
  tmpvar_22 = (texture2DGradARB (_BumpMap, uv_5, tmpvar_18.xy, tmpvar_18.zw).wy - vec2(0.5, 0.5));
  localCoords_3.x = (tmpvar_22.x * 0.25);
  localCoords_3.y = (tmpvar_22.y * 0.5);
  uv_5.x = (uv_5.x - 0.5);
  vec2 tmpvar_23;
  tmpvar_23 = (uv_5 + localCoords_3);
  uv_5 = tmpvar_23;
  norm_2.z = cos((6.28319 * tmpvar_23.x));
  norm_2.x = sin((6.28319 * tmpvar_23.x));
  norm_2.y = cos((3.14159 * tmpvar_23.y));
  vec3 tmpvar_24;
  tmpvar_24 = -(norm_2);
  norm_2 = tmpvar_24;
  vec3 tmpvar_25;
  tmpvar_25 = abs(xlv_TEXCOORD6);
  float tmpvar_26;
  tmpvar_26 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  cityoverlay_4.w = (tmpvar_21.w * clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0));
  vec4 tmpvar_27;
  tmpvar_27 = (cityoverlay_4 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_25.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_25.yyyy));
  citydarkoverlay_1.xyz = tmpvar_27.xyz;
  vec4 tmpvar_28;
  tmpvar_28 = (cityoverlay_4 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_25.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_25.yyyy));
  vec4 tmpvar_29;
  tmpvar_29 = (mix (mix ((xlv_TEXCOORD1 + mix ((0.25 * (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_20)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_20)), tmpvar_25.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_20)), tmpvar_25.yyyy) - 0.5)), vec4(0.0, 0.0, 0.0, 0.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))), tmpvar_19, vec4(tmpvar_26)), tmpvar_28, tmpvar_28.wwww) * _Color);
  color_6.w = tmpvar_29.w;
  float tmpvar_30;
  tmpvar_30 = clamp (dot (tmpvar_24, -(_SunDir)), 0.0, 1.0);
  vec4 shadows_31;
  vec3 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD4.xyz / xlv_TEXCOORD4.w);
  shadows_31.x = shadow2D (_ShadowMapTexture, (tmpvar_32 + _ShadowOffsets[0].xyz)).x;
  shadows_31.y = shadow2D (_ShadowMapTexture, (tmpvar_32 + _ShadowOffsets[1].xyz)).x;
  shadows_31.z = shadow2D (_ShadowMapTexture, (tmpvar_32 + _ShadowOffsets[2].xyz)).x;
  shadows_31.w = shadow2D (_ShadowMapTexture, (tmpvar_32 + _ShadowOffsets[3].xyz)).x;
  vec4 tmpvar_33;
  tmpvar_33 = (_LightShadowData.xxxx + (shadows_31 * (1.0 - _LightShadowData.xxxx)));
  shadows_31 = tmpvar_33;
  float tmpvar_34;
  tmpvar_34 = (((float((xlv_TEXCOORD3.z > 0.0)) * texture2D (_LightTexture0, ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5)).w) * texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz))).w) * dot (tmpvar_33, vec4(0.25, 0.25, 0.25, 0.25)));
  vec3 tmpvar_35;
  tmpvar_35 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * mix (clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), tmpvar_30, tmpvar_26)) * 4.0) * tmpvar_34), 0.0, 1.0))), 0.0, 1.0) * clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0));
  color_6.xyz = (tmpvar_29.xyz + (_Albedo * tmpvar_35));
  color_6.xyz = (color_6.xyz * tmpvar_35);
  citydarkoverlay_1.w = (tmpvar_27.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_30 - 0.01)) / 0.99) * 4.0) * tmpvar_34), 0.0, 1.0), 0.0, 1.0)));
  color_6.xyz = mix (color_6, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_6.w = 1.0;
  gl_FragData[0] = color_6;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Matrix 4 [unity_World2Shadow0]
Matrix 8 [_Object2World]
Matrix 12 [_LightMatrix0]
"vs_3_0
; 36 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
def c17, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
mov r1.xyz, v2
mov r1.w, c17.x
dp4 r2.z, r1, c10
dp4 r2.x, r1, c8
dp4 r2.y, r1, c9
mov r0.zw, v4.xyxy
mov r0.xy, v3
dp4 r2.w, r0, r0
rsq r1.x, r2.w
mul r0.xyz, r1.x, r0
mov o7.xyz, -r0
dp3 r0.w, r2, r2
rsq r0.w, r0.w
mul o6.xyz, r0.w, r2
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
dp4 r0.w, v0, c11
add r1.xyz, -r0, c16
dp3 r1.x, r1, r1
rsq r1.x, r1.x
mov o2, v1
dp4 o4.w, r0, c15
dp4 o4.z, r0, c14
dp4 o4.y, r0, c13
dp4 o4.x, r0, c12
dp4 o5.w, r0, c7
dp4 o5.z, r0, c6
dp4 o5.y, r0, c5
dp4 o5.x, r0, c4
rcp o1.x, r1.x
mov o3.xyz, v2
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  highp vec3 p_2;
  p_2 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_1;
  highp vec4 tmpvar_4;
  tmpvar_4.x = _glesMultiTexCoord0.x;
  tmpvar_4.y = _glesMultiTexCoord0.y;
  tmpvar_4.z = _glesMultiTexCoord1.x;
  tmpvar_4.w = _glesMultiTexCoord1.y;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_4).xyz);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shadow_samplers : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 _ShadowOffsets[4];
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float terminator_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float TNdotL_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump vec4 citydarkoverlay_8;
  mediump float handoff_9;
  mediump float detailLevel_10;
  mediump vec4 detail_11;
  mediump vec3 norm_12;
  highp vec2 localCoords_13;
  mediump vec4 encnorm_14;
  mediump vec4 citylightoverlaydetailZ_15;
  mediump vec4 citylightoverlaydetailY_16;
  mediump vec4 citylightoverlaydetailX_17;
  mediump vec4 citydarkoverlaydetailZ_18;
  mediump vec4 citydarkoverlaydetailY_19;
  mediump vec4 citydarkoverlaydetailX_20;
  mediump vec4 cityoverlay_21;
  mediump float vertLerp_22;
  mediump vec4 main_23;
  highp vec2 uv_24;
  mediump vec4 color_25;
  highp float r_26;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_26));
  uv_24.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_30;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_31;
    y_over_x_31 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_32;
    highp float x_33;
    x_33 = (y_over_x_31 * inversesqrt(((y_over_x_31 * y_over_x_31) + 1.0)));
    s_32 = (sign(x_33) * (1.5708 - (sqrt((1.0 - abs(x_33))) * (1.5708 + (abs(x_33) * (-0.214602 + (abs(x_33) * (0.0865667 + (abs(x_33) * -0.0310296)))))))));
    r_30 = s_32;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_30 = (s_32 + 3.14159);
      } else {
        r_30 = (r_30 - 3.14159);
      };
    };
  } else {
    r_30 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_34;
  tmpvar_34 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_MainTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  main_23 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD6.zy * _DetailScale);
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zx * _DetailScale);
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.xy * _DetailScale);
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  highp float tmpvar_45;
  tmpvar_45 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_22 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailVertTex, tmpvar_42);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailTex, tmpvar_39);
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_47, vec4(vertLerp_22));
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailVertTex, tmpvar_43);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailTex, tmpvar_40);
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (tmpvar_49, tmpvar_50, vec4(vertLerp_22));
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailVertTex, tmpvar_44);
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailTex, tmpvar_41);
  mediump vec4 tmpvar_54;
  tmpvar_54 = mix (tmpvar_52, tmpvar_53, vec4(vertLerp_22));
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2DGradEXT (_CityOverlayTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  cityoverlay_21 = tmpvar_55;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_56 = texture2D (_CityDarkOverlayDetailTex, P_57);
  citydarkoverlaydetailX_20 = tmpvar_56;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityDarkOverlayDetailTex, P_59);
  citydarkoverlaydetailY_19 = tmpvar_58;
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_60 = texture2D (_CityDarkOverlayDetailTex, P_61);
  citydarkoverlaydetailZ_18 = tmpvar_60;
  lowp vec4 tmpvar_62;
  highp vec2 P_63;
  P_63 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_62 = texture2D (_CityLightOverlayDetailTex, P_63);
  citylightoverlaydetailX_17 = tmpvar_62;
  lowp vec4 tmpvar_64;
  highp vec2 P_65;
  P_65 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_64 = texture2D (_CityLightOverlayDetailTex, P_65);
  citylightoverlaydetailY_16 = tmpvar_64;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_66 = texture2D (_CityLightOverlayDetailTex, P_67);
  citylightoverlaydetailZ_15 = tmpvar_66;
  lowp vec4 tmpvar_68;
  tmpvar_68 = texture2DGradEXT (_BumpMap, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  encnorm_14 = tmpvar_68;
  mediump vec2 tmpvar_69;
  tmpvar_69 = encnorm_14.wy;
  localCoords_13 = tmpvar_69;
  highp vec2 tmpvar_70;
  tmpvar_70 = (localCoords_13 - vec2(0.5, 0.5));
  localCoords_13.x = (tmpvar_70.x * 0.25);
  localCoords_13.y = (tmpvar_70.y * 0.5);
  uv_24.x = (uv_24.x - 0.5);
  highp vec2 tmpvar_71;
  tmpvar_71 = (uv_24 + localCoords_13);
  uv_24 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = cos((6.28319 * tmpvar_71.x));
  norm_12.z = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = sin((6.28319 * tmpvar_71.x));
  norm_12.x = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = cos((3.14159 * tmpvar_71.y));
  norm_12.y = tmpvar_74;
  mediump vec3 tmpvar_75;
  tmpvar_75 = -(norm_12);
  norm_12 = tmpvar_75;
  highp vec3 tmpvar_76;
  tmpvar_76 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (tmpvar_54, tmpvar_48, tmpvar_76.xxxx);
  detail_11 = tmpvar_77;
  highp vec4 tmpvar_78;
  tmpvar_78 = (0.25 * (mix (detail_11, tmpvar_51, tmpvar_76.yyyy) - 0.5));
  detail_11 = tmpvar_78;
  highp float tmpvar_79;
  tmpvar_79 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_10 = tmpvar_79;
  mediump vec4 tmpvar_80;
  tmpvar_80 = mix (detail_11, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_10));
  highp vec4 tmpvar_81;
  tmpvar_81 = (xlv_TEXCOORD1 + tmpvar_80);
  color_25 = tmpvar_81;
  highp float tmpvar_82;
  tmpvar_82 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_9 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0);
  cityoverlay_21.w = (cityoverlay_21.w * tmpvar_83);
  highp vec4 tmpvar_84;
  tmpvar_84 = mix (citydarkoverlaydetailZ_18, citydarkoverlaydetailX_20, tmpvar_76.xxxx);
  detail_11 = tmpvar_84;
  highp vec4 tmpvar_85;
  tmpvar_85 = mix (detail_11, citydarkoverlaydetailY_19, tmpvar_76.yyyy);
  detail_11 = tmpvar_85;
  mediump vec4 tmpvar_86;
  tmpvar_86 = (cityoverlay_21 * detail_11);
  citydarkoverlay_8.xyz = tmpvar_86.xyz;
  highp vec4 tmpvar_87;
  tmpvar_87 = mix (citylightoverlaydetailZ_15, citylightoverlaydetailX_17, tmpvar_76.xxxx);
  detail_11 = tmpvar_87;
  highp vec4 tmpvar_88;
  tmpvar_88 = mix (detail_11, citylightoverlaydetailY_16, tmpvar_76.yyyy);
  detail_11 = tmpvar_88;
  mediump vec4 tmpvar_89;
  tmpvar_89 = (cityoverlay_21 * detail_11);
  mediump vec4 tmpvar_90;
  tmpvar_90 = (mix (mix (color_25, main_23, vec4(handoff_9)), tmpvar_89, tmpvar_89.wwww) * _Color);
  color_25.w = tmpvar_90.w;
  highp vec3 tmpvar_91;
  tmpvar_91 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_91;
  highp vec3 tmpvar_92;
  tmpvar_92 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_92;
  highp float tmpvar_93;
  tmpvar_93 = clamp (dot (xlv_TEXCOORD5, lightDirection_6), 0.0, 1.0);
  TNdotL_5 = tmpvar_93;
  mediump float tmpvar_94;
  tmpvar_94 = clamp (dot (tmpvar_75, -(_SunDir)), 0.0, 1.0);
  lowp vec4 tmpvar_95;
  highp vec2 P_96;
  P_96 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_95 = texture2D (_LightTexture0, P_96);
  highp float tmpvar_97;
  tmpvar_97 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_98;
  tmpvar_98 = texture2D (_LightTextureB0, vec2(tmpvar_97));
  lowp float tmpvar_99;
  mediump vec4 shadows_100;
  highp vec3 tmpvar_101;
  tmpvar_101 = (xlv_TEXCOORD4.xyz / xlv_TEXCOORD4.w);
  highp vec3 coord_102;
  coord_102 = (tmpvar_101 + _ShadowOffsets[0].xyz);
  lowp float tmpvar_103;
  tmpvar_103 = shadow2DEXT (_ShadowMapTexture, coord_102);
  shadows_100.x = tmpvar_103;
  highp vec3 coord_104;
  coord_104 = (tmpvar_101 + _ShadowOffsets[1].xyz);
  lowp float tmpvar_105;
  tmpvar_105 = shadow2DEXT (_ShadowMapTexture, coord_104);
  shadows_100.y = tmpvar_105;
  highp vec3 coord_106;
  coord_106 = (tmpvar_101 + _ShadowOffsets[2].xyz);
  lowp float tmpvar_107;
  tmpvar_107 = shadow2DEXT (_ShadowMapTexture, coord_106);
  shadows_100.z = tmpvar_107;
  highp vec3 coord_108;
  coord_108 = (tmpvar_101 + _ShadowOffsets[3].xyz);
  lowp float tmpvar_109;
  tmpvar_109 = shadow2DEXT (_ShadowMapTexture, coord_108);
  shadows_100.w = tmpvar_109;
  highp vec4 tmpvar_110;
  tmpvar_110 = (_LightShadowData.xxxx + (shadows_100 * (1.0 - _LightShadowData.xxxx)));
  shadows_100 = tmpvar_110;
  mediump float tmpvar_111;
  tmpvar_111 = dot (shadows_100, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_99 = tmpvar_111;
  highp float tmpvar_112;
  tmpvar_112 = (((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_95.w) * tmpvar_98.w) * tmpvar_99);
  atten_4 = tmpvar_112;
  mediump float tmpvar_113;
  tmpvar_113 = clamp ((((_LightColor0.w * mix (TNdotL_5, tmpvar_94, handoff_9)) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_114;
  tmpvar_114 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_113)), 0.0, 1.0);
  light_3 = tmpvar_114;
  highp float tmpvar_115;
  tmpvar_115 = clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0);
  terminator_2 = tmpvar_115;
  mediump vec3 tmpvar_116;
  tmpvar_116 = (light_3 * terminator_2);
  light_3 = tmpvar_116;
  highp vec3 tmpvar_117;
  tmpvar_117 = (tmpvar_90.xyz + (_Albedo * tmpvar_116));
  color_25.xyz = tmpvar_117;
  color_25.xyz = (color_25.xyz * tmpvar_116);
  citydarkoverlay_8.w = (tmpvar_86.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_94 - 0.01)) / 0.99) * 4.0) * atten_4), 0.0, 1.0), 0.0, 1.0)));
  color_25.xyz = mix (color_25, citydarkoverlay_8, citydarkoverlay_8.wwww).xyz;
  color_25.w = 1.0;
  tmpvar_1 = color_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 445
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 objnormal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
};
#line 435
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 418
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 422
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 426
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp mat4 _Rotation;
#line 430
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 434
uniform sampler2D _CityLightOverlayDetailTex;
#line 457
#line 483
#line 457
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 461
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    #line 465
    o.color = v.color;
    o.objnormal = v.normal;
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    #line 470
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.objnormal);
    xlv_TEXCOORD3 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereCoords);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_shadow2D(mediump sampler2DShadow s, vec3 coord) { return texture (s, coord); }
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 445
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 objnormal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
};
#line 435
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 418
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 422
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 426
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp mat4 _Rotation;
#line 430
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 434
uniform sampler2D _CityLightOverlayDetailTex;
#line 457
#line 483
#line 472
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 474
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 478
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 336
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 332
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 317
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    #line 319
    highp vec3 coord = (shadowCoord.xyz / shadowCoord.w);
    mediump vec4 shadows;
    shadows.x = xll_shadow2D( _ShadowMapTexture, (coord + vec3( _ShadowOffsets[0])).xyz);
    shadows.y = xll_shadow2D( _ShadowMapTexture, (coord + vec3( _ShadowOffsets[1])).xyz);
    #line 323
    shadows.z = xll_shadow2D( _ShadowMapTexture, (coord + vec3( _ShadowOffsets[2])).xyz);
    shadows.w = xll_shadow2D( _ShadowMapTexture, (coord + vec3( _ShadowOffsets[3])).xyz);
    shadows = (_LightShadowData.xxxx + (shadows * (1.0 - _LightShadowData.xxxx)));
    mediump float shadow = dot( shadows, vec4( 0.25));
    #line 327
    return shadow;
}
#line 483
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    #line 487
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 491
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    highp vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    highp vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    highp vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    #line 495
    highp vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    highp vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    highp vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, (-IN.sphereCoords))) - 0.95)) + 0.5));
    #line 499
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    #line 503
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    #line 507
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    highp vec2 localCoords = encnorm.wy;
    #line 511
    localCoords -= vec2( 0.5);
    localCoords.x *= 0.25;
    localCoords.y *= 0.5;
    uv.x -= 0.5;
    #line 515
    uv += localCoords;
    mediump vec3 norm;
    norm.z = cos((6.28319 * uv.x));
    norm.x = sin((6.28319 * uv.x));
    #line 519
    norm.y = cos((3.14159 * uv.y));
    norm = (-norm);
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    #line 523
    detail = (0.25 * (mix( detail, detailY, vec4( sphereNrm.y)) - 0.5));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (IN.color + mix( detail.xyzw, vec4( 0.0), vec4( detailLevel)));
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    #line 527
    color = mix( color, main, vec4( handoff));
    cityoverlay.w *= xll_saturate_f(floor((IN.color.w + 0.99)));
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    #line 531
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    #line 535
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    #line 539
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * unitySampleShadow( IN._ShadowCoord));
    #line 543
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    mediump float terminator = xll_saturate_f(floor((1.01 + dot( IN.sphereCoords, _SunDir))));
    light *= terminator;
    #line 547
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (SNdotL - 0.01)) / 0.99) * 4.0) * atten));
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    #line 551
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.objnormal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec4 _LightPositionRange;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec4 tmpvar_3;
  tmpvar_3.x = gl_MultiTexCoord0.x;
  tmpvar_3.y = gl_MultiTexCoord0.y;
  tmpvar_3.z = gl_MultiTexCoord1.x;
  tmpvar_3.w = gl_MultiTexCoord1.y;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_3).xyz);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _LightPositionRange;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec3 norm_2;
  vec2 localCoords_3;
  vec4 cityoverlay_4;
  vec2 uv_5;
  vec4 color_6;
  float r_7;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_5.x = (0.5 + (0.159155 * r_7));
  uv_5.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_11;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_12;
    y_over_x_12 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_13;
    float x_14;
    x_14 = (y_over_x_12 * inversesqrt(((y_over_x_12 * y_over_x_12) + 1.0)));
    s_13 = (sign(x_14) * (1.5708 - (sqrt((1.0 - abs(x_14))) * (1.5708 + (abs(x_14) * (-0.214602 + (abs(x_14) * (0.0865667 + (abs(x_14) * -0.0310296)))))))));
    r_11 = s_13;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_11 = (s_13 + 3.14159);
      } else {
        r_11 = (r_11 - 3.14159);
      };
    };
  } else {
    r_11 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_15;
  tmpvar_15 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_16;
  tmpvar_16 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_17;
  tmpvar_17 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_18;
  tmpvar_18.x = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_18.y = dFdx(tmpvar_15);
  tmpvar_18.z = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_18.w = dFdy(tmpvar_15);
  vec4 tmpvar_19;
  tmpvar_19 = texture2DGradARB (_MainTex, uv_5, tmpvar_18.xy, tmpvar_18.zw);
  float tmpvar_20;
  tmpvar_20 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_21;
  tmpvar_21 = texture2DGradARB (_CityOverlayTex, uv_5, tmpvar_18.xy, tmpvar_18.zw);
  cityoverlay_4.xyz = tmpvar_21.xyz;
  vec2 tmpvar_22;
  tmpvar_22 = (texture2DGradARB (_BumpMap, uv_5, tmpvar_18.xy, tmpvar_18.zw).wy - vec2(0.5, 0.5));
  localCoords_3.x = (tmpvar_22.x * 0.25);
  localCoords_3.y = (tmpvar_22.y * 0.5);
  uv_5.x = (uv_5.x - 0.5);
  vec2 tmpvar_23;
  tmpvar_23 = (uv_5 + localCoords_3);
  uv_5 = tmpvar_23;
  norm_2.z = cos((6.28319 * tmpvar_23.x));
  norm_2.x = sin((6.28319 * tmpvar_23.x));
  norm_2.y = cos((3.14159 * tmpvar_23.y));
  vec3 tmpvar_24;
  tmpvar_24 = -(norm_2);
  norm_2 = tmpvar_24;
  vec3 tmpvar_25;
  tmpvar_25 = abs(xlv_TEXCOORD6);
  float tmpvar_26;
  tmpvar_26 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  cityoverlay_4.w = (tmpvar_21.w * clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0));
  vec4 tmpvar_27;
  tmpvar_27 = (cityoverlay_4 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_25.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_25.yyyy));
  citydarkoverlay_1 = tmpvar_27;
  vec4 tmpvar_28;
  tmpvar_28 = (cityoverlay_4 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_25.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_25.yyyy));
  vec4 tmpvar_29;
  tmpvar_29 = (mix (mix ((xlv_TEXCOORD1 + mix ((0.25 * (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_20)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_20)), tmpvar_25.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_20)), tmpvar_25.yyyy) - 0.5)), vec4(0.0, 0.0, 0.0, 0.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))), tmpvar_19, vec4(tmpvar_26)), tmpvar_28, tmpvar_28.wwww) * _Color);
  color_6 = tmpvar_29;
  float tmpvar_30;
  tmpvar_30 = clamp (dot (tmpvar_24, -(_SunDir)), 0.0, 1.0);
  float tmpvar_31;
  tmpvar_31 = mix (clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), tmpvar_30, tmpvar_26);
  vec4 tmpvar_32;
  tmpvar_32 = texture2D (_LightTexture0, vec2(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)));
  vec4 shadowVals_33;
  shadowVals_33.x = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD4 + vec3(0.0078125, 0.0078125, 0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_33.y = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD4 + vec3(-0.0078125, -0.0078125, 0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_33.z = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD4 + vec3(-0.0078125, 0.0078125, -0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_33.w = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD4 + vec3(0.0078125, -0.0078125, -0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_34;
  tmpvar_34 = lessThan (shadowVals_33, vec4(((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97)));
  vec4 tmpvar_35;
  tmpvar_35 = _LightShadowData.xxxx;
  float tmpvar_36;
  if (tmpvar_34.x) {
    tmpvar_36 = tmpvar_35.x;
  } else {
    tmpvar_36 = 1.0;
  };
  float tmpvar_37;
  if (tmpvar_34.y) {
    tmpvar_37 = tmpvar_35.y;
  } else {
    tmpvar_37 = 1.0;
  };
  float tmpvar_38;
  if (tmpvar_34.z) {
    tmpvar_38 = tmpvar_35.z;
  } else {
    tmpvar_38 = 1.0;
  };
  float tmpvar_39;
  if (tmpvar_34.w) {
    tmpvar_39 = tmpvar_35.w;
  } else {
    tmpvar_39 = 1.0;
  };
  vec4 tmpvar_40;
  tmpvar_40.x = tmpvar_36;
  tmpvar_40.y = tmpvar_37;
  tmpvar_40.z = tmpvar_38;
  tmpvar_40.w = tmpvar_39;
  float tmpvar_41;
  tmpvar_41 = (tmpvar_32.w * dot (tmpvar_40, vec4(0.25, 0.25, 0.25, 0.25)));
  vec3 tmpvar_42;
  tmpvar_42 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_31) * 4.0) * tmpvar_41), 0.0, 1.0))), 0.0, 1.0) * clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0));
  color_6.xyz = (tmpvar_29.xyz + (_Albedo * tmpvar_42));
  color_6.xyz = (color_6.xyz * tmpvar_42);
  citydarkoverlay_1.w = (tmpvar_27.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_30 - 0.01)) / 0.99) * 4.0) * tmpvar_41), 0.0, 1.0), 0.0, 1.0)));
  color_6.xyz = mix (color_6, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_6.w = 1.0;
  gl_FragData[0] = color_6;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_LightPositionRange]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 32 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
def c14, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
mov r1.xyz, v2
mov r1.w, c14.x
dp4 r2.z, r1, c6
dp4 r2.x, r1, c4
dp4 r2.y, r1, c5
mov r0.zw, v4.xyxy
mov r0.xy, v3
dp4 r2.w, r0, r0
rsq r1.x, r2.w
mul r0.xyz, r1.x, r0
mov o7.xyz, -r0
dp3 r0.w, r2, r2
rsq r0.w, r0.w
mul o6.xyz, r0.w, r2
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
dp4 r0.w, v0, c7
add r1.xyz, -r0, c12
dp3 r1.x, r1, r1
rsq r1.x, r1.x
mov o2, v1
dp4 o4.z, r0, c10
dp4 o4.y, r0, c9
dp4 o4.x, r0, c8
rcp o1.x, r1.x
mov o3.xyz, v2
add o5.xyz, r0, -c13
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  highp vec3 p_2;
  p_2 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_1;
  highp vec4 tmpvar_4;
  tmpvar_4.x = _glesMultiTexCoord0.x;
  tmpvar_4.y = _glesMultiTexCoord0.y;
  tmpvar_4.z = _glesMultiTexCoord1.x;
  tmpvar_4.w = _glesMultiTexCoord1.y;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_4).xyz);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float terminator_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float TNdotL_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump vec4 citydarkoverlay_8;
  mediump float handoff_9;
  mediump float detailLevel_10;
  mediump vec4 detail_11;
  mediump vec3 norm_12;
  highp vec2 localCoords_13;
  mediump vec4 encnorm_14;
  mediump vec4 citylightoverlaydetailZ_15;
  mediump vec4 citylightoverlaydetailY_16;
  mediump vec4 citylightoverlaydetailX_17;
  mediump vec4 citydarkoverlaydetailZ_18;
  mediump vec4 citydarkoverlaydetailY_19;
  mediump vec4 citydarkoverlaydetailX_20;
  mediump vec4 cityoverlay_21;
  mediump float vertLerp_22;
  mediump vec4 main_23;
  highp vec2 uv_24;
  mediump vec4 color_25;
  highp float r_26;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_26));
  uv_24.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_30;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_31;
    y_over_x_31 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_32;
    highp float x_33;
    x_33 = (y_over_x_31 * inversesqrt(((y_over_x_31 * y_over_x_31) + 1.0)));
    s_32 = (sign(x_33) * (1.5708 - (sqrt((1.0 - abs(x_33))) * (1.5708 + (abs(x_33) * (-0.214602 + (abs(x_33) * (0.0865667 + (abs(x_33) * -0.0310296)))))))));
    r_30 = s_32;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_30 = (s_32 + 3.14159);
      } else {
        r_30 = (r_30 - 3.14159);
      };
    };
  } else {
    r_30 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_34;
  tmpvar_34 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_MainTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  main_23 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD6.zy * _DetailScale);
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zx * _DetailScale);
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.xy * _DetailScale);
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  highp float tmpvar_45;
  tmpvar_45 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_22 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailVertTex, tmpvar_42);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailTex, tmpvar_39);
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_47, vec4(vertLerp_22));
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailVertTex, tmpvar_43);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailTex, tmpvar_40);
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (tmpvar_49, tmpvar_50, vec4(vertLerp_22));
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailVertTex, tmpvar_44);
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailTex, tmpvar_41);
  mediump vec4 tmpvar_54;
  tmpvar_54 = mix (tmpvar_52, tmpvar_53, vec4(vertLerp_22));
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2DGradEXT (_CityOverlayTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  cityoverlay_21 = tmpvar_55;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_56 = texture2D (_CityDarkOverlayDetailTex, P_57);
  citydarkoverlaydetailX_20 = tmpvar_56;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityDarkOverlayDetailTex, P_59);
  citydarkoverlaydetailY_19 = tmpvar_58;
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_60 = texture2D (_CityDarkOverlayDetailTex, P_61);
  citydarkoverlaydetailZ_18 = tmpvar_60;
  lowp vec4 tmpvar_62;
  highp vec2 P_63;
  P_63 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_62 = texture2D (_CityLightOverlayDetailTex, P_63);
  citylightoverlaydetailX_17 = tmpvar_62;
  lowp vec4 tmpvar_64;
  highp vec2 P_65;
  P_65 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_64 = texture2D (_CityLightOverlayDetailTex, P_65);
  citylightoverlaydetailY_16 = tmpvar_64;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_66 = texture2D (_CityLightOverlayDetailTex, P_67);
  citylightoverlaydetailZ_15 = tmpvar_66;
  lowp vec4 tmpvar_68;
  tmpvar_68 = texture2DGradEXT (_BumpMap, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  encnorm_14 = tmpvar_68;
  mediump vec2 tmpvar_69;
  tmpvar_69 = encnorm_14.wy;
  localCoords_13 = tmpvar_69;
  highp vec2 tmpvar_70;
  tmpvar_70 = (localCoords_13 - vec2(0.5, 0.5));
  localCoords_13.x = (tmpvar_70.x * 0.25);
  localCoords_13.y = (tmpvar_70.y * 0.5);
  uv_24.x = (uv_24.x - 0.5);
  highp vec2 tmpvar_71;
  tmpvar_71 = (uv_24 + localCoords_13);
  uv_24 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = cos((6.28319 * tmpvar_71.x));
  norm_12.z = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = sin((6.28319 * tmpvar_71.x));
  norm_12.x = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = cos((3.14159 * tmpvar_71.y));
  norm_12.y = tmpvar_74;
  mediump vec3 tmpvar_75;
  tmpvar_75 = -(norm_12);
  norm_12 = tmpvar_75;
  highp vec3 tmpvar_76;
  tmpvar_76 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (tmpvar_54, tmpvar_48, tmpvar_76.xxxx);
  detail_11 = tmpvar_77;
  highp vec4 tmpvar_78;
  tmpvar_78 = (0.25 * (mix (detail_11, tmpvar_51, tmpvar_76.yyyy) - 0.5));
  detail_11 = tmpvar_78;
  highp float tmpvar_79;
  tmpvar_79 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_10 = tmpvar_79;
  mediump vec4 tmpvar_80;
  tmpvar_80 = mix (detail_11, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_10));
  highp vec4 tmpvar_81;
  tmpvar_81 = (xlv_TEXCOORD1 + tmpvar_80);
  color_25 = tmpvar_81;
  highp float tmpvar_82;
  tmpvar_82 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_9 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0);
  cityoverlay_21.w = (cityoverlay_21.w * tmpvar_83);
  highp vec4 tmpvar_84;
  tmpvar_84 = mix (citydarkoverlaydetailZ_18, citydarkoverlaydetailX_20, tmpvar_76.xxxx);
  detail_11 = tmpvar_84;
  highp vec4 tmpvar_85;
  tmpvar_85 = mix (detail_11, citydarkoverlaydetailY_19, tmpvar_76.yyyy);
  detail_11 = tmpvar_85;
  mediump vec4 tmpvar_86;
  tmpvar_86 = (cityoverlay_21 * detail_11);
  citydarkoverlay_8 = tmpvar_86;
  highp vec4 tmpvar_87;
  tmpvar_87 = mix (citylightoverlaydetailZ_15, citylightoverlaydetailX_17, tmpvar_76.xxxx);
  detail_11 = tmpvar_87;
  highp vec4 tmpvar_88;
  tmpvar_88 = mix (detail_11, citylightoverlaydetailY_16, tmpvar_76.yyyy);
  detail_11 = tmpvar_88;
  mediump vec4 tmpvar_89;
  tmpvar_89 = (cityoverlay_21 * detail_11);
  mediump vec4 tmpvar_90;
  tmpvar_90 = (mix (mix (color_25, main_23, vec4(handoff_9)), tmpvar_89, tmpvar_89.wwww) * _Color);
  color_25 = tmpvar_90;
  highp vec3 tmpvar_91;
  tmpvar_91 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_91;
  highp vec3 tmpvar_92;
  tmpvar_92 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_92;
  highp float tmpvar_93;
  tmpvar_93 = clamp (dot (xlv_TEXCOORD5, lightDirection_6), 0.0, 1.0);
  TNdotL_5 = tmpvar_93;
  mediump float tmpvar_94;
  tmpvar_94 = clamp (dot (tmpvar_75, -(_SunDir)), 0.0, 1.0);
  mediump float tmpvar_95;
  tmpvar_95 = mix (TNdotL_5, tmpvar_94, handoff_9);
  highp float tmpvar_96;
  tmpvar_96 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_97;
  tmpvar_97 = texture2D (_LightTexture0, vec2(tmpvar_96));
  highp float tmpvar_98;
  mediump vec4 shadows_99;
  highp vec4 shadowVals_100;
  highp float tmpvar_101;
  tmpvar_101 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  highp vec3 vec_102;
  vec_102 = (xlv_TEXCOORD4 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 packDist_103;
  lowp vec4 tmpvar_104;
  tmpvar_104 = textureCube (_ShadowMapTexture, vec_102);
  packDist_103 = tmpvar_104;
  shadowVals_100.x = dot (packDist_103, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_105;
  vec_105 = (xlv_TEXCOORD4 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 packDist_106;
  lowp vec4 tmpvar_107;
  tmpvar_107 = textureCube (_ShadowMapTexture, vec_105);
  packDist_106 = tmpvar_107;
  shadowVals_100.y = dot (packDist_106, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_108;
  vec_108 = (xlv_TEXCOORD4 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 packDist_109;
  lowp vec4 tmpvar_110;
  tmpvar_110 = textureCube (_ShadowMapTexture, vec_108);
  packDist_109 = tmpvar_110;
  shadowVals_100.z = dot (packDist_109, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_111;
  vec_111 = (xlv_TEXCOORD4 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 packDist_112;
  lowp vec4 tmpvar_113;
  tmpvar_113 = textureCube (_ShadowMapTexture, vec_111);
  packDist_112 = tmpvar_113;
  shadowVals_100.w = dot (packDist_112, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_114;
  tmpvar_114 = lessThan (shadowVals_100, vec4(tmpvar_101));
  highp vec4 tmpvar_115;
  tmpvar_115 = _LightShadowData.xxxx;
  highp float tmpvar_116;
  if (tmpvar_114.x) {
    tmpvar_116 = tmpvar_115.x;
  } else {
    tmpvar_116 = 1.0;
  };
  highp float tmpvar_117;
  if (tmpvar_114.y) {
    tmpvar_117 = tmpvar_115.y;
  } else {
    tmpvar_117 = 1.0;
  };
  highp float tmpvar_118;
  if (tmpvar_114.z) {
    tmpvar_118 = tmpvar_115.z;
  } else {
    tmpvar_118 = 1.0;
  };
  highp float tmpvar_119;
  if (tmpvar_114.w) {
    tmpvar_119 = tmpvar_115.w;
  } else {
    tmpvar_119 = 1.0;
  };
  highp vec4 tmpvar_120;
  tmpvar_120.x = tmpvar_116;
  tmpvar_120.y = tmpvar_117;
  tmpvar_120.z = tmpvar_118;
  tmpvar_120.w = tmpvar_119;
  shadows_99 = tmpvar_120;
  mediump float tmpvar_121;
  tmpvar_121 = dot (shadows_99, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_98 = tmpvar_121;
  highp float tmpvar_122;
  tmpvar_122 = (tmpvar_97.w * tmpvar_98);
  atten_4 = tmpvar_122;
  mediump float tmpvar_123;
  tmpvar_123 = clamp ((((_LightColor0.w * tmpvar_95) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_124;
  tmpvar_124 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_123)), 0.0, 1.0);
  light_3 = tmpvar_124;
  highp float tmpvar_125;
  tmpvar_125 = clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0);
  terminator_2 = tmpvar_125;
  mediump vec3 tmpvar_126;
  tmpvar_126 = (light_3 * terminator_2);
  light_3 = tmpvar_126;
  highp vec3 tmpvar_127;
  tmpvar_127 = (tmpvar_90.xyz + (_Albedo * tmpvar_126));
  color_25.xyz = tmpvar_127;
  color_25.xyz = (color_25.xyz * tmpvar_126);
  citydarkoverlay_8.w = (tmpvar_86.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_94 - 0.01)) / 0.99) * 4.0) * atten_4), 0.0, 1.0), 0.0, 1.0)));
  color_25.xyz = mix (color_25, citydarkoverlay_8, citydarkoverlay_8.wwww).xyz;
  color_25.w = 1.0;
  tmpvar_1 = color_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  highp vec3 p_2;
  p_2 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_1;
  highp vec4 tmpvar_4;
  tmpvar_4.x = _glesMultiTexCoord0.x;
  tmpvar_4.y = _glesMultiTexCoord0.y;
  tmpvar_4.z = _glesMultiTexCoord1.x;
  tmpvar_4.w = _glesMultiTexCoord1.y;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_4).xyz);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float terminator_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float TNdotL_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump vec4 citydarkoverlay_8;
  mediump float handoff_9;
  mediump float detailLevel_10;
  mediump vec4 detail_11;
  mediump vec3 norm_12;
  highp vec2 localCoords_13;
  mediump vec4 encnorm_14;
  mediump vec4 citylightoverlaydetailZ_15;
  mediump vec4 citylightoverlaydetailY_16;
  mediump vec4 citylightoverlaydetailX_17;
  mediump vec4 citydarkoverlaydetailZ_18;
  mediump vec4 citydarkoverlaydetailY_19;
  mediump vec4 citydarkoverlaydetailX_20;
  mediump vec4 cityoverlay_21;
  mediump float vertLerp_22;
  mediump vec4 main_23;
  highp vec2 uv_24;
  mediump vec4 color_25;
  highp float r_26;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_26));
  uv_24.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_30;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_31;
    y_over_x_31 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_32;
    highp float x_33;
    x_33 = (y_over_x_31 * inversesqrt(((y_over_x_31 * y_over_x_31) + 1.0)));
    s_32 = (sign(x_33) * (1.5708 - (sqrt((1.0 - abs(x_33))) * (1.5708 + (abs(x_33) * (-0.214602 + (abs(x_33) * (0.0865667 + (abs(x_33) * -0.0310296)))))))));
    r_30 = s_32;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_30 = (s_32 + 3.14159);
      } else {
        r_30 = (r_30 - 3.14159);
      };
    };
  } else {
    r_30 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_34;
  tmpvar_34 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_MainTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  main_23 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD6.zy * _DetailScale);
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zx * _DetailScale);
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.xy * _DetailScale);
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  highp float tmpvar_45;
  tmpvar_45 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_22 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailVertTex, tmpvar_42);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailTex, tmpvar_39);
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_47, vec4(vertLerp_22));
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailVertTex, tmpvar_43);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailTex, tmpvar_40);
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (tmpvar_49, tmpvar_50, vec4(vertLerp_22));
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailVertTex, tmpvar_44);
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailTex, tmpvar_41);
  mediump vec4 tmpvar_54;
  tmpvar_54 = mix (tmpvar_52, tmpvar_53, vec4(vertLerp_22));
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2DGradEXT (_CityOverlayTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  cityoverlay_21 = tmpvar_55;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_56 = texture2D (_CityDarkOverlayDetailTex, P_57);
  citydarkoverlaydetailX_20 = tmpvar_56;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityDarkOverlayDetailTex, P_59);
  citydarkoverlaydetailY_19 = tmpvar_58;
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_60 = texture2D (_CityDarkOverlayDetailTex, P_61);
  citydarkoverlaydetailZ_18 = tmpvar_60;
  lowp vec4 tmpvar_62;
  highp vec2 P_63;
  P_63 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_62 = texture2D (_CityLightOverlayDetailTex, P_63);
  citylightoverlaydetailX_17 = tmpvar_62;
  lowp vec4 tmpvar_64;
  highp vec2 P_65;
  P_65 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_64 = texture2D (_CityLightOverlayDetailTex, P_65);
  citylightoverlaydetailY_16 = tmpvar_64;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_66 = texture2D (_CityLightOverlayDetailTex, P_67);
  citylightoverlaydetailZ_15 = tmpvar_66;
  lowp vec4 tmpvar_68;
  tmpvar_68 = texture2DGradEXT (_BumpMap, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  encnorm_14 = tmpvar_68;
  mediump vec2 tmpvar_69;
  tmpvar_69 = encnorm_14.wy;
  localCoords_13 = tmpvar_69;
  highp vec2 tmpvar_70;
  tmpvar_70 = (localCoords_13 - vec2(0.5, 0.5));
  localCoords_13.x = (tmpvar_70.x * 0.25);
  localCoords_13.y = (tmpvar_70.y * 0.5);
  uv_24.x = (uv_24.x - 0.5);
  highp vec2 tmpvar_71;
  tmpvar_71 = (uv_24 + localCoords_13);
  uv_24 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = cos((6.28319 * tmpvar_71.x));
  norm_12.z = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = sin((6.28319 * tmpvar_71.x));
  norm_12.x = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = cos((3.14159 * tmpvar_71.y));
  norm_12.y = tmpvar_74;
  mediump vec3 tmpvar_75;
  tmpvar_75 = -(norm_12);
  norm_12 = tmpvar_75;
  highp vec3 tmpvar_76;
  tmpvar_76 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (tmpvar_54, tmpvar_48, tmpvar_76.xxxx);
  detail_11 = tmpvar_77;
  highp vec4 tmpvar_78;
  tmpvar_78 = (0.25 * (mix (detail_11, tmpvar_51, tmpvar_76.yyyy) - 0.5));
  detail_11 = tmpvar_78;
  highp float tmpvar_79;
  tmpvar_79 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_10 = tmpvar_79;
  mediump vec4 tmpvar_80;
  tmpvar_80 = mix (detail_11, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_10));
  highp vec4 tmpvar_81;
  tmpvar_81 = (xlv_TEXCOORD1 + tmpvar_80);
  color_25 = tmpvar_81;
  highp float tmpvar_82;
  tmpvar_82 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_9 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0);
  cityoverlay_21.w = (cityoverlay_21.w * tmpvar_83);
  highp vec4 tmpvar_84;
  tmpvar_84 = mix (citydarkoverlaydetailZ_18, citydarkoverlaydetailX_20, tmpvar_76.xxxx);
  detail_11 = tmpvar_84;
  highp vec4 tmpvar_85;
  tmpvar_85 = mix (detail_11, citydarkoverlaydetailY_19, tmpvar_76.yyyy);
  detail_11 = tmpvar_85;
  mediump vec4 tmpvar_86;
  tmpvar_86 = (cityoverlay_21 * detail_11);
  citydarkoverlay_8 = tmpvar_86;
  highp vec4 tmpvar_87;
  tmpvar_87 = mix (citylightoverlaydetailZ_15, citylightoverlaydetailX_17, tmpvar_76.xxxx);
  detail_11 = tmpvar_87;
  highp vec4 tmpvar_88;
  tmpvar_88 = mix (detail_11, citylightoverlaydetailY_16, tmpvar_76.yyyy);
  detail_11 = tmpvar_88;
  mediump vec4 tmpvar_89;
  tmpvar_89 = (cityoverlay_21 * detail_11);
  mediump vec4 tmpvar_90;
  tmpvar_90 = (mix (mix (color_25, main_23, vec4(handoff_9)), tmpvar_89, tmpvar_89.wwww) * _Color);
  color_25 = tmpvar_90;
  highp vec3 tmpvar_91;
  tmpvar_91 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_91;
  highp vec3 tmpvar_92;
  tmpvar_92 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_92;
  highp float tmpvar_93;
  tmpvar_93 = clamp (dot (xlv_TEXCOORD5, lightDirection_6), 0.0, 1.0);
  TNdotL_5 = tmpvar_93;
  mediump float tmpvar_94;
  tmpvar_94 = clamp (dot (tmpvar_75, -(_SunDir)), 0.0, 1.0);
  mediump float tmpvar_95;
  tmpvar_95 = mix (TNdotL_5, tmpvar_94, handoff_9);
  highp float tmpvar_96;
  tmpvar_96 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_97;
  tmpvar_97 = texture2D (_LightTexture0, vec2(tmpvar_96));
  highp float tmpvar_98;
  mediump vec4 shadows_99;
  highp vec4 shadowVals_100;
  highp float tmpvar_101;
  tmpvar_101 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  highp vec3 vec_102;
  vec_102 = (xlv_TEXCOORD4 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 packDist_103;
  lowp vec4 tmpvar_104;
  tmpvar_104 = textureCube (_ShadowMapTexture, vec_102);
  packDist_103 = tmpvar_104;
  shadowVals_100.x = dot (packDist_103, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_105;
  vec_105 = (xlv_TEXCOORD4 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 packDist_106;
  lowp vec4 tmpvar_107;
  tmpvar_107 = textureCube (_ShadowMapTexture, vec_105);
  packDist_106 = tmpvar_107;
  shadowVals_100.y = dot (packDist_106, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_108;
  vec_108 = (xlv_TEXCOORD4 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 packDist_109;
  lowp vec4 tmpvar_110;
  tmpvar_110 = textureCube (_ShadowMapTexture, vec_108);
  packDist_109 = tmpvar_110;
  shadowVals_100.z = dot (packDist_109, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_111;
  vec_111 = (xlv_TEXCOORD4 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 packDist_112;
  lowp vec4 tmpvar_113;
  tmpvar_113 = textureCube (_ShadowMapTexture, vec_111);
  packDist_112 = tmpvar_113;
  shadowVals_100.w = dot (packDist_112, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_114;
  tmpvar_114 = lessThan (shadowVals_100, vec4(tmpvar_101));
  highp vec4 tmpvar_115;
  tmpvar_115 = _LightShadowData.xxxx;
  highp float tmpvar_116;
  if (tmpvar_114.x) {
    tmpvar_116 = tmpvar_115.x;
  } else {
    tmpvar_116 = 1.0;
  };
  highp float tmpvar_117;
  if (tmpvar_114.y) {
    tmpvar_117 = tmpvar_115.y;
  } else {
    tmpvar_117 = 1.0;
  };
  highp float tmpvar_118;
  if (tmpvar_114.z) {
    tmpvar_118 = tmpvar_115.z;
  } else {
    tmpvar_118 = 1.0;
  };
  highp float tmpvar_119;
  if (tmpvar_114.w) {
    tmpvar_119 = tmpvar_115.w;
  } else {
    tmpvar_119 = 1.0;
  };
  highp vec4 tmpvar_120;
  tmpvar_120.x = tmpvar_116;
  tmpvar_120.y = tmpvar_117;
  tmpvar_120.z = tmpvar_118;
  tmpvar_120.w = tmpvar_119;
  shadows_99 = tmpvar_120;
  mediump float tmpvar_121;
  tmpvar_121 = dot (shadows_99, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_98 = tmpvar_121;
  highp float tmpvar_122;
  tmpvar_122 = (tmpvar_97.w * tmpvar_98);
  atten_4 = tmpvar_122;
  mediump float tmpvar_123;
  tmpvar_123 = clamp ((((_LightColor0.w * tmpvar_95) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_124;
  tmpvar_124 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_123)), 0.0, 1.0);
  light_3 = tmpvar_124;
  highp float tmpvar_125;
  tmpvar_125 = clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0);
  terminator_2 = tmpvar_125;
  mediump vec3 tmpvar_126;
  tmpvar_126 = (light_3 * terminator_2);
  light_3 = tmpvar_126;
  highp vec3 tmpvar_127;
  tmpvar_127 = (tmpvar_90.xyz + (_Albedo * tmpvar_126));
  color_25.xyz = tmpvar_127;
  color_25.xyz = (color_25.xyz * tmpvar_126);
  citydarkoverlay_8.w = (tmpvar_86.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_94 - 0.01)) / 0.99) * 4.0) * atten_4), 0.0, 1.0), 0.0, 1.0)));
  color_25.xyz = mix (color_25, citydarkoverlay_8, citydarkoverlay_8.wwww).xyz;
  color_25.w = 1.0;
  tmpvar_1 = color_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 336
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 441
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 objnormal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
};
#line 431
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
#line 346
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 359
#line 367
#line 381
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 414
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 418
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 422
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp mat4 _Rotation;
#line 426
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 430
uniform sampler2D _CityLightOverlayDetailTex;
#line 453
#line 479
#line 453
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 457
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    #line 461
    o.color = v.color;
    o.objnormal = v.normal;
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    o._ShadowCoord = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    #line 466
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.objnormal);
    xlv_TEXCOORD3 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereCoords);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
vec2 xll_vecTSel_vb2_vf2_vf2 (bvec2 a, vec2 b, vec2 c) {
  return vec2 (a.x ? b.x : c.x, a.y ? b.y : c.y);
}
vec3 xll_vecTSel_vb3_vf3_vf3 (bvec3 a, vec3 b, vec3 c) {
  return vec3 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z);
}
vec4 xll_vecTSel_vb4_vf4_vf4 (bvec4 a, vec4 b, vec4 c) {
  return vec4 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z, a.w ? b.w : c.w);
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 336
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 441
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 objnormal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
};
#line 431
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
#line 346
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 359
#line 367
#line 381
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 414
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 418
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 422
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp mat4 _Rotation;
#line 426
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 430
uniform sampler2D _CityLightOverlayDetailTex;
#line 453
#line 479
#line 468
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 470
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 474
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 215
highp float DecodeFloatRGBA( in highp vec4 enc ) {
    highp vec4 kDecodeDot = vec4( 1.0, 0.00392157, 1.53787e-05, 6.22737e-09);
    return dot( enc, kDecodeDot);
}
#line 316
highp float SampleCubeDistance( in highp vec3 vec ) {
    highp vec4 packDist = texture( _ShadowMapTexture, vec);
    #line 319
    return DecodeFloatRGBA( packDist);
}
#line 321
highp float unityCubeShadow( in highp vec3 vec ) {
    #line 323
    highp float mydist = (length(vec) * _LightPositionRange.w);
    mydist *= 0.97;
    highp float z = 0.0078125;
    highp vec4 shadowVals;
    #line 327
    shadowVals.x = SampleCubeDistance( (vec + vec3( z, z, z)));
    shadowVals.y = SampleCubeDistance( (vec + vec3( (-z), (-z), z)));
    shadowVals.z = SampleCubeDistance( (vec + vec3( (-z), z, (-z))));
    shadowVals.w = SampleCubeDistance( (vec + vec3( z, (-z), (-z))));
    #line 331
    mediump vec4 shadows = xll_vecTSel_vb4_vf4_vf4 (lessThan( shadowVals, vec4( mydist)), vec4( _LightShadowData.xxxx), vec4( 1.0));
    return dot( shadows, vec4( 0.25));
}
#line 479
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    #line 483
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 487
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    highp vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    highp vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    highp vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    #line 491
    highp vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    highp vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    highp vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, (-IN.sphereCoords))) - 0.95)) + 0.5));
    #line 495
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    #line 499
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    #line 503
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    highp vec2 localCoords = encnorm.wy;
    #line 507
    localCoords -= vec2( 0.5);
    localCoords.x *= 0.25;
    localCoords.y *= 0.5;
    uv.x -= 0.5;
    #line 511
    uv += localCoords;
    mediump vec3 norm;
    norm.z = cos((6.28319 * uv.x));
    norm.x = sin((6.28319 * uv.x));
    #line 515
    norm.y = cos((3.14159 * uv.y));
    norm = (-norm);
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    #line 519
    detail = (0.25 * (mix( detail, detailY, vec4( sphereNrm.y)) - 0.5));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (IN.color + mix( detail.xyzw, vec4( 0.0), vec4( detailLevel)));
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    #line 523
    color = mix( color, main, vec4( handoff));
    cityoverlay.w *= xll_saturate_f(floor((IN.color.w + 0.99)));
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    #line 527
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    #line 531
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    #line 535
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    lowp float atten = (texture( _LightTexture0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * unityCubeShadow( IN._ShadowCoord));
    #line 539
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    mediump float terminator = xll_saturate_f(floor((1.01 + dot( IN.sphereCoords, _SunDir))));
    light *= terminator;
    #line 543
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (SNdotL - 0.01)) / 0.99) * 4.0) * atten));
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    #line 547
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.objnormal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec4 _LightPositionRange;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec4 tmpvar_3;
  tmpvar_3.x = gl_MultiTexCoord0.x;
  tmpvar_3.y = gl_MultiTexCoord0.y;
  tmpvar_3.z = gl_MultiTexCoord1.x;
  tmpvar_3.w = gl_MultiTexCoord1.y;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_3).xyz);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _LightPositionRange;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec3 norm_2;
  vec2 localCoords_3;
  vec4 cityoverlay_4;
  vec2 uv_5;
  vec4 color_6;
  float r_7;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_5.x = (0.5 + (0.159155 * r_7));
  uv_5.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_11;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_12;
    y_over_x_12 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_13;
    float x_14;
    x_14 = (y_over_x_12 * inversesqrt(((y_over_x_12 * y_over_x_12) + 1.0)));
    s_13 = (sign(x_14) * (1.5708 - (sqrt((1.0 - abs(x_14))) * (1.5708 + (abs(x_14) * (-0.214602 + (abs(x_14) * (0.0865667 + (abs(x_14) * -0.0310296)))))))));
    r_11 = s_13;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_11 = (s_13 + 3.14159);
      } else {
        r_11 = (r_11 - 3.14159);
      };
    };
  } else {
    r_11 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_15;
  tmpvar_15 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_16;
  tmpvar_16 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_17;
  tmpvar_17 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_18;
  tmpvar_18.x = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_18.y = dFdx(tmpvar_15);
  tmpvar_18.z = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_18.w = dFdy(tmpvar_15);
  vec4 tmpvar_19;
  tmpvar_19 = texture2DGradARB (_MainTex, uv_5, tmpvar_18.xy, tmpvar_18.zw);
  float tmpvar_20;
  tmpvar_20 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_21;
  tmpvar_21 = texture2DGradARB (_CityOverlayTex, uv_5, tmpvar_18.xy, tmpvar_18.zw);
  cityoverlay_4.xyz = tmpvar_21.xyz;
  vec2 tmpvar_22;
  tmpvar_22 = (texture2DGradARB (_BumpMap, uv_5, tmpvar_18.xy, tmpvar_18.zw).wy - vec2(0.5, 0.5));
  localCoords_3.x = (tmpvar_22.x * 0.25);
  localCoords_3.y = (tmpvar_22.y * 0.5);
  uv_5.x = (uv_5.x - 0.5);
  vec2 tmpvar_23;
  tmpvar_23 = (uv_5 + localCoords_3);
  uv_5 = tmpvar_23;
  norm_2.z = cos((6.28319 * tmpvar_23.x));
  norm_2.x = sin((6.28319 * tmpvar_23.x));
  norm_2.y = cos((3.14159 * tmpvar_23.y));
  vec3 tmpvar_24;
  tmpvar_24 = -(norm_2);
  norm_2 = tmpvar_24;
  vec3 tmpvar_25;
  tmpvar_25 = abs(xlv_TEXCOORD6);
  float tmpvar_26;
  tmpvar_26 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  cityoverlay_4.w = (tmpvar_21.w * clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0));
  vec4 tmpvar_27;
  tmpvar_27 = (cityoverlay_4 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_25.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_25.yyyy));
  citydarkoverlay_1 = tmpvar_27;
  vec4 tmpvar_28;
  tmpvar_28 = (cityoverlay_4 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_25.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_25.yyyy));
  vec4 tmpvar_29;
  tmpvar_29 = (mix (mix ((xlv_TEXCOORD1 + mix ((0.25 * (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_20)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_20)), tmpvar_25.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_20)), tmpvar_25.yyyy) - 0.5)), vec4(0.0, 0.0, 0.0, 0.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))), tmpvar_19, vec4(tmpvar_26)), tmpvar_28, tmpvar_28.wwww) * _Color);
  color_6 = tmpvar_29;
  float tmpvar_30;
  tmpvar_30 = clamp (dot (tmpvar_24, -(_SunDir)), 0.0, 1.0);
  float tmpvar_31;
  tmpvar_31 = mix (clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), tmpvar_30, tmpvar_26);
  vec4 tmpvar_32;
  tmpvar_32 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)));
  vec4 tmpvar_33;
  tmpvar_33 = textureCube (_LightTexture0, xlv_TEXCOORD3);
  vec4 shadowVals_34;
  shadowVals_34.x = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD4 + vec3(0.0078125, 0.0078125, 0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_34.y = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD4 + vec3(-0.0078125, -0.0078125, 0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_34.z = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD4 + vec3(-0.0078125, 0.0078125, -0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_34.w = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD4 + vec3(0.0078125, -0.0078125, -0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_35;
  tmpvar_35 = lessThan (shadowVals_34, vec4(((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97)));
  vec4 tmpvar_36;
  tmpvar_36 = _LightShadowData.xxxx;
  float tmpvar_37;
  if (tmpvar_35.x) {
    tmpvar_37 = tmpvar_36.x;
  } else {
    tmpvar_37 = 1.0;
  };
  float tmpvar_38;
  if (tmpvar_35.y) {
    tmpvar_38 = tmpvar_36.y;
  } else {
    tmpvar_38 = 1.0;
  };
  float tmpvar_39;
  if (tmpvar_35.z) {
    tmpvar_39 = tmpvar_36.z;
  } else {
    tmpvar_39 = 1.0;
  };
  float tmpvar_40;
  if (tmpvar_35.w) {
    tmpvar_40 = tmpvar_36.w;
  } else {
    tmpvar_40 = 1.0;
  };
  vec4 tmpvar_41;
  tmpvar_41.x = tmpvar_37;
  tmpvar_41.y = tmpvar_38;
  tmpvar_41.z = tmpvar_39;
  tmpvar_41.w = tmpvar_40;
  float tmpvar_42;
  tmpvar_42 = ((tmpvar_32.w * tmpvar_33.w) * dot (tmpvar_41, vec4(0.25, 0.25, 0.25, 0.25)));
  vec3 tmpvar_43;
  tmpvar_43 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_31) * 4.0) * tmpvar_42), 0.0, 1.0))), 0.0, 1.0) * clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0));
  color_6.xyz = (tmpvar_29.xyz + (_Albedo * tmpvar_43));
  color_6.xyz = (color_6.xyz * tmpvar_43);
  citydarkoverlay_1.w = (tmpvar_27.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_30 - 0.01)) / 0.99) * 4.0) * tmpvar_42), 0.0, 1.0), 0.0, 1.0)));
  color_6.xyz = mix (color_6, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_6.w = 1.0;
  gl_FragData[0] = color_6;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_LightPositionRange]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 32 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
def c14, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
mov r1.xyz, v2
mov r1.w, c14.x
dp4 r2.z, r1, c6
dp4 r2.x, r1, c4
dp4 r2.y, r1, c5
mov r0.zw, v4.xyxy
mov r0.xy, v3
dp4 r2.w, r0, r0
rsq r1.x, r2.w
mul r0.xyz, r1.x, r0
mov o7.xyz, -r0
dp3 r0.w, r2, r2
rsq r0.w, r0.w
mul o6.xyz, r0.w, r2
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
dp4 r0.w, v0, c7
add r1.xyz, -r0, c12
dp3 r1.x, r1, r1
rsq r1.x, r1.x
mov o2, v1
dp4 o4.z, r0, c10
dp4 o4.y, r0, c9
dp4 o4.x, r0, c8
rcp o1.x, r1.x
mov o3.xyz, v2
add o5.xyz, r0, -c13
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  highp vec3 p_2;
  p_2 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_1;
  highp vec4 tmpvar_4;
  tmpvar_4.x = _glesMultiTexCoord0.x;
  tmpvar_4.y = _glesMultiTexCoord0.y;
  tmpvar_4.z = _glesMultiTexCoord1.x;
  tmpvar_4.w = _glesMultiTexCoord1.y;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_4).xyz);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float terminator_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float TNdotL_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump vec4 citydarkoverlay_8;
  mediump float handoff_9;
  mediump float detailLevel_10;
  mediump vec4 detail_11;
  mediump vec3 norm_12;
  highp vec2 localCoords_13;
  mediump vec4 encnorm_14;
  mediump vec4 citylightoverlaydetailZ_15;
  mediump vec4 citylightoverlaydetailY_16;
  mediump vec4 citylightoverlaydetailX_17;
  mediump vec4 citydarkoverlaydetailZ_18;
  mediump vec4 citydarkoverlaydetailY_19;
  mediump vec4 citydarkoverlaydetailX_20;
  mediump vec4 cityoverlay_21;
  mediump float vertLerp_22;
  mediump vec4 main_23;
  highp vec2 uv_24;
  mediump vec4 color_25;
  highp float r_26;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_26));
  uv_24.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_30;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_31;
    y_over_x_31 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_32;
    highp float x_33;
    x_33 = (y_over_x_31 * inversesqrt(((y_over_x_31 * y_over_x_31) + 1.0)));
    s_32 = (sign(x_33) * (1.5708 - (sqrt((1.0 - abs(x_33))) * (1.5708 + (abs(x_33) * (-0.214602 + (abs(x_33) * (0.0865667 + (abs(x_33) * -0.0310296)))))))));
    r_30 = s_32;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_30 = (s_32 + 3.14159);
      } else {
        r_30 = (r_30 - 3.14159);
      };
    };
  } else {
    r_30 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_34;
  tmpvar_34 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_MainTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  main_23 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD6.zy * _DetailScale);
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zx * _DetailScale);
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.xy * _DetailScale);
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  highp float tmpvar_45;
  tmpvar_45 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_22 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailVertTex, tmpvar_42);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailTex, tmpvar_39);
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_47, vec4(vertLerp_22));
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailVertTex, tmpvar_43);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailTex, tmpvar_40);
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (tmpvar_49, tmpvar_50, vec4(vertLerp_22));
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailVertTex, tmpvar_44);
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailTex, tmpvar_41);
  mediump vec4 tmpvar_54;
  tmpvar_54 = mix (tmpvar_52, tmpvar_53, vec4(vertLerp_22));
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2DGradEXT (_CityOverlayTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  cityoverlay_21 = tmpvar_55;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_56 = texture2D (_CityDarkOverlayDetailTex, P_57);
  citydarkoverlaydetailX_20 = tmpvar_56;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityDarkOverlayDetailTex, P_59);
  citydarkoverlaydetailY_19 = tmpvar_58;
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_60 = texture2D (_CityDarkOverlayDetailTex, P_61);
  citydarkoverlaydetailZ_18 = tmpvar_60;
  lowp vec4 tmpvar_62;
  highp vec2 P_63;
  P_63 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_62 = texture2D (_CityLightOverlayDetailTex, P_63);
  citylightoverlaydetailX_17 = tmpvar_62;
  lowp vec4 tmpvar_64;
  highp vec2 P_65;
  P_65 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_64 = texture2D (_CityLightOverlayDetailTex, P_65);
  citylightoverlaydetailY_16 = tmpvar_64;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_66 = texture2D (_CityLightOverlayDetailTex, P_67);
  citylightoverlaydetailZ_15 = tmpvar_66;
  lowp vec4 tmpvar_68;
  tmpvar_68 = texture2DGradEXT (_BumpMap, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  encnorm_14 = tmpvar_68;
  mediump vec2 tmpvar_69;
  tmpvar_69 = encnorm_14.wy;
  localCoords_13 = tmpvar_69;
  highp vec2 tmpvar_70;
  tmpvar_70 = (localCoords_13 - vec2(0.5, 0.5));
  localCoords_13.x = (tmpvar_70.x * 0.25);
  localCoords_13.y = (tmpvar_70.y * 0.5);
  uv_24.x = (uv_24.x - 0.5);
  highp vec2 tmpvar_71;
  tmpvar_71 = (uv_24 + localCoords_13);
  uv_24 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = cos((6.28319 * tmpvar_71.x));
  norm_12.z = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = sin((6.28319 * tmpvar_71.x));
  norm_12.x = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = cos((3.14159 * tmpvar_71.y));
  norm_12.y = tmpvar_74;
  mediump vec3 tmpvar_75;
  tmpvar_75 = -(norm_12);
  norm_12 = tmpvar_75;
  highp vec3 tmpvar_76;
  tmpvar_76 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (tmpvar_54, tmpvar_48, tmpvar_76.xxxx);
  detail_11 = tmpvar_77;
  highp vec4 tmpvar_78;
  tmpvar_78 = (0.25 * (mix (detail_11, tmpvar_51, tmpvar_76.yyyy) - 0.5));
  detail_11 = tmpvar_78;
  highp float tmpvar_79;
  tmpvar_79 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_10 = tmpvar_79;
  mediump vec4 tmpvar_80;
  tmpvar_80 = mix (detail_11, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_10));
  highp vec4 tmpvar_81;
  tmpvar_81 = (xlv_TEXCOORD1 + tmpvar_80);
  color_25 = tmpvar_81;
  highp float tmpvar_82;
  tmpvar_82 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_9 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0);
  cityoverlay_21.w = (cityoverlay_21.w * tmpvar_83);
  highp vec4 tmpvar_84;
  tmpvar_84 = mix (citydarkoverlaydetailZ_18, citydarkoverlaydetailX_20, tmpvar_76.xxxx);
  detail_11 = tmpvar_84;
  highp vec4 tmpvar_85;
  tmpvar_85 = mix (detail_11, citydarkoverlaydetailY_19, tmpvar_76.yyyy);
  detail_11 = tmpvar_85;
  mediump vec4 tmpvar_86;
  tmpvar_86 = (cityoverlay_21 * detail_11);
  citydarkoverlay_8 = tmpvar_86;
  highp vec4 tmpvar_87;
  tmpvar_87 = mix (citylightoverlaydetailZ_15, citylightoverlaydetailX_17, tmpvar_76.xxxx);
  detail_11 = tmpvar_87;
  highp vec4 tmpvar_88;
  tmpvar_88 = mix (detail_11, citylightoverlaydetailY_16, tmpvar_76.yyyy);
  detail_11 = tmpvar_88;
  mediump vec4 tmpvar_89;
  tmpvar_89 = (cityoverlay_21 * detail_11);
  mediump vec4 tmpvar_90;
  tmpvar_90 = (mix (mix (color_25, main_23, vec4(handoff_9)), tmpvar_89, tmpvar_89.wwww) * _Color);
  color_25 = tmpvar_90;
  highp vec3 tmpvar_91;
  tmpvar_91 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_91;
  highp vec3 tmpvar_92;
  tmpvar_92 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_92;
  highp float tmpvar_93;
  tmpvar_93 = clamp (dot (xlv_TEXCOORD5, lightDirection_6), 0.0, 1.0);
  TNdotL_5 = tmpvar_93;
  mediump float tmpvar_94;
  tmpvar_94 = clamp (dot (tmpvar_75, -(_SunDir)), 0.0, 1.0);
  mediump float tmpvar_95;
  tmpvar_95 = mix (TNdotL_5, tmpvar_94, handoff_9);
  highp float tmpvar_96;
  tmpvar_96 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_97;
  tmpvar_97 = texture2D (_LightTextureB0, vec2(tmpvar_96));
  lowp vec4 tmpvar_98;
  tmpvar_98 = textureCube (_LightTexture0, xlv_TEXCOORD3);
  highp float tmpvar_99;
  mediump vec4 shadows_100;
  highp vec4 shadowVals_101;
  highp float tmpvar_102;
  tmpvar_102 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  highp vec3 vec_103;
  vec_103 = (xlv_TEXCOORD4 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 packDist_104;
  lowp vec4 tmpvar_105;
  tmpvar_105 = textureCube (_ShadowMapTexture, vec_103);
  packDist_104 = tmpvar_105;
  shadowVals_101.x = dot (packDist_104, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_106;
  vec_106 = (xlv_TEXCOORD4 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 packDist_107;
  lowp vec4 tmpvar_108;
  tmpvar_108 = textureCube (_ShadowMapTexture, vec_106);
  packDist_107 = tmpvar_108;
  shadowVals_101.y = dot (packDist_107, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_109;
  vec_109 = (xlv_TEXCOORD4 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 packDist_110;
  lowp vec4 tmpvar_111;
  tmpvar_111 = textureCube (_ShadowMapTexture, vec_109);
  packDist_110 = tmpvar_111;
  shadowVals_101.z = dot (packDist_110, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_112;
  vec_112 = (xlv_TEXCOORD4 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 packDist_113;
  lowp vec4 tmpvar_114;
  tmpvar_114 = textureCube (_ShadowMapTexture, vec_112);
  packDist_113 = tmpvar_114;
  shadowVals_101.w = dot (packDist_113, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_115;
  tmpvar_115 = lessThan (shadowVals_101, vec4(tmpvar_102));
  highp vec4 tmpvar_116;
  tmpvar_116 = _LightShadowData.xxxx;
  highp float tmpvar_117;
  if (tmpvar_115.x) {
    tmpvar_117 = tmpvar_116.x;
  } else {
    tmpvar_117 = 1.0;
  };
  highp float tmpvar_118;
  if (tmpvar_115.y) {
    tmpvar_118 = tmpvar_116.y;
  } else {
    tmpvar_118 = 1.0;
  };
  highp float tmpvar_119;
  if (tmpvar_115.z) {
    tmpvar_119 = tmpvar_116.z;
  } else {
    tmpvar_119 = 1.0;
  };
  highp float tmpvar_120;
  if (tmpvar_115.w) {
    tmpvar_120 = tmpvar_116.w;
  } else {
    tmpvar_120 = 1.0;
  };
  highp vec4 tmpvar_121;
  tmpvar_121.x = tmpvar_117;
  tmpvar_121.y = tmpvar_118;
  tmpvar_121.z = tmpvar_119;
  tmpvar_121.w = tmpvar_120;
  shadows_100 = tmpvar_121;
  mediump float tmpvar_122;
  tmpvar_122 = dot (shadows_100, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_99 = tmpvar_122;
  highp float tmpvar_123;
  tmpvar_123 = ((tmpvar_97.w * tmpvar_98.w) * tmpvar_99);
  atten_4 = tmpvar_123;
  mediump float tmpvar_124;
  tmpvar_124 = clamp ((((_LightColor0.w * tmpvar_95) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_125;
  tmpvar_125 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_124)), 0.0, 1.0);
  light_3 = tmpvar_125;
  highp float tmpvar_126;
  tmpvar_126 = clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0);
  terminator_2 = tmpvar_126;
  mediump vec3 tmpvar_127;
  tmpvar_127 = (light_3 * terminator_2);
  light_3 = tmpvar_127;
  highp vec3 tmpvar_128;
  tmpvar_128 = (tmpvar_90.xyz + (_Albedo * tmpvar_127));
  color_25.xyz = tmpvar_128;
  color_25.xyz = (color_25.xyz * tmpvar_127);
  citydarkoverlay_8.w = (tmpvar_86.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_94 - 0.01)) / 0.99) * 4.0) * atten_4), 0.0, 1.0), 0.0, 1.0)));
  color_25.xyz = mix (color_25, citydarkoverlay_8, citydarkoverlay_8.wwww).xyz;
  color_25.w = 1.0;
  tmpvar_1 = color_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  highp vec3 p_2;
  p_2 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_1;
  highp vec4 tmpvar_4;
  tmpvar_4.x = _glesMultiTexCoord0.x;
  tmpvar_4.y = _glesMultiTexCoord0.y;
  tmpvar_4.z = _glesMultiTexCoord1.x;
  tmpvar_4.w = _glesMultiTexCoord1.y;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_4).xyz);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float terminator_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float TNdotL_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump vec4 citydarkoverlay_8;
  mediump float handoff_9;
  mediump float detailLevel_10;
  mediump vec4 detail_11;
  mediump vec3 norm_12;
  highp vec2 localCoords_13;
  mediump vec4 encnorm_14;
  mediump vec4 citylightoverlaydetailZ_15;
  mediump vec4 citylightoverlaydetailY_16;
  mediump vec4 citylightoverlaydetailX_17;
  mediump vec4 citydarkoverlaydetailZ_18;
  mediump vec4 citydarkoverlaydetailY_19;
  mediump vec4 citydarkoverlaydetailX_20;
  mediump vec4 cityoverlay_21;
  mediump float vertLerp_22;
  mediump vec4 main_23;
  highp vec2 uv_24;
  mediump vec4 color_25;
  highp float r_26;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_26));
  uv_24.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_30;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_31;
    y_over_x_31 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_32;
    highp float x_33;
    x_33 = (y_over_x_31 * inversesqrt(((y_over_x_31 * y_over_x_31) + 1.0)));
    s_32 = (sign(x_33) * (1.5708 - (sqrt((1.0 - abs(x_33))) * (1.5708 + (abs(x_33) * (-0.214602 + (abs(x_33) * (0.0865667 + (abs(x_33) * -0.0310296)))))))));
    r_30 = s_32;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_30 = (s_32 + 3.14159);
      } else {
        r_30 = (r_30 - 3.14159);
      };
    };
  } else {
    r_30 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_34;
  tmpvar_34 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_MainTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  main_23 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD6.zy * _DetailScale);
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zx * _DetailScale);
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.xy * _DetailScale);
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  highp float tmpvar_45;
  tmpvar_45 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_22 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailVertTex, tmpvar_42);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailTex, tmpvar_39);
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_47, vec4(vertLerp_22));
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailVertTex, tmpvar_43);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailTex, tmpvar_40);
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (tmpvar_49, tmpvar_50, vec4(vertLerp_22));
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailVertTex, tmpvar_44);
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailTex, tmpvar_41);
  mediump vec4 tmpvar_54;
  tmpvar_54 = mix (tmpvar_52, tmpvar_53, vec4(vertLerp_22));
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2DGradEXT (_CityOverlayTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  cityoverlay_21 = tmpvar_55;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_56 = texture2D (_CityDarkOverlayDetailTex, P_57);
  citydarkoverlaydetailX_20 = tmpvar_56;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityDarkOverlayDetailTex, P_59);
  citydarkoverlaydetailY_19 = tmpvar_58;
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_60 = texture2D (_CityDarkOverlayDetailTex, P_61);
  citydarkoverlaydetailZ_18 = tmpvar_60;
  lowp vec4 tmpvar_62;
  highp vec2 P_63;
  P_63 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_62 = texture2D (_CityLightOverlayDetailTex, P_63);
  citylightoverlaydetailX_17 = tmpvar_62;
  lowp vec4 tmpvar_64;
  highp vec2 P_65;
  P_65 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_64 = texture2D (_CityLightOverlayDetailTex, P_65);
  citylightoverlaydetailY_16 = tmpvar_64;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_66 = texture2D (_CityLightOverlayDetailTex, P_67);
  citylightoverlaydetailZ_15 = tmpvar_66;
  lowp vec4 tmpvar_68;
  tmpvar_68 = texture2DGradEXT (_BumpMap, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  encnorm_14 = tmpvar_68;
  mediump vec2 tmpvar_69;
  tmpvar_69 = encnorm_14.wy;
  localCoords_13 = tmpvar_69;
  highp vec2 tmpvar_70;
  tmpvar_70 = (localCoords_13 - vec2(0.5, 0.5));
  localCoords_13.x = (tmpvar_70.x * 0.25);
  localCoords_13.y = (tmpvar_70.y * 0.5);
  uv_24.x = (uv_24.x - 0.5);
  highp vec2 tmpvar_71;
  tmpvar_71 = (uv_24 + localCoords_13);
  uv_24 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = cos((6.28319 * tmpvar_71.x));
  norm_12.z = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = sin((6.28319 * tmpvar_71.x));
  norm_12.x = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = cos((3.14159 * tmpvar_71.y));
  norm_12.y = tmpvar_74;
  mediump vec3 tmpvar_75;
  tmpvar_75 = -(norm_12);
  norm_12 = tmpvar_75;
  highp vec3 tmpvar_76;
  tmpvar_76 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (tmpvar_54, tmpvar_48, tmpvar_76.xxxx);
  detail_11 = tmpvar_77;
  highp vec4 tmpvar_78;
  tmpvar_78 = (0.25 * (mix (detail_11, tmpvar_51, tmpvar_76.yyyy) - 0.5));
  detail_11 = tmpvar_78;
  highp float tmpvar_79;
  tmpvar_79 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_10 = tmpvar_79;
  mediump vec4 tmpvar_80;
  tmpvar_80 = mix (detail_11, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_10));
  highp vec4 tmpvar_81;
  tmpvar_81 = (xlv_TEXCOORD1 + tmpvar_80);
  color_25 = tmpvar_81;
  highp float tmpvar_82;
  tmpvar_82 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_9 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0);
  cityoverlay_21.w = (cityoverlay_21.w * tmpvar_83);
  highp vec4 tmpvar_84;
  tmpvar_84 = mix (citydarkoverlaydetailZ_18, citydarkoverlaydetailX_20, tmpvar_76.xxxx);
  detail_11 = tmpvar_84;
  highp vec4 tmpvar_85;
  tmpvar_85 = mix (detail_11, citydarkoverlaydetailY_19, tmpvar_76.yyyy);
  detail_11 = tmpvar_85;
  mediump vec4 tmpvar_86;
  tmpvar_86 = (cityoverlay_21 * detail_11);
  citydarkoverlay_8 = tmpvar_86;
  highp vec4 tmpvar_87;
  tmpvar_87 = mix (citylightoverlaydetailZ_15, citylightoverlaydetailX_17, tmpvar_76.xxxx);
  detail_11 = tmpvar_87;
  highp vec4 tmpvar_88;
  tmpvar_88 = mix (detail_11, citylightoverlaydetailY_16, tmpvar_76.yyyy);
  detail_11 = tmpvar_88;
  mediump vec4 tmpvar_89;
  tmpvar_89 = (cityoverlay_21 * detail_11);
  mediump vec4 tmpvar_90;
  tmpvar_90 = (mix (mix (color_25, main_23, vec4(handoff_9)), tmpvar_89, tmpvar_89.wwww) * _Color);
  color_25 = tmpvar_90;
  highp vec3 tmpvar_91;
  tmpvar_91 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_91;
  highp vec3 tmpvar_92;
  tmpvar_92 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_92;
  highp float tmpvar_93;
  tmpvar_93 = clamp (dot (xlv_TEXCOORD5, lightDirection_6), 0.0, 1.0);
  TNdotL_5 = tmpvar_93;
  mediump float tmpvar_94;
  tmpvar_94 = clamp (dot (tmpvar_75, -(_SunDir)), 0.0, 1.0);
  mediump float tmpvar_95;
  tmpvar_95 = mix (TNdotL_5, tmpvar_94, handoff_9);
  highp float tmpvar_96;
  tmpvar_96 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_97;
  tmpvar_97 = texture2D (_LightTextureB0, vec2(tmpvar_96));
  lowp vec4 tmpvar_98;
  tmpvar_98 = textureCube (_LightTexture0, xlv_TEXCOORD3);
  highp float tmpvar_99;
  mediump vec4 shadows_100;
  highp vec4 shadowVals_101;
  highp float tmpvar_102;
  tmpvar_102 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  highp vec3 vec_103;
  vec_103 = (xlv_TEXCOORD4 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 packDist_104;
  lowp vec4 tmpvar_105;
  tmpvar_105 = textureCube (_ShadowMapTexture, vec_103);
  packDist_104 = tmpvar_105;
  shadowVals_101.x = dot (packDist_104, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_106;
  vec_106 = (xlv_TEXCOORD4 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 packDist_107;
  lowp vec4 tmpvar_108;
  tmpvar_108 = textureCube (_ShadowMapTexture, vec_106);
  packDist_107 = tmpvar_108;
  shadowVals_101.y = dot (packDist_107, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_109;
  vec_109 = (xlv_TEXCOORD4 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 packDist_110;
  lowp vec4 tmpvar_111;
  tmpvar_111 = textureCube (_ShadowMapTexture, vec_109);
  packDist_110 = tmpvar_111;
  shadowVals_101.z = dot (packDist_110, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_112;
  vec_112 = (xlv_TEXCOORD4 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 packDist_113;
  lowp vec4 tmpvar_114;
  tmpvar_114 = textureCube (_ShadowMapTexture, vec_112);
  packDist_113 = tmpvar_114;
  shadowVals_101.w = dot (packDist_113, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_115;
  tmpvar_115 = lessThan (shadowVals_101, vec4(tmpvar_102));
  highp vec4 tmpvar_116;
  tmpvar_116 = _LightShadowData.xxxx;
  highp float tmpvar_117;
  if (tmpvar_115.x) {
    tmpvar_117 = tmpvar_116.x;
  } else {
    tmpvar_117 = 1.0;
  };
  highp float tmpvar_118;
  if (tmpvar_115.y) {
    tmpvar_118 = tmpvar_116.y;
  } else {
    tmpvar_118 = 1.0;
  };
  highp float tmpvar_119;
  if (tmpvar_115.z) {
    tmpvar_119 = tmpvar_116.z;
  } else {
    tmpvar_119 = 1.0;
  };
  highp float tmpvar_120;
  if (tmpvar_115.w) {
    tmpvar_120 = tmpvar_116.w;
  } else {
    tmpvar_120 = 1.0;
  };
  highp vec4 tmpvar_121;
  tmpvar_121.x = tmpvar_117;
  tmpvar_121.y = tmpvar_118;
  tmpvar_121.z = tmpvar_119;
  tmpvar_121.w = tmpvar_120;
  shadows_100 = tmpvar_121;
  mediump float tmpvar_122;
  tmpvar_122 = dot (shadows_100, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_99 = tmpvar_122;
  highp float tmpvar_123;
  tmpvar_123 = ((tmpvar_97.w * tmpvar_98.w) * tmpvar_99);
  atten_4 = tmpvar_123;
  mediump float tmpvar_124;
  tmpvar_124 = clamp ((((_LightColor0.w * tmpvar_95) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_125;
  tmpvar_125 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_124)), 0.0, 1.0);
  light_3 = tmpvar_125;
  highp float tmpvar_126;
  tmpvar_126 = clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0);
  terminator_2 = tmpvar_126;
  mediump vec3 tmpvar_127;
  tmpvar_127 = (light_3 * terminator_2);
  light_3 = tmpvar_127;
  highp vec3 tmpvar_128;
  tmpvar_128 = (tmpvar_90.xyz + (_Albedo * tmpvar_127));
  color_25.xyz = tmpvar_128;
  color_25.xyz = (color_25.xyz * tmpvar_127);
  citydarkoverlay_8.w = (tmpvar_86.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_94 - 0.01)) / 0.99) * 4.0) * atten_4), 0.0, 1.0), 0.0, 1.0)));
  color_25.xyz = mix (color_25, citydarkoverlay_8, citydarkoverlay_8.wwww).xyz;
  color_25.w = 1.0;
  tmpvar_1 = color_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 337
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 442
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 objnormal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
};
#line 432
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform samplerCube _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 347
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 360
#line 368
#line 382
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 415
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 419
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 423
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp mat4 _Rotation;
#line 427
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 431
uniform sampler2D _CityLightOverlayDetailTex;
#line 454
#line 480
#line 454
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 458
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    #line 462
    o.color = v.color;
    o.objnormal = v.normal;
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    o._ShadowCoord = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    #line 467
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.objnormal);
    xlv_TEXCOORD3 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereCoords);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
vec2 xll_vecTSel_vb2_vf2_vf2 (bvec2 a, vec2 b, vec2 c) {
  return vec2 (a.x ? b.x : c.x, a.y ? b.y : c.y);
}
vec3 xll_vecTSel_vb3_vf3_vf3 (bvec3 a, vec3 b, vec3 c) {
  return vec3 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z);
}
vec4 xll_vecTSel_vb4_vf4_vf4 (bvec4 a, vec4 b, vec4 c) {
  return vec4 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z, a.w ? b.w : c.w);
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 337
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 442
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 objnormal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
};
#line 432
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform samplerCube _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 347
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 360
#line 368
#line 382
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 415
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 419
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 423
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp mat4 _Rotation;
#line 427
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 431
uniform sampler2D _CityLightOverlayDetailTex;
#line 454
#line 480
#line 469
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 471
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 475
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 215
highp float DecodeFloatRGBA( in highp vec4 enc ) {
    highp vec4 kDecodeDot = vec4( 1.0, 0.00392157, 1.53787e-05, 6.22737e-09);
    return dot( enc, kDecodeDot);
}
#line 316
highp float SampleCubeDistance( in highp vec3 vec ) {
    highp vec4 packDist = texture( _ShadowMapTexture, vec);
    #line 319
    return DecodeFloatRGBA( packDist);
}
#line 321
highp float unityCubeShadow( in highp vec3 vec ) {
    #line 323
    highp float mydist = (length(vec) * _LightPositionRange.w);
    mydist *= 0.97;
    highp float z = 0.0078125;
    highp vec4 shadowVals;
    #line 327
    shadowVals.x = SampleCubeDistance( (vec + vec3( z, z, z)));
    shadowVals.y = SampleCubeDistance( (vec + vec3( (-z), (-z), z)));
    shadowVals.z = SampleCubeDistance( (vec + vec3( (-z), z, (-z))));
    shadowVals.w = SampleCubeDistance( (vec + vec3( z, (-z), (-z))));
    #line 331
    mediump vec4 shadows = xll_vecTSel_vb4_vf4_vf4 (lessThan( shadowVals, vec4( mydist)), vec4( _LightShadowData.xxxx), vec4( 1.0));
    return dot( shadows, vec4( 0.25));
}
#line 480
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    #line 484
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 488
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    highp vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    highp vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    highp vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    #line 492
    highp vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    highp vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    highp vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, (-IN.sphereCoords))) - 0.95)) + 0.5));
    #line 496
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    #line 500
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    #line 504
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    highp vec2 localCoords = encnorm.wy;
    #line 508
    localCoords -= vec2( 0.5);
    localCoords.x *= 0.25;
    localCoords.y *= 0.5;
    uv.x -= 0.5;
    #line 512
    uv += localCoords;
    mediump vec3 norm;
    norm.z = cos((6.28319 * uv.x));
    norm.x = sin((6.28319 * uv.x));
    #line 516
    norm.y = cos((3.14159 * uv.y));
    norm = (-norm);
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    #line 520
    detail = (0.25 * (mix( detail, detailY, vec4( sphereNrm.y)) - 0.5));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (IN.color + mix( detail.xyzw, vec4( 0.0), vec4( detailLevel)));
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    #line 524
    color = mix( color, main, vec4( handoff));
    cityoverlay.w *= xll_saturate_f(floor((IN.color.w + 0.99)));
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    #line 528
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    #line 532
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    #line 536
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    lowp float atten = ((texture( _LightTextureB0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * texture( _LightTexture0, IN._LightCoord).w) * unityCubeShadow( IN._ShadowCoord));
    #line 540
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    mediump float terminator = xll_saturate_f(floor((1.01 + dot( IN.sphereCoords, _SunDir))));
    light *= terminator;
    #line 544
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (SNdotL - 0.01)) / 0.99) * 4.0) * atten));
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    #line 548
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.objnormal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec4 tmpvar_3;
  tmpvar_3.x = gl_MultiTexCoord0.x;
  tmpvar_3.y = gl_MultiTexCoord0.y;
  tmpvar_3.z = gl_MultiTexCoord1.x;
  tmpvar_3.w = gl_MultiTexCoord1.y;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_3).xyz);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec3 norm_2;
  vec2 localCoords_3;
  vec4 cityoverlay_4;
  vec2 uv_5;
  vec4 color_6;
  float r_7;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_5.x = (0.5 + (0.159155 * r_7));
  uv_5.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_11;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_12;
    y_over_x_12 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_13;
    float x_14;
    x_14 = (y_over_x_12 * inversesqrt(((y_over_x_12 * y_over_x_12) + 1.0)));
    s_13 = (sign(x_14) * (1.5708 - (sqrt((1.0 - abs(x_14))) * (1.5708 + (abs(x_14) * (-0.214602 + (abs(x_14) * (0.0865667 + (abs(x_14) * -0.0310296)))))))));
    r_11 = s_13;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_11 = (s_13 + 3.14159);
      } else {
        r_11 = (r_11 - 3.14159);
      };
    };
  } else {
    r_11 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_15;
  tmpvar_15 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_16;
  tmpvar_16 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_17;
  tmpvar_17 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_18;
  tmpvar_18.x = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_18.y = dFdx(tmpvar_15);
  tmpvar_18.z = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_18.w = dFdy(tmpvar_15);
  vec4 tmpvar_19;
  tmpvar_19 = texture2DGradARB (_MainTex, uv_5, tmpvar_18.xy, tmpvar_18.zw);
  float tmpvar_20;
  tmpvar_20 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_21;
  tmpvar_21 = texture2DGradARB (_CityOverlayTex, uv_5, tmpvar_18.xy, tmpvar_18.zw);
  cityoverlay_4.xyz = tmpvar_21.xyz;
  vec2 tmpvar_22;
  tmpvar_22 = (texture2DGradARB (_BumpMap, uv_5, tmpvar_18.xy, tmpvar_18.zw).wy - vec2(0.5, 0.5));
  localCoords_3.x = (tmpvar_22.x * 0.25);
  localCoords_3.y = (tmpvar_22.y * 0.5);
  uv_5.x = (uv_5.x - 0.5);
  vec2 tmpvar_23;
  tmpvar_23 = (uv_5 + localCoords_3);
  uv_5 = tmpvar_23;
  norm_2.z = cos((6.28319 * tmpvar_23.x));
  norm_2.x = sin((6.28319 * tmpvar_23.x));
  norm_2.y = cos((3.14159 * tmpvar_23.y));
  vec3 tmpvar_24;
  tmpvar_24 = -(norm_2);
  norm_2 = tmpvar_24;
  vec3 tmpvar_25;
  tmpvar_25 = abs(xlv_TEXCOORD6);
  float tmpvar_26;
  tmpvar_26 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  cityoverlay_4.w = (tmpvar_21.w * clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0));
  vec4 tmpvar_27;
  tmpvar_27 = (cityoverlay_4 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_25.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_25.yyyy));
  citydarkoverlay_1.xyz = tmpvar_27.xyz;
  vec4 tmpvar_28;
  tmpvar_28 = (cityoverlay_4 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_25.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_25.yyyy));
  vec4 tmpvar_29;
  tmpvar_29 = (mix (mix ((xlv_TEXCOORD1 + mix ((0.25 * (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_20)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_20)), tmpvar_25.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_20)), tmpvar_25.yyyy) - 0.5)), vec4(0.0, 0.0, 0.0, 0.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))), tmpvar_19, vec4(tmpvar_26)), tmpvar_28, tmpvar_28.wwww) * _Color);
  color_6.w = tmpvar_29.w;
  float tmpvar_30;
  tmpvar_30 = clamp (dot (tmpvar_24, -(_SunDir)), 0.0, 1.0);
  float tmpvar_31;
  tmpvar_31 = texture2D (_LightTexture0, vec2(dot (xlv_TEXCOORD3, xlv_TEXCOORD3))).w;
  vec3 tmpvar_32;
  tmpvar_32 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * mix (clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), tmpvar_30, tmpvar_26)) * 4.0) * tmpvar_31), 0.0, 1.0))), 0.0, 1.0) * clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0));
  color_6.xyz = (tmpvar_29.xyz + (_Albedo * tmpvar_32));
  color_6.xyz = (color_6.xyz * tmpvar_32);
  citydarkoverlay_1.w = (tmpvar_27.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_30 - 0.01)) / 0.99) * 4.0) * tmpvar_31), 0.0, 1.0), 0.0, 1.0)));
  color_6.xyz = mix (color_6, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_6.w = 1.0;
  gl_FragData[0] = color_6;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 31 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord5 o5
dcl_texcoord6 o6
def c13, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
mov r1.xyz, v2
mov r1.w, c13.x
dp4 r2.z, r1, c6
dp4 r2.x, r1, c4
dp4 r2.y, r1, c5
mov r0.zw, v4.xyxy
mov r0.xy, v3
dp4 r2.w, r0, r0
rsq r1.x, r2.w
mul r0.xyz, r1.x, r0
mov o6.xyz, -r0
dp3 r0.w, r2, r2
rsq r0.w, r0.w
mul o5.xyz, r0.w, r2
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
dp4 r0.w, v0, c7
add r1.xyz, -r0, c12
dp3 r1.x, r1, r1
rsq r1.x, r1.x
mov o2, v1
dp4 o4.z, r0, c10
dp4 o4.y, r0, c9
dp4 o4.x, r0, c8
rcp o1.x, r1.x
mov o3.xyz, v2
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  highp vec3 p_2;
  p_2 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_1;
  highp vec4 tmpvar_4;
  tmpvar_4.x = _glesMultiTexCoord0.x;
  tmpvar_4.y = _glesMultiTexCoord0.y;
  tmpvar_4.z = _glesMultiTexCoord1.x;
  tmpvar_4.w = _glesMultiTexCoord1.y;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_4).xyz);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float terminator_2;
  mediump vec3 light_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float handoff_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec3 norm_11;
  highp vec2 localCoords_12;
  mediump vec4 encnorm_13;
  mediump vec4 citylightoverlaydetailZ_14;
  mediump vec4 citylightoverlaydetailY_15;
  mediump vec4 citylightoverlaydetailX_16;
  mediump vec4 citydarkoverlaydetailZ_17;
  mediump vec4 citydarkoverlaydetailY_18;
  mediump vec4 citydarkoverlaydetailX_19;
  mediump vec4 cityoverlay_20;
  mediump float vertLerp_21;
  mediump vec4 main_22;
  highp vec2 uv_23;
  mediump vec4 color_24;
  highp float r_25;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_23.x = (0.5 + (0.159155 * r_25));
  uv_23.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_29;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_30;
    y_over_x_30 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_31;
    highp float x_32;
    x_32 = (y_over_x_30 * inversesqrt(((y_over_x_30 * y_over_x_30) + 1.0)));
    s_31 = (sign(x_32) * (1.5708 - (sqrt((1.0 - abs(x_32))) * (1.5708 + (abs(x_32) * (-0.214602 + (abs(x_32) * (0.0865667 + (abs(x_32) * -0.0310296)))))))));
    r_29 = s_31;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_29 = (s_31 + 3.14159);
      } else {
        r_29 = (r_29 - 3.14159);
      };
    };
  } else {
    r_29 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_33;
  tmpvar_33 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_34;
  tmpvar_34 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_36;
  tmpvar_36.x = (0.159155 * sqrt(dot (tmpvar_34, tmpvar_34)));
  tmpvar_36.y = dFdx(tmpvar_33);
  tmpvar_36.z = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_36.w = dFdy(tmpvar_33);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2DGradEXT (_MainTex, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  main_22 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD6.zy * _DetailScale);
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD6.zx * _DetailScale);
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.xy * _DetailScale);
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  highp float tmpvar_44;
  tmpvar_44 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_21 = tmpvar_44;
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, tmpvar_41);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, tmpvar_38);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_21));
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailVertTex, tmpvar_42);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailTex, tmpvar_39);
  mediump vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_49, vec4(vertLerp_21));
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailVertTex, tmpvar_43);
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailTex, tmpvar_40);
  mediump vec4 tmpvar_53;
  tmpvar_53 = mix (tmpvar_51, tmpvar_52, vec4(vertLerp_21));
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2DGradEXT (_CityOverlayTex, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  cityoverlay_20 = tmpvar_54;
  lowp vec4 tmpvar_55;
  highp vec2 P_56;
  P_56 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_55 = texture2D (_CityDarkOverlayDetailTex, P_56);
  citydarkoverlaydetailX_19 = tmpvar_55;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityDarkOverlayDetailTex, P_58);
  citydarkoverlaydetailY_18 = tmpvar_57;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_59 = texture2D (_CityDarkOverlayDetailTex, P_60);
  citydarkoverlaydetailZ_17 = tmpvar_59;
  lowp vec4 tmpvar_61;
  highp vec2 P_62;
  P_62 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_61 = texture2D (_CityLightOverlayDetailTex, P_62);
  citylightoverlaydetailX_16 = tmpvar_61;
  lowp vec4 tmpvar_63;
  highp vec2 P_64;
  P_64 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_63 = texture2D (_CityLightOverlayDetailTex, P_64);
  citylightoverlaydetailY_15 = tmpvar_63;
  lowp vec4 tmpvar_65;
  highp vec2 P_66;
  P_66 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_65 = texture2D (_CityLightOverlayDetailTex, P_66);
  citylightoverlaydetailZ_14 = tmpvar_65;
  lowp vec4 tmpvar_67;
  tmpvar_67 = texture2DGradEXT (_BumpMap, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  encnorm_13 = tmpvar_67;
  mediump vec2 tmpvar_68;
  tmpvar_68 = encnorm_13.wy;
  localCoords_12 = tmpvar_68;
  highp vec2 tmpvar_69;
  tmpvar_69 = (localCoords_12 - vec2(0.5, 0.5));
  localCoords_12.x = (tmpvar_69.x * 0.25);
  localCoords_12.y = (tmpvar_69.y * 0.5);
  uv_23.x = (uv_23.x - 0.5);
  highp vec2 tmpvar_70;
  tmpvar_70 = (uv_23 + localCoords_12);
  uv_23 = tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = cos((6.28319 * tmpvar_70.x));
  norm_11.z = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = sin((6.28319 * tmpvar_70.x));
  norm_11.x = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = cos((3.14159 * tmpvar_70.y));
  norm_11.y = tmpvar_73;
  mediump vec3 tmpvar_74;
  tmpvar_74 = -(norm_11);
  norm_11 = tmpvar_74;
  highp vec3 tmpvar_75;
  tmpvar_75 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (tmpvar_53, tmpvar_47, tmpvar_75.xxxx);
  detail_10 = tmpvar_76;
  highp vec4 tmpvar_77;
  tmpvar_77 = (0.25 * (mix (detail_10, tmpvar_50, tmpvar_75.yyyy) - 0.5));
  detail_10 = tmpvar_77;
  highp float tmpvar_78;
  tmpvar_78 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_9 = tmpvar_78;
  mediump vec4 tmpvar_79;
  tmpvar_79 = mix (detail_10, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_9));
  highp vec4 tmpvar_80;
  tmpvar_80 = (xlv_TEXCOORD1 + tmpvar_79);
  color_24 = tmpvar_80;
  highp float tmpvar_81;
  tmpvar_81 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_8 = tmpvar_81;
  highp float tmpvar_82;
  tmpvar_82 = clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0);
  cityoverlay_20.w = (cityoverlay_20.w * tmpvar_82);
  highp vec4 tmpvar_83;
  tmpvar_83 = mix (citydarkoverlaydetailZ_17, citydarkoverlaydetailX_19, tmpvar_75.xxxx);
  detail_10 = tmpvar_83;
  highp vec4 tmpvar_84;
  tmpvar_84 = mix (detail_10, citydarkoverlaydetailY_18, tmpvar_75.yyyy);
  detail_10 = tmpvar_84;
  mediump vec4 tmpvar_85;
  tmpvar_85 = (cityoverlay_20 * detail_10);
  citydarkoverlay_7.xyz = tmpvar_85.xyz;
  highp vec4 tmpvar_86;
  tmpvar_86 = mix (citylightoverlaydetailZ_14, citylightoverlaydetailX_16, tmpvar_75.xxxx);
  detail_10 = tmpvar_86;
  highp vec4 tmpvar_87;
  tmpvar_87 = mix (detail_10, citylightoverlaydetailY_15, tmpvar_75.yyyy);
  detail_10 = tmpvar_87;
  mediump vec4 tmpvar_88;
  tmpvar_88 = (cityoverlay_20 * detail_10);
  mediump vec4 tmpvar_89;
  tmpvar_89 = (mix (mix (color_24, main_22, vec4(handoff_8)), tmpvar_88, tmpvar_88.wwww) * _Color);
  color_24.w = tmpvar_89.w;
  highp vec3 tmpvar_90;
  tmpvar_90 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_90;
  highp vec3 tmpvar_91;
  tmpvar_91 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_91;
  highp float tmpvar_92;
  tmpvar_92 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_92;
  mediump float tmpvar_93;
  tmpvar_93 = clamp (dot (tmpvar_74, -(_SunDir)), 0.0, 1.0);
  highp float tmpvar_94;
  tmpvar_94 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp float tmpvar_95;
  tmpvar_95 = texture2D (_LightTexture0, vec2(tmpvar_94)).w;
  mediump float tmpvar_96;
  tmpvar_96 = clamp ((((_LightColor0.w * mix (TNdotL_4, tmpvar_93, handoff_8)) * 4.0) * tmpvar_95), 0.0, 1.0);
  highp vec3 tmpvar_97;
  tmpvar_97 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_96)), 0.0, 1.0);
  light_3 = tmpvar_97;
  highp float tmpvar_98;
  tmpvar_98 = clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0);
  terminator_2 = tmpvar_98;
  mediump vec3 tmpvar_99;
  tmpvar_99 = (light_3 * terminator_2);
  light_3 = tmpvar_99;
  highp vec3 tmpvar_100;
  tmpvar_100 = (tmpvar_89.xyz + (_Albedo * tmpvar_99));
  color_24.xyz = tmpvar_100;
  color_24.xyz = (color_24.xyz * tmpvar_99);
  citydarkoverlay_7.w = (tmpvar_85.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_93 - 0.01)) / 0.99) * 4.0) * tmpvar_95), 0.0, 1.0), 0.0, 1.0)));
  color_24.xyz = mix (color_24, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_24.w = 1.0;
  tmpvar_1 = color_24;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  highp vec3 p_2;
  p_2 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_1;
  highp vec4 tmpvar_4;
  tmpvar_4.x = _glesMultiTexCoord0.x;
  tmpvar_4.y = _glesMultiTexCoord0.y;
  tmpvar_4.z = _glesMultiTexCoord1.x;
  tmpvar_4.w = _glesMultiTexCoord1.y;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_4).xyz);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float terminator_2;
  mediump vec3 light_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float handoff_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec3 norm_11;
  highp vec2 localCoords_12;
  mediump vec4 encnorm_13;
  mediump vec4 citylightoverlaydetailZ_14;
  mediump vec4 citylightoverlaydetailY_15;
  mediump vec4 citylightoverlaydetailX_16;
  mediump vec4 citydarkoverlaydetailZ_17;
  mediump vec4 citydarkoverlaydetailY_18;
  mediump vec4 citydarkoverlaydetailX_19;
  mediump vec4 cityoverlay_20;
  mediump float vertLerp_21;
  mediump vec4 main_22;
  highp vec2 uv_23;
  mediump vec4 color_24;
  highp float r_25;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_23.x = (0.5 + (0.159155 * r_25));
  uv_23.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_29;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_30;
    y_over_x_30 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_31;
    highp float x_32;
    x_32 = (y_over_x_30 * inversesqrt(((y_over_x_30 * y_over_x_30) + 1.0)));
    s_31 = (sign(x_32) * (1.5708 - (sqrt((1.0 - abs(x_32))) * (1.5708 + (abs(x_32) * (-0.214602 + (abs(x_32) * (0.0865667 + (abs(x_32) * -0.0310296)))))))));
    r_29 = s_31;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_29 = (s_31 + 3.14159);
      } else {
        r_29 = (r_29 - 3.14159);
      };
    };
  } else {
    r_29 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_33;
  tmpvar_33 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_34;
  tmpvar_34 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_36;
  tmpvar_36.x = (0.159155 * sqrt(dot (tmpvar_34, tmpvar_34)));
  tmpvar_36.y = dFdx(tmpvar_33);
  tmpvar_36.z = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_36.w = dFdy(tmpvar_33);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2DGradEXT (_MainTex, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  main_22 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD6.zy * _DetailScale);
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD6.zx * _DetailScale);
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.xy * _DetailScale);
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  highp float tmpvar_44;
  tmpvar_44 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_21 = tmpvar_44;
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, tmpvar_41);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, tmpvar_38);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_21));
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailVertTex, tmpvar_42);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailTex, tmpvar_39);
  mediump vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_49, vec4(vertLerp_21));
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailVertTex, tmpvar_43);
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailTex, tmpvar_40);
  mediump vec4 tmpvar_53;
  tmpvar_53 = mix (tmpvar_51, tmpvar_52, vec4(vertLerp_21));
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2DGradEXT (_CityOverlayTex, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  cityoverlay_20 = tmpvar_54;
  lowp vec4 tmpvar_55;
  highp vec2 P_56;
  P_56 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_55 = texture2D (_CityDarkOverlayDetailTex, P_56);
  citydarkoverlaydetailX_19 = tmpvar_55;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityDarkOverlayDetailTex, P_58);
  citydarkoverlaydetailY_18 = tmpvar_57;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_59 = texture2D (_CityDarkOverlayDetailTex, P_60);
  citydarkoverlaydetailZ_17 = tmpvar_59;
  lowp vec4 tmpvar_61;
  highp vec2 P_62;
  P_62 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_61 = texture2D (_CityLightOverlayDetailTex, P_62);
  citylightoverlaydetailX_16 = tmpvar_61;
  lowp vec4 tmpvar_63;
  highp vec2 P_64;
  P_64 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_63 = texture2D (_CityLightOverlayDetailTex, P_64);
  citylightoverlaydetailY_15 = tmpvar_63;
  lowp vec4 tmpvar_65;
  highp vec2 P_66;
  P_66 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_65 = texture2D (_CityLightOverlayDetailTex, P_66);
  citylightoverlaydetailZ_14 = tmpvar_65;
  lowp vec4 tmpvar_67;
  tmpvar_67 = texture2DGradEXT (_BumpMap, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  encnorm_13 = tmpvar_67;
  mediump vec2 tmpvar_68;
  tmpvar_68 = encnorm_13.wy;
  localCoords_12 = tmpvar_68;
  highp vec2 tmpvar_69;
  tmpvar_69 = (localCoords_12 - vec2(0.5, 0.5));
  localCoords_12.x = (tmpvar_69.x * 0.25);
  localCoords_12.y = (tmpvar_69.y * 0.5);
  uv_23.x = (uv_23.x - 0.5);
  highp vec2 tmpvar_70;
  tmpvar_70 = (uv_23 + localCoords_12);
  uv_23 = tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = cos((6.28319 * tmpvar_70.x));
  norm_11.z = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = sin((6.28319 * tmpvar_70.x));
  norm_11.x = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = cos((3.14159 * tmpvar_70.y));
  norm_11.y = tmpvar_73;
  mediump vec3 tmpvar_74;
  tmpvar_74 = -(norm_11);
  norm_11 = tmpvar_74;
  highp vec3 tmpvar_75;
  tmpvar_75 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (tmpvar_53, tmpvar_47, tmpvar_75.xxxx);
  detail_10 = tmpvar_76;
  highp vec4 tmpvar_77;
  tmpvar_77 = (0.25 * (mix (detail_10, tmpvar_50, tmpvar_75.yyyy) - 0.5));
  detail_10 = tmpvar_77;
  highp float tmpvar_78;
  tmpvar_78 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_9 = tmpvar_78;
  mediump vec4 tmpvar_79;
  tmpvar_79 = mix (detail_10, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_9));
  highp vec4 tmpvar_80;
  tmpvar_80 = (xlv_TEXCOORD1 + tmpvar_79);
  color_24 = tmpvar_80;
  highp float tmpvar_81;
  tmpvar_81 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_8 = tmpvar_81;
  highp float tmpvar_82;
  tmpvar_82 = clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0);
  cityoverlay_20.w = (cityoverlay_20.w * tmpvar_82);
  highp vec4 tmpvar_83;
  tmpvar_83 = mix (citydarkoverlaydetailZ_17, citydarkoverlaydetailX_19, tmpvar_75.xxxx);
  detail_10 = tmpvar_83;
  highp vec4 tmpvar_84;
  tmpvar_84 = mix (detail_10, citydarkoverlaydetailY_18, tmpvar_75.yyyy);
  detail_10 = tmpvar_84;
  mediump vec4 tmpvar_85;
  tmpvar_85 = (cityoverlay_20 * detail_10);
  citydarkoverlay_7.xyz = tmpvar_85.xyz;
  highp vec4 tmpvar_86;
  tmpvar_86 = mix (citylightoverlaydetailZ_14, citylightoverlaydetailX_16, tmpvar_75.xxxx);
  detail_10 = tmpvar_86;
  highp vec4 tmpvar_87;
  tmpvar_87 = mix (detail_10, citylightoverlaydetailY_15, tmpvar_75.yyyy);
  detail_10 = tmpvar_87;
  mediump vec4 tmpvar_88;
  tmpvar_88 = (cityoverlay_20 * detail_10);
  mediump vec4 tmpvar_89;
  tmpvar_89 = (mix (mix (color_24, main_22, vec4(handoff_8)), tmpvar_88, tmpvar_88.wwww) * _Color);
  color_24.w = tmpvar_89.w;
  highp vec3 tmpvar_90;
  tmpvar_90 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_90;
  highp vec3 tmpvar_91;
  tmpvar_91 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_91;
  highp float tmpvar_92;
  tmpvar_92 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_92;
  mediump float tmpvar_93;
  tmpvar_93 = clamp (dot (tmpvar_74, -(_SunDir)), 0.0, 1.0);
  highp float tmpvar_94;
  tmpvar_94 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp float tmpvar_95;
  tmpvar_95 = texture2D (_LightTexture0, vec2(tmpvar_94)).w;
  mediump float tmpvar_96;
  tmpvar_96 = clamp ((((_LightColor0.w * mix (TNdotL_4, tmpvar_93, handoff_8)) * 4.0) * tmpvar_95), 0.0, 1.0);
  highp vec3 tmpvar_97;
  tmpvar_97 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_96)), 0.0, 1.0);
  light_3 = tmpvar_97;
  highp float tmpvar_98;
  tmpvar_98 = clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0);
  terminator_2 = tmpvar_98;
  mediump vec3 tmpvar_99;
  tmpvar_99 = (light_3 * terminator_2);
  light_3 = tmpvar_99;
  highp vec3 tmpvar_100;
  tmpvar_100 = (tmpvar_89.xyz + (_Albedo * tmpvar_99));
  color_24.xyz = tmpvar_100;
  color_24.xyz = (color_24.xyz * tmpvar_99);
  citydarkoverlay_7.w = (tmpvar_85.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_93 - 0.01)) / 0.99) * 4.0) * tmpvar_95), 0.0, 1.0), 0.0, 1.0)));
  color_24.xyz = mix (color_24, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_24.w = 1.0;
  tmpvar_1 = color_24;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 422
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 objnormal;
    highp vec3 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
};
#line 412
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 395
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 399
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 403
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp mat4 _Rotation;
#line 407
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 411
uniform sampler2D _CityLightOverlayDetailTex;
#line 433
#line 458
#line 433
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 437
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    #line 441
    o.color = v.color;
    o.objnormal = v.normal;
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    #line 445
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.objnormal);
    xlv_TEXCOORD3 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereCoords);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 422
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 objnormal;
    highp vec3 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
};
#line 412
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 395
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 399
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 403
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp mat4 _Rotation;
#line 407
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 411
uniform sampler2D _CityLightOverlayDetailTex;
#line 433
#line 458
#line 447
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 449
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 453
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 458
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    #line 462
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 466
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    highp vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    highp vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    highp vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    #line 470
    highp vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    highp vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    highp vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, (-IN.sphereCoords))) - 0.95)) + 0.5));
    #line 474
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    #line 478
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    #line 482
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    highp vec2 localCoords = encnorm.wy;
    #line 486
    localCoords -= vec2( 0.5);
    localCoords.x *= 0.25;
    localCoords.y *= 0.5;
    uv.x -= 0.5;
    #line 490
    uv += localCoords;
    mediump vec3 norm;
    norm.z = cos((6.28319 * uv.x));
    norm.x = sin((6.28319 * uv.x));
    #line 494
    norm.y = cos((3.14159 * uv.y));
    norm = (-norm);
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    #line 498
    detail = (0.25 * (mix( detail, detailY, vec4( sphereNrm.y)) - 0.5));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (IN.color + mix( detail.xyzw, vec4( 0.0), vec4( detailLevel)));
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    #line 502
    color = mix( color, main, vec4( handoff));
    cityoverlay.w *= xll_saturate_f(floor((IN.color.w + 0.99)));
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    #line 506
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    #line 510
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    #line 514
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    lowp float atten = (texture( _LightTexture0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * 1.0);
    #line 518
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    mediump float terminator = xll_saturate_f(floor((1.01 + dot( IN.sphereCoords, _SunDir))));
    light *= terminator;
    #line 522
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (SNdotL - 0.01)) / 0.99) * 4.0) * atten));
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    #line 526
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.objnormal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec4 tmpvar_3;
  tmpvar_3.x = gl_MultiTexCoord0.x;
  tmpvar_3.y = gl_MultiTexCoord0.y;
  tmpvar_3.z = gl_MultiTexCoord1.x;
  tmpvar_3.w = gl_MultiTexCoord1.y;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_3).xyz);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec3 norm_2;
  vec2 localCoords_3;
  vec4 cityoverlay_4;
  vec2 uv_5;
  vec4 color_6;
  float r_7;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_5.x = (0.5 + (0.159155 * r_7));
  uv_5.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_11;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_12;
    y_over_x_12 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_13;
    float x_14;
    x_14 = (y_over_x_12 * inversesqrt(((y_over_x_12 * y_over_x_12) + 1.0)));
    s_13 = (sign(x_14) * (1.5708 - (sqrt((1.0 - abs(x_14))) * (1.5708 + (abs(x_14) * (-0.214602 + (abs(x_14) * (0.0865667 + (abs(x_14) * -0.0310296)))))))));
    r_11 = s_13;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_11 = (s_13 + 3.14159);
      } else {
        r_11 = (r_11 - 3.14159);
      };
    };
  } else {
    r_11 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_15;
  tmpvar_15 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_16;
  tmpvar_16 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_17;
  tmpvar_17 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_18;
  tmpvar_18.x = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_18.y = dFdx(tmpvar_15);
  tmpvar_18.z = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_18.w = dFdy(tmpvar_15);
  vec4 tmpvar_19;
  tmpvar_19 = texture2DGradARB (_MainTex, uv_5, tmpvar_18.xy, tmpvar_18.zw);
  float tmpvar_20;
  tmpvar_20 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_21;
  tmpvar_21 = texture2DGradARB (_CityOverlayTex, uv_5, tmpvar_18.xy, tmpvar_18.zw);
  cityoverlay_4.xyz = tmpvar_21.xyz;
  vec2 tmpvar_22;
  tmpvar_22 = (texture2DGradARB (_BumpMap, uv_5, tmpvar_18.xy, tmpvar_18.zw).wy - vec2(0.5, 0.5));
  localCoords_3.x = (tmpvar_22.x * 0.25);
  localCoords_3.y = (tmpvar_22.y * 0.5);
  uv_5.x = (uv_5.x - 0.5);
  vec2 tmpvar_23;
  tmpvar_23 = (uv_5 + localCoords_3);
  uv_5 = tmpvar_23;
  norm_2.z = cos((6.28319 * tmpvar_23.x));
  norm_2.x = sin((6.28319 * tmpvar_23.x));
  norm_2.y = cos((3.14159 * tmpvar_23.y));
  vec3 tmpvar_24;
  tmpvar_24 = -(norm_2);
  norm_2 = tmpvar_24;
  vec3 tmpvar_25;
  tmpvar_25 = abs(xlv_TEXCOORD6);
  float tmpvar_26;
  tmpvar_26 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  cityoverlay_4.w = (tmpvar_21.w * clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0));
  vec4 tmpvar_27;
  tmpvar_27 = (cityoverlay_4 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_25.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_25.yyyy));
  citydarkoverlay_1.xyz = tmpvar_27.xyz;
  vec4 tmpvar_28;
  tmpvar_28 = (cityoverlay_4 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_25.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_25.yyyy));
  vec4 tmpvar_29;
  tmpvar_29 = (mix (mix ((xlv_TEXCOORD1 + mix ((0.25 * (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_20)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_20)), tmpvar_25.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_20)), tmpvar_25.yyyy) - 0.5)), vec4(0.0, 0.0, 0.0, 0.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))), tmpvar_19, vec4(tmpvar_26)), tmpvar_28, tmpvar_28.wwww) * _Color);
  color_6.w = tmpvar_29.w;
  float tmpvar_30;
  tmpvar_30 = clamp (dot (tmpvar_24, -(_SunDir)), 0.0, 1.0);
  vec3 tmpvar_31;
  tmpvar_31 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * mix (clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), tmpvar_30, tmpvar_26)) * 4.0), 0.0, 1.0))), 0.0, 1.0) * clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0));
  color_6.xyz = (tmpvar_29.xyz + (_Albedo * tmpvar_31));
  color_6.xyz = (color_6.xyz * tmpvar_31);
  citydarkoverlay_1.w = (tmpvar_27.w * (1.0 - clamp (clamp ((((_LightColor0.w * (tmpvar_30 - 0.01)) / 0.99) * 4.0), 0.0, 1.0), 0.0, 1.0)));
  color_6.xyz = mix (color_6, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_6.w = 1.0;
  gl_FragData[0] = color_6;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
"vs_3_0
; 27 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord5 o4
dcl_texcoord6 o5
def c9, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
mov r0.xyz, v2
mov r0.w, c9.x
dp4 r1.z, r0, c6
dp4 r1.x, r0, c4
dp4 r1.y, r0, c5
dp3 r0.x, r1, r1
rsq r1.w, r0.x
mul o4.xyz, r1.w, r1
mov r0.zw, v4.xyxy
mov r0.xy, v3
dp4 r0.w, r0, r0
rsq r0.w, r0.w
mul r0.xyz, r0.w, r0
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
add r1.xyz, -r1, c8
dp3 r0.w, r1, r1
mov o5.xyz, -r0
rsq r0.x, r0.w
mov o2, v1
rcp o1.x, r0.x
mov o3.xyz, v2
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  highp vec3 p_2;
  p_2 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_1;
  highp vec4 tmpvar_4;
  tmpvar_4.x = _glesMultiTexCoord0.x;
  tmpvar_4.y = _glesMultiTexCoord0.y;
  tmpvar_4.z = _glesMultiTexCoord1.x;
  tmpvar_4.w = _glesMultiTexCoord1.y;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_4).xyz);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float terminator_2;
  mediump vec3 light_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float handoff_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec3 norm_11;
  highp vec2 localCoords_12;
  mediump vec4 encnorm_13;
  mediump vec4 citylightoverlaydetailZ_14;
  mediump vec4 citylightoverlaydetailY_15;
  mediump vec4 citylightoverlaydetailX_16;
  mediump vec4 citydarkoverlaydetailZ_17;
  mediump vec4 citydarkoverlaydetailY_18;
  mediump vec4 citydarkoverlaydetailX_19;
  mediump vec4 cityoverlay_20;
  mediump float vertLerp_21;
  mediump vec4 main_22;
  highp vec2 uv_23;
  mediump vec4 color_24;
  highp float r_25;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_23.x = (0.5 + (0.159155 * r_25));
  uv_23.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_29;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_30;
    y_over_x_30 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_31;
    highp float x_32;
    x_32 = (y_over_x_30 * inversesqrt(((y_over_x_30 * y_over_x_30) + 1.0)));
    s_31 = (sign(x_32) * (1.5708 - (sqrt((1.0 - abs(x_32))) * (1.5708 + (abs(x_32) * (-0.214602 + (abs(x_32) * (0.0865667 + (abs(x_32) * -0.0310296)))))))));
    r_29 = s_31;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_29 = (s_31 + 3.14159);
      } else {
        r_29 = (r_29 - 3.14159);
      };
    };
  } else {
    r_29 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_33;
  tmpvar_33 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_34;
  tmpvar_34 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_36;
  tmpvar_36.x = (0.159155 * sqrt(dot (tmpvar_34, tmpvar_34)));
  tmpvar_36.y = dFdx(tmpvar_33);
  tmpvar_36.z = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_36.w = dFdy(tmpvar_33);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2DGradEXT (_MainTex, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  main_22 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD6.zy * _DetailScale);
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD6.zx * _DetailScale);
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.xy * _DetailScale);
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  highp float tmpvar_44;
  tmpvar_44 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_21 = tmpvar_44;
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, tmpvar_41);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, tmpvar_38);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_21));
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailVertTex, tmpvar_42);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailTex, tmpvar_39);
  mediump vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_49, vec4(vertLerp_21));
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailVertTex, tmpvar_43);
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailTex, tmpvar_40);
  mediump vec4 tmpvar_53;
  tmpvar_53 = mix (tmpvar_51, tmpvar_52, vec4(vertLerp_21));
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2DGradEXT (_CityOverlayTex, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  cityoverlay_20 = tmpvar_54;
  lowp vec4 tmpvar_55;
  highp vec2 P_56;
  P_56 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_55 = texture2D (_CityDarkOverlayDetailTex, P_56);
  citydarkoverlaydetailX_19 = tmpvar_55;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityDarkOverlayDetailTex, P_58);
  citydarkoverlaydetailY_18 = tmpvar_57;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_59 = texture2D (_CityDarkOverlayDetailTex, P_60);
  citydarkoverlaydetailZ_17 = tmpvar_59;
  lowp vec4 tmpvar_61;
  highp vec2 P_62;
  P_62 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_61 = texture2D (_CityLightOverlayDetailTex, P_62);
  citylightoverlaydetailX_16 = tmpvar_61;
  lowp vec4 tmpvar_63;
  highp vec2 P_64;
  P_64 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_63 = texture2D (_CityLightOverlayDetailTex, P_64);
  citylightoverlaydetailY_15 = tmpvar_63;
  lowp vec4 tmpvar_65;
  highp vec2 P_66;
  P_66 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_65 = texture2D (_CityLightOverlayDetailTex, P_66);
  citylightoverlaydetailZ_14 = tmpvar_65;
  lowp vec4 tmpvar_67;
  tmpvar_67 = texture2DGradEXT (_BumpMap, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  encnorm_13 = tmpvar_67;
  mediump vec2 tmpvar_68;
  tmpvar_68 = encnorm_13.wy;
  localCoords_12 = tmpvar_68;
  highp vec2 tmpvar_69;
  tmpvar_69 = (localCoords_12 - vec2(0.5, 0.5));
  localCoords_12.x = (tmpvar_69.x * 0.25);
  localCoords_12.y = (tmpvar_69.y * 0.5);
  uv_23.x = (uv_23.x - 0.5);
  highp vec2 tmpvar_70;
  tmpvar_70 = (uv_23 + localCoords_12);
  uv_23 = tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = cos((6.28319 * tmpvar_70.x));
  norm_11.z = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = sin((6.28319 * tmpvar_70.x));
  norm_11.x = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = cos((3.14159 * tmpvar_70.y));
  norm_11.y = tmpvar_73;
  mediump vec3 tmpvar_74;
  tmpvar_74 = -(norm_11);
  norm_11 = tmpvar_74;
  highp vec3 tmpvar_75;
  tmpvar_75 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (tmpvar_53, tmpvar_47, tmpvar_75.xxxx);
  detail_10 = tmpvar_76;
  highp vec4 tmpvar_77;
  tmpvar_77 = (0.25 * (mix (detail_10, tmpvar_50, tmpvar_75.yyyy) - 0.5));
  detail_10 = tmpvar_77;
  highp float tmpvar_78;
  tmpvar_78 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_9 = tmpvar_78;
  mediump vec4 tmpvar_79;
  tmpvar_79 = mix (detail_10, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_9));
  highp vec4 tmpvar_80;
  tmpvar_80 = (xlv_TEXCOORD1 + tmpvar_79);
  color_24 = tmpvar_80;
  highp float tmpvar_81;
  tmpvar_81 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_8 = tmpvar_81;
  highp float tmpvar_82;
  tmpvar_82 = clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0);
  cityoverlay_20.w = (cityoverlay_20.w * tmpvar_82);
  highp vec4 tmpvar_83;
  tmpvar_83 = mix (citydarkoverlaydetailZ_17, citydarkoverlaydetailX_19, tmpvar_75.xxxx);
  detail_10 = tmpvar_83;
  highp vec4 tmpvar_84;
  tmpvar_84 = mix (detail_10, citydarkoverlaydetailY_18, tmpvar_75.yyyy);
  detail_10 = tmpvar_84;
  mediump vec4 tmpvar_85;
  tmpvar_85 = (cityoverlay_20 * detail_10);
  citydarkoverlay_7.xyz = tmpvar_85.xyz;
  highp vec4 tmpvar_86;
  tmpvar_86 = mix (citylightoverlaydetailZ_14, citylightoverlaydetailX_16, tmpvar_75.xxxx);
  detail_10 = tmpvar_86;
  highp vec4 tmpvar_87;
  tmpvar_87 = mix (detail_10, citylightoverlaydetailY_15, tmpvar_75.yyyy);
  detail_10 = tmpvar_87;
  mediump vec4 tmpvar_88;
  tmpvar_88 = (cityoverlay_20 * detail_10);
  mediump vec4 tmpvar_89;
  tmpvar_89 = (mix (mix (color_24, main_22, vec4(handoff_8)), tmpvar_88, tmpvar_88.wwww) * _Color);
  color_24.w = tmpvar_89.w;
  highp vec3 tmpvar_90;
  tmpvar_90 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_90;
  lowp vec3 tmpvar_91;
  tmpvar_91 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_91;
  highp float tmpvar_92;
  tmpvar_92 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_92;
  mediump float tmpvar_93;
  tmpvar_93 = clamp (dot (tmpvar_74, -(_SunDir)), 0.0, 1.0);
  mediump float tmpvar_94;
  tmpvar_94 = clamp (((_LightColor0.w * mix (TNdotL_4, tmpvar_93, handoff_8)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_95;
  tmpvar_95 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_94)), 0.0, 1.0);
  light_3 = tmpvar_95;
  highp float tmpvar_96;
  tmpvar_96 = clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0);
  terminator_2 = tmpvar_96;
  mediump vec3 tmpvar_97;
  tmpvar_97 = (light_3 * terminator_2);
  light_3 = tmpvar_97;
  highp vec3 tmpvar_98;
  tmpvar_98 = (tmpvar_89.xyz + (_Albedo * tmpvar_97));
  color_24.xyz = tmpvar_98;
  color_24.xyz = (color_24.xyz * tmpvar_97);
  citydarkoverlay_7.w = (tmpvar_85.w * (1.0 - clamp (clamp ((((_LightColor0.w * (tmpvar_93 - 0.01)) / 0.99) * 4.0), 0.0, 1.0), 0.0, 1.0)));
  color_24.xyz = mix (color_24, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_24.w = 1.0;
  tmpvar_1 = color_24;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  highp vec3 p_2;
  p_2 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_1;
  highp vec4 tmpvar_4;
  tmpvar_4.x = _glesMultiTexCoord0.x;
  tmpvar_4.y = _glesMultiTexCoord0.y;
  tmpvar_4.z = _glesMultiTexCoord1.x;
  tmpvar_4.w = _glesMultiTexCoord1.y;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_4).xyz);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float terminator_2;
  mediump vec3 light_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float handoff_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec3 norm_11;
  highp vec2 localCoords_12;
  mediump vec4 encnorm_13;
  mediump vec4 citylightoverlaydetailZ_14;
  mediump vec4 citylightoverlaydetailY_15;
  mediump vec4 citylightoverlaydetailX_16;
  mediump vec4 citydarkoverlaydetailZ_17;
  mediump vec4 citydarkoverlaydetailY_18;
  mediump vec4 citydarkoverlaydetailX_19;
  mediump vec4 cityoverlay_20;
  mediump float vertLerp_21;
  mediump vec4 main_22;
  highp vec2 uv_23;
  mediump vec4 color_24;
  highp float r_25;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_23.x = (0.5 + (0.159155 * r_25));
  uv_23.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_29;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_30;
    y_over_x_30 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_31;
    highp float x_32;
    x_32 = (y_over_x_30 * inversesqrt(((y_over_x_30 * y_over_x_30) + 1.0)));
    s_31 = (sign(x_32) * (1.5708 - (sqrt((1.0 - abs(x_32))) * (1.5708 + (abs(x_32) * (-0.214602 + (abs(x_32) * (0.0865667 + (abs(x_32) * -0.0310296)))))))));
    r_29 = s_31;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_29 = (s_31 + 3.14159);
      } else {
        r_29 = (r_29 - 3.14159);
      };
    };
  } else {
    r_29 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_33;
  tmpvar_33 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_34;
  tmpvar_34 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_36;
  tmpvar_36.x = (0.159155 * sqrt(dot (tmpvar_34, tmpvar_34)));
  tmpvar_36.y = dFdx(tmpvar_33);
  tmpvar_36.z = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_36.w = dFdy(tmpvar_33);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2DGradEXT (_MainTex, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  main_22 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD6.zy * _DetailScale);
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD6.zx * _DetailScale);
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.xy * _DetailScale);
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  highp float tmpvar_44;
  tmpvar_44 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_21 = tmpvar_44;
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, tmpvar_41);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, tmpvar_38);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_21));
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailVertTex, tmpvar_42);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailTex, tmpvar_39);
  mediump vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_49, vec4(vertLerp_21));
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailVertTex, tmpvar_43);
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailTex, tmpvar_40);
  mediump vec4 tmpvar_53;
  tmpvar_53 = mix (tmpvar_51, tmpvar_52, vec4(vertLerp_21));
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2DGradEXT (_CityOverlayTex, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  cityoverlay_20 = tmpvar_54;
  lowp vec4 tmpvar_55;
  highp vec2 P_56;
  P_56 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_55 = texture2D (_CityDarkOverlayDetailTex, P_56);
  citydarkoverlaydetailX_19 = tmpvar_55;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityDarkOverlayDetailTex, P_58);
  citydarkoverlaydetailY_18 = tmpvar_57;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_59 = texture2D (_CityDarkOverlayDetailTex, P_60);
  citydarkoverlaydetailZ_17 = tmpvar_59;
  lowp vec4 tmpvar_61;
  highp vec2 P_62;
  P_62 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_61 = texture2D (_CityLightOverlayDetailTex, P_62);
  citylightoverlaydetailX_16 = tmpvar_61;
  lowp vec4 tmpvar_63;
  highp vec2 P_64;
  P_64 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_63 = texture2D (_CityLightOverlayDetailTex, P_64);
  citylightoverlaydetailY_15 = tmpvar_63;
  lowp vec4 tmpvar_65;
  highp vec2 P_66;
  P_66 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_65 = texture2D (_CityLightOverlayDetailTex, P_66);
  citylightoverlaydetailZ_14 = tmpvar_65;
  lowp vec4 tmpvar_67;
  tmpvar_67 = texture2DGradEXT (_BumpMap, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  encnorm_13 = tmpvar_67;
  mediump vec2 tmpvar_68;
  tmpvar_68 = encnorm_13.wy;
  localCoords_12 = tmpvar_68;
  highp vec2 tmpvar_69;
  tmpvar_69 = (localCoords_12 - vec2(0.5, 0.5));
  localCoords_12.x = (tmpvar_69.x * 0.25);
  localCoords_12.y = (tmpvar_69.y * 0.5);
  uv_23.x = (uv_23.x - 0.5);
  highp vec2 tmpvar_70;
  tmpvar_70 = (uv_23 + localCoords_12);
  uv_23 = tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = cos((6.28319 * tmpvar_70.x));
  norm_11.z = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = sin((6.28319 * tmpvar_70.x));
  norm_11.x = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = cos((3.14159 * tmpvar_70.y));
  norm_11.y = tmpvar_73;
  mediump vec3 tmpvar_74;
  tmpvar_74 = -(norm_11);
  norm_11 = tmpvar_74;
  highp vec3 tmpvar_75;
  tmpvar_75 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (tmpvar_53, tmpvar_47, tmpvar_75.xxxx);
  detail_10 = tmpvar_76;
  highp vec4 tmpvar_77;
  tmpvar_77 = (0.25 * (mix (detail_10, tmpvar_50, tmpvar_75.yyyy) - 0.5));
  detail_10 = tmpvar_77;
  highp float tmpvar_78;
  tmpvar_78 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_9 = tmpvar_78;
  mediump vec4 tmpvar_79;
  tmpvar_79 = mix (detail_10, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_9));
  highp vec4 tmpvar_80;
  tmpvar_80 = (xlv_TEXCOORD1 + tmpvar_79);
  color_24 = tmpvar_80;
  highp float tmpvar_81;
  tmpvar_81 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_8 = tmpvar_81;
  highp float tmpvar_82;
  tmpvar_82 = clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0);
  cityoverlay_20.w = (cityoverlay_20.w * tmpvar_82);
  highp vec4 tmpvar_83;
  tmpvar_83 = mix (citydarkoverlaydetailZ_17, citydarkoverlaydetailX_19, tmpvar_75.xxxx);
  detail_10 = tmpvar_83;
  highp vec4 tmpvar_84;
  tmpvar_84 = mix (detail_10, citydarkoverlaydetailY_18, tmpvar_75.yyyy);
  detail_10 = tmpvar_84;
  mediump vec4 tmpvar_85;
  tmpvar_85 = (cityoverlay_20 * detail_10);
  citydarkoverlay_7.xyz = tmpvar_85.xyz;
  highp vec4 tmpvar_86;
  tmpvar_86 = mix (citylightoverlaydetailZ_14, citylightoverlaydetailX_16, tmpvar_75.xxxx);
  detail_10 = tmpvar_86;
  highp vec4 tmpvar_87;
  tmpvar_87 = mix (detail_10, citylightoverlaydetailY_15, tmpvar_75.yyyy);
  detail_10 = tmpvar_87;
  mediump vec4 tmpvar_88;
  tmpvar_88 = (cityoverlay_20 * detail_10);
  mediump vec4 tmpvar_89;
  tmpvar_89 = (mix (mix (color_24, main_22, vec4(handoff_8)), tmpvar_88, tmpvar_88.wwww) * _Color);
  color_24.w = tmpvar_89.w;
  highp vec3 tmpvar_90;
  tmpvar_90 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_90;
  lowp vec3 tmpvar_91;
  tmpvar_91 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_91;
  highp float tmpvar_92;
  tmpvar_92 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_92;
  mediump float tmpvar_93;
  tmpvar_93 = clamp (dot (tmpvar_74, -(_SunDir)), 0.0, 1.0);
  mediump float tmpvar_94;
  tmpvar_94 = clamp (((_LightColor0.w * mix (TNdotL_4, tmpvar_93, handoff_8)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_95;
  tmpvar_95 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_94)), 0.0, 1.0);
  light_3 = tmpvar_95;
  highp float tmpvar_96;
  tmpvar_96 = clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0);
  terminator_2 = tmpvar_96;
  mediump vec3 tmpvar_97;
  tmpvar_97 = (light_3 * terminator_2);
  light_3 = tmpvar_97;
  highp vec3 tmpvar_98;
  tmpvar_98 = (tmpvar_89.xyz + (_Albedo * tmpvar_97));
  color_24.xyz = tmpvar_98;
  color_24.xyz = (color_24.xyz * tmpvar_97);
  citydarkoverlay_7.w = (tmpvar_85.w * (1.0 - clamp (clamp ((((_LightColor0.w * (tmpvar_93 - 0.01)) / 0.99) * 4.0), 0.0, 1.0), 0.0, 1.0)));
  color_24.xyz = mix (color_24, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_24.w = 1.0;
  tmpvar_1 = color_24;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 420
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 objnormal;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
};
#line 410
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 393
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 397
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 401
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp mat4 _Rotation;
#line 405
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 409
uniform sampler2D _CityLightOverlayDetailTex;
#line 430
#line 443
#line 430
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 434
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    #line 438
    o.color = v.color;
    o.objnormal = v.normal;
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.objnormal);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereCoords);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 420
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 objnormal;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
};
#line 410
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 393
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 397
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 401
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp mat4 _Rotation;
#line 405
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 409
uniform sampler2D _CityLightOverlayDetailTex;
#line 430
#line 443
#line 443
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 447
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 451
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 454
lowp vec4 frag( in v2f IN ) {
    #line 456
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 460
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    highp vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 464
    highp vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    highp vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    highp vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    highp vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 468
    highp vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, (-IN.sphereCoords))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 472
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    #line 476
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    #line 480
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    highp vec2 localCoords = encnorm.wy;
    localCoords -= vec2( 0.5);
    localCoords.x *= 0.25;
    #line 484
    localCoords.y *= 0.5;
    uv.x -= 0.5;
    uv += localCoords;
    mediump vec3 norm;
    #line 488
    norm.z = cos((6.28319 * uv.x));
    norm.x = sin((6.28319 * uv.x));
    norm.y = cos((3.14159 * uv.y));
    norm = (-norm);
    #line 492
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = (0.25 * (mix( detail, detailY, vec4( sphereNrm.y)) - 0.5));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    #line 496
    color = (IN.color + mix( detail.xyzw, vec4( 0.0), vec4( detailLevel)));
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    color = mix( color, main, vec4( handoff));
    cityoverlay.w *= xll_saturate_f(floor((IN.color.w + 0.99)));
    #line 500
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    #line 504
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    #line 508
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    #line 512
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    lowp float atten = 1.0;
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    #line 516
    mediump float terminator = xll_saturate_f(floor((1.01 + dot( IN.sphereCoords, _SunDir))));
    light *= terminator;
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    #line 520
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (SNdotL - 0.01)) / 0.99) * 4.0) * atten));
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    #line 524
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.objnormal = vec3(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec4 tmpvar_3;
  tmpvar_3.x = gl_MultiTexCoord0.x;
  tmpvar_3.y = gl_MultiTexCoord0.y;
  tmpvar_3.z = gl_MultiTexCoord1.x;
  tmpvar_3.w = gl_MultiTexCoord1.y;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_3).xyz);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec3 norm_2;
  vec2 localCoords_3;
  vec4 cityoverlay_4;
  vec2 uv_5;
  vec4 color_6;
  float r_7;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_5.x = (0.5 + (0.159155 * r_7));
  uv_5.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_11;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_12;
    y_over_x_12 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_13;
    float x_14;
    x_14 = (y_over_x_12 * inversesqrt(((y_over_x_12 * y_over_x_12) + 1.0)));
    s_13 = (sign(x_14) * (1.5708 - (sqrt((1.0 - abs(x_14))) * (1.5708 + (abs(x_14) * (-0.214602 + (abs(x_14) * (0.0865667 + (abs(x_14) * -0.0310296)))))))));
    r_11 = s_13;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_11 = (s_13 + 3.14159);
      } else {
        r_11 = (r_11 - 3.14159);
      };
    };
  } else {
    r_11 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_15;
  tmpvar_15 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_16;
  tmpvar_16 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_17;
  tmpvar_17 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_18;
  tmpvar_18.x = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_18.y = dFdx(tmpvar_15);
  tmpvar_18.z = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_18.w = dFdy(tmpvar_15);
  vec4 tmpvar_19;
  tmpvar_19 = texture2DGradARB (_MainTex, uv_5, tmpvar_18.xy, tmpvar_18.zw);
  float tmpvar_20;
  tmpvar_20 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_21;
  tmpvar_21 = texture2DGradARB (_CityOverlayTex, uv_5, tmpvar_18.xy, tmpvar_18.zw);
  cityoverlay_4.xyz = tmpvar_21.xyz;
  vec2 tmpvar_22;
  tmpvar_22 = (texture2DGradARB (_BumpMap, uv_5, tmpvar_18.xy, tmpvar_18.zw).wy - vec2(0.5, 0.5));
  localCoords_3.x = (tmpvar_22.x * 0.25);
  localCoords_3.y = (tmpvar_22.y * 0.5);
  uv_5.x = (uv_5.x - 0.5);
  vec2 tmpvar_23;
  tmpvar_23 = (uv_5 + localCoords_3);
  uv_5 = tmpvar_23;
  norm_2.z = cos((6.28319 * tmpvar_23.x));
  norm_2.x = sin((6.28319 * tmpvar_23.x));
  norm_2.y = cos((3.14159 * tmpvar_23.y));
  vec3 tmpvar_24;
  tmpvar_24 = -(norm_2);
  norm_2 = tmpvar_24;
  vec3 tmpvar_25;
  tmpvar_25 = abs(xlv_TEXCOORD6);
  float tmpvar_26;
  tmpvar_26 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  cityoverlay_4.w = (tmpvar_21.w * clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0));
  vec4 tmpvar_27;
  tmpvar_27 = (cityoverlay_4 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_25.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_25.yyyy));
  citydarkoverlay_1.xyz = tmpvar_27.xyz;
  vec4 tmpvar_28;
  tmpvar_28 = (cityoverlay_4 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_25.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_25.yyyy));
  vec4 tmpvar_29;
  tmpvar_29 = (mix (mix ((xlv_TEXCOORD1 + mix ((0.25 * (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_20)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_20)), tmpvar_25.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_20)), tmpvar_25.yyyy) - 0.5)), vec4(0.0, 0.0, 0.0, 0.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))), tmpvar_19, vec4(tmpvar_26)), tmpvar_28, tmpvar_28.wwww) * _Color);
  color_6.w = tmpvar_29.w;
  float tmpvar_30;
  tmpvar_30 = clamp (dot (tmpvar_24, -(_SunDir)), 0.0, 1.0);
  float tmpvar_31;
  tmpvar_31 = ((float((xlv_TEXCOORD3.z > 0.0)) * texture2D (_LightTexture0, ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5)).w) * texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz))).w);
  vec3 tmpvar_32;
  tmpvar_32 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * mix (clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), tmpvar_30, tmpvar_26)) * 4.0) * tmpvar_31), 0.0, 1.0))), 0.0, 1.0) * clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0));
  color_6.xyz = (tmpvar_29.xyz + (_Albedo * tmpvar_32));
  color_6.xyz = (color_6.xyz * tmpvar_32);
  citydarkoverlay_1.w = (tmpvar_27.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_30 - 0.01)) / 0.99) * 4.0) * tmpvar_31), 0.0, 1.0), 0.0, 1.0)));
  color_6.xyz = mix (color_6, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_6.w = 1.0;
  gl_FragData[0] = color_6;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 32 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord5 o5
dcl_texcoord6 o6
def c13, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
mov r1.xyz, v2
mov r1.w, c13.x
dp4 r2.z, r1, c6
dp4 r2.x, r1, c4
dp4 r2.y, r1, c5
mov r0.zw, v4.xyxy
mov r0.xy, v3
dp4 r2.w, r0, r0
rsq r1.x, r2.w
mul r0.xyz, r1.x, r0
mov o6.xyz, -r0
dp3 r0.w, r2, r2
rsq r0.w, r0.w
mul o5.xyz, r0.w, r2
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
dp4 r0.w, v0, c7
add r1.xyz, -r0, c12
dp3 r1.x, r1, r1
rsq r1.x, r1.x
mov o2, v1
dp4 o4.w, r0, c11
dp4 o4.z, r0, c10
dp4 o4.y, r0, c9
dp4 o4.x, r0, c8
rcp o1.x, r1.x
mov o3.xyz, v2
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  highp vec3 p_2;
  p_2 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_1;
  highp vec4 tmpvar_4;
  tmpvar_4.x = _glesMultiTexCoord0.x;
  tmpvar_4.y = _glesMultiTexCoord0.y;
  tmpvar_4.z = _glesMultiTexCoord1.x;
  tmpvar_4.w = _glesMultiTexCoord1.y;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_4).xyz);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float terminator_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float TNdotL_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump vec4 citydarkoverlay_8;
  mediump float handoff_9;
  mediump float detailLevel_10;
  mediump vec4 detail_11;
  mediump vec3 norm_12;
  highp vec2 localCoords_13;
  mediump vec4 encnorm_14;
  mediump vec4 citylightoverlaydetailZ_15;
  mediump vec4 citylightoverlaydetailY_16;
  mediump vec4 citylightoverlaydetailX_17;
  mediump vec4 citydarkoverlaydetailZ_18;
  mediump vec4 citydarkoverlaydetailY_19;
  mediump vec4 citydarkoverlaydetailX_20;
  mediump vec4 cityoverlay_21;
  mediump float vertLerp_22;
  mediump vec4 main_23;
  highp vec2 uv_24;
  mediump vec4 color_25;
  highp float r_26;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_26));
  uv_24.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_30;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_31;
    y_over_x_31 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_32;
    highp float x_33;
    x_33 = (y_over_x_31 * inversesqrt(((y_over_x_31 * y_over_x_31) + 1.0)));
    s_32 = (sign(x_33) * (1.5708 - (sqrt((1.0 - abs(x_33))) * (1.5708 + (abs(x_33) * (-0.214602 + (abs(x_33) * (0.0865667 + (abs(x_33) * -0.0310296)))))))));
    r_30 = s_32;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_30 = (s_32 + 3.14159);
      } else {
        r_30 = (r_30 - 3.14159);
      };
    };
  } else {
    r_30 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_34;
  tmpvar_34 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_MainTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  main_23 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD6.zy * _DetailScale);
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zx * _DetailScale);
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.xy * _DetailScale);
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  highp float tmpvar_45;
  tmpvar_45 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_22 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailVertTex, tmpvar_42);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailTex, tmpvar_39);
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_47, vec4(vertLerp_22));
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailVertTex, tmpvar_43);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailTex, tmpvar_40);
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (tmpvar_49, tmpvar_50, vec4(vertLerp_22));
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailVertTex, tmpvar_44);
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailTex, tmpvar_41);
  mediump vec4 tmpvar_54;
  tmpvar_54 = mix (tmpvar_52, tmpvar_53, vec4(vertLerp_22));
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2DGradEXT (_CityOverlayTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  cityoverlay_21 = tmpvar_55;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_56 = texture2D (_CityDarkOverlayDetailTex, P_57);
  citydarkoverlaydetailX_20 = tmpvar_56;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityDarkOverlayDetailTex, P_59);
  citydarkoverlaydetailY_19 = tmpvar_58;
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_60 = texture2D (_CityDarkOverlayDetailTex, P_61);
  citydarkoverlaydetailZ_18 = tmpvar_60;
  lowp vec4 tmpvar_62;
  highp vec2 P_63;
  P_63 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_62 = texture2D (_CityLightOverlayDetailTex, P_63);
  citylightoverlaydetailX_17 = tmpvar_62;
  lowp vec4 tmpvar_64;
  highp vec2 P_65;
  P_65 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_64 = texture2D (_CityLightOverlayDetailTex, P_65);
  citylightoverlaydetailY_16 = tmpvar_64;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_66 = texture2D (_CityLightOverlayDetailTex, P_67);
  citylightoverlaydetailZ_15 = tmpvar_66;
  lowp vec4 tmpvar_68;
  tmpvar_68 = texture2DGradEXT (_BumpMap, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  encnorm_14 = tmpvar_68;
  mediump vec2 tmpvar_69;
  tmpvar_69 = encnorm_14.wy;
  localCoords_13 = tmpvar_69;
  highp vec2 tmpvar_70;
  tmpvar_70 = (localCoords_13 - vec2(0.5, 0.5));
  localCoords_13.x = (tmpvar_70.x * 0.25);
  localCoords_13.y = (tmpvar_70.y * 0.5);
  uv_24.x = (uv_24.x - 0.5);
  highp vec2 tmpvar_71;
  tmpvar_71 = (uv_24 + localCoords_13);
  uv_24 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = cos((6.28319 * tmpvar_71.x));
  norm_12.z = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = sin((6.28319 * tmpvar_71.x));
  norm_12.x = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = cos((3.14159 * tmpvar_71.y));
  norm_12.y = tmpvar_74;
  mediump vec3 tmpvar_75;
  tmpvar_75 = -(norm_12);
  norm_12 = tmpvar_75;
  highp vec3 tmpvar_76;
  tmpvar_76 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (tmpvar_54, tmpvar_48, tmpvar_76.xxxx);
  detail_11 = tmpvar_77;
  highp vec4 tmpvar_78;
  tmpvar_78 = (0.25 * (mix (detail_11, tmpvar_51, tmpvar_76.yyyy) - 0.5));
  detail_11 = tmpvar_78;
  highp float tmpvar_79;
  tmpvar_79 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_10 = tmpvar_79;
  mediump vec4 tmpvar_80;
  tmpvar_80 = mix (detail_11, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_10));
  highp vec4 tmpvar_81;
  tmpvar_81 = (xlv_TEXCOORD1 + tmpvar_80);
  color_25 = tmpvar_81;
  highp float tmpvar_82;
  tmpvar_82 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_9 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0);
  cityoverlay_21.w = (cityoverlay_21.w * tmpvar_83);
  highp vec4 tmpvar_84;
  tmpvar_84 = mix (citydarkoverlaydetailZ_18, citydarkoverlaydetailX_20, tmpvar_76.xxxx);
  detail_11 = tmpvar_84;
  highp vec4 tmpvar_85;
  tmpvar_85 = mix (detail_11, citydarkoverlaydetailY_19, tmpvar_76.yyyy);
  detail_11 = tmpvar_85;
  mediump vec4 tmpvar_86;
  tmpvar_86 = (cityoverlay_21 * detail_11);
  citydarkoverlay_8.xyz = tmpvar_86.xyz;
  highp vec4 tmpvar_87;
  tmpvar_87 = mix (citylightoverlaydetailZ_15, citylightoverlaydetailX_17, tmpvar_76.xxxx);
  detail_11 = tmpvar_87;
  highp vec4 tmpvar_88;
  tmpvar_88 = mix (detail_11, citylightoverlaydetailY_16, tmpvar_76.yyyy);
  detail_11 = tmpvar_88;
  mediump vec4 tmpvar_89;
  tmpvar_89 = (cityoverlay_21 * detail_11);
  mediump vec4 tmpvar_90;
  tmpvar_90 = (mix (mix (color_25, main_23, vec4(handoff_9)), tmpvar_89, tmpvar_89.wwww) * _Color);
  color_25.w = tmpvar_90.w;
  highp vec3 tmpvar_91;
  tmpvar_91 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_91;
  highp vec3 tmpvar_92;
  tmpvar_92 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_92;
  highp float tmpvar_93;
  tmpvar_93 = clamp (dot (xlv_TEXCOORD5, lightDirection_6), 0.0, 1.0);
  TNdotL_5 = tmpvar_93;
  mediump float tmpvar_94;
  tmpvar_94 = clamp (dot (tmpvar_75, -(_SunDir)), 0.0, 1.0);
  lowp vec4 tmpvar_95;
  highp vec2 P_96;
  P_96 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_95 = texture2D (_LightTexture0, P_96);
  highp float tmpvar_97;
  tmpvar_97 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_98;
  tmpvar_98 = texture2D (_LightTextureB0, vec2(tmpvar_97));
  highp float tmpvar_99;
  tmpvar_99 = ((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_95.w) * tmpvar_98.w);
  atten_4 = tmpvar_99;
  mediump float tmpvar_100;
  tmpvar_100 = clamp ((((_LightColor0.w * mix (TNdotL_5, tmpvar_94, handoff_9)) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_101;
  tmpvar_101 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_100)), 0.0, 1.0);
  light_3 = tmpvar_101;
  highp float tmpvar_102;
  tmpvar_102 = clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0);
  terminator_2 = tmpvar_102;
  mediump vec3 tmpvar_103;
  tmpvar_103 = (light_3 * terminator_2);
  light_3 = tmpvar_103;
  highp vec3 tmpvar_104;
  tmpvar_104 = (tmpvar_90.xyz + (_Albedo * tmpvar_103));
  color_25.xyz = tmpvar_104;
  color_25.xyz = (color_25.xyz * tmpvar_103);
  citydarkoverlay_8.w = (tmpvar_86.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_94 - 0.01)) / 0.99) * 4.0) * atten_4), 0.0, 1.0), 0.0, 1.0)));
  color_25.xyz = mix (color_25, citydarkoverlay_8, citydarkoverlay_8.wwww).xyz;
  color_25.w = 1.0;
  tmpvar_1 = color_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  highp vec3 p_2;
  p_2 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_1;
  highp vec4 tmpvar_4;
  tmpvar_4.x = _glesMultiTexCoord0.x;
  tmpvar_4.y = _glesMultiTexCoord0.y;
  tmpvar_4.z = _glesMultiTexCoord1.x;
  tmpvar_4.w = _glesMultiTexCoord1.y;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_4).xyz);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float terminator_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float TNdotL_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump vec4 citydarkoverlay_8;
  mediump float handoff_9;
  mediump float detailLevel_10;
  mediump vec4 detail_11;
  mediump vec3 norm_12;
  highp vec2 localCoords_13;
  mediump vec4 encnorm_14;
  mediump vec4 citylightoverlaydetailZ_15;
  mediump vec4 citylightoverlaydetailY_16;
  mediump vec4 citylightoverlaydetailX_17;
  mediump vec4 citydarkoverlaydetailZ_18;
  mediump vec4 citydarkoverlaydetailY_19;
  mediump vec4 citydarkoverlaydetailX_20;
  mediump vec4 cityoverlay_21;
  mediump float vertLerp_22;
  mediump vec4 main_23;
  highp vec2 uv_24;
  mediump vec4 color_25;
  highp float r_26;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_26));
  uv_24.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_30;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_31;
    y_over_x_31 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_32;
    highp float x_33;
    x_33 = (y_over_x_31 * inversesqrt(((y_over_x_31 * y_over_x_31) + 1.0)));
    s_32 = (sign(x_33) * (1.5708 - (sqrt((1.0 - abs(x_33))) * (1.5708 + (abs(x_33) * (-0.214602 + (abs(x_33) * (0.0865667 + (abs(x_33) * -0.0310296)))))))));
    r_30 = s_32;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_30 = (s_32 + 3.14159);
      } else {
        r_30 = (r_30 - 3.14159);
      };
    };
  } else {
    r_30 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_34;
  tmpvar_34 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_MainTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  main_23 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD6.zy * _DetailScale);
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zx * _DetailScale);
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.xy * _DetailScale);
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  highp float tmpvar_45;
  tmpvar_45 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_22 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailVertTex, tmpvar_42);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailTex, tmpvar_39);
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_47, vec4(vertLerp_22));
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailVertTex, tmpvar_43);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailTex, tmpvar_40);
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (tmpvar_49, tmpvar_50, vec4(vertLerp_22));
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailVertTex, tmpvar_44);
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailTex, tmpvar_41);
  mediump vec4 tmpvar_54;
  tmpvar_54 = mix (tmpvar_52, tmpvar_53, vec4(vertLerp_22));
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2DGradEXT (_CityOverlayTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  cityoverlay_21 = tmpvar_55;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_56 = texture2D (_CityDarkOverlayDetailTex, P_57);
  citydarkoverlaydetailX_20 = tmpvar_56;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityDarkOverlayDetailTex, P_59);
  citydarkoverlaydetailY_19 = tmpvar_58;
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_60 = texture2D (_CityDarkOverlayDetailTex, P_61);
  citydarkoverlaydetailZ_18 = tmpvar_60;
  lowp vec4 tmpvar_62;
  highp vec2 P_63;
  P_63 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_62 = texture2D (_CityLightOverlayDetailTex, P_63);
  citylightoverlaydetailX_17 = tmpvar_62;
  lowp vec4 tmpvar_64;
  highp vec2 P_65;
  P_65 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_64 = texture2D (_CityLightOverlayDetailTex, P_65);
  citylightoverlaydetailY_16 = tmpvar_64;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_66 = texture2D (_CityLightOverlayDetailTex, P_67);
  citylightoverlaydetailZ_15 = tmpvar_66;
  lowp vec4 tmpvar_68;
  tmpvar_68 = texture2DGradEXT (_BumpMap, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  encnorm_14 = tmpvar_68;
  mediump vec2 tmpvar_69;
  tmpvar_69 = encnorm_14.wy;
  localCoords_13 = tmpvar_69;
  highp vec2 tmpvar_70;
  tmpvar_70 = (localCoords_13 - vec2(0.5, 0.5));
  localCoords_13.x = (tmpvar_70.x * 0.25);
  localCoords_13.y = (tmpvar_70.y * 0.5);
  uv_24.x = (uv_24.x - 0.5);
  highp vec2 tmpvar_71;
  tmpvar_71 = (uv_24 + localCoords_13);
  uv_24 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = cos((6.28319 * tmpvar_71.x));
  norm_12.z = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = sin((6.28319 * tmpvar_71.x));
  norm_12.x = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = cos((3.14159 * tmpvar_71.y));
  norm_12.y = tmpvar_74;
  mediump vec3 tmpvar_75;
  tmpvar_75 = -(norm_12);
  norm_12 = tmpvar_75;
  highp vec3 tmpvar_76;
  tmpvar_76 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (tmpvar_54, tmpvar_48, tmpvar_76.xxxx);
  detail_11 = tmpvar_77;
  highp vec4 tmpvar_78;
  tmpvar_78 = (0.25 * (mix (detail_11, tmpvar_51, tmpvar_76.yyyy) - 0.5));
  detail_11 = tmpvar_78;
  highp float tmpvar_79;
  tmpvar_79 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_10 = tmpvar_79;
  mediump vec4 tmpvar_80;
  tmpvar_80 = mix (detail_11, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_10));
  highp vec4 tmpvar_81;
  tmpvar_81 = (xlv_TEXCOORD1 + tmpvar_80);
  color_25 = tmpvar_81;
  highp float tmpvar_82;
  tmpvar_82 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_9 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0);
  cityoverlay_21.w = (cityoverlay_21.w * tmpvar_83);
  highp vec4 tmpvar_84;
  tmpvar_84 = mix (citydarkoverlaydetailZ_18, citydarkoverlaydetailX_20, tmpvar_76.xxxx);
  detail_11 = tmpvar_84;
  highp vec4 tmpvar_85;
  tmpvar_85 = mix (detail_11, citydarkoverlaydetailY_19, tmpvar_76.yyyy);
  detail_11 = tmpvar_85;
  mediump vec4 tmpvar_86;
  tmpvar_86 = (cityoverlay_21 * detail_11);
  citydarkoverlay_8.xyz = tmpvar_86.xyz;
  highp vec4 tmpvar_87;
  tmpvar_87 = mix (citylightoverlaydetailZ_15, citylightoverlaydetailX_17, tmpvar_76.xxxx);
  detail_11 = tmpvar_87;
  highp vec4 tmpvar_88;
  tmpvar_88 = mix (detail_11, citylightoverlaydetailY_16, tmpvar_76.yyyy);
  detail_11 = tmpvar_88;
  mediump vec4 tmpvar_89;
  tmpvar_89 = (cityoverlay_21 * detail_11);
  mediump vec4 tmpvar_90;
  tmpvar_90 = (mix (mix (color_25, main_23, vec4(handoff_9)), tmpvar_89, tmpvar_89.wwww) * _Color);
  color_25.w = tmpvar_90.w;
  highp vec3 tmpvar_91;
  tmpvar_91 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_91;
  highp vec3 tmpvar_92;
  tmpvar_92 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_92;
  highp float tmpvar_93;
  tmpvar_93 = clamp (dot (xlv_TEXCOORD5, lightDirection_6), 0.0, 1.0);
  TNdotL_5 = tmpvar_93;
  mediump float tmpvar_94;
  tmpvar_94 = clamp (dot (tmpvar_75, -(_SunDir)), 0.0, 1.0);
  lowp vec4 tmpvar_95;
  highp vec2 P_96;
  P_96 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_95 = texture2D (_LightTexture0, P_96);
  highp float tmpvar_97;
  tmpvar_97 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_98;
  tmpvar_98 = texture2D (_LightTextureB0, vec2(tmpvar_97));
  highp float tmpvar_99;
  tmpvar_99 = ((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_95.w) * tmpvar_98.w);
  atten_4 = tmpvar_99;
  mediump float tmpvar_100;
  tmpvar_100 = clamp ((((_LightColor0.w * mix (TNdotL_5, tmpvar_94, handoff_9)) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_101;
  tmpvar_101 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_100)), 0.0, 1.0);
  light_3 = tmpvar_101;
  highp float tmpvar_102;
  tmpvar_102 = clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0);
  terminator_2 = tmpvar_102;
  mediump vec3 tmpvar_103;
  tmpvar_103 = (light_3 * terminator_2);
  light_3 = tmpvar_103;
  highp vec3 tmpvar_104;
  tmpvar_104 = (tmpvar_90.xyz + (_Albedo * tmpvar_103));
  color_25.xyz = tmpvar_104;
  color_25.xyz = (color_25.xyz * tmpvar_103);
  citydarkoverlay_8.w = (tmpvar_86.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_94 - 0.01)) / 0.99) * 4.0) * atten_4), 0.0, 1.0), 0.0, 1.0)));
  color_25.xyz = mix (color_25, citydarkoverlay_8, citydarkoverlay_8.wwww).xyz;
  color_25.w = 1.0;
  tmpvar_1 = color_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 326
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 431
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 objnormal;
    highp vec4 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
};
#line 421
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 336
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 349
#line 357
#line 371
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 404
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 408
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 412
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp mat4 _Rotation;
#line 416
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 420
uniform sampler2D _CityLightOverlayDetailTex;
#line 442
#line 467
#line 442
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 446
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    #line 450
    o.color = v.color;
    o.objnormal = v.normal;
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    #line 454
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.objnormal);
    xlv_TEXCOORD3 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereCoords);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 326
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 431
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 objnormal;
    highp vec4 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
};
#line 421
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 336
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 349
#line 357
#line 371
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 404
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 408
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 412
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp mat4 _Rotation;
#line 416
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 420
uniform sampler2D _CityLightOverlayDetailTex;
#line 442
#line 467
#line 456
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 458
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 462
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 322
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    #line 324
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 318
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    #line 320
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 467
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    #line 471
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 475
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    highp vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    highp vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    highp vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    #line 479
    highp vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    highp vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    highp vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, (-IN.sphereCoords))) - 0.95)) + 0.5));
    #line 483
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    #line 487
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    #line 491
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    highp vec2 localCoords = encnorm.wy;
    #line 495
    localCoords -= vec2( 0.5);
    localCoords.x *= 0.25;
    localCoords.y *= 0.5;
    uv.x -= 0.5;
    #line 499
    uv += localCoords;
    mediump vec3 norm;
    norm.z = cos((6.28319 * uv.x));
    norm.x = sin((6.28319 * uv.x));
    #line 503
    norm.y = cos((3.14159 * uv.y));
    norm = (-norm);
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    #line 507
    detail = (0.25 * (mix( detail, detailY, vec4( sphereNrm.y)) - 0.5));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (IN.color + mix( detail.xyzw, vec4( 0.0), vec4( detailLevel)));
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    #line 511
    color = mix( color, main, vec4( handoff));
    cityoverlay.w *= xll_saturate_f(floor((IN.color.w + 0.99)));
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    #line 515
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    #line 519
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    #line 523
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * 1.0);
    #line 527
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    mediump float terminator = xll_saturate_f(floor((1.01 + dot( IN.sphereCoords, _SunDir))));
    light *= terminator;
    #line 531
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (SNdotL - 0.01)) / 0.99) * 4.0) * atten));
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    #line 535
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.objnormal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec4 tmpvar_3;
  tmpvar_3.x = gl_MultiTexCoord0.x;
  tmpvar_3.y = gl_MultiTexCoord0.y;
  tmpvar_3.z = gl_MultiTexCoord1.x;
  tmpvar_3.w = gl_MultiTexCoord1.y;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_3).xyz);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec3 norm_2;
  vec2 localCoords_3;
  vec4 cityoverlay_4;
  vec2 uv_5;
  vec4 color_6;
  float r_7;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_5.x = (0.5 + (0.159155 * r_7));
  uv_5.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_11;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_12;
    y_over_x_12 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_13;
    float x_14;
    x_14 = (y_over_x_12 * inversesqrt(((y_over_x_12 * y_over_x_12) + 1.0)));
    s_13 = (sign(x_14) * (1.5708 - (sqrt((1.0 - abs(x_14))) * (1.5708 + (abs(x_14) * (-0.214602 + (abs(x_14) * (0.0865667 + (abs(x_14) * -0.0310296)))))))));
    r_11 = s_13;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_11 = (s_13 + 3.14159);
      } else {
        r_11 = (r_11 - 3.14159);
      };
    };
  } else {
    r_11 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_15;
  tmpvar_15 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_16;
  tmpvar_16 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_17;
  tmpvar_17 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_18;
  tmpvar_18.x = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_18.y = dFdx(tmpvar_15);
  tmpvar_18.z = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_18.w = dFdy(tmpvar_15);
  vec4 tmpvar_19;
  tmpvar_19 = texture2DGradARB (_MainTex, uv_5, tmpvar_18.xy, tmpvar_18.zw);
  float tmpvar_20;
  tmpvar_20 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_21;
  tmpvar_21 = texture2DGradARB (_CityOverlayTex, uv_5, tmpvar_18.xy, tmpvar_18.zw);
  cityoverlay_4.xyz = tmpvar_21.xyz;
  vec2 tmpvar_22;
  tmpvar_22 = (texture2DGradARB (_BumpMap, uv_5, tmpvar_18.xy, tmpvar_18.zw).wy - vec2(0.5, 0.5));
  localCoords_3.x = (tmpvar_22.x * 0.25);
  localCoords_3.y = (tmpvar_22.y * 0.5);
  uv_5.x = (uv_5.x - 0.5);
  vec2 tmpvar_23;
  tmpvar_23 = (uv_5 + localCoords_3);
  uv_5 = tmpvar_23;
  norm_2.z = cos((6.28319 * tmpvar_23.x));
  norm_2.x = sin((6.28319 * tmpvar_23.x));
  norm_2.y = cos((3.14159 * tmpvar_23.y));
  vec3 tmpvar_24;
  tmpvar_24 = -(norm_2);
  norm_2 = tmpvar_24;
  vec3 tmpvar_25;
  tmpvar_25 = abs(xlv_TEXCOORD6);
  float tmpvar_26;
  tmpvar_26 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  cityoverlay_4.w = (tmpvar_21.w * clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0));
  vec4 tmpvar_27;
  tmpvar_27 = (cityoverlay_4 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_25.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_25.yyyy));
  citydarkoverlay_1.xyz = tmpvar_27.xyz;
  vec4 tmpvar_28;
  tmpvar_28 = (cityoverlay_4 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_25.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_25.yyyy));
  vec4 tmpvar_29;
  tmpvar_29 = (mix (mix ((xlv_TEXCOORD1 + mix ((0.25 * (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_20)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_20)), tmpvar_25.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_20)), tmpvar_25.yyyy) - 0.5)), vec4(0.0, 0.0, 0.0, 0.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))), tmpvar_19, vec4(tmpvar_26)), tmpvar_28, tmpvar_28.wwww) * _Color);
  color_6.w = tmpvar_29.w;
  float tmpvar_30;
  tmpvar_30 = clamp (dot (tmpvar_24, -(_SunDir)), 0.0, 1.0);
  float tmpvar_31;
  tmpvar_31 = (texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3, xlv_TEXCOORD3))).w * textureCube (_LightTexture0, xlv_TEXCOORD3).w);
  vec3 tmpvar_32;
  tmpvar_32 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * mix (clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), tmpvar_30, tmpvar_26)) * 4.0) * tmpvar_31), 0.0, 1.0))), 0.0, 1.0) * clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0));
  color_6.xyz = (tmpvar_29.xyz + (_Albedo * tmpvar_32));
  color_6.xyz = (color_6.xyz * tmpvar_32);
  citydarkoverlay_1.w = (tmpvar_27.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_30 - 0.01)) / 0.99) * 4.0) * tmpvar_31), 0.0, 1.0), 0.0, 1.0)));
  color_6.xyz = mix (color_6, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_6.w = 1.0;
  gl_FragData[0] = color_6;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 31 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord5 o5
dcl_texcoord6 o6
def c13, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
mov r1.xyz, v2
mov r1.w, c13.x
dp4 r2.z, r1, c6
dp4 r2.x, r1, c4
dp4 r2.y, r1, c5
mov r0.zw, v4.xyxy
mov r0.xy, v3
dp4 r2.w, r0, r0
rsq r1.x, r2.w
mul r0.xyz, r1.x, r0
mov o6.xyz, -r0
dp3 r0.w, r2, r2
rsq r0.w, r0.w
mul o5.xyz, r0.w, r2
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
dp4 r0.w, v0, c7
add r1.xyz, -r0, c12
dp3 r1.x, r1, r1
rsq r1.x, r1.x
mov o2, v1
dp4 o4.z, r0, c10
dp4 o4.y, r0, c9
dp4 o4.x, r0, c8
rcp o1.x, r1.x
mov o3.xyz, v2
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  highp vec3 p_2;
  p_2 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_1;
  highp vec4 tmpvar_4;
  tmpvar_4.x = _glesMultiTexCoord0.x;
  tmpvar_4.y = _glesMultiTexCoord0.y;
  tmpvar_4.z = _glesMultiTexCoord1.x;
  tmpvar_4.w = _glesMultiTexCoord1.y;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_4).xyz);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float terminator_2;
  mediump vec3 light_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float handoff_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec3 norm_11;
  highp vec2 localCoords_12;
  mediump vec4 encnorm_13;
  mediump vec4 citylightoverlaydetailZ_14;
  mediump vec4 citylightoverlaydetailY_15;
  mediump vec4 citylightoverlaydetailX_16;
  mediump vec4 citydarkoverlaydetailZ_17;
  mediump vec4 citydarkoverlaydetailY_18;
  mediump vec4 citydarkoverlaydetailX_19;
  mediump vec4 cityoverlay_20;
  mediump float vertLerp_21;
  mediump vec4 main_22;
  highp vec2 uv_23;
  mediump vec4 color_24;
  highp float r_25;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_23.x = (0.5 + (0.159155 * r_25));
  uv_23.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_29;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_30;
    y_over_x_30 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_31;
    highp float x_32;
    x_32 = (y_over_x_30 * inversesqrt(((y_over_x_30 * y_over_x_30) + 1.0)));
    s_31 = (sign(x_32) * (1.5708 - (sqrt((1.0 - abs(x_32))) * (1.5708 + (abs(x_32) * (-0.214602 + (abs(x_32) * (0.0865667 + (abs(x_32) * -0.0310296)))))))));
    r_29 = s_31;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_29 = (s_31 + 3.14159);
      } else {
        r_29 = (r_29 - 3.14159);
      };
    };
  } else {
    r_29 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_33;
  tmpvar_33 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_34;
  tmpvar_34 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_36;
  tmpvar_36.x = (0.159155 * sqrt(dot (tmpvar_34, tmpvar_34)));
  tmpvar_36.y = dFdx(tmpvar_33);
  tmpvar_36.z = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_36.w = dFdy(tmpvar_33);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2DGradEXT (_MainTex, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  main_22 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD6.zy * _DetailScale);
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD6.zx * _DetailScale);
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.xy * _DetailScale);
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  highp float tmpvar_44;
  tmpvar_44 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_21 = tmpvar_44;
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, tmpvar_41);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, tmpvar_38);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_21));
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailVertTex, tmpvar_42);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailTex, tmpvar_39);
  mediump vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_49, vec4(vertLerp_21));
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailVertTex, tmpvar_43);
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailTex, tmpvar_40);
  mediump vec4 tmpvar_53;
  tmpvar_53 = mix (tmpvar_51, tmpvar_52, vec4(vertLerp_21));
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2DGradEXT (_CityOverlayTex, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  cityoverlay_20 = tmpvar_54;
  lowp vec4 tmpvar_55;
  highp vec2 P_56;
  P_56 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_55 = texture2D (_CityDarkOverlayDetailTex, P_56);
  citydarkoverlaydetailX_19 = tmpvar_55;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityDarkOverlayDetailTex, P_58);
  citydarkoverlaydetailY_18 = tmpvar_57;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_59 = texture2D (_CityDarkOverlayDetailTex, P_60);
  citydarkoverlaydetailZ_17 = tmpvar_59;
  lowp vec4 tmpvar_61;
  highp vec2 P_62;
  P_62 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_61 = texture2D (_CityLightOverlayDetailTex, P_62);
  citylightoverlaydetailX_16 = tmpvar_61;
  lowp vec4 tmpvar_63;
  highp vec2 P_64;
  P_64 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_63 = texture2D (_CityLightOverlayDetailTex, P_64);
  citylightoverlaydetailY_15 = tmpvar_63;
  lowp vec4 tmpvar_65;
  highp vec2 P_66;
  P_66 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_65 = texture2D (_CityLightOverlayDetailTex, P_66);
  citylightoverlaydetailZ_14 = tmpvar_65;
  lowp vec4 tmpvar_67;
  tmpvar_67 = texture2DGradEXT (_BumpMap, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  encnorm_13 = tmpvar_67;
  mediump vec2 tmpvar_68;
  tmpvar_68 = encnorm_13.wy;
  localCoords_12 = tmpvar_68;
  highp vec2 tmpvar_69;
  tmpvar_69 = (localCoords_12 - vec2(0.5, 0.5));
  localCoords_12.x = (tmpvar_69.x * 0.25);
  localCoords_12.y = (tmpvar_69.y * 0.5);
  uv_23.x = (uv_23.x - 0.5);
  highp vec2 tmpvar_70;
  tmpvar_70 = (uv_23 + localCoords_12);
  uv_23 = tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = cos((6.28319 * tmpvar_70.x));
  norm_11.z = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = sin((6.28319 * tmpvar_70.x));
  norm_11.x = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = cos((3.14159 * tmpvar_70.y));
  norm_11.y = tmpvar_73;
  mediump vec3 tmpvar_74;
  tmpvar_74 = -(norm_11);
  norm_11 = tmpvar_74;
  highp vec3 tmpvar_75;
  tmpvar_75 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (tmpvar_53, tmpvar_47, tmpvar_75.xxxx);
  detail_10 = tmpvar_76;
  highp vec4 tmpvar_77;
  tmpvar_77 = (0.25 * (mix (detail_10, tmpvar_50, tmpvar_75.yyyy) - 0.5));
  detail_10 = tmpvar_77;
  highp float tmpvar_78;
  tmpvar_78 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_9 = tmpvar_78;
  mediump vec4 tmpvar_79;
  tmpvar_79 = mix (detail_10, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_9));
  highp vec4 tmpvar_80;
  tmpvar_80 = (xlv_TEXCOORD1 + tmpvar_79);
  color_24 = tmpvar_80;
  highp float tmpvar_81;
  tmpvar_81 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_8 = tmpvar_81;
  highp float tmpvar_82;
  tmpvar_82 = clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0);
  cityoverlay_20.w = (cityoverlay_20.w * tmpvar_82);
  highp vec4 tmpvar_83;
  tmpvar_83 = mix (citydarkoverlaydetailZ_17, citydarkoverlaydetailX_19, tmpvar_75.xxxx);
  detail_10 = tmpvar_83;
  highp vec4 tmpvar_84;
  tmpvar_84 = mix (detail_10, citydarkoverlaydetailY_18, tmpvar_75.yyyy);
  detail_10 = tmpvar_84;
  mediump vec4 tmpvar_85;
  tmpvar_85 = (cityoverlay_20 * detail_10);
  citydarkoverlay_7.xyz = tmpvar_85.xyz;
  highp vec4 tmpvar_86;
  tmpvar_86 = mix (citylightoverlaydetailZ_14, citylightoverlaydetailX_16, tmpvar_75.xxxx);
  detail_10 = tmpvar_86;
  highp vec4 tmpvar_87;
  tmpvar_87 = mix (detail_10, citylightoverlaydetailY_15, tmpvar_75.yyyy);
  detail_10 = tmpvar_87;
  mediump vec4 tmpvar_88;
  tmpvar_88 = (cityoverlay_20 * detail_10);
  mediump vec4 tmpvar_89;
  tmpvar_89 = (mix (mix (color_24, main_22, vec4(handoff_8)), tmpvar_88, tmpvar_88.wwww) * _Color);
  color_24.w = tmpvar_89.w;
  highp vec3 tmpvar_90;
  tmpvar_90 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_90;
  highp vec3 tmpvar_91;
  tmpvar_91 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_91;
  highp float tmpvar_92;
  tmpvar_92 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_92;
  mediump float tmpvar_93;
  tmpvar_93 = clamp (dot (tmpvar_74, -(_SunDir)), 0.0, 1.0);
  highp float tmpvar_94;
  tmpvar_94 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp float tmpvar_95;
  tmpvar_95 = (texture2D (_LightTextureB0, vec2(tmpvar_94)).w * textureCube (_LightTexture0, xlv_TEXCOORD3).w);
  mediump float tmpvar_96;
  tmpvar_96 = clamp ((((_LightColor0.w * mix (TNdotL_4, tmpvar_93, handoff_8)) * 4.0) * tmpvar_95), 0.0, 1.0);
  highp vec3 tmpvar_97;
  tmpvar_97 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_96)), 0.0, 1.0);
  light_3 = tmpvar_97;
  highp float tmpvar_98;
  tmpvar_98 = clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0);
  terminator_2 = tmpvar_98;
  mediump vec3 tmpvar_99;
  tmpvar_99 = (light_3 * terminator_2);
  light_3 = tmpvar_99;
  highp vec3 tmpvar_100;
  tmpvar_100 = (tmpvar_89.xyz + (_Albedo * tmpvar_99));
  color_24.xyz = tmpvar_100;
  color_24.xyz = (color_24.xyz * tmpvar_99);
  citydarkoverlay_7.w = (tmpvar_85.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_93 - 0.01)) / 0.99) * 4.0) * tmpvar_95), 0.0, 1.0), 0.0, 1.0)));
  color_24.xyz = mix (color_24, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_24.w = 1.0;
  tmpvar_1 = color_24;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  highp vec3 p_2;
  p_2 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_1;
  highp vec4 tmpvar_4;
  tmpvar_4.x = _glesMultiTexCoord0.x;
  tmpvar_4.y = _glesMultiTexCoord0.y;
  tmpvar_4.z = _glesMultiTexCoord1.x;
  tmpvar_4.w = _glesMultiTexCoord1.y;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_4).xyz);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float terminator_2;
  mediump vec3 light_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float handoff_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec3 norm_11;
  highp vec2 localCoords_12;
  mediump vec4 encnorm_13;
  mediump vec4 citylightoverlaydetailZ_14;
  mediump vec4 citylightoverlaydetailY_15;
  mediump vec4 citylightoverlaydetailX_16;
  mediump vec4 citydarkoverlaydetailZ_17;
  mediump vec4 citydarkoverlaydetailY_18;
  mediump vec4 citydarkoverlaydetailX_19;
  mediump vec4 cityoverlay_20;
  mediump float vertLerp_21;
  mediump vec4 main_22;
  highp vec2 uv_23;
  mediump vec4 color_24;
  highp float r_25;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_23.x = (0.5 + (0.159155 * r_25));
  uv_23.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_29;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_30;
    y_over_x_30 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_31;
    highp float x_32;
    x_32 = (y_over_x_30 * inversesqrt(((y_over_x_30 * y_over_x_30) + 1.0)));
    s_31 = (sign(x_32) * (1.5708 - (sqrt((1.0 - abs(x_32))) * (1.5708 + (abs(x_32) * (-0.214602 + (abs(x_32) * (0.0865667 + (abs(x_32) * -0.0310296)))))))));
    r_29 = s_31;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_29 = (s_31 + 3.14159);
      } else {
        r_29 = (r_29 - 3.14159);
      };
    };
  } else {
    r_29 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_33;
  tmpvar_33 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_34;
  tmpvar_34 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_36;
  tmpvar_36.x = (0.159155 * sqrt(dot (tmpvar_34, tmpvar_34)));
  tmpvar_36.y = dFdx(tmpvar_33);
  tmpvar_36.z = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_36.w = dFdy(tmpvar_33);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2DGradEXT (_MainTex, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  main_22 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD6.zy * _DetailScale);
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD6.zx * _DetailScale);
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.xy * _DetailScale);
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  highp float tmpvar_44;
  tmpvar_44 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_21 = tmpvar_44;
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, tmpvar_41);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, tmpvar_38);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_21));
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailVertTex, tmpvar_42);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailTex, tmpvar_39);
  mediump vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_49, vec4(vertLerp_21));
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailVertTex, tmpvar_43);
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailTex, tmpvar_40);
  mediump vec4 tmpvar_53;
  tmpvar_53 = mix (tmpvar_51, tmpvar_52, vec4(vertLerp_21));
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2DGradEXT (_CityOverlayTex, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  cityoverlay_20 = tmpvar_54;
  lowp vec4 tmpvar_55;
  highp vec2 P_56;
  P_56 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_55 = texture2D (_CityDarkOverlayDetailTex, P_56);
  citydarkoverlaydetailX_19 = tmpvar_55;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityDarkOverlayDetailTex, P_58);
  citydarkoverlaydetailY_18 = tmpvar_57;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_59 = texture2D (_CityDarkOverlayDetailTex, P_60);
  citydarkoverlaydetailZ_17 = tmpvar_59;
  lowp vec4 tmpvar_61;
  highp vec2 P_62;
  P_62 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_61 = texture2D (_CityLightOverlayDetailTex, P_62);
  citylightoverlaydetailX_16 = tmpvar_61;
  lowp vec4 tmpvar_63;
  highp vec2 P_64;
  P_64 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_63 = texture2D (_CityLightOverlayDetailTex, P_64);
  citylightoverlaydetailY_15 = tmpvar_63;
  lowp vec4 tmpvar_65;
  highp vec2 P_66;
  P_66 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_65 = texture2D (_CityLightOverlayDetailTex, P_66);
  citylightoverlaydetailZ_14 = tmpvar_65;
  lowp vec4 tmpvar_67;
  tmpvar_67 = texture2DGradEXT (_BumpMap, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  encnorm_13 = tmpvar_67;
  mediump vec2 tmpvar_68;
  tmpvar_68 = encnorm_13.wy;
  localCoords_12 = tmpvar_68;
  highp vec2 tmpvar_69;
  tmpvar_69 = (localCoords_12 - vec2(0.5, 0.5));
  localCoords_12.x = (tmpvar_69.x * 0.25);
  localCoords_12.y = (tmpvar_69.y * 0.5);
  uv_23.x = (uv_23.x - 0.5);
  highp vec2 tmpvar_70;
  tmpvar_70 = (uv_23 + localCoords_12);
  uv_23 = tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = cos((6.28319 * tmpvar_70.x));
  norm_11.z = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = sin((6.28319 * tmpvar_70.x));
  norm_11.x = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = cos((3.14159 * tmpvar_70.y));
  norm_11.y = tmpvar_73;
  mediump vec3 tmpvar_74;
  tmpvar_74 = -(norm_11);
  norm_11 = tmpvar_74;
  highp vec3 tmpvar_75;
  tmpvar_75 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (tmpvar_53, tmpvar_47, tmpvar_75.xxxx);
  detail_10 = tmpvar_76;
  highp vec4 tmpvar_77;
  tmpvar_77 = (0.25 * (mix (detail_10, tmpvar_50, tmpvar_75.yyyy) - 0.5));
  detail_10 = tmpvar_77;
  highp float tmpvar_78;
  tmpvar_78 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_9 = tmpvar_78;
  mediump vec4 tmpvar_79;
  tmpvar_79 = mix (detail_10, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_9));
  highp vec4 tmpvar_80;
  tmpvar_80 = (xlv_TEXCOORD1 + tmpvar_79);
  color_24 = tmpvar_80;
  highp float tmpvar_81;
  tmpvar_81 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_8 = tmpvar_81;
  highp float tmpvar_82;
  tmpvar_82 = clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0);
  cityoverlay_20.w = (cityoverlay_20.w * tmpvar_82);
  highp vec4 tmpvar_83;
  tmpvar_83 = mix (citydarkoverlaydetailZ_17, citydarkoverlaydetailX_19, tmpvar_75.xxxx);
  detail_10 = tmpvar_83;
  highp vec4 tmpvar_84;
  tmpvar_84 = mix (detail_10, citydarkoverlaydetailY_18, tmpvar_75.yyyy);
  detail_10 = tmpvar_84;
  mediump vec4 tmpvar_85;
  tmpvar_85 = (cityoverlay_20 * detail_10);
  citydarkoverlay_7.xyz = tmpvar_85.xyz;
  highp vec4 tmpvar_86;
  tmpvar_86 = mix (citylightoverlaydetailZ_14, citylightoverlaydetailX_16, tmpvar_75.xxxx);
  detail_10 = tmpvar_86;
  highp vec4 tmpvar_87;
  tmpvar_87 = mix (detail_10, citylightoverlaydetailY_15, tmpvar_75.yyyy);
  detail_10 = tmpvar_87;
  mediump vec4 tmpvar_88;
  tmpvar_88 = (cityoverlay_20 * detail_10);
  mediump vec4 tmpvar_89;
  tmpvar_89 = (mix (mix (color_24, main_22, vec4(handoff_8)), tmpvar_88, tmpvar_88.wwww) * _Color);
  color_24.w = tmpvar_89.w;
  highp vec3 tmpvar_90;
  tmpvar_90 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_90;
  highp vec3 tmpvar_91;
  tmpvar_91 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_91;
  highp float tmpvar_92;
  tmpvar_92 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_92;
  mediump float tmpvar_93;
  tmpvar_93 = clamp (dot (tmpvar_74, -(_SunDir)), 0.0, 1.0);
  highp float tmpvar_94;
  tmpvar_94 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp float tmpvar_95;
  tmpvar_95 = (texture2D (_LightTextureB0, vec2(tmpvar_94)).w * textureCube (_LightTexture0, xlv_TEXCOORD3).w);
  mediump float tmpvar_96;
  tmpvar_96 = clamp ((((_LightColor0.w * mix (TNdotL_4, tmpvar_93, handoff_8)) * 4.0) * tmpvar_95), 0.0, 1.0);
  highp vec3 tmpvar_97;
  tmpvar_97 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_96)), 0.0, 1.0);
  light_3 = tmpvar_97;
  highp float tmpvar_98;
  tmpvar_98 = clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0);
  terminator_2 = tmpvar_98;
  mediump vec3 tmpvar_99;
  tmpvar_99 = (light_3 * terminator_2);
  light_3 = tmpvar_99;
  highp vec3 tmpvar_100;
  tmpvar_100 = (tmpvar_89.xyz + (_Albedo * tmpvar_99));
  color_24.xyz = tmpvar_100;
  color_24.xyz = (color_24.xyz * tmpvar_99);
  citydarkoverlay_7.w = (tmpvar_85.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_93 - 0.01)) / 0.99) * 4.0) * tmpvar_95), 0.0, 1.0), 0.0, 1.0)));
  color_24.xyz = mix (color_24, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_24.w = 1.0;
  tmpvar_1 = color_24;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 318
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 423
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 objnormal;
    highp vec3 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
};
#line 413
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 328
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 341
#line 349
#line 363
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 396
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 400
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 404
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp mat4 _Rotation;
#line 408
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 412
uniform sampler2D _CityLightOverlayDetailTex;
#line 434
#line 459
#line 434
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 438
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    #line 442
    o.color = v.color;
    o.objnormal = v.normal;
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    #line 446
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.objnormal);
    xlv_TEXCOORD3 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereCoords);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 318
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 423
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 objnormal;
    highp vec3 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
};
#line 413
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 328
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 341
#line 349
#line 363
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 396
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 400
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 404
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp mat4 _Rotation;
#line 408
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 412
uniform sampler2D _CityLightOverlayDetailTex;
#line 434
#line 459
#line 448
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 450
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 454
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 459
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    #line 463
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 467
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    highp vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    highp vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    highp vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    #line 471
    highp vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    highp vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    highp vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, (-IN.sphereCoords))) - 0.95)) + 0.5));
    #line 475
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    #line 479
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    #line 483
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    highp vec2 localCoords = encnorm.wy;
    #line 487
    localCoords -= vec2( 0.5);
    localCoords.x *= 0.25;
    localCoords.y *= 0.5;
    uv.x -= 0.5;
    #line 491
    uv += localCoords;
    mediump vec3 norm;
    norm.z = cos((6.28319 * uv.x));
    norm.x = sin((6.28319 * uv.x));
    #line 495
    norm.y = cos((3.14159 * uv.y));
    norm = (-norm);
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    #line 499
    detail = (0.25 * (mix( detail, detailY, vec4( sphereNrm.y)) - 0.5));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (IN.color + mix( detail.xyzw, vec4( 0.0), vec4( detailLevel)));
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    #line 503
    color = mix( color, main, vec4( handoff));
    cityoverlay.w *= xll_saturate_f(floor((IN.color.w + 0.99)));
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    #line 507
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    #line 511
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    #line 515
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    lowp float atten = ((texture( _LightTextureB0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * texture( _LightTexture0, IN._LightCoord).w) * 1.0);
    #line 519
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    mediump float terminator = xll_saturate_f(floor((1.01 + dot( IN.sphereCoords, _SunDir))));
    light *= terminator;
    #line 523
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (SNdotL - 0.01)) / 0.99) * 4.0) * atten));
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    #line 527
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.objnormal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec2 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec4 tmpvar_3;
  tmpvar_3.x = gl_MultiTexCoord0.x;
  tmpvar_3.y = gl_MultiTexCoord0.y;
  tmpvar_3.z = gl_MultiTexCoord1.x;
  tmpvar_3.w = gl_MultiTexCoord1.y;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xy;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_3).xyz);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec2 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec3 norm_2;
  vec2 localCoords_3;
  vec4 cityoverlay_4;
  vec2 uv_5;
  vec4 color_6;
  float r_7;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_5.x = (0.5 + (0.159155 * r_7));
  uv_5.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_11;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_12;
    y_over_x_12 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_13;
    float x_14;
    x_14 = (y_over_x_12 * inversesqrt(((y_over_x_12 * y_over_x_12) + 1.0)));
    s_13 = (sign(x_14) * (1.5708 - (sqrt((1.0 - abs(x_14))) * (1.5708 + (abs(x_14) * (-0.214602 + (abs(x_14) * (0.0865667 + (abs(x_14) * -0.0310296)))))))));
    r_11 = s_13;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_11 = (s_13 + 3.14159);
      } else {
        r_11 = (r_11 - 3.14159);
      };
    };
  } else {
    r_11 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_15;
  tmpvar_15 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_16;
  tmpvar_16 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_17;
  tmpvar_17 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_18;
  tmpvar_18.x = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_18.y = dFdx(tmpvar_15);
  tmpvar_18.z = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_18.w = dFdy(tmpvar_15);
  vec4 tmpvar_19;
  tmpvar_19 = texture2DGradARB (_MainTex, uv_5, tmpvar_18.xy, tmpvar_18.zw);
  float tmpvar_20;
  tmpvar_20 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_21;
  tmpvar_21 = texture2DGradARB (_CityOverlayTex, uv_5, tmpvar_18.xy, tmpvar_18.zw);
  cityoverlay_4.xyz = tmpvar_21.xyz;
  vec2 tmpvar_22;
  tmpvar_22 = (texture2DGradARB (_BumpMap, uv_5, tmpvar_18.xy, tmpvar_18.zw).wy - vec2(0.5, 0.5));
  localCoords_3.x = (tmpvar_22.x * 0.25);
  localCoords_3.y = (tmpvar_22.y * 0.5);
  uv_5.x = (uv_5.x - 0.5);
  vec2 tmpvar_23;
  tmpvar_23 = (uv_5 + localCoords_3);
  uv_5 = tmpvar_23;
  norm_2.z = cos((6.28319 * tmpvar_23.x));
  norm_2.x = sin((6.28319 * tmpvar_23.x));
  norm_2.y = cos((3.14159 * tmpvar_23.y));
  vec3 tmpvar_24;
  tmpvar_24 = -(norm_2);
  norm_2 = tmpvar_24;
  vec3 tmpvar_25;
  tmpvar_25 = abs(xlv_TEXCOORD6);
  float tmpvar_26;
  tmpvar_26 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  cityoverlay_4.w = (tmpvar_21.w * clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0));
  vec4 tmpvar_27;
  tmpvar_27 = (cityoverlay_4 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_25.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_25.yyyy));
  citydarkoverlay_1.xyz = tmpvar_27.xyz;
  vec4 tmpvar_28;
  tmpvar_28 = (cityoverlay_4 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_25.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_25.yyyy));
  vec4 tmpvar_29;
  tmpvar_29 = (mix (mix ((xlv_TEXCOORD1 + mix ((0.25 * (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_20)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_20)), tmpvar_25.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_20)), tmpvar_25.yyyy) - 0.5)), vec4(0.0, 0.0, 0.0, 0.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))), tmpvar_19, vec4(tmpvar_26)), tmpvar_28, tmpvar_28.wwww) * _Color);
  color_6.w = tmpvar_29.w;
  float tmpvar_30;
  tmpvar_30 = clamp (dot (tmpvar_24, -(_SunDir)), 0.0, 1.0);
  float tmpvar_31;
  tmpvar_31 = texture2D (_LightTexture0, xlv_TEXCOORD3).w;
  vec3 tmpvar_32;
  tmpvar_32 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * mix (clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), tmpvar_30, tmpvar_26)) * 4.0) * tmpvar_31), 0.0, 1.0))), 0.0, 1.0) * clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0));
  color_6.xyz = (tmpvar_29.xyz + (_Albedo * tmpvar_32));
  color_6.xyz = (color_6.xyz * tmpvar_32);
  citydarkoverlay_1.w = (tmpvar_27.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_30 - 0.01)) / 0.99) * 4.0) * tmpvar_31), 0.0, 1.0), 0.0, 1.0)));
  color_6.xyz = mix (color_6, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_6.w = 1.0;
  gl_FragData[0] = color_6;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 30 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord5 o5
dcl_texcoord6 o6
def c13, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
mov r1.xyz, v2
mov r1.w, c13.x
dp4 r2.z, r1, c6
dp4 r2.x, r1, c4
dp4 r2.y, r1, c5
mov r0.zw, v4.xyxy
mov r0.xy, v3
dp4 r2.w, r0, r0
rsq r1.x, r2.w
mul r0.xyz, r1.x, r0
mov o6.xyz, -r0
dp3 r0.w, r2, r2
rsq r0.w, r0.w
mul o5.xyz, r0.w, r2
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
dp4 r0.w, v0, c7
add r1.xyz, -r0, c12
dp3 r1.x, r1, r1
rsq r1.x, r1.x
mov o2, v1
dp4 o4.y, r0, c9
dp4 o4.x, r0, c8
rcp o1.x, r1.x
mov o3.xyz, v2
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  highp vec3 p_2;
  p_2 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_1;
  highp vec4 tmpvar_4;
  tmpvar_4.x = _glesMultiTexCoord0.x;
  tmpvar_4.y = _glesMultiTexCoord0.y;
  tmpvar_4.z = _glesMultiTexCoord1.x;
  tmpvar_4.w = _glesMultiTexCoord1.y;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_4).xyz);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float terminator_2;
  mediump vec3 light_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float handoff_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec3 norm_11;
  highp vec2 localCoords_12;
  mediump vec4 encnorm_13;
  mediump vec4 citylightoverlaydetailZ_14;
  mediump vec4 citylightoverlaydetailY_15;
  mediump vec4 citylightoverlaydetailX_16;
  mediump vec4 citydarkoverlaydetailZ_17;
  mediump vec4 citydarkoverlaydetailY_18;
  mediump vec4 citydarkoverlaydetailX_19;
  mediump vec4 cityoverlay_20;
  mediump float vertLerp_21;
  mediump vec4 main_22;
  highp vec2 uv_23;
  mediump vec4 color_24;
  highp float r_25;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_23.x = (0.5 + (0.159155 * r_25));
  uv_23.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_29;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_30;
    y_over_x_30 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_31;
    highp float x_32;
    x_32 = (y_over_x_30 * inversesqrt(((y_over_x_30 * y_over_x_30) + 1.0)));
    s_31 = (sign(x_32) * (1.5708 - (sqrt((1.0 - abs(x_32))) * (1.5708 + (abs(x_32) * (-0.214602 + (abs(x_32) * (0.0865667 + (abs(x_32) * -0.0310296)))))))));
    r_29 = s_31;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_29 = (s_31 + 3.14159);
      } else {
        r_29 = (r_29 - 3.14159);
      };
    };
  } else {
    r_29 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_33;
  tmpvar_33 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_34;
  tmpvar_34 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_36;
  tmpvar_36.x = (0.159155 * sqrt(dot (tmpvar_34, tmpvar_34)));
  tmpvar_36.y = dFdx(tmpvar_33);
  tmpvar_36.z = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_36.w = dFdy(tmpvar_33);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2DGradEXT (_MainTex, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  main_22 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD6.zy * _DetailScale);
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD6.zx * _DetailScale);
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.xy * _DetailScale);
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  highp float tmpvar_44;
  tmpvar_44 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_21 = tmpvar_44;
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, tmpvar_41);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, tmpvar_38);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_21));
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailVertTex, tmpvar_42);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailTex, tmpvar_39);
  mediump vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_49, vec4(vertLerp_21));
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailVertTex, tmpvar_43);
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailTex, tmpvar_40);
  mediump vec4 tmpvar_53;
  tmpvar_53 = mix (tmpvar_51, tmpvar_52, vec4(vertLerp_21));
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2DGradEXT (_CityOverlayTex, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  cityoverlay_20 = tmpvar_54;
  lowp vec4 tmpvar_55;
  highp vec2 P_56;
  P_56 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_55 = texture2D (_CityDarkOverlayDetailTex, P_56);
  citydarkoverlaydetailX_19 = tmpvar_55;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityDarkOverlayDetailTex, P_58);
  citydarkoverlaydetailY_18 = tmpvar_57;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_59 = texture2D (_CityDarkOverlayDetailTex, P_60);
  citydarkoverlaydetailZ_17 = tmpvar_59;
  lowp vec4 tmpvar_61;
  highp vec2 P_62;
  P_62 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_61 = texture2D (_CityLightOverlayDetailTex, P_62);
  citylightoverlaydetailX_16 = tmpvar_61;
  lowp vec4 tmpvar_63;
  highp vec2 P_64;
  P_64 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_63 = texture2D (_CityLightOverlayDetailTex, P_64);
  citylightoverlaydetailY_15 = tmpvar_63;
  lowp vec4 tmpvar_65;
  highp vec2 P_66;
  P_66 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_65 = texture2D (_CityLightOverlayDetailTex, P_66);
  citylightoverlaydetailZ_14 = tmpvar_65;
  lowp vec4 tmpvar_67;
  tmpvar_67 = texture2DGradEXT (_BumpMap, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  encnorm_13 = tmpvar_67;
  mediump vec2 tmpvar_68;
  tmpvar_68 = encnorm_13.wy;
  localCoords_12 = tmpvar_68;
  highp vec2 tmpvar_69;
  tmpvar_69 = (localCoords_12 - vec2(0.5, 0.5));
  localCoords_12.x = (tmpvar_69.x * 0.25);
  localCoords_12.y = (tmpvar_69.y * 0.5);
  uv_23.x = (uv_23.x - 0.5);
  highp vec2 tmpvar_70;
  tmpvar_70 = (uv_23 + localCoords_12);
  uv_23 = tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = cos((6.28319 * tmpvar_70.x));
  norm_11.z = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = sin((6.28319 * tmpvar_70.x));
  norm_11.x = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = cos((3.14159 * tmpvar_70.y));
  norm_11.y = tmpvar_73;
  mediump vec3 tmpvar_74;
  tmpvar_74 = -(norm_11);
  norm_11 = tmpvar_74;
  highp vec3 tmpvar_75;
  tmpvar_75 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (tmpvar_53, tmpvar_47, tmpvar_75.xxxx);
  detail_10 = tmpvar_76;
  highp vec4 tmpvar_77;
  tmpvar_77 = (0.25 * (mix (detail_10, tmpvar_50, tmpvar_75.yyyy) - 0.5));
  detail_10 = tmpvar_77;
  highp float tmpvar_78;
  tmpvar_78 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_9 = tmpvar_78;
  mediump vec4 tmpvar_79;
  tmpvar_79 = mix (detail_10, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_9));
  highp vec4 tmpvar_80;
  tmpvar_80 = (xlv_TEXCOORD1 + tmpvar_79);
  color_24 = tmpvar_80;
  highp float tmpvar_81;
  tmpvar_81 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_8 = tmpvar_81;
  highp float tmpvar_82;
  tmpvar_82 = clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0);
  cityoverlay_20.w = (cityoverlay_20.w * tmpvar_82);
  highp vec4 tmpvar_83;
  tmpvar_83 = mix (citydarkoverlaydetailZ_17, citydarkoverlaydetailX_19, tmpvar_75.xxxx);
  detail_10 = tmpvar_83;
  highp vec4 tmpvar_84;
  tmpvar_84 = mix (detail_10, citydarkoverlaydetailY_18, tmpvar_75.yyyy);
  detail_10 = tmpvar_84;
  mediump vec4 tmpvar_85;
  tmpvar_85 = (cityoverlay_20 * detail_10);
  citydarkoverlay_7.xyz = tmpvar_85.xyz;
  highp vec4 tmpvar_86;
  tmpvar_86 = mix (citylightoverlaydetailZ_14, citylightoverlaydetailX_16, tmpvar_75.xxxx);
  detail_10 = tmpvar_86;
  highp vec4 tmpvar_87;
  tmpvar_87 = mix (detail_10, citylightoverlaydetailY_15, tmpvar_75.yyyy);
  detail_10 = tmpvar_87;
  mediump vec4 tmpvar_88;
  tmpvar_88 = (cityoverlay_20 * detail_10);
  mediump vec4 tmpvar_89;
  tmpvar_89 = (mix (mix (color_24, main_22, vec4(handoff_8)), tmpvar_88, tmpvar_88.wwww) * _Color);
  color_24.w = tmpvar_89.w;
  highp vec3 tmpvar_90;
  tmpvar_90 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_90;
  lowp vec3 tmpvar_91;
  tmpvar_91 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_91;
  highp float tmpvar_92;
  tmpvar_92 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_92;
  mediump float tmpvar_93;
  tmpvar_93 = clamp (dot (tmpvar_74, -(_SunDir)), 0.0, 1.0);
  lowp float tmpvar_94;
  tmpvar_94 = texture2D (_LightTexture0, xlv_TEXCOORD3).w;
  mediump float tmpvar_95;
  tmpvar_95 = clamp ((((_LightColor0.w * mix (TNdotL_4, tmpvar_93, handoff_8)) * 4.0) * tmpvar_94), 0.0, 1.0);
  highp vec3 tmpvar_96;
  tmpvar_96 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_95)), 0.0, 1.0);
  light_3 = tmpvar_96;
  highp float tmpvar_97;
  tmpvar_97 = clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0);
  terminator_2 = tmpvar_97;
  mediump vec3 tmpvar_98;
  tmpvar_98 = (light_3 * terminator_2);
  light_3 = tmpvar_98;
  highp vec3 tmpvar_99;
  tmpvar_99 = (tmpvar_89.xyz + (_Albedo * tmpvar_98));
  color_24.xyz = tmpvar_99;
  color_24.xyz = (color_24.xyz * tmpvar_98);
  citydarkoverlay_7.w = (tmpvar_85.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_93 - 0.01)) / 0.99) * 4.0) * tmpvar_94), 0.0, 1.0), 0.0, 1.0)));
  color_24.xyz = mix (color_24, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_24.w = 1.0;
  tmpvar_1 = color_24;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  highp vec3 p_2;
  p_2 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_1;
  highp vec4 tmpvar_4;
  tmpvar_4.x = _glesMultiTexCoord0.x;
  tmpvar_4.y = _glesMultiTexCoord0.y;
  tmpvar_4.z = _glesMultiTexCoord1.x;
  tmpvar_4.w = _glesMultiTexCoord1.y;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_4).xyz);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float terminator_2;
  mediump vec3 light_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float handoff_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec3 norm_11;
  highp vec2 localCoords_12;
  mediump vec4 encnorm_13;
  mediump vec4 citylightoverlaydetailZ_14;
  mediump vec4 citylightoverlaydetailY_15;
  mediump vec4 citylightoverlaydetailX_16;
  mediump vec4 citydarkoverlaydetailZ_17;
  mediump vec4 citydarkoverlaydetailY_18;
  mediump vec4 citydarkoverlaydetailX_19;
  mediump vec4 cityoverlay_20;
  mediump float vertLerp_21;
  mediump vec4 main_22;
  highp vec2 uv_23;
  mediump vec4 color_24;
  highp float r_25;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_23.x = (0.5 + (0.159155 * r_25));
  uv_23.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_29;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_30;
    y_over_x_30 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_31;
    highp float x_32;
    x_32 = (y_over_x_30 * inversesqrt(((y_over_x_30 * y_over_x_30) + 1.0)));
    s_31 = (sign(x_32) * (1.5708 - (sqrt((1.0 - abs(x_32))) * (1.5708 + (abs(x_32) * (-0.214602 + (abs(x_32) * (0.0865667 + (abs(x_32) * -0.0310296)))))))));
    r_29 = s_31;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_29 = (s_31 + 3.14159);
      } else {
        r_29 = (r_29 - 3.14159);
      };
    };
  } else {
    r_29 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_33;
  tmpvar_33 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_34;
  tmpvar_34 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_36;
  tmpvar_36.x = (0.159155 * sqrt(dot (tmpvar_34, tmpvar_34)));
  tmpvar_36.y = dFdx(tmpvar_33);
  tmpvar_36.z = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_36.w = dFdy(tmpvar_33);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2DGradEXT (_MainTex, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  main_22 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD6.zy * _DetailScale);
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD6.zx * _DetailScale);
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.xy * _DetailScale);
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  highp float tmpvar_44;
  tmpvar_44 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_21 = tmpvar_44;
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, tmpvar_41);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, tmpvar_38);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_21));
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailVertTex, tmpvar_42);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailTex, tmpvar_39);
  mediump vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_49, vec4(vertLerp_21));
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailVertTex, tmpvar_43);
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailTex, tmpvar_40);
  mediump vec4 tmpvar_53;
  tmpvar_53 = mix (tmpvar_51, tmpvar_52, vec4(vertLerp_21));
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2DGradEXT (_CityOverlayTex, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  cityoverlay_20 = tmpvar_54;
  lowp vec4 tmpvar_55;
  highp vec2 P_56;
  P_56 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_55 = texture2D (_CityDarkOverlayDetailTex, P_56);
  citydarkoverlaydetailX_19 = tmpvar_55;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityDarkOverlayDetailTex, P_58);
  citydarkoverlaydetailY_18 = tmpvar_57;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_59 = texture2D (_CityDarkOverlayDetailTex, P_60);
  citydarkoverlaydetailZ_17 = tmpvar_59;
  lowp vec4 tmpvar_61;
  highp vec2 P_62;
  P_62 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_61 = texture2D (_CityLightOverlayDetailTex, P_62);
  citylightoverlaydetailX_16 = tmpvar_61;
  lowp vec4 tmpvar_63;
  highp vec2 P_64;
  P_64 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_63 = texture2D (_CityLightOverlayDetailTex, P_64);
  citylightoverlaydetailY_15 = tmpvar_63;
  lowp vec4 tmpvar_65;
  highp vec2 P_66;
  P_66 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_65 = texture2D (_CityLightOverlayDetailTex, P_66);
  citylightoverlaydetailZ_14 = tmpvar_65;
  lowp vec4 tmpvar_67;
  tmpvar_67 = texture2DGradEXT (_BumpMap, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  encnorm_13 = tmpvar_67;
  mediump vec2 tmpvar_68;
  tmpvar_68 = encnorm_13.wy;
  localCoords_12 = tmpvar_68;
  highp vec2 tmpvar_69;
  tmpvar_69 = (localCoords_12 - vec2(0.5, 0.5));
  localCoords_12.x = (tmpvar_69.x * 0.25);
  localCoords_12.y = (tmpvar_69.y * 0.5);
  uv_23.x = (uv_23.x - 0.5);
  highp vec2 tmpvar_70;
  tmpvar_70 = (uv_23 + localCoords_12);
  uv_23 = tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = cos((6.28319 * tmpvar_70.x));
  norm_11.z = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = sin((6.28319 * tmpvar_70.x));
  norm_11.x = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = cos((3.14159 * tmpvar_70.y));
  norm_11.y = tmpvar_73;
  mediump vec3 tmpvar_74;
  tmpvar_74 = -(norm_11);
  norm_11 = tmpvar_74;
  highp vec3 tmpvar_75;
  tmpvar_75 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (tmpvar_53, tmpvar_47, tmpvar_75.xxxx);
  detail_10 = tmpvar_76;
  highp vec4 tmpvar_77;
  tmpvar_77 = (0.25 * (mix (detail_10, tmpvar_50, tmpvar_75.yyyy) - 0.5));
  detail_10 = tmpvar_77;
  highp float tmpvar_78;
  tmpvar_78 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_9 = tmpvar_78;
  mediump vec4 tmpvar_79;
  tmpvar_79 = mix (detail_10, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_9));
  highp vec4 tmpvar_80;
  tmpvar_80 = (xlv_TEXCOORD1 + tmpvar_79);
  color_24 = tmpvar_80;
  highp float tmpvar_81;
  tmpvar_81 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_8 = tmpvar_81;
  highp float tmpvar_82;
  tmpvar_82 = clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0);
  cityoverlay_20.w = (cityoverlay_20.w * tmpvar_82);
  highp vec4 tmpvar_83;
  tmpvar_83 = mix (citydarkoverlaydetailZ_17, citydarkoverlaydetailX_19, tmpvar_75.xxxx);
  detail_10 = tmpvar_83;
  highp vec4 tmpvar_84;
  tmpvar_84 = mix (detail_10, citydarkoverlaydetailY_18, tmpvar_75.yyyy);
  detail_10 = tmpvar_84;
  mediump vec4 tmpvar_85;
  tmpvar_85 = (cityoverlay_20 * detail_10);
  citydarkoverlay_7.xyz = tmpvar_85.xyz;
  highp vec4 tmpvar_86;
  tmpvar_86 = mix (citylightoverlaydetailZ_14, citylightoverlaydetailX_16, tmpvar_75.xxxx);
  detail_10 = tmpvar_86;
  highp vec4 tmpvar_87;
  tmpvar_87 = mix (detail_10, citylightoverlaydetailY_15, tmpvar_75.yyyy);
  detail_10 = tmpvar_87;
  mediump vec4 tmpvar_88;
  tmpvar_88 = (cityoverlay_20 * detail_10);
  mediump vec4 tmpvar_89;
  tmpvar_89 = (mix (mix (color_24, main_22, vec4(handoff_8)), tmpvar_88, tmpvar_88.wwww) * _Color);
  color_24.w = tmpvar_89.w;
  highp vec3 tmpvar_90;
  tmpvar_90 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_90;
  lowp vec3 tmpvar_91;
  tmpvar_91 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_91;
  highp float tmpvar_92;
  tmpvar_92 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_92;
  mediump float tmpvar_93;
  tmpvar_93 = clamp (dot (tmpvar_74, -(_SunDir)), 0.0, 1.0);
  lowp float tmpvar_94;
  tmpvar_94 = texture2D (_LightTexture0, xlv_TEXCOORD3).w;
  mediump float tmpvar_95;
  tmpvar_95 = clamp ((((_LightColor0.w * mix (TNdotL_4, tmpvar_93, handoff_8)) * 4.0) * tmpvar_94), 0.0, 1.0);
  highp vec3 tmpvar_96;
  tmpvar_96 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_95)), 0.0, 1.0);
  light_3 = tmpvar_96;
  highp float tmpvar_97;
  tmpvar_97 = clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0);
  terminator_2 = tmpvar_97;
  mediump vec3 tmpvar_98;
  tmpvar_98 = (light_3 * terminator_2);
  light_3 = tmpvar_98;
  highp vec3 tmpvar_99;
  tmpvar_99 = (tmpvar_89.xyz + (_Albedo * tmpvar_98));
  color_24.xyz = tmpvar_99;
  color_24.xyz = (color_24.xyz * tmpvar_98);
  citydarkoverlay_7.w = (tmpvar_85.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_93 - 0.01)) / 0.99) * 4.0) * tmpvar_94), 0.0, 1.0), 0.0, 1.0)));
  color_24.xyz = mix (color_24, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_24.w = 1.0;
  tmpvar_1 = color_24;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 422
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 objnormal;
    highp vec2 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
};
#line 412
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 395
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 399
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 403
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp mat4 _Rotation;
#line 407
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 411
uniform sampler2D _CityLightOverlayDetailTex;
#line 433
#line 458
#line 433
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 437
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    #line 441
    o.color = v.color;
    o.objnormal = v.normal;
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xy;
    #line 445
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec2 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.objnormal);
    xlv_TEXCOORD3 = vec2(xl_retval._LightCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereCoords);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 422
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 objnormal;
    highp vec2 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
};
#line 412
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 395
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 399
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 403
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp mat4 _Rotation;
#line 407
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 411
uniform sampler2D _CityLightOverlayDetailTex;
#line 433
#line 458
#line 447
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 449
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 453
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 458
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    #line 462
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 466
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    highp vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    highp vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    highp vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    #line 470
    highp vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    highp vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    highp vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, (-IN.sphereCoords))) - 0.95)) + 0.5));
    #line 474
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    #line 478
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    #line 482
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    highp vec2 localCoords = encnorm.wy;
    #line 486
    localCoords -= vec2( 0.5);
    localCoords.x *= 0.25;
    localCoords.y *= 0.5;
    uv.x -= 0.5;
    #line 490
    uv += localCoords;
    mediump vec3 norm;
    norm.z = cos((6.28319 * uv.x));
    norm.x = sin((6.28319 * uv.x));
    #line 494
    norm.y = cos((3.14159 * uv.y));
    norm = (-norm);
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    #line 498
    detail = (0.25 * (mix( detail, detailY, vec4( sphereNrm.y)) - 0.5));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (IN.color + mix( detail.xyzw, vec4( 0.0), vec4( detailLevel)));
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    #line 502
    color = mix( color, main, vec4( handoff));
    cityoverlay.w *= xll_saturate_f(floor((IN.color.w + 0.99)));
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    #line 506
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    #line 510
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    #line 514
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    lowp float atten = (texture( _LightTexture0, IN._LightCoord).w * 1.0);
    #line 518
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    mediump float terminator = xll_saturate_f(floor((1.01 + dot( IN.sphereCoords, _SunDir))));
    light *= terminator;
    #line 522
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (SNdotL - 0.01)) / 0.99) * 4.0) * atten));
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    #line 526
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec2 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.objnormal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec2(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform mat4 unity_World2Shadow[4];
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec4 tmpvar_3;
  tmpvar_3.x = gl_MultiTexCoord0.x;
  tmpvar_3.y = gl_MultiTexCoord0.y;
  tmpvar_3.z = gl_MultiTexCoord1.x;
  tmpvar_3.w = gl_MultiTexCoord1.y;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * gl_Vertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_3).xyz);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec3 norm_2;
  vec2 localCoords_3;
  vec4 cityoverlay_4;
  vec2 uv_5;
  vec4 color_6;
  float r_7;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_5.x = (0.5 + (0.159155 * r_7));
  uv_5.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_11;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_12;
    y_over_x_12 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_13;
    float x_14;
    x_14 = (y_over_x_12 * inversesqrt(((y_over_x_12 * y_over_x_12) + 1.0)));
    s_13 = (sign(x_14) * (1.5708 - (sqrt((1.0 - abs(x_14))) * (1.5708 + (abs(x_14) * (-0.214602 + (abs(x_14) * (0.0865667 + (abs(x_14) * -0.0310296)))))))));
    r_11 = s_13;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_11 = (s_13 + 3.14159);
      } else {
        r_11 = (r_11 - 3.14159);
      };
    };
  } else {
    r_11 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_15;
  tmpvar_15 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_16;
  tmpvar_16 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_17;
  tmpvar_17 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_18;
  tmpvar_18.x = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_18.y = dFdx(tmpvar_15);
  tmpvar_18.z = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_18.w = dFdy(tmpvar_15);
  vec4 tmpvar_19;
  tmpvar_19 = texture2DGradARB (_MainTex, uv_5, tmpvar_18.xy, tmpvar_18.zw);
  float tmpvar_20;
  tmpvar_20 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_21;
  tmpvar_21 = texture2DGradARB (_CityOverlayTex, uv_5, tmpvar_18.xy, tmpvar_18.zw);
  cityoverlay_4.xyz = tmpvar_21.xyz;
  vec2 tmpvar_22;
  tmpvar_22 = (texture2DGradARB (_BumpMap, uv_5, tmpvar_18.xy, tmpvar_18.zw).wy - vec2(0.5, 0.5));
  localCoords_3.x = (tmpvar_22.x * 0.25);
  localCoords_3.y = (tmpvar_22.y * 0.5);
  uv_5.x = (uv_5.x - 0.5);
  vec2 tmpvar_23;
  tmpvar_23 = (uv_5 + localCoords_3);
  uv_5 = tmpvar_23;
  norm_2.z = cos((6.28319 * tmpvar_23.x));
  norm_2.x = sin((6.28319 * tmpvar_23.x));
  norm_2.y = cos((3.14159 * tmpvar_23.y));
  vec3 tmpvar_24;
  tmpvar_24 = -(norm_2);
  norm_2 = tmpvar_24;
  vec3 tmpvar_25;
  tmpvar_25 = abs(xlv_TEXCOORD6);
  float tmpvar_26;
  tmpvar_26 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  cityoverlay_4.w = (tmpvar_21.w * clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0));
  vec4 tmpvar_27;
  tmpvar_27 = (cityoverlay_4 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_25.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_25.yyyy));
  citydarkoverlay_1 = tmpvar_27;
  vec4 tmpvar_28;
  tmpvar_28 = (cityoverlay_4 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_25.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_25.yyyy));
  vec4 tmpvar_29;
  tmpvar_29 = (mix (mix ((xlv_TEXCOORD1 + mix ((0.25 * (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_20)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_20)), tmpvar_25.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_20)), tmpvar_25.yyyy) - 0.5)), vec4(0.0, 0.0, 0.0, 0.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))), tmpvar_19, vec4(tmpvar_26)), tmpvar_28, tmpvar_28.wwww) * _Color);
  color_6 = tmpvar_29;
  float tmpvar_30;
  tmpvar_30 = clamp (dot (tmpvar_24, -(_SunDir)), 0.0, 1.0);
  float tmpvar_31;
  tmpvar_31 = mix (clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), tmpvar_30, tmpvar_26);
  vec4 tmpvar_32;
  tmpvar_32 = texture2D (_LightTexture0, ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5));
  vec4 tmpvar_33;
  tmpvar_33 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz)));
  vec4 tmpvar_34;
  tmpvar_34 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD4);
  float tmpvar_35;
  if ((tmpvar_34.x < (xlv_TEXCOORD4.z / xlv_TEXCOORD4.w))) {
    tmpvar_35 = _LightShadowData.x;
  } else {
    tmpvar_35 = 1.0;
  };
  float tmpvar_36;
  tmpvar_36 = (((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_32.w) * tmpvar_33.w) * tmpvar_35);
  vec3 tmpvar_37;
  tmpvar_37 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_31) * 4.0) * tmpvar_36), 0.0, 1.0))), 0.0, 1.0) * clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0));
  color_6.xyz = (tmpvar_29.xyz + (_Albedo * tmpvar_37));
  color_6.xyz = (color_6.xyz * tmpvar_37);
  citydarkoverlay_1.w = (tmpvar_27.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_30 - 0.01)) / 0.99) * 4.0) * tmpvar_36), 0.0, 1.0), 0.0, 1.0)));
  color_6.xyz = mix (color_6, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_6.w = 1.0;
  gl_FragData[0] = color_6;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Matrix 4 [unity_World2Shadow0]
Matrix 8 [_Object2World]
Matrix 12 [_LightMatrix0]
"vs_3_0
; 36 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
def c17, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
mov r1.xyz, v2
mov r1.w, c17.x
dp4 r2.z, r1, c10
dp4 r2.x, r1, c8
dp4 r2.y, r1, c9
mov r0.zw, v4.xyxy
mov r0.xy, v3
dp4 r2.w, r0, r0
rsq r1.x, r2.w
mul r0.xyz, r1.x, r0
mov o7.xyz, -r0
dp3 r0.w, r2, r2
rsq r0.w, r0.w
mul o6.xyz, r0.w, r2
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
dp4 r0.w, v0, c11
add r1.xyz, -r0, c16
dp3 r1.x, r1, r1
rsq r1.x, r1.x
mov o2, v1
dp4 o4.w, r0, c15
dp4 o4.z, r0, c14
dp4 o4.y, r0, c13
dp4 o4.x, r0, c12
dp4 o5.w, r0, c7
dp4 o5.z, r0, c6
dp4 o5.y, r0, c5
dp4 o5.x, r0, c4
rcp o1.x, r1.x
mov o3.xyz, v2
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  highp vec3 p_2;
  p_2 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_1;
  highp vec4 tmpvar_4;
  tmpvar_4.x = _glesMultiTexCoord0.x;
  tmpvar_4.y = _glesMultiTexCoord0.y;
  tmpvar_4.z = _glesMultiTexCoord1.x;
  tmpvar_4.w = _glesMultiTexCoord1.y;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_4).xyz);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float terminator_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float TNdotL_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump vec4 citydarkoverlay_8;
  mediump float handoff_9;
  mediump float detailLevel_10;
  mediump vec4 detail_11;
  mediump vec3 norm_12;
  highp vec2 localCoords_13;
  mediump vec4 encnorm_14;
  mediump vec4 citylightoverlaydetailZ_15;
  mediump vec4 citylightoverlaydetailY_16;
  mediump vec4 citylightoverlaydetailX_17;
  mediump vec4 citydarkoverlaydetailZ_18;
  mediump vec4 citydarkoverlaydetailY_19;
  mediump vec4 citydarkoverlaydetailX_20;
  mediump vec4 cityoverlay_21;
  mediump float vertLerp_22;
  mediump vec4 main_23;
  highp vec2 uv_24;
  mediump vec4 color_25;
  highp float r_26;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_26));
  uv_24.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_30;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_31;
    y_over_x_31 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_32;
    highp float x_33;
    x_33 = (y_over_x_31 * inversesqrt(((y_over_x_31 * y_over_x_31) + 1.0)));
    s_32 = (sign(x_33) * (1.5708 - (sqrt((1.0 - abs(x_33))) * (1.5708 + (abs(x_33) * (-0.214602 + (abs(x_33) * (0.0865667 + (abs(x_33) * -0.0310296)))))))));
    r_30 = s_32;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_30 = (s_32 + 3.14159);
      } else {
        r_30 = (r_30 - 3.14159);
      };
    };
  } else {
    r_30 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_34;
  tmpvar_34 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_MainTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  main_23 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD6.zy * _DetailScale);
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zx * _DetailScale);
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.xy * _DetailScale);
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  highp float tmpvar_45;
  tmpvar_45 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_22 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailVertTex, tmpvar_42);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailTex, tmpvar_39);
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_47, vec4(vertLerp_22));
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailVertTex, tmpvar_43);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailTex, tmpvar_40);
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (tmpvar_49, tmpvar_50, vec4(vertLerp_22));
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailVertTex, tmpvar_44);
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailTex, tmpvar_41);
  mediump vec4 tmpvar_54;
  tmpvar_54 = mix (tmpvar_52, tmpvar_53, vec4(vertLerp_22));
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2DGradEXT (_CityOverlayTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  cityoverlay_21 = tmpvar_55;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_56 = texture2D (_CityDarkOverlayDetailTex, P_57);
  citydarkoverlaydetailX_20 = tmpvar_56;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityDarkOverlayDetailTex, P_59);
  citydarkoverlaydetailY_19 = tmpvar_58;
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_60 = texture2D (_CityDarkOverlayDetailTex, P_61);
  citydarkoverlaydetailZ_18 = tmpvar_60;
  lowp vec4 tmpvar_62;
  highp vec2 P_63;
  P_63 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_62 = texture2D (_CityLightOverlayDetailTex, P_63);
  citylightoverlaydetailX_17 = tmpvar_62;
  lowp vec4 tmpvar_64;
  highp vec2 P_65;
  P_65 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_64 = texture2D (_CityLightOverlayDetailTex, P_65);
  citylightoverlaydetailY_16 = tmpvar_64;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_66 = texture2D (_CityLightOverlayDetailTex, P_67);
  citylightoverlaydetailZ_15 = tmpvar_66;
  lowp vec4 tmpvar_68;
  tmpvar_68 = texture2DGradEXT (_BumpMap, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  encnorm_14 = tmpvar_68;
  mediump vec2 tmpvar_69;
  tmpvar_69 = encnorm_14.wy;
  localCoords_13 = tmpvar_69;
  highp vec2 tmpvar_70;
  tmpvar_70 = (localCoords_13 - vec2(0.5, 0.5));
  localCoords_13.x = (tmpvar_70.x * 0.25);
  localCoords_13.y = (tmpvar_70.y * 0.5);
  uv_24.x = (uv_24.x - 0.5);
  highp vec2 tmpvar_71;
  tmpvar_71 = (uv_24 + localCoords_13);
  uv_24 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = cos((6.28319 * tmpvar_71.x));
  norm_12.z = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = sin((6.28319 * tmpvar_71.x));
  norm_12.x = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = cos((3.14159 * tmpvar_71.y));
  norm_12.y = tmpvar_74;
  mediump vec3 tmpvar_75;
  tmpvar_75 = -(norm_12);
  norm_12 = tmpvar_75;
  highp vec3 tmpvar_76;
  tmpvar_76 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (tmpvar_54, tmpvar_48, tmpvar_76.xxxx);
  detail_11 = tmpvar_77;
  highp vec4 tmpvar_78;
  tmpvar_78 = (0.25 * (mix (detail_11, tmpvar_51, tmpvar_76.yyyy) - 0.5));
  detail_11 = tmpvar_78;
  highp float tmpvar_79;
  tmpvar_79 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_10 = tmpvar_79;
  mediump vec4 tmpvar_80;
  tmpvar_80 = mix (detail_11, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_10));
  highp vec4 tmpvar_81;
  tmpvar_81 = (xlv_TEXCOORD1 + tmpvar_80);
  color_25 = tmpvar_81;
  highp float tmpvar_82;
  tmpvar_82 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_9 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0);
  cityoverlay_21.w = (cityoverlay_21.w * tmpvar_83);
  highp vec4 tmpvar_84;
  tmpvar_84 = mix (citydarkoverlaydetailZ_18, citydarkoverlaydetailX_20, tmpvar_76.xxxx);
  detail_11 = tmpvar_84;
  highp vec4 tmpvar_85;
  tmpvar_85 = mix (detail_11, citydarkoverlaydetailY_19, tmpvar_76.yyyy);
  detail_11 = tmpvar_85;
  mediump vec4 tmpvar_86;
  tmpvar_86 = (cityoverlay_21 * detail_11);
  citydarkoverlay_8 = tmpvar_86;
  highp vec4 tmpvar_87;
  tmpvar_87 = mix (citylightoverlaydetailZ_15, citylightoverlaydetailX_17, tmpvar_76.xxxx);
  detail_11 = tmpvar_87;
  highp vec4 tmpvar_88;
  tmpvar_88 = mix (detail_11, citylightoverlaydetailY_16, tmpvar_76.yyyy);
  detail_11 = tmpvar_88;
  mediump vec4 tmpvar_89;
  tmpvar_89 = (cityoverlay_21 * detail_11);
  mediump vec4 tmpvar_90;
  tmpvar_90 = (mix (mix (color_25, main_23, vec4(handoff_9)), tmpvar_89, tmpvar_89.wwww) * _Color);
  color_25 = tmpvar_90;
  highp vec3 tmpvar_91;
  tmpvar_91 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_91;
  highp vec3 tmpvar_92;
  tmpvar_92 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_92;
  highp float tmpvar_93;
  tmpvar_93 = clamp (dot (xlv_TEXCOORD5, lightDirection_6), 0.0, 1.0);
  TNdotL_5 = tmpvar_93;
  mediump float tmpvar_94;
  tmpvar_94 = clamp (dot (tmpvar_75, -(_SunDir)), 0.0, 1.0);
  mediump float tmpvar_95;
  tmpvar_95 = mix (TNdotL_5, tmpvar_94, handoff_9);
  lowp vec4 tmpvar_96;
  highp vec2 P_97;
  P_97 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_96 = texture2D (_LightTexture0, P_97);
  highp float tmpvar_98;
  tmpvar_98 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_99;
  tmpvar_99 = texture2D (_LightTextureB0, vec2(tmpvar_98));
  lowp float tmpvar_100;
  mediump float shadow_101;
  lowp vec4 tmpvar_102;
  tmpvar_102 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD4);
  highp float tmpvar_103;
  if ((tmpvar_102.x < (xlv_TEXCOORD4.z / xlv_TEXCOORD4.w))) {
    tmpvar_103 = _LightShadowData.x;
  } else {
    tmpvar_103 = 1.0;
  };
  shadow_101 = tmpvar_103;
  tmpvar_100 = shadow_101;
  highp float tmpvar_104;
  tmpvar_104 = (((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_96.w) * tmpvar_99.w) * tmpvar_100);
  atten_4 = tmpvar_104;
  mediump float tmpvar_105;
  tmpvar_105 = clamp ((((_LightColor0.w * tmpvar_95) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_106;
  tmpvar_106 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_105)), 0.0, 1.0);
  light_3 = tmpvar_106;
  highp float tmpvar_107;
  tmpvar_107 = clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0);
  terminator_2 = tmpvar_107;
  mediump vec3 tmpvar_108;
  tmpvar_108 = (light_3 * terminator_2);
  light_3 = tmpvar_108;
  highp vec3 tmpvar_109;
  tmpvar_109 = (tmpvar_90.xyz + (_Albedo * tmpvar_108));
  color_25.xyz = tmpvar_109;
  color_25.xyz = (color_25.xyz * tmpvar_108);
  citydarkoverlay_8.w = (tmpvar_86.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_94 - 0.01)) / 0.99) * 4.0) * atten_4), 0.0, 1.0), 0.0, 1.0)));
  color_25.xyz = mix (color_25, citydarkoverlay_8, citydarkoverlay_8.wwww).xyz;
  color_25.w = 1.0;
  tmpvar_1 = color_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  highp vec3 p_2;
  p_2 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_1;
  highp vec4 tmpvar_4;
  tmpvar_4.x = _glesMultiTexCoord0.x;
  tmpvar_4.y = _glesMultiTexCoord0.y;
  tmpvar_4.z = _glesMultiTexCoord1.x;
  tmpvar_4.w = _glesMultiTexCoord1.y;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_4).xyz);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float terminator_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float TNdotL_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump vec4 citydarkoverlay_8;
  mediump float handoff_9;
  mediump float detailLevel_10;
  mediump vec4 detail_11;
  mediump vec3 norm_12;
  highp vec2 localCoords_13;
  mediump vec4 encnorm_14;
  mediump vec4 citylightoverlaydetailZ_15;
  mediump vec4 citylightoverlaydetailY_16;
  mediump vec4 citylightoverlaydetailX_17;
  mediump vec4 citydarkoverlaydetailZ_18;
  mediump vec4 citydarkoverlaydetailY_19;
  mediump vec4 citydarkoverlaydetailX_20;
  mediump vec4 cityoverlay_21;
  mediump float vertLerp_22;
  mediump vec4 main_23;
  highp vec2 uv_24;
  mediump vec4 color_25;
  highp float r_26;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_26));
  uv_24.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_30;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_31;
    y_over_x_31 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_32;
    highp float x_33;
    x_33 = (y_over_x_31 * inversesqrt(((y_over_x_31 * y_over_x_31) + 1.0)));
    s_32 = (sign(x_33) * (1.5708 - (sqrt((1.0 - abs(x_33))) * (1.5708 + (abs(x_33) * (-0.214602 + (abs(x_33) * (0.0865667 + (abs(x_33) * -0.0310296)))))))));
    r_30 = s_32;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_30 = (s_32 + 3.14159);
      } else {
        r_30 = (r_30 - 3.14159);
      };
    };
  } else {
    r_30 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_34;
  tmpvar_34 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_MainTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  main_23 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD6.zy * _DetailScale);
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zx * _DetailScale);
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.xy * _DetailScale);
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  highp float tmpvar_45;
  tmpvar_45 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_22 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailVertTex, tmpvar_42);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailTex, tmpvar_39);
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_47, vec4(vertLerp_22));
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailVertTex, tmpvar_43);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailTex, tmpvar_40);
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (tmpvar_49, tmpvar_50, vec4(vertLerp_22));
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailVertTex, tmpvar_44);
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailTex, tmpvar_41);
  mediump vec4 tmpvar_54;
  tmpvar_54 = mix (tmpvar_52, tmpvar_53, vec4(vertLerp_22));
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2DGradEXT (_CityOverlayTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  cityoverlay_21 = tmpvar_55;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_56 = texture2D (_CityDarkOverlayDetailTex, P_57);
  citydarkoverlaydetailX_20 = tmpvar_56;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityDarkOverlayDetailTex, P_59);
  citydarkoverlaydetailY_19 = tmpvar_58;
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_60 = texture2D (_CityDarkOverlayDetailTex, P_61);
  citydarkoverlaydetailZ_18 = tmpvar_60;
  lowp vec4 tmpvar_62;
  highp vec2 P_63;
  P_63 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_62 = texture2D (_CityLightOverlayDetailTex, P_63);
  citylightoverlaydetailX_17 = tmpvar_62;
  lowp vec4 tmpvar_64;
  highp vec2 P_65;
  P_65 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_64 = texture2D (_CityLightOverlayDetailTex, P_65);
  citylightoverlaydetailY_16 = tmpvar_64;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_66 = texture2D (_CityLightOverlayDetailTex, P_67);
  citylightoverlaydetailZ_15 = tmpvar_66;
  lowp vec4 tmpvar_68;
  tmpvar_68 = texture2DGradEXT (_BumpMap, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  encnorm_14 = tmpvar_68;
  mediump vec2 tmpvar_69;
  tmpvar_69 = encnorm_14.wy;
  localCoords_13 = tmpvar_69;
  highp vec2 tmpvar_70;
  tmpvar_70 = (localCoords_13 - vec2(0.5, 0.5));
  localCoords_13.x = (tmpvar_70.x * 0.25);
  localCoords_13.y = (tmpvar_70.y * 0.5);
  uv_24.x = (uv_24.x - 0.5);
  highp vec2 tmpvar_71;
  tmpvar_71 = (uv_24 + localCoords_13);
  uv_24 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = cos((6.28319 * tmpvar_71.x));
  norm_12.z = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = sin((6.28319 * tmpvar_71.x));
  norm_12.x = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = cos((3.14159 * tmpvar_71.y));
  norm_12.y = tmpvar_74;
  mediump vec3 tmpvar_75;
  tmpvar_75 = -(norm_12);
  norm_12 = tmpvar_75;
  highp vec3 tmpvar_76;
  tmpvar_76 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (tmpvar_54, tmpvar_48, tmpvar_76.xxxx);
  detail_11 = tmpvar_77;
  highp vec4 tmpvar_78;
  tmpvar_78 = (0.25 * (mix (detail_11, tmpvar_51, tmpvar_76.yyyy) - 0.5));
  detail_11 = tmpvar_78;
  highp float tmpvar_79;
  tmpvar_79 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_10 = tmpvar_79;
  mediump vec4 tmpvar_80;
  tmpvar_80 = mix (detail_11, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_10));
  highp vec4 tmpvar_81;
  tmpvar_81 = (xlv_TEXCOORD1 + tmpvar_80);
  color_25 = tmpvar_81;
  highp float tmpvar_82;
  tmpvar_82 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_9 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0);
  cityoverlay_21.w = (cityoverlay_21.w * tmpvar_83);
  highp vec4 tmpvar_84;
  tmpvar_84 = mix (citydarkoverlaydetailZ_18, citydarkoverlaydetailX_20, tmpvar_76.xxxx);
  detail_11 = tmpvar_84;
  highp vec4 tmpvar_85;
  tmpvar_85 = mix (detail_11, citydarkoverlaydetailY_19, tmpvar_76.yyyy);
  detail_11 = tmpvar_85;
  mediump vec4 tmpvar_86;
  tmpvar_86 = (cityoverlay_21 * detail_11);
  citydarkoverlay_8 = tmpvar_86;
  highp vec4 tmpvar_87;
  tmpvar_87 = mix (citylightoverlaydetailZ_15, citylightoverlaydetailX_17, tmpvar_76.xxxx);
  detail_11 = tmpvar_87;
  highp vec4 tmpvar_88;
  tmpvar_88 = mix (detail_11, citylightoverlaydetailY_16, tmpvar_76.yyyy);
  detail_11 = tmpvar_88;
  mediump vec4 tmpvar_89;
  tmpvar_89 = (cityoverlay_21 * detail_11);
  mediump vec4 tmpvar_90;
  tmpvar_90 = (mix (mix (color_25, main_23, vec4(handoff_9)), tmpvar_89, tmpvar_89.wwww) * _Color);
  color_25 = tmpvar_90;
  highp vec3 tmpvar_91;
  tmpvar_91 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_91;
  highp vec3 tmpvar_92;
  tmpvar_92 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_92;
  highp float tmpvar_93;
  tmpvar_93 = clamp (dot (xlv_TEXCOORD5, lightDirection_6), 0.0, 1.0);
  TNdotL_5 = tmpvar_93;
  mediump float tmpvar_94;
  tmpvar_94 = clamp (dot (tmpvar_75, -(_SunDir)), 0.0, 1.0);
  mediump float tmpvar_95;
  tmpvar_95 = mix (TNdotL_5, tmpvar_94, handoff_9);
  lowp vec4 tmpvar_96;
  highp vec2 P_97;
  P_97 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_96 = texture2D (_LightTexture0, P_97);
  highp float tmpvar_98;
  tmpvar_98 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_99;
  tmpvar_99 = texture2D (_LightTextureB0, vec2(tmpvar_98));
  lowp float tmpvar_100;
  mediump float shadow_101;
  lowp vec4 tmpvar_102;
  tmpvar_102 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD4);
  highp float tmpvar_103;
  if ((tmpvar_102.x < (xlv_TEXCOORD4.z / xlv_TEXCOORD4.w))) {
    tmpvar_103 = _LightShadowData.x;
  } else {
    tmpvar_103 = 1.0;
  };
  shadow_101 = tmpvar_103;
  tmpvar_100 = shadow_101;
  highp float tmpvar_104;
  tmpvar_104 = (((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_96.w) * tmpvar_99.w) * tmpvar_100);
  atten_4 = tmpvar_104;
  mediump float tmpvar_105;
  tmpvar_105 = clamp ((((_LightColor0.w * tmpvar_95) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_106;
  tmpvar_106 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_105)), 0.0, 1.0);
  light_3 = tmpvar_106;
  highp float tmpvar_107;
  tmpvar_107 = clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0);
  terminator_2 = tmpvar_107;
  mediump vec3 tmpvar_108;
  tmpvar_108 = (light_3 * terminator_2);
  light_3 = tmpvar_108;
  highp vec3 tmpvar_109;
  tmpvar_109 = (tmpvar_90.xyz + (_Albedo * tmpvar_108));
  color_25.xyz = tmpvar_109;
  color_25.xyz = (color_25.xyz * tmpvar_108);
  citydarkoverlay_8.w = (tmpvar_86.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_94 - 0.01)) / 0.99) * 4.0) * atten_4), 0.0, 1.0), 0.0, 1.0)));
  color_25.xyz = mix (color_25, citydarkoverlay_8, citydarkoverlay_8.wwww).xyz;
  color_25.w = 1.0;
  tmpvar_1 = color_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 332
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 437
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 objnormal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
};
#line 427
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 323
uniform sampler2D _LightTextureB0;
#line 328
#line 342
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 355
#line 363
#line 377
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 410
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 414
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 418
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp mat4 _Rotation;
#line 422
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 426
uniform sampler2D _CityLightOverlayDetailTex;
#line 449
#line 475
#line 449
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 453
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    #line 457
    o.color = v.color;
    o.objnormal = v.normal;
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    #line 462
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.objnormal);
    xlv_TEXCOORD3 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereCoords);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 332
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 437
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 objnormal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
};
#line 427
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 323
uniform sampler2D _LightTextureB0;
#line 328
#line 342
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 355
#line 363
#line 377
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 410
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 414
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 418
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp mat4 _Rotation;
#line 422
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 426
uniform sampler2D _CityLightOverlayDetailTex;
#line 449
#line 475
#line 464
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 466
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 470
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 328
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 324
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 316
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    mediump float shadow = (( (textureProj( _ShadowMapTexture, shadowCoord).x < (shadowCoord.z / shadowCoord.w)) ) ? ( _LightShadowData.x ) : ( 1.0 ));
    #line 319
    return shadow;
}
#line 475
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    #line 479
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 483
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    highp vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    highp vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    highp vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    #line 487
    highp vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    highp vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    highp vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, (-IN.sphereCoords))) - 0.95)) + 0.5));
    #line 491
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    #line 495
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    #line 499
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    highp vec2 localCoords = encnorm.wy;
    #line 503
    localCoords -= vec2( 0.5);
    localCoords.x *= 0.25;
    localCoords.y *= 0.5;
    uv.x -= 0.5;
    #line 507
    uv += localCoords;
    mediump vec3 norm;
    norm.z = cos((6.28319 * uv.x));
    norm.x = sin((6.28319 * uv.x));
    #line 511
    norm.y = cos((3.14159 * uv.y));
    norm = (-norm);
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    #line 515
    detail = (0.25 * (mix( detail, detailY, vec4( sphereNrm.y)) - 0.5));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (IN.color + mix( detail.xyzw, vec4( 0.0), vec4( detailLevel)));
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    #line 519
    color = mix( color, main, vec4( handoff));
    cityoverlay.w *= xll_saturate_f(floor((IN.color.w + 0.99)));
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    #line 523
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    #line 527
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    #line 531
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * unitySampleShadow( IN._ShadowCoord));
    #line 535
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    mediump float terminator = xll_saturate_f(floor((1.01 + dot( IN.sphereCoords, _SunDir))));
    light *= terminator;
    #line 539
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (SNdotL - 0.01)) / 0.99) * 4.0) * atten));
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    #line 543
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.objnormal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform mat4 unity_World2Shadow[4];
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec4 tmpvar_3;
  tmpvar_3.x = gl_MultiTexCoord0.x;
  tmpvar_3.y = gl_MultiTexCoord0.y;
  tmpvar_3.z = gl_MultiTexCoord1.x;
  tmpvar_3.w = gl_MultiTexCoord1.y;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * gl_Vertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_3).xyz);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform sampler2DShadow _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec3 norm_2;
  vec2 localCoords_3;
  vec4 cityoverlay_4;
  vec2 uv_5;
  vec4 color_6;
  float r_7;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_5.x = (0.5 + (0.159155 * r_7));
  uv_5.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_11;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_12;
    y_over_x_12 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_13;
    float x_14;
    x_14 = (y_over_x_12 * inversesqrt(((y_over_x_12 * y_over_x_12) + 1.0)));
    s_13 = (sign(x_14) * (1.5708 - (sqrt((1.0 - abs(x_14))) * (1.5708 + (abs(x_14) * (-0.214602 + (abs(x_14) * (0.0865667 + (abs(x_14) * -0.0310296)))))))));
    r_11 = s_13;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_11 = (s_13 + 3.14159);
      } else {
        r_11 = (r_11 - 3.14159);
      };
    };
  } else {
    r_11 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_15;
  tmpvar_15 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_16;
  tmpvar_16 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_17;
  tmpvar_17 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_18;
  tmpvar_18.x = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_18.y = dFdx(tmpvar_15);
  tmpvar_18.z = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_18.w = dFdy(tmpvar_15);
  vec4 tmpvar_19;
  tmpvar_19 = texture2DGradARB (_MainTex, uv_5, tmpvar_18.xy, tmpvar_18.zw);
  float tmpvar_20;
  tmpvar_20 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_21;
  tmpvar_21 = texture2DGradARB (_CityOverlayTex, uv_5, tmpvar_18.xy, tmpvar_18.zw);
  cityoverlay_4.xyz = tmpvar_21.xyz;
  vec2 tmpvar_22;
  tmpvar_22 = (texture2DGradARB (_BumpMap, uv_5, tmpvar_18.xy, tmpvar_18.zw).wy - vec2(0.5, 0.5));
  localCoords_3.x = (tmpvar_22.x * 0.25);
  localCoords_3.y = (tmpvar_22.y * 0.5);
  uv_5.x = (uv_5.x - 0.5);
  vec2 tmpvar_23;
  tmpvar_23 = (uv_5 + localCoords_3);
  uv_5 = tmpvar_23;
  norm_2.z = cos((6.28319 * tmpvar_23.x));
  norm_2.x = sin((6.28319 * tmpvar_23.x));
  norm_2.y = cos((3.14159 * tmpvar_23.y));
  vec3 tmpvar_24;
  tmpvar_24 = -(norm_2);
  norm_2 = tmpvar_24;
  vec3 tmpvar_25;
  tmpvar_25 = abs(xlv_TEXCOORD6);
  float tmpvar_26;
  tmpvar_26 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  cityoverlay_4.w = (tmpvar_21.w * clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0));
  vec4 tmpvar_27;
  tmpvar_27 = (cityoverlay_4 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_25.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_25.yyyy));
  citydarkoverlay_1.xyz = tmpvar_27.xyz;
  vec4 tmpvar_28;
  tmpvar_28 = (cityoverlay_4 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_25.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_25.yyyy));
  vec4 tmpvar_29;
  tmpvar_29 = (mix (mix ((xlv_TEXCOORD1 + mix ((0.25 * (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_20)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_20)), tmpvar_25.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_20)), tmpvar_25.yyyy) - 0.5)), vec4(0.0, 0.0, 0.0, 0.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))), tmpvar_19, vec4(tmpvar_26)), tmpvar_28, tmpvar_28.wwww) * _Color);
  color_6.w = tmpvar_29.w;
  float tmpvar_30;
  tmpvar_30 = clamp (dot (tmpvar_24, -(_SunDir)), 0.0, 1.0);
  float tmpvar_31;
  tmpvar_31 = (((float((xlv_TEXCOORD3.z > 0.0)) * texture2D (_LightTexture0, ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5)).w) * texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz))).w) * (_LightShadowData.x + (shadow2DProj (_ShadowMapTexture, xlv_TEXCOORD4).x * (1.0 - _LightShadowData.x))));
  vec3 tmpvar_32;
  tmpvar_32 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * mix (clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), tmpvar_30, tmpvar_26)) * 4.0) * tmpvar_31), 0.0, 1.0))), 0.0, 1.0) * clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0));
  color_6.xyz = (tmpvar_29.xyz + (_Albedo * tmpvar_32));
  color_6.xyz = (color_6.xyz * tmpvar_32);
  citydarkoverlay_1.w = (tmpvar_27.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_30 - 0.01)) / 0.99) * 4.0) * tmpvar_31), 0.0, 1.0), 0.0, 1.0)));
  color_6.xyz = mix (color_6, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_6.w = 1.0;
  gl_FragData[0] = color_6;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Matrix 4 [unity_World2Shadow0]
Matrix 8 [_Object2World]
Matrix 12 [_LightMatrix0]
"vs_3_0
; 36 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
def c17, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
mov r1.xyz, v2
mov r1.w, c17.x
dp4 r2.z, r1, c10
dp4 r2.x, r1, c8
dp4 r2.y, r1, c9
mov r0.zw, v4.xyxy
mov r0.xy, v3
dp4 r2.w, r0, r0
rsq r1.x, r2.w
mul r0.xyz, r1.x, r0
mov o7.xyz, -r0
dp3 r0.w, r2, r2
rsq r0.w, r0.w
mul o6.xyz, r0.w, r2
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
dp4 r0.w, v0, c11
add r1.xyz, -r0, c16
dp3 r1.x, r1, r1
rsq r1.x, r1.x
mov o2, v1
dp4 o4.w, r0, c15
dp4 o4.z, r0, c14
dp4 o4.y, r0, c13
dp4 o4.x, r0, c12
dp4 o5.w, r0, c7
dp4 o5.z, r0, c6
dp4 o5.y, r0, c5
dp4 o5.x, r0, c4
rcp o1.x, r1.x
mov o3.xyz, v2
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  highp vec3 p_2;
  p_2 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_1;
  highp vec4 tmpvar_4;
  tmpvar_4.x = _glesMultiTexCoord0.x;
  tmpvar_4.y = _glesMultiTexCoord0.y;
  tmpvar_4.z = _glesMultiTexCoord1.x;
  tmpvar_4.w = _glesMultiTexCoord1.y;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_4).xyz);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shadow_samplers : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float terminator_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float TNdotL_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump vec4 citydarkoverlay_8;
  mediump float handoff_9;
  mediump float detailLevel_10;
  mediump vec4 detail_11;
  mediump vec3 norm_12;
  highp vec2 localCoords_13;
  mediump vec4 encnorm_14;
  mediump vec4 citylightoverlaydetailZ_15;
  mediump vec4 citylightoverlaydetailY_16;
  mediump vec4 citylightoverlaydetailX_17;
  mediump vec4 citydarkoverlaydetailZ_18;
  mediump vec4 citydarkoverlaydetailY_19;
  mediump vec4 citydarkoverlaydetailX_20;
  mediump vec4 cityoverlay_21;
  mediump float vertLerp_22;
  mediump vec4 main_23;
  highp vec2 uv_24;
  mediump vec4 color_25;
  highp float r_26;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_26));
  uv_24.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_30;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_31;
    y_over_x_31 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_32;
    highp float x_33;
    x_33 = (y_over_x_31 * inversesqrt(((y_over_x_31 * y_over_x_31) + 1.0)));
    s_32 = (sign(x_33) * (1.5708 - (sqrt((1.0 - abs(x_33))) * (1.5708 + (abs(x_33) * (-0.214602 + (abs(x_33) * (0.0865667 + (abs(x_33) * -0.0310296)))))))));
    r_30 = s_32;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_30 = (s_32 + 3.14159);
      } else {
        r_30 = (r_30 - 3.14159);
      };
    };
  } else {
    r_30 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_34;
  tmpvar_34 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_MainTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  main_23 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD6.zy * _DetailScale);
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zx * _DetailScale);
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.xy * _DetailScale);
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  highp float tmpvar_45;
  tmpvar_45 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_22 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailVertTex, tmpvar_42);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailTex, tmpvar_39);
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_47, vec4(vertLerp_22));
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailVertTex, tmpvar_43);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailTex, tmpvar_40);
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (tmpvar_49, tmpvar_50, vec4(vertLerp_22));
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailVertTex, tmpvar_44);
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailTex, tmpvar_41);
  mediump vec4 tmpvar_54;
  tmpvar_54 = mix (tmpvar_52, tmpvar_53, vec4(vertLerp_22));
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2DGradEXT (_CityOverlayTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  cityoverlay_21 = tmpvar_55;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_56 = texture2D (_CityDarkOverlayDetailTex, P_57);
  citydarkoverlaydetailX_20 = tmpvar_56;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityDarkOverlayDetailTex, P_59);
  citydarkoverlaydetailY_19 = tmpvar_58;
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_60 = texture2D (_CityDarkOverlayDetailTex, P_61);
  citydarkoverlaydetailZ_18 = tmpvar_60;
  lowp vec4 tmpvar_62;
  highp vec2 P_63;
  P_63 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_62 = texture2D (_CityLightOverlayDetailTex, P_63);
  citylightoverlaydetailX_17 = tmpvar_62;
  lowp vec4 tmpvar_64;
  highp vec2 P_65;
  P_65 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_64 = texture2D (_CityLightOverlayDetailTex, P_65);
  citylightoverlaydetailY_16 = tmpvar_64;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_66 = texture2D (_CityLightOverlayDetailTex, P_67);
  citylightoverlaydetailZ_15 = tmpvar_66;
  lowp vec4 tmpvar_68;
  tmpvar_68 = texture2DGradEXT (_BumpMap, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  encnorm_14 = tmpvar_68;
  mediump vec2 tmpvar_69;
  tmpvar_69 = encnorm_14.wy;
  localCoords_13 = tmpvar_69;
  highp vec2 tmpvar_70;
  tmpvar_70 = (localCoords_13 - vec2(0.5, 0.5));
  localCoords_13.x = (tmpvar_70.x * 0.25);
  localCoords_13.y = (tmpvar_70.y * 0.5);
  uv_24.x = (uv_24.x - 0.5);
  highp vec2 tmpvar_71;
  tmpvar_71 = (uv_24 + localCoords_13);
  uv_24 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = cos((6.28319 * tmpvar_71.x));
  norm_12.z = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = sin((6.28319 * tmpvar_71.x));
  norm_12.x = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = cos((3.14159 * tmpvar_71.y));
  norm_12.y = tmpvar_74;
  mediump vec3 tmpvar_75;
  tmpvar_75 = -(norm_12);
  norm_12 = tmpvar_75;
  highp vec3 tmpvar_76;
  tmpvar_76 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (tmpvar_54, tmpvar_48, tmpvar_76.xxxx);
  detail_11 = tmpvar_77;
  highp vec4 tmpvar_78;
  tmpvar_78 = (0.25 * (mix (detail_11, tmpvar_51, tmpvar_76.yyyy) - 0.5));
  detail_11 = tmpvar_78;
  highp float tmpvar_79;
  tmpvar_79 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_10 = tmpvar_79;
  mediump vec4 tmpvar_80;
  tmpvar_80 = mix (detail_11, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_10));
  highp vec4 tmpvar_81;
  tmpvar_81 = (xlv_TEXCOORD1 + tmpvar_80);
  color_25 = tmpvar_81;
  highp float tmpvar_82;
  tmpvar_82 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_9 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0);
  cityoverlay_21.w = (cityoverlay_21.w * tmpvar_83);
  highp vec4 tmpvar_84;
  tmpvar_84 = mix (citydarkoverlaydetailZ_18, citydarkoverlaydetailX_20, tmpvar_76.xxxx);
  detail_11 = tmpvar_84;
  highp vec4 tmpvar_85;
  tmpvar_85 = mix (detail_11, citydarkoverlaydetailY_19, tmpvar_76.yyyy);
  detail_11 = tmpvar_85;
  mediump vec4 tmpvar_86;
  tmpvar_86 = (cityoverlay_21 * detail_11);
  citydarkoverlay_8.xyz = tmpvar_86.xyz;
  highp vec4 tmpvar_87;
  tmpvar_87 = mix (citylightoverlaydetailZ_15, citylightoverlaydetailX_17, tmpvar_76.xxxx);
  detail_11 = tmpvar_87;
  highp vec4 tmpvar_88;
  tmpvar_88 = mix (detail_11, citylightoverlaydetailY_16, tmpvar_76.yyyy);
  detail_11 = tmpvar_88;
  mediump vec4 tmpvar_89;
  tmpvar_89 = (cityoverlay_21 * detail_11);
  mediump vec4 tmpvar_90;
  tmpvar_90 = (mix (mix (color_25, main_23, vec4(handoff_9)), tmpvar_89, tmpvar_89.wwww) * _Color);
  color_25.w = tmpvar_90.w;
  highp vec3 tmpvar_91;
  tmpvar_91 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_91;
  highp vec3 tmpvar_92;
  tmpvar_92 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_92;
  highp float tmpvar_93;
  tmpvar_93 = clamp (dot (xlv_TEXCOORD5, lightDirection_6), 0.0, 1.0);
  TNdotL_5 = tmpvar_93;
  mediump float tmpvar_94;
  tmpvar_94 = clamp (dot (tmpvar_75, -(_SunDir)), 0.0, 1.0);
  lowp vec4 tmpvar_95;
  highp vec2 P_96;
  P_96 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_95 = texture2D (_LightTexture0, P_96);
  highp float tmpvar_97;
  tmpvar_97 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_98;
  tmpvar_98 = texture2D (_LightTextureB0, vec2(tmpvar_97));
  lowp float tmpvar_99;
  mediump float shadow_100;
  lowp float tmpvar_101;
  tmpvar_101 = shadow2DProjEXT (_ShadowMapTexture, xlv_TEXCOORD4);
  shadow_100 = tmpvar_101;
  highp float tmpvar_102;
  tmpvar_102 = (_LightShadowData.x + (shadow_100 * (1.0 - _LightShadowData.x)));
  shadow_100 = tmpvar_102;
  tmpvar_99 = shadow_100;
  highp float tmpvar_103;
  tmpvar_103 = (((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_95.w) * tmpvar_98.w) * tmpvar_99);
  atten_4 = tmpvar_103;
  mediump float tmpvar_104;
  tmpvar_104 = clamp ((((_LightColor0.w * mix (TNdotL_5, tmpvar_94, handoff_9)) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_105;
  tmpvar_105 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_104)), 0.0, 1.0);
  light_3 = tmpvar_105;
  highp float tmpvar_106;
  tmpvar_106 = clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0);
  terminator_2 = tmpvar_106;
  mediump vec3 tmpvar_107;
  tmpvar_107 = (light_3 * terminator_2);
  light_3 = tmpvar_107;
  highp vec3 tmpvar_108;
  tmpvar_108 = (tmpvar_90.xyz + (_Albedo * tmpvar_107));
  color_25.xyz = tmpvar_108;
  color_25.xyz = (color_25.xyz * tmpvar_107);
  citydarkoverlay_8.w = (tmpvar_86.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_94 - 0.01)) / 0.99) * 4.0) * atten_4), 0.0, 1.0), 0.0, 1.0)));
  color_25.xyz = mix (color_25, citydarkoverlay_8, citydarkoverlay_8.wwww).xyz;
  color_25.w = 1.0;
  tmpvar_1 = color_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 333
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 438
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 objnormal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
};
#line 428
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 323
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 343
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 356
#line 364
#line 378
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 411
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 415
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 419
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp mat4 _Rotation;
#line 423
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 427
uniform sampler2D _CityLightOverlayDetailTex;
#line 450
#line 476
#line 450
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 454
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    #line 458
    o.color = v.color;
    o.objnormal = v.normal;
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    #line 463
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.objnormal);
    xlv_TEXCOORD3 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereCoords);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_shadow2Dproj(mediump sampler2DShadow s, vec4 coord) { return textureProj (s, coord); }
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 333
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 438
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 objnormal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
};
#line 428
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 323
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 343
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 356
#line 364
#line 378
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 411
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 415
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 419
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp mat4 _Rotation;
#line 423
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 427
uniform sampler2D _CityLightOverlayDetailTex;
#line 450
#line 476
#line 465
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 467
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 471
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 329
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    #line 331
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 325
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    #line 327
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 316
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    mediump float shadow = xll_shadow2Dproj( _ShadowMapTexture, shadowCoord);
    #line 319
    shadow = (_LightShadowData.x + (shadow * (1.0 - _LightShadowData.x)));
    return shadow;
}
#line 476
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    #line 480
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 484
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    highp vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    highp vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    highp vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    #line 488
    highp vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    highp vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    highp vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, (-IN.sphereCoords))) - 0.95)) + 0.5));
    #line 492
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    #line 496
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    #line 500
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    highp vec2 localCoords = encnorm.wy;
    #line 504
    localCoords -= vec2( 0.5);
    localCoords.x *= 0.25;
    localCoords.y *= 0.5;
    uv.x -= 0.5;
    #line 508
    uv += localCoords;
    mediump vec3 norm;
    norm.z = cos((6.28319 * uv.x));
    norm.x = sin((6.28319 * uv.x));
    #line 512
    norm.y = cos((3.14159 * uv.y));
    norm = (-norm);
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    #line 516
    detail = (0.25 * (mix( detail, detailY, vec4( sphereNrm.y)) - 0.5));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (IN.color + mix( detail.xyzw, vec4( 0.0), vec4( detailLevel)));
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    #line 520
    color = mix( color, main, vec4( handoff));
    cityoverlay.w *= xll_saturate_f(floor((IN.color.w + 0.99)));
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    #line 524
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    #line 528
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    #line 532
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * unitySampleShadow( IN._ShadowCoord));
    #line 536
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    mediump float terminator = xll_saturate_f(floor((1.01 + dot( IN.sphereCoords, _SunDir))));
    light *= terminator;
    #line 540
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (SNdotL - 0.01)) / 0.99) * 4.0) * atten));
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    #line 544
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.objnormal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _Object2World;

uniform vec4 _ProjectionParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec3 p_2;
  p_2 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = gl_Normal;
  vec4 tmpvar_4;
  tmpvar_4.x = gl_MultiTexCoord0.x;
  tmpvar_4.y = gl_MultiTexCoord0.y;
  tmpvar_4.z = gl_MultiTexCoord1.x;
  tmpvar_4.w = gl_MultiTexCoord1.y;
  vec4 o_5;
  vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_1 * 0.5);
  vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_1.zw;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD3 = o_5;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_4).xyz);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec3 norm_2;
  vec2 localCoords_3;
  vec4 cityoverlay_4;
  vec2 uv_5;
  vec4 color_6;
  float r_7;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_5.x = (0.5 + (0.159155 * r_7));
  uv_5.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_11;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_12;
    y_over_x_12 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_13;
    float x_14;
    x_14 = (y_over_x_12 * inversesqrt(((y_over_x_12 * y_over_x_12) + 1.0)));
    s_13 = (sign(x_14) * (1.5708 - (sqrt((1.0 - abs(x_14))) * (1.5708 + (abs(x_14) * (-0.214602 + (abs(x_14) * (0.0865667 + (abs(x_14) * -0.0310296)))))))));
    r_11 = s_13;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_11 = (s_13 + 3.14159);
      } else {
        r_11 = (r_11 - 3.14159);
      };
    };
  } else {
    r_11 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_15;
  tmpvar_15 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_16;
  tmpvar_16 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_17;
  tmpvar_17 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_18;
  tmpvar_18.x = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_18.y = dFdx(tmpvar_15);
  tmpvar_18.z = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_18.w = dFdy(tmpvar_15);
  vec4 tmpvar_19;
  tmpvar_19 = texture2DGradARB (_MainTex, uv_5, tmpvar_18.xy, tmpvar_18.zw);
  float tmpvar_20;
  tmpvar_20 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_21;
  tmpvar_21 = texture2DGradARB (_CityOverlayTex, uv_5, tmpvar_18.xy, tmpvar_18.zw);
  cityoverlay_4.xyz = tmpvar_21.xyz;
  vec2 tmpvar_22;
  tmpvar_22 = (texture2DGradARB (_BumpMap, uv_5, tmpvar_18.xy, tmpvar_18.zw).wy - vec2(0.5, 0.5));
  localCoords_3.x = (tmpvar_22.x * 0.25);
  localCoords_3.y = (tmpvar_22.y * 0.5);
  uv_5.x = (uv_5.x - 0.5);
  vec2 tmpvar_23;
  tmpvar_23 = (uv_5 + localCoords_3);
  uv_5 = tmpvar_23;
  norm_2.z = cos((6.28319 * tmpvar_23.x));
  norm_2.x = sin((6.28319 * tmpvar_23.x));
  norm_2.y = cos((3.14159 * tmpvar_23.y));
  vec3 tmpvar_24;
  tmpvar_24 = -(norm_2);
  norm_2 = tmpvar_24;
  vec3 tmpvar_25;
  tmpvar_25 = abs(xlv_TEXCOORD6);
  float tmpvar_26;
  tmpvar_26 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  cityoverlay_4.w = (tmpvar_21.w * clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0));
  vec4 tmpvar_27;
  tmpvar_27 = (cityoverlay_4 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_25.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_25.yyyy));
  citydarkoverlay_1.xyz = tmpvar_27.xyz;
  vec4 tmpvar_28;
  tmpvar_28 = (cityoverlay_4 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_25.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_25.yyyy));
  vec4 tmpvar_29;
  tmpvar_29 = (mix (mix ((xlv_TEXCOORD1 + mix ((0.25 * (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_20)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_20)), tmpvar_25.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_20)), tmpvar_25.yyyy) - 0.5)), vec4(0.0, 0.0, 0.0, 0.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))), tmpvar_19, vec4(tmpvar_26)), tmpvar_28, tmpvar_28.wwww) * _Color);
  color_6.w = tmpvar_29.w;
  float tmpvar_30;
  tmpvar_30 = clamp (dot (tmpvar_24, -(_SunDir)), 0.0, 1.0);
  vec4 tmpvar_31;
  tmpvar_31 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD3);
  vec3 tmpvar_32;
  tmpvar_32 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * mix (clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), tmpvar_30, tmpvar_26)) * 4.0) * tmpvar_31.x), 0.0, 1.0))), 0.0, 1.0) * clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0));
  color_6.xyz = (tmpvar_29.xyz + (_Albedo * tmpvar_32));
  color_6.xyz = (color_6.xyz * tmpvar_32);
  citydarkoverlay_1.w = (tmpvar_27.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_30 - 0.01)) / 0.99) * 4.0) * tmpvar_31.x), 0.0, 1.0), 0.0, 1.0)));
  color_6.xyz = mix (color_6, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_6.w = 1.0;
  gl_FragData[0] = color_6;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_WorldSpaceCameraPos]
Vector 9 [_ProjectionParams]
Vector 10 [_ScreenParams]
Matrix 4 [_Object2World]
"vs_3_0
; 32 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord5 o5
dcl_texcoord6 o6
def c11, 0.00000000, 0.50000000, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
mov r1.xyz, v2
mov r1.w, c11.x
dp4 r0.z, r1, c6
dp4 r0.x, r1, c4
dp4 r0.y, r1, c5
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o5.xyz, r0.w, r0
dp4 r0.w, v0, c3
dp4 r0.x, v0, c0
dp4 r0.y, v0, c1
mul r2.xyz, r0.xyww, c11.y
mul r2.y, r2, c9.x
mov r1.zw, v4.xyxy
mov r1.xy, v3
dp4 r1.w, r1, r1
rsq r0.z, r1.w
mul r1.xyz, r0.z, r1
mov o6.xyz, -r1
dp4 r0.z, v0, c2
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
add r1.xyz, -r1, c8
mov o0, r0
dp3 r0.x, r1, r1
rsq r0.x, r0.x
mad o4.xy, r2.z, c10.zwzw, r2
mov o2, v1
mov o4.zw, r0
rcp o1.x, r0.x
mov o3.xyz, v2
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  highp vec3 p_2;
  p_2 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_1;
  highp vec4 tmpvar_4;
  tmpvar_4.x = _glesMultiTexCoord0.x;
  tmpvar_4.y = _glesMultiTexCoord0.y;
  tmpvar_4.z = _glesMultiTexCoord1.x;
  tmpvar_4.w = _glesMultiTexCoord1.y;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_4).xyz);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float terminator_2;
  mediump vec3 light_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float handoff_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec3 norm_11;
  highp vec2 localCoords_12;
  mediump vec4 encnorm_13;
  mediump vec4 citylightoverlaydetailZ_14;
  mediump vec4 citylightoverlaydetailY_15;
  mediump vec4 citylightoverlaydetailX_16;
  mediump vec4 citydarkoverlaydetailZ_17;
  mediump vec4 citydarkoverlaydetailY_18;
  mediump vec4 citydarkoverlaydetailX_19;
  mediump vec4 cityoverlay_20;
  mediump float vertLerp_21;
  mediump vec4 main_22;
  highp vec2 uv_23;
  mediump vec4 color_24;
  highp float r_25;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_23.x = (0.5 + (0.159155 * r_25));
  uv_23.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_29;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_30;
    y_over_x_30 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_31;
    highp float x_32;
    x_32 = (y_over_x_30 * inversesqrt(((y_over_x_30 * y_over_x_30) + 1.0)));
    s_31 = (sign(x_32) * (1.5708 - (sqrt((1.0 - abs(x_32))) * (1.5708 + (abs(x_32) * (-0.214602 + (abs(x_32) * (0.0865667 + (abs(x_32) * -0.0310296)))))))));
    r_29 = s_31;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_29 = (s_31 + 3.14159);
      } else {
        r_29 = (r_29 - 3.14159);
      };
    };
  } else {
    r_29 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_33;
  tmpvar_33 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_34;
  tmpvar_34 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_36;
  tmpvar_36.x = (0.159155 * sqrt(dot (tmpvar_34, tmpvar_34)));
  tmpvar_36.y = dFdx(tmpvar_33);
  tmpvar_36.z = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_36.w = dFdy(tmpvar_33);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2DGradEXT (_MainTex, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  main_22 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD6.zy * _DetailScale);
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD6.zx * _DetailScale);
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.xy * _DetailScale);
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  highp float tmpvar_44;
  tmpvar_44 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_21 = tmpvar_44;
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, tmpvar_41);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, tmpvar_38);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_21));
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailVertTex, tmpvar_42);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailTex, tmpvar_39);
  mediump vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_49, vec4(vertLerp_21));
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailVertTex, tmpvar_43);
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailTex, tmpvar_40);
  mediump vec4 tmpvar_53;
  tmpvar_53 = mix (tmpvar_51, tmpvar_52, vec4(vertLerp_21));
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2DGradEXT (_CityOverlayTex, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  cityoverlay_20 = tmpvar_54;
  lowp vec4 tmpvar_55;
  highp vec2 P_56;
  P_56 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_55 = texture2D (_CityDarkOverlayDetailTex, P_56);
  citydarkoverlaydetailX_19 = tmpvar_55;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityDarkOverlayDetailTex, P_58);
  citydarkoverlaydetailY_18 = tmpvar_57;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_59 = texture2D (_CityDarkOverlayDetailTex, P_60);
  citydarkoverlaydetailZ_17 = tmpvar_59;
  lowp vec4 tmpvar_61;
  highp vec2 P_62;
  P_62 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_61 = texture2D (_CityLightOverlayDetailTex, P_62);
  citylightoverlaydetailX_16 = tmpvar_61;
  lowp vec4 tmpvar_63;
  highp vec2 P_64;
  P_64 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_63 = texture2D (_CityLightOverlayDetailTex, P_64);
  citylightoverlaydetailY_15 = tmpvar_63;
  lowp vec4 tmpvar_65;
  highp vec2 P_66;
  P_66 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_65 = texture2D (_CityLightOverlayDetailTex, P_66);
  citylightoverlaydetailZ_14 = tmpvar_65;
  lowp vec4 tmpvar_67;
  tmpvar_67 = texture2DGradEXT (_BumpMap, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  encnorm_13 = tmpvar_67;
  mediump vec2 tmpvar_68;
  tmpvar_68 = encnorm_13.wy;
  localCoords_12 = tmpvar_68;
  highp vec2 tmpvar_69;
  tmpvar_69 = (localCoords_12 - vec2(0.5, 0.5));
  localCoords_12.x = (tmpvar_69.x * 0.25);
  localCoords_12.y = (tmpvar_69.y * 0.5);
  uv_23.x = (uv_23.x - 0.5);
  highp vec2 tmpvar_70;
  tmpvar_70 = (uv_23 + localCoords_12);
  uv_23 = tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = cos((6.28319 * tmpvar_70.x));
  norm_11.z = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = sin((6.28319 * tmpvar_70.x));
  norm_11.x = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = cos((3.14159 * tmpvar_70.y));
  norm_11.y = tmpvar_73;
  mediump vec3 tmpvar_74;
  tmpvar_74 = -(norm_11);
  norm_11 = tmpvar_74;
  highp vec3 tmpvar_75;
  tmpvar_75 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (tmpvar_53, tmpvar_47, tmpvar_75.xxxx);
  detail_10 = tmpvar_76;
  highp vec4 tmpvar_77;
  tmpvar_77 = (0.25 * (mix (detail_10, tmpvar_50, tmpvar_75.yyyy) - 0.5));
  detail_10 = tmpvar_77;
  highp float tmpvar_78;
  tmpvar_78 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_9 = tmpvar_78;
  mediump vec4 tmpvar_79;
  tmpvar_79 = mix (detail_10, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_9));
  highp vec4 tmpvar_80;
  tmpvar_80 = (xlv_TEXCOORD1 + tmpvar_79);
  color_24 = tmpvar_80;
  highp float tmpvar_81;
  tmpvar_81 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_8 = tmpvar_81;
  highp float tmpvar_82;
  tmpvar_82 = clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0);
  cityoverlay_20.w = (cityoverlay_20.w * tmpvar_82);
  highp vec4 tmpvar_83;
  tmpvar_83 = mix (citydarkoverlaydetailZ_17, citydarkoverlaydetailX_19, tmpvar_75.xxxx);
  detail_10 = tmpvar_83;
  highp vec4 tmpvar_84;
  tmpvar_84 = mix (detail_10, citydarkoverlaydetailY_18, tmpvar_75.yyyy);
  detail_10 = tmpvar_84;
  mediump vec4 tmpvar_85;
  tmpvar_85 = (cityoverlay_20 * detail_10);
  citydarkoverlay_7.xyz = tmpvar_85.xyz;
  highp vec4 tmpvar_86;
  tmpvar_86 = mix (citylightoverlaydetailZ_14, citylightoverlaydetailX_16, tmpvar_75.xxxx);
  detail_10 = tmpvar_86;
  highp vec4 tmpvar_87;
  tmpvar_87 = mix (detail_10, citylightoverlaydetailY_15, tmpvar_75.yyyy);
  detail_10 = tmpvar_87;
  mediump vec4 tmpvar_88;
  tmpvar_88 = (cityoverlay_20 * detail_10);
  mediump vec4 tmpvar_89;
  tmpvar_89 = (mix (mix (color_24, main_22, vec4(handoff_8)), tmpvar_88, tmpvar_88.wwww) * _Color);
  color_24.w = tmpvar_89.w;
  highp vec3 tmpvar_90;
  tmpvar_90 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_90;
  lowp vec3 tmpvar_91;
  tmpvar_91 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_91;
  highp float tmpvar_92;
  tmpvar_92 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_92;
  mediump float tmpvar_93;
  tmpvar_93 = clamp (dot (tmpvar_74, -(_SunDir)), 0.0, 1.0);
  lowp float tmpvar_94;
  mediump float lightShadowDataX_95;
  highp float dist_96;
  lowp float tmpvar_97;
  tmpvar_97 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD3).x;
  dist_96 = tmpvar_97;
  highp float tmpvar_98;
  tmpvar_98 = _LightShadowData.x;
  lightShadowDataX_95 = tmpvar_98;
  highp float tmpvar_99;
  tmpvar_99 = max (float((dist_96 > (xlv_TEXCOORD3.z / xlv_TEXCOORD3.w))), lightShadowDataX_95);
  tmpvar_94 = tmpvar_99;
  mediump float tmpvar_100;
  tmpvar_100 = clamp ((((_LightColor0.w * mix (TNdotL_4, tmpvar_93, handoff_8)) * 4.0) * tmpvar_94), 0.0, 1.0);
  highp vec3 tmpvar_101;
  tmpvar_101 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_100)), 0.0, 1.0);
  light_3 = tmpvar_101;
  highp float tmpvar_102;
  tmpvar_102 = clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0);
  terminator_2 = tmpvar_102;
  mediump vec3 tmpvar_103;
  tmpvar_103 = (light_3 * terminator_2);
  light_3 = tmpvar_103;
  highp vec3 tmpvar_104;
  tmpvar_104 = (tmpvar_89.xyz + (_Albedo * tmpvar_103));
  color_24.xyz = tmpvar_104;
  color_24.xyz = (color_24.xyz * tmpvar_103);
  citydarkoverlay_7.w = (tmpvar_85.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_93 - 0.01)) / 0.99) * 4.0) * tmpvar_94), 0.0, 1.0), 0.0, 1.0)));
  color_24.xyz = mix (color_24, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_24.w = 1.0;
  tmpvar_1 = color_24;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  highp vec4 tmpvar_5;
  tmpvar_5.x = _glesMultiTexCoord0.x;
  tmpvar_5.y = _glesMultiTexCoord0.y;
  tmpvar_5.z = _glesMultiTexCoord1.x;
  tmpvar_5.w = _glesMultiTexCoord1.y;
  highp vec4 o_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_8;
  tmpvar_8.x = tmpvar_7.x;
  tmpvar_8.y = (tmpvar_7.y * _ProjectionParams.x);
  o_6.xy = (tmpvar_8 + tmpvar_7.w);
  o_6.zw = tmpvar_2.zw;
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_6;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_5).xyz);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float terminator_2;
  mediump vec3 light_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float handoff_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec3 norm_11;
  highp vec2 localCoords_12;
  mediump vec4 encnorm_13;
  mediump vec4 citylightoverlaydetailZ_14;
  mediump vec4 citylightoverlaydetailY_15;
  mediump vec4 citylightoverlaydetailX_16;
  mediump vec4 citydarkoverlaydetailZ_17;
  mediump vec4 citydarkoverlaydetailY_18;
  mediump vec4 citydarkoverlaydetailX_19;
  mediump vec4 cityoverlay_20;
  mediump float vertLerp_21;
  mediump vec4 main_22;
  highp vec2 uv_23;
  mediump vec4 color_24;
  highp float r_25;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_23.x = (0.5 + (0.159155 * r_25));
  uv_23.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_29;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_30;
    y_over_x_30 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_31;
    highp float x_32;
    x_32 = (y_over_x_30 * inversesqrt(((y_over_x_30 * y_over_x_30) + 1.0)));
    s_31 = (sign(x_32) * (1.5708 - (sqrt((1.0 - abs(x_32))) * (1.5708 + (abs(x_32) * (-0.214602 + (abs(x_32) * (0.0865667 + (abs(x_32) * -0.0310296)))))))));
    r_29 = s_31;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_29 = (s_31 + 3.14159);
      } else {
        r_29 = (r_29 - 3.14159);
      };
    };
  } else {
    r_29 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_33;
  tmpvar_33 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_34;
  tmpvar_34 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_36;
  tmpvar_36.x = (0.159155 * sqrt(dot (tmpvar_34, tmpvar_34)));
  tmpvar_36.y = dFdx(tmpvar_33);
  tmpvar_36.z = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_36.w = dFdy(tmpvar_33);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2DGradEXT (_MainTex, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  main_22 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD6.zy * _DetailScale);
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD6.zx * _DetailScale);
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.xy * _DetailScale);
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  highp float tmpvar_44;
  tmpvar_44 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_21 = tmpvar_44;
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, tmpvar_41);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, tmpvar_38);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_21));
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailVertTex, tmpvar_42);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailTex, tmpvar_39);
  mediump vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_49, vec4(vertLerp_21));
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailVertTex, tmpvar_43);
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailTex, tmpvar_40);
  mediump vec4 tmpvar_53;
  tmpvar_53 = mix (tmpvar_51, tmpvar_52, vec4(vertLerp_21));
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2DGradEXT (_CityOverlayTex, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  cityoverlay_20 = tmpvar_54;
  lowp vec4 tmpvar_55;
  highp vec2 P_56;
  P_56 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_55 = texture2D (_CityDarkOverlayDetailTex, P_56);
  citydarkoverlaydetailX_19 = tmpvar_55;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityDarkOverlayDetailTex, P_58);
  citydarkoverlaydetailY_18 = tmpvar_57;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_59 = texture2D (_CityDarkOverlayDetailTex, P_60);
  citydarkoverlaydetailZ_17 = tmpvar_59;
  lowp vec4 tmpvar_61;
  highp vec2 P_62;
  P_62 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_61 = texture2D (_CityLightOverlayDetailTex, P_62);
  citylightoverlaydetailX_16 = tmpvar_61;
  lowp vec4 tmpvar_63;
  highp vec2 P_64;
  P_64 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_63 = texture2D (_CityLightOverlayDetailTex, P_64);
  citylightoverlaydetailY_15 = tmpvar_63;
  lowp vec4 tmpvar_65;
  highp vec2 P_66;
  P_66 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_65 = texture2D (_CityLightOverlayDetailTex, P_66);
  citylightoverlaydetailZ_14 = tmpvar_65;
  lowp vec4 tmpvar_67;
  tmpvar_67 = texture2DGradEXT (_BumpMap, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  encnorm_13 = tmpvar_67;
  mediump vec2 tmpvar_68;
  tmpvar_68 = encnorm_13.wy;
  localCoords_12 = tmpvar_68;
  highp vec2 tmpvar_69;
  tmpvar_69 = (localCoords_12 - vec2(0.5, 0.5));
  localCoords_12.x = (tmpvar_69.x * 0.25);
  localCoords_12.y = (tmpvar_69.y * 0.5);
  uv_23.x = (uv_23.x - 0.5);
  highp vec2 tmpvar_70;
  tmpvar_70 = (uv_23 + localCoords_12);
  uv_23 = tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = cos((6.28319 * tmpvar_70.x));
  norm_11.z = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = sin((6.28319 * tmpvar_70.x));
  norm_11.x = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = cos((3.14159 * tmpvar_70.y));
  norm_11.y = tmpvar_73;
  mediump vec3 tmpvar_74;
  tmpvar_74 = -(norm_11);
  norm_11 = tmpvar_74;
  highp vec3 tmpvar_75;
  tmpvar_75 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (tmpvar_53, tmpvar_47, tmpvar_75.xxxx);
  detail_10 = tmpvar_76;
  highp vec4 tmpvar_77;
  tmpvar_77 = (0.25 * (mix (detail_10, tmpvar_50, tmpvar_75.yyyy) - 0.5));
  detail_10 = tmpvar_77;
  highp float tmpvar_78;
  tmpvar_78 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_9 = tmpvar_78;
  mediump vec4 tmpvar_79;
  tmpvar_79 = mix (detail_10, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_9));
  highp vec4 tmpvar_80;
  tmpvar_80 = (xlv_TEXCOORD1 + tmpvar_79);
  color_24 = tmpvar_80;
  highp float tmpvar_81;
  tmpvar_81 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_8 = tmpvar_81;
  highp float tmpvar_82;
  tmpvar_82 = clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0);
  cityoverlay_20.w = (cityoverlay_20.w * tmpvar_82);
  highp vec4 tmpvar_83;
  tmpvar_83 = mix (citydarkoverlaydetailZ_17, citydarkoverlaydetailX_19, tmpvar_75.xxxx);
  detail_10 = tmpvar_83;
  highp vec4 tmpvar_84;
  tmpvar_84 = mix (detail_10, citydarkoverlaydetailY_18, tmpvar_75.yyyy);
  detail_10 = tmpvar_84;
  mediump vec4 tmpvar_85;
  tmpvar_85 = (cityoverlay_20 * detail_10);
  citydarkoverlay_7.xyz = tmpvar_85.xyz;
  highp vec4 tmpvar_86;
  tmpvar_86 = mix (citylightoverlaydetailZ_14, citylightoverlaydetailX_16, tmpvar_75.xxxx);
  detail_10 = tmpvar_86;
  highp vec4 tmpvar_87;
  tmpvar_87 = mix (detail_10, citylightoverlaydetailY_15, tmpvar_75.yyyy);
  detail_10 = tmpvar_87;
  mediump vec4 tmpvar_88;
  tmpvar_88 = (cityoverlay_20 * detail_10);
  mediump vec4 tmpvar_89;
  tmpvar_89 = (mix (mix (color_24, main_22, vec4(handoff_8)), tmpvar_88, tmpvar_88.wwww) * _Color);
  color_24.w = tmpvar_89.w;
  highp vec3 tmpvar_90;
  tmpvar_90 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_90;
  lowp vec3 tmpvar_91;
  tmpvar_91 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_91;
  highp float tmpvar_92;
  tmpvar_92 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_92;
  mediump float tmpvar_93;
  tmpvar_93 = clamp (dot (tmpvar_74, -(_SunDir)), 0.0, 1.0);
  lowp vec4 tmpvar_94;
  tmpvar_94 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD3);
  mediump float tmpvar_95;
  tmpvar_95 = clamp ((((_LightColor0.w * mix (TNdotL_4, tmpvar_93, handoff_8)) * 4.0) * tmpvar_94.x), 0.0, 1.0);
  highp vec3 tmpvar_96;
  tmpvar_96 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_95)), 0.0, 1.0);
  light_3 = tmpvar_96;
  highp float tmpvar_97;
  tmpvar_97 = clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0);
  terminator_2 = tmpvar_97;
  mediump vec3 tmpvar_98;
  tmpvar_98 = (light_3 * terminator_2);
  light_3 = tmpvar_98;
  highp vec3 tmpvar_99;
  tmpvar_99 = (tmpvar_89.xyz + (_Albedo * tmpvar_98));
  color_24.xyz = tmpvar_99;
  color_24.xyz = (color_24.xyz * tmpvar_98);
  citydarkoverlay_7.w = (tmpvar_85.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_93 - 0.01)) / 0.99) * 4.0) * tmpvar_94.x), 0.0, 1.0), 0.0, 1.0)));
  color_24.xyz = mix (color_24, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_24.w = 1.0;
  tmpvar_1 = color_24;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 323
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 428
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 objnormal;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
};
#line 418
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 333
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 346
#line 354
#line 368
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 401
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 405
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 409
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp mat4 _Rotation;
#line 413
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 417
uniform sampler2D _CityLightOverlayDetailTex;
#line 439
#line 464
#line 439
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 443
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    #line 447
    o.color = v.color;
    o.objnormal = v.normal;
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    #line 451
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.objnormal);
    xlv_TEXCOORD3 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereCoords);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 323
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 428
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 objnormal;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
};
#line 418
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 333
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 346
#line 354
#line 368
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 401
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 405
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 409
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp mat4 _Rotation;
#line 413
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 417
uniform sampler2D _CityLightOverlayDetailTex;
#line 439
#line 464
#line 453
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 455
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 459
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 317
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    #line 319
    highp float dist = textureProj( _ShadowMapTexture, shadowCoord).x;
    mediump float lightShadowDataX = _LightShadowData.x;
    return max( float((dist > (shadowCoord.z / shadowCoord.w))), lightShadowDataX);
}
#line 464
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    #line 468
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 472
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    highp vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    highp vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    highp vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    #line 476
    highp vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    highp vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    highp vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, (-IN.sphereCoords))) - 0.95)) + 0.5));
    #line 480
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    #line 484
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    #line 488
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    highp vec2 localCoords = encnorm.wy;
    #line 492
    localCoords -= vec2( 0.5);
    localCoords.x *= 0.25;
    localCoords.y *= 0.5;
    uv.x -= 0.5;
    #line 496
    uv += localCoords;
    mediump vec3 norm;
    norm.z = cos((6.28319 * uv.x));
    norm.x = sin((6.28319 * uv.x));
    #line 500
    norm.y = cos((3.14159 * uv.y));
    norm = (-norm);
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    #line 504
    detail = (0.25 * (mix( detail, detailY, vec4( sphereNrm.y)) - 0.5));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (IN.color + mix( detail.xyzw, vec4( 0.0), vec4( detailLevel)));
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    #line 508
    color = mix( color, main, vec4( handoff));
    cityoverlay.w *= xll_saturate_f(floor((IN.color.w + 0.99)));
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    #line 512
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    #line 516
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    #line 520
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    lowp float atten = unitySampleShadow( IN._ShadowCoord);
    #line 524
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    mediump float terminator = xll_saturate_f(floor((1.01 + dot( IN.sphereCoords, _SunDir))));
    light *= terminator;
    #line 528
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (SNdotL - 0.01)) / 0.99) * 4.0) * atten));
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    #line 532
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.objnormal = vec3(xlv_TEXCOORD2);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec2 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec4 _ProjectionParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec3 p_2;
  p_2 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = gl_Normal;
  vec4 tmpvar_4;
  tmpvar_4.x = gl_MultiTexCoord0.x;
  tmpvar_4.y = gl_MultiTexCoord0.y;
  tmpvar_4.z = gl_MultiTexCoord1.x;
  tmpvar_4.w = gl_MultiTexCoord1.y;
  vec4 o_5;
  vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_1 * 0.5);
  vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_1.zw;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xy;
  xlv_TEXCOORD4 = o_5;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_4).xyz);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec2 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec3 norm_2;
  vec2 localCoords_3;
  vec4 cityoverlay_4;
  vec2 uv_5;
  vec4 color_6;
  float r_7;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_5.x = (0.5 + (0.159155 * r_7));
  uv_5.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_11;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_12;
    y_over_x_12 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_13;
    float x_14;
    x_14 = (y_over_x_12 * inversesqrt(((y_over_x_12 * y_over_x_12) + 1.0)));
    s_13 = (sign(x_14) * (1.5708 - (sqrt((1.0 - abs(x_14))) * (1.5708 + (abs(x_14) * (-0.214602 + (abs(x_14) * (0.0865667 + (abs(x_14) * -0.0310296)))))))));
    r_11 = s_13;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_11 = (s_13 + 3.14159);
      } else {
        r_11 = (r_11 - 3.14159);
      };
    };
  } else {
    r_11 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_15;
  tmpvar_15 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_16;
  tmpvar_16 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_17;
  tmpvar_17 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_18;
  tmpvar_18.x = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_18.y = dFdx(tmpvar_15);
  tmpvar_18.z = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_18.w = dFdy(tmpvar_15);
  vec4 tmpvar_19;
  tmpvar_19 = texture2DGradARB (_MainTex, uv_5, tmpvar_18.xy, tmpvar_18.zw);
  float tmpvar_20;
  tmpvar_20 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_21;
  tmpvar_21 = texture2DGradARB (_CityOverlayTex, uv_5, tmpvar_18.xy, tmpvar_18.zw);
  cityoverlay_4.xyz = tmpvar_21.xyz;
  vec2 tmpvar_22;
  tmpvar_22 = (texture2DGradARB (_BumpMap, uv_5, tmpvar_18.xy, tmpvar_18.zw).wy - vec2(0.5, 0.5));
  localCoords_3.x = (tmpvar_22.x * 0.25);
  localCoords_3.y = (tmpvar_22.y * 0.5);
  uv_5.x = (uv_5.x - 0.5);
  vec2 tmpvar_23;
  tmpvar_23 = (uv_5 + localCoords_3);
  uv_5 = tmpvar_23;
  norm_2.z = cos((6.28319 * tmpvar_23.x));
  norm_2.x = sin((6.28319 * tmpvar_23.x));
  norm_2.y = cos((3.14159 * tmpvar_23.y));
  vec3 tmpvar_24;
  tmpvar_24 = -(norm_2);
  norm_2 = tmpvar_24;
  vec3 tmpvar_25;
  tmpvar_25 = abs(xlv_TEXCOORD6);
  float tmpvar_26;
  tmpvar_26 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  cityoverlay_4.w = (tmpvar_21.w * clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0));
  vec4 tmpvar_27;
  tmpvar_27 = (cityoverlay_4 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_25.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_25.yyyy));
  citydarkoverlay_1.xyz = tmpvar_27.xyz;
  vec4 tmpvar_28;
  tmpvar_28 = (cityoverlay_4 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_25.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_25.yyyy));
  vec4 tmpvar_29;
  tmpvar_29 = (mix (mix ((xlv_TEXCOORD1 + mix ((0.25 * (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_20)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_20)), tmpvar_25.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_20)), tmpvar_25.yyyy) - 0.5)), vec4(0.0, 0.0, 0.0, 0.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))), tmpvar_19, vec4(tmpvar_26)), tmpvar_28, tmpvar_28.wwww) * _Color);
  color_6.w = tmpvar_29.w;
  float tmpvar_30;
  tmpvar_30 = clamp (dot (tmpvar_24, -(_SunDir)), 0.0, 1.0);
  float tmpvar_31;
  tmpvar_31 = (texture2D (_LightTexture0, xlv_TEXCOORD3).w * texture2DProj (_ShadowMapTexture, xlv_TEXCOORD4).x);
  vec3 tmpvar_32;
  tmpvar_32 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * mix (clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), tmpvar_30, tmpvar_26)) * 4.0) * tmpvar_31), 0.0, 1.0))), 0.0, 1.0) * clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0));
  color_6.xyz = (tmpvar_29.xyz + (_Albedo * tmpvar_32));
  color_6.xyz = (color_6.xyz * tmpvar_32);
  citydarkoverlay_1.w = (tmpvar_27.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_30 - 0.01)) / 0.99) * 4.0) * tmpvar_31), 0.0, 1.0), 0.0, 1.0)));
  color_6.xyz = mix (color_6, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_6.w = 1.0;
  gl_FragData[0] = color_6;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_ProjectionParams]
Vector 14 [_ScreenParams]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 35 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
def c15, 0.00000000, 0.50000000, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
mov r1.xyz, v2
mov r1.w, c15.x
dp4 r0.z, r1, c6
dp4 r0.x, r1, c4
dp4 r0.y, r1, c5
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o6.xyz, r0.w, r0
dp4 r2.w, v0, c3
dp4 r2.z, v0, c2
mov r0.zw, v4.xyxy
mov r0.xy, v3
dp4 r0.w, r0, r0
rsq r0.w, r0.w
mul r0.xyz, r0.w, r0
mov o7.xyz, -r0
dp4 r0.x, v0, c4
dp4 r0.z, v0, c6
dp4 r0.y, v0, c5
dp4 r0.w, v0, c7
dp4 r2.x, v0, c0
dp4 r2.y, v0, c1
mul r1.xyz, r2.xyww, c15.y
mul r1.y, r1, c13.x
mad o5.xy, r1.z, c14.zwzw, r1
add r1.xyz, -r0, c12
dp4 o4.y, r0, c9
dp3 r1.x, r1, r1
dp4 o4.x, r0, c8
rsq r0.x, r1.x
mov o0, r2
mov o2, v1
mov o5.zw, r2
rcp o1.x, r0.x
mov o3.xyz, v2
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  highp vec3 p_2;
  p_2 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_1;
  highp vec4 tmpvar_4;
  tmpvar_4.x = _glesMultiTexCoord0.x;
  tmpvar_4.y = _glesMultiTexCoord0.y;
  tmpvar_4.z = _glesMultiTexCoord1.x;
  tmpvar_4.w = _glesMultiTexCoord1.y;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_4).xyz);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float terminator_2;
  mediump vec3 light_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float handoff_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec3 norm_11;
  highp vec2 localCoords_12;
  mediump vec4 encnorm_13;
  mediump vec4 citylightoverlaydetailZ_14;
  mediump vec4 citylightoverlaydetailY_15;
  mediump vec4 citylightoverlaydetailX_16;
  mediump vec4 citydarkoverlaydetailZ_17;
  mediump vec4 citydarkoverlaydetailY_18;
  mediump vec4 citydarkoverlaydetailX_19;
  mediump vec4 cityoverlay_20;
  mediump float vertLerp_21;
  mediump vec4 main_22;
  highp vec2 uv_23;
  mediump vec4 color_24;
  highp float r_25;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_23.x = (0.5 + (0.159155 * r_25));
  uv_23.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_29;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_30;
    y_over_x_30 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_31;
    highp float x_32;
    x_32 = (y_over_x_30 * inversesqrt(((y_over_x_30 * y_over_x_30) + 1.0)));
    s_31 = (sign(x_32) * (1.5708 - (sqrt((1.0 - abs(x_32))) * (1.5708 + (abs(x_32) * (-0.214602 + (abs(x_32) * (0.0865667 + (abs(x_32) * -0.0310296)))))))));
    r_29 = s_31;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_29 = (s_31 + 3.14159);
      } else {
        r_29 = (r_29 - 3.14159);
      };
    };
  } else {
    r_29 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_33;
  tmpvar_33 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_34;
  tmpvar_34 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_36;
  tmpvar_36.x = (0.159155 * sqrt(dot (tmpvar_34, tmpvar_34)));
  tmpvar_36.y = dFdx(tmpvar_33);
  tmpvar_36.z = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_36.w = dFdy(tmpvar_33);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2DGradEXT (_MainTex, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  main_22 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD6.zy * _DetailScale);
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD6.zx * _DetailScale);
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.xy * _DetailScale);
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  highp float tmpvar_44;
  tmpvar_44 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_21 = tmpvar_44;
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, tmpvar_41);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, tmpvar_38);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_21));
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailVertTex, tmpvar_42);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailTex, tmpvar_39);
  mediump vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_49, vec4(vertLerp_21));
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailVertTex, tmpvar_43);
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailTex, tmpvar_40);
  mediump vec4 tmpvar_53;
  tmpvar_53 = mix (tmpvar_51, tmpvar_52, vec4(vertLerp_21));
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2DGradEXT (_CityOverlayTex, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  cityoverlay_20 = tmpvar_54;
  lowp vec4 tmpvar_55;
  highp vec2 P_56;
  P_56 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_55 = texture2D (_CityDarkOverlayDetailTex, P_56);
  citydarkoverlaydetailX_19 = tmpvar_55;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityDarkOverlayDetailTex, P_58);
  citydarkoverlaydetailY_18 = tmpvar_57;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_59 = texture2D (_CityDarkOverlayDetailTex, P_60);
  citydarkoverlaydetailZ_17 = tmpvar_59;
  lowp vec4 tmpvar_61;
  highp vec2 P_62;
  P_62 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_61 = texture2D (_CityLightOverlayDetailTex, P_62);
  citylightoverlaydetailX_16 = tmpvar_61;
  lowp vec4 tmpvar_63;
  highp vec2 P_64;
  P_64 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_63 = texture2D (_CityLightOverlayDetailTex, P_64);
  citylightoverlaydetailY_15 = tmpvar_63;
  lowp vec4 tmpvar_65;
  highp vec2 P_66;
  P_66 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_65 = texture2D (_CityLightOverlayDetailTex, P_66);
  citylightoverlaydetailZ_14 = tmpvar_65;
  lowp vec4 tmpvar_67;
  tmpvar_67 = texture2DGradEXT (_BumpMap, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  encnorm_13 = tmpvar_67;
  mediump vec2 tmpvar_68;
  tmpvar_68 = encnorm_13.wy;
  localCoords_12 = tmpvar_68;
  highp vec2 tmpvar_69;
  tmpvar_69 = (localCoords_12 - vec2(0.5, 0.5));
  localCoords_12.x = (tmpvar_69.x * 0.25);
  localCoords_12.y = (tmpvar_69.y * 0.5);
  uv_23.x = (uv_23.x - 0.5);
  highp vec2 tmpvar_70;
  tmpvar_70 = (uv_23 + localCoords_12);
  uv_23 = tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = cos((6.28319 * tmpvar_70.x));
  norm_11.z = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = sin((6.28319 * tmpvar_70.x));
  norm_11.x = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = cos((3.14159 * tmpvar_70.y));
  norm_11.y = tmpvar_73;
  mediump vec3 tmpvar_74;
  tmpvar_74 = -(norm_11);
  norm_11 = tmpvar_74;
  highp vec3 tmpvar_75;
  tmpvar_75 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (tmpvar_53, tmpvar_47, tmpvar_75.xxxx);
  detail_10 = tmpvar_76;
  highp vec4 tmpvar_77;
  tmpvar_77 = (0.25 * (mix (detail_10, tmpvar_50, tmpvar_75.yyyy) - 0.5));
  detail_10 = tmpvar_77;
  highp float tmpvar_78;
  tmpvar_78 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_9 = tmpvar_78;
  mediump vec4 tmpvar_79;
  tmpvar_79 = mix (detail_10, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_9));
  highp vec4 tmpvar_80;
  tmpvar_80 = (xlv_TEXCOORD1 + tmpvar_79);
  color_24 = tmpvar_80;
  highp float tmpvar_81;
  tmpvar_81 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_8 = tmpvar_81;
  highp float tmpvar_82;
  tmpvar_82 = clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0);
  cityoverlay_20.w = (cityoverlay_20.w * tmpvar_82);
  highp vec4 tmpvar_83;
  tmpvar_83 = mix (citydarkoverlaydetailZ_17, citydarkoverlaydetailX_19, tmpvar_75.xxxx);
  detail_10 = tmpvar_83;
  highp vec4 tmpvar_84;
  tmpvar_84 = mix (detail_10, citydarkoverlaydetailY_18, tmpvar_75.yyyy);
  detail_10 = tmpvar_84;
  mediump vec4 tmpvar_85;
  tmpvar_85 = (cityoverlay_20 * detail_10);
  citydarkoverlay_7.xyz = tmpvar_85.xyz;
  highp vec4 tmpvar_86;
  tmpvar_86 = mix (citylightoverlaydetailZ_14, citylightoverlaydetailX_16, tmpvar_75.xxxx);
  detail_10 = tmpvar_86;
  highp vec4 tmpvar_87;
  tmpvar_87 = mix (detail_10, citylightoverlaydetailY_15, tmpvar_75.yyyy);
  detail_10 = tmpvar_87;
  mediump vec4 tmpvar_88;
  tmpvar_88 = (cityoverlay_20 * detail_10);
  mediump vec4 tmpvar_89;
  tmpvar_89 = (mix (mix (color_24, main_22, vec4(handoff_8)), tmpvar_88, tmpvar_88.wwww) * _Color);
  color_24.w = tmpvar_89.w;
  highp vec3 tmpvar_90;
  tmpvar_90 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_90;
  lowp vec3 tmpvar_91;
  tmpvar_91 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_91;
  highp float tmpvar_92;
  tmpvar_92 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_92;
  mediump float tmpvar_93;
  tmpvar_93 = clamp (dot (tmpvar_74, -(_SunDir)), 0.0, 1.0);
  lowp float tmpvar_94;
  mediump float lightShadowDataX_95;
  highp float dist_96;
  lowp float tmpvar_97;
  tmpvar_97 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD4).x;
  dist_96 = tmpvar_97;
  highp float tmpvar_98;
  tmpvar_98 = _LightShadowData.x;
  lightShadowDataX_95 = tmpvar_98;
  highp float tmpvar_99;
  tmpvar_99 = max (float((dist_96 > (xlv_TEXCOORD4.z / xlv_TEXCOORD4.w))), lightShadowDataX_95);
  tmpvar_94 = tmpvar_99;
  lowp float tmpvar_100;
  tmpvar_100 = (texture2D (_LightTexture0, xlv_TEXCOORD3).w * tmpvar_94);
  mediump float tmpvar_101;
  tmpvar_101 = clamp ((((_LightColor0.w * mix (TNdotL_4, tmpvar_93, handoff_8)) * 4.0) * tmpvar_100), 0.0, 1.0);
  highp vec3 tmpvar_102;
  tmpvar_102 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_101)), 0.0, 1.0);
  light_3 = tmpvar_102;
  highp float tmpvar_103;
  tmpvar_103 = clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0);
  terminator_2 = tmpvar_103;
  mediump vec3 tmpvar_104;
  tmpvar_104 = (light_3 * terminator_2);
  light_3 = tmpvar_104;
  highp vec3 tmpvar_105;
  tmpvar_105 = (tmpvar_89.xyz + (_Albedo * tmpvar_104));
  color_24.xyz = tmpvar_105;
  color_24.xyz = (color_24.xyz * tmpvar_104);
  citydarkoverlay_7.w = (tmpvar_85.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_93 - 0.01)) / 0.99) * 4.0) * tmpvar_100), 0.0, 1.0), 0.0, 1.0)));
  color_24.xyz = mix (color_24, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_24.w = 1.0;
  tmpvar_1 = color_24;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  highp vec4 tmpvar_5;
  tmpvar_5.x = _glesMultiTexCoord0.x;
  tmpvar_5.y = _glesMultiTexCoord0.y;
  tmpvar_5.z = _glesMultiTexCoord1.x;
  tmpvar_5.w = _glesMultiTexCoord1.y;
  highp vec4 o_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_8;
  tmpvar_8.x = tmpvar_7.x;
  tmpvar_8.y = (tmpvar_7.y * _ProjectionParams.x);
  o_6.xy = (tmpvar_8 + tmpvar_7.w);
  o_6.zw = tmpvar_2.zw;
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD4 = o_6;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_5).xyz);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float terminator_2;
  mediump vec3 light_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float handoff_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec3 norm_11;
  highp vec2 localCoords_12;
  mediump vec4 encnorm_13;
  mediump vec4 citylightoverlaydetailZ_14;
  mediump vec4 citylightoverlaydetailY_15;
  mediump vec4 citylightoverlaydetailX_16;
  mediump vec4 citydarkoverlaydetailZ_17;
  mediump vec4 citydarkoverlaydetailY_18;
  mediump vec4 citydarkoverlaydetailX_19;
  mediump vec4 cityoverlay_20;
  mediump float vertLerp_21;
  mediump vec4 main_22;
  highp vec2 uv_23;
  mediump vec4 color_24;
  highp float r_25;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_23.x = (0.5 + (0.159155 * r_25));
  uv_23.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_29;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_30;
    y_over_x_30 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_31;
    highp float x_32;
    x_32 = (y_over_x_30 * inversesqrt(((y_over_x_30 * y_over_x_30) + 1.0)));
    s_31 = (sign(x_32) * (1.5708 - (sqrt((1.0 - abs(x_32))) * (1.5708 + (abs(x_32) * (-0.214602 + (abs(x_32) * (0.0865667 + (abs(x_32) * -0.0310296)))))))));
    r_29 = s_31;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_29 = (s_31 + 3.14159);
      } else {
        r_29 = (r_29 - 3.14159);
      };
    };
  } else {
    r_29 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_33;
  tmpvar_33 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_34;
  tmpvar_34 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_36;
  tmpvar_36.x = (0.159155 * sqrt(dot (tmpvar_34, tmpvar_34)));
  tmpvar_36.y = dFdx(tmpvar_33);
  tmpvar_36.z = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_36.w = dFdy(tmpvar_33);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2DGradEXT (_MainTex, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  main_22 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD6.zy * _DetailScale);
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD6.zx * _DetailScale);
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.xy * _DetailScale);
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  highp float tmpvar_44;
  tmpvar_44 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_21 = tmpvar_44;
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, tmpvar_41);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, tmpvar_38);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_21));
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailVertTex, tmpvar_42);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailTex, tmpvar_39);
  mediump vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_49, vec4(vertLerp_21));
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailVertTex, tmpvar_43);
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailTex, tmpvar_40);
  mediump vec4 tmpvar_53;
  tmpvar_53 = mix (tmpvar_51, tmpvar_52, vec4(vertLerp_21));
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2DGradEXT (_CityOverlayTex, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  cityoverlay_20 = tmpvar_54;
  lowp vec4 tmpvar_55;
  highp vec2 P_56;
  P_56 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_55 = texture2D (_CityDarkOverlayDetailTex, P_56);
  citydarkoverlaydetailX_19 = tmpvar_55;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityDarkOverlayDetailTex, P_58);
  citydarkoverlaydetailY_18 = tmpvar_57;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_59 = texture2D (_CityDarkOverlayDetailTex, P_60);
  citydarkoverlaydetailZ_17 = tmpvar_59;
  lowp vec4 tmpvar_61;
  highp vec2 P_62;
  P_62 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_61 = texture2D (_CityLightOverlayDetailTex, P_62);
  citylightoverlaydetailX_16 = tmpvar_61;
  lowp vec4 tmpvar_63;
  highp vec2 P_64;
  P_64 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_63 = texture2D (_CityLightOverlayDetailTex, P_64);
  citylightoverlaydetailY_15 = tmpvar_63;
  lowp vec4 tmpvar_65;
  highp vec2 P_66;
  P_66 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_65 = texture2D (_CityLightOverlayDetailTex, P_66);
  citylightoverlaydetailZ_14 = tmpvar_65;
  lowp vec4 tmpvar_67;
  tmpvar_67 = texture2DGradEXT (_BumpMap, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  encnorm_13 = tmpvar_67;
  mediump vec2 tmpvar_68;
  tmpvar_68 = encnorm_13.wy;
  localCoords_12 = tmpvar_68;
  highp vec2 tmpvar_69;
  tmpvar_69 = (localCoords_12 - vec2(0.5, 0.5));
  localCoords_12.x = (tmpvar_69.x * 0.25);
  localCoords_12.y = (tmpvar_69.y * 0.5);
  uv_23.x = (uv_23.x - 0.5);
  highp vec2 tmpvar_70;
  tmpvar_70 = (uv_23 + localCoords_12);
  uv_23 = tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = cos((6.28319 * tmpvar_70.x));
  norm_11.z = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = sin((6.28319 * tmpvar_70.x));
  norm_11.x = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = cos((3.14159 * tmpvar_70.y));
  norm_11.y = tmpvar_73;
  mediump vec3 tmpvar_74;
  tmpvar_74 = -(norm_11);
  norm_11 = tmpvar_74;
  highp vec3 tmpvar_75;
  tmpvar_75 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (tmpvar_53, tmpvar_47, tmpvar_75.xxxx);
  detail_10 = tmpvar_76;
  highp vec4 tmpvar_77;
  tmpvar_77 = (0.25 * (mix (detail_10, tmpvar_50, tmpvar_75.yyyy) - 0.5));
  detail_10 = tmpvar_77;
  highp float tmpvar_78;
  tmpvar_78 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_9 = tmpvar_78;
  mediump vec4 tmpvar_79;
  tmpvar_79 = mix (detail_10, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_9));
  highp vec4 tmpvar_80;
  tmpvar_80 = (xlv_TEXCOORD1 + tmpvar_79);
  color_24 = tmpvar_80;
  highp float tmpvar_81;
  tmpvar_81 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_8 = tmpvar_81;
  highp float tmpvar_82;
  tmpvar_82 = clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0);
  cityoverlay_20.w = (cityoverlay_20.w * tmpvar_82);
  highp vec4 tmpvar_83;
  tmpvar_83 = mix (citydarkoverlaydetailZ_17, citydarkoverlaydetailX_19, tmpvar_75.xxxx);
  detail_10 = tmpvar_83;
  highp vec4 tmpvar_84;
  tmpvar_84 = mix (detail_10, citydarkoverlaydetailY_18, tmpvar_75.yyyy);
  detail_10 = tmpvar_84;
  mediump vec4 tmpvar_85;
  tmpvar_85 = (cityoverlay_20 * detail_10);
  citydarkoverlay_7.xyz = tmpvar_85.xyz;
  highp vec4 tmpvar_86;
  tmpvar_86 = mix (citylightoverlaydetailZ_14, citylightoverlaydetailX_16, tmpvar_75.xxxx);
  detail_10 = tmpvar_86;
  highp vec4 tmpvar_87;
  tmpvar_87 = mix (detail_10, citylightoverlaydetailY_15, tmpvar_75.yyyy);
  detail_10 = tmpvar_87;
  mediump vec4 tmpvar_88;
  tmpvar_88 = (cityoverlay_20 * detail_10);
  mediump vec4 tmpvar_89;
  tmpvar_89 = (mix (mix (color_24, main_22, vec4(handoff_8)), tmpvar_88, tmpvar_88.wwww) * _Color);
  color_24.w = tmpvar_89.w;
  highp vec3 tmpvar_90;
  tmpvar_90 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_90;
  lowp vec3 tmpvar_91;
  tmpvar_91 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_91;
  highp float tmpvar_92;
  tmpvar_92 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_92;
  mediump float tmpvar_93;
  tmpvar_93 = clamp (dot (tmpvar_74, -(_SunDir)), 0.0, 1.0);
  lowp float tmpvar_94;
  tmpvar_94 = (texture2D (_LightTexture0, xlv_TEXCOORD3).w * texture2DProj (_ShadowMapTexture, xlv_TEXCOORD4).x);
  mediump float tmpvar_95;
  tmpvar_95 = clamp ((((_LightColor0.w * mix (TNdotL_4, tmpvar_93, handoff_8)) * 4.0) * tmpvar_94), 0.0, 1.0);
  highp vec3 tmpvar_96;
  tmpvar_96 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_95)), 0.0, 1.0);
  light_3 = tmpvar_96;
  highp float tmpvar_97;
  tmpvar_97 = clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0);
  terminator_2 = tmpvar_97;
  mediump vec3 tmpvar_98;
  tmpvar_98 = (light_3 * terminator_2);
  light_3 = tmpvar_98;
  highp vec3 tmpvar_99;
  tmpvar_99 = (tmpvar_89.xyz + (_Albedo * tmpvar_98));
  color_24.xyz = tmpvar_99;
  color_24.xyz = (color_24.xyz * tmpvar_98);
  citydarkoverlay_7.w = (tmpvar_85.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_93 - 0.01)) / 0.99) * 4.0) * tmpvar_94), 0.0, 1.0), 0.0, 1.0)));
  color_24.xyz = mix (color_24, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_24.w = 1.0;
  tmpvar_1 = color_24;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 325
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 430
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 objnormal;
    highp vec2 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
};
#line 420
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 323
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 335
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 348
#line 356
#line 370
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 403
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 407
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 411
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp mat4 _Rotation;
#line 415
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 419
uniform sampler2D _CityLightOverlayDetailTex;
#line 442
#line 468
#line 442
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 446
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    #line 450
    o.color = v.color;
    o.objnormal = v.normal;
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xy;
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    #line 455
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec2 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.objnormal);
    xlv_TEXCOORD3 = vec2(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereCoords);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 325
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 430
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 objnormal;
    highp vec2 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
};
#line 420
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 323
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 335
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 348
#line 356
#line 370
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 403
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 407
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 411
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp mat4 _Rotation;
#line 415
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 419
uniform sampler2D _CityLightOverlayDetailTex;
#line 442
#line 468
#line 457
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 459
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 463
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 317
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    #line 319
    highp float dist = textureProj( _ShadowMapTexture, shadowCoord).x;
    mediump float lightShadowDataX = _LightShadowData.x;
    return max( float((dist > (shadowCoord.z / shadowCoord.w))), lightShadowDataX);
}
#line 468
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    #line 472
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 476
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    highp vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    highp vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    highp vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    #line 480
    highp vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    highp vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    highp vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, (-IN.sphereCoords))) - 0.95)) + 0.5));
    #line 484
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    #line 488
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    #line 492
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    highp vec2 localCoords = encnorm.wy;
    #line 496
    localCoords -= vec2( 0.5);
    localCoords.x *= 0.25;
    localCoords.y *= 0.5;
    uv.x -= 0.5;
    #line 500
    uv += localCoords;
    mediump vec3 norm;
    norm.z = cos((6.28319 * uv.x));
    norm.x = sin((6.28319 * uv.x));
    #line 504
    norm.y = cos((3.14159 * uv.y));
    norm = (-norm);
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    #line 508
    detail = (0.25 * (mix( detail, detailY, vec4( sphereNrm.y)) - 0.5));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (IN.color + mix( detail.xyzw, vec4( 0.0), vec4( detailLevel)));
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    #line 512
    color = mix( color, main, vec4( handoff));
    cityoverlay.w *= xll_saturate_f(floor((IN.color.w + 0.99)));
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    #line 516
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    #line 520
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    #line 524
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    lowp float atten = (texture( _LightTexture0, IN._LightCoord).w * unitySampleShadow( IN._ShadowCoord));
    #line 528
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    mediump float terminator = xll_saturate_f(floor((1.01 + dot( IN.sphereCoords, _SunDir))));
    light *= terminator;
    #line 532
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (SNdotL - 0.01)) / 0.99) * 4.0) * atten));
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    #line 536
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec2 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.objnormal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec2(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec4 _LightPositionRange;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec4 tmpvar_3;
  tmpvar_3.x = gl_MultiTexCoord0.x;
  tmpvar_3.y = gl_MultiTexCoord0.y;
  tmpvar_3.z = gl_MultiTexCoord1.x;
  tmpvar_3.w = gl_MultiTexCoord1.y;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_3).xyz);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _LightPositionRange;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec3 norm_2;
  vec2 localCoords_3;
  vec4 cityoverlay_4;
  vec2 uv_5;
  vec4 color_6;
  float r_7;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_5.x = (0.5 + (0.159155 * r_7));
  uv_5.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_11;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_12;
    y_over_x_12 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_13;
    float x_14;
    x_14 = (y_over_x_12 * inversesqrt(((y_over_x_12 * y_over_x_12) + 1.0)));
    s_13 = (sign(x_14) * (1.5708 - (sqrt((1.0 - abs(x_14))) * (1.5708 + (abs(x_14) * (-0.214602 + (abs(x_14) * (0.0865667 + (abs(x_14) * -0.0310296)))))))));
    r_11 = s_13;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_11 = (s_13 + 3.14159);
      } else {
        r_11 = (r_11 - 3.14159);
      };
    };
  } else {
    r_11 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_15;
  tmpvar_15 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_16;
  tmpvar_16 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_17;
  tmpvar_17 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_18;
  tmpvar_18.x = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_18.y = dFdx(tmpvar_15);
  tmpvar_18.z = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_18.w = dFdy(tmpvar_15);
  vec4 tmpvar_19;
  tmpvar_19 = texture2DGradARB (_MainTex, uv_5, tmpvar_18.xy, tmpvar_18.zw);
  float tmpvar_20;
  tmpvar_20 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_21;
  tmpvar_21 = texture2DGradARB (_CityOverlayTex, uv_5, tmpvar_18.xy, tmpvar_18.zw);
  cityoverlay_4.xyz = tmpvar_21.xyz;
  vec2 tmpvar_22;
  tmpvar_22 = (texture2DGradARB (_BumpMap, uv_5, tmpvar_18.xy, tmpvar_18.zw).wy - vec2(0.5, 0.5));
  localCoords_3.x = (tmpvar_22.x * 0.25);
  localCoords_3.y = (tmpvar_22.y * 0.5);
  uv_5.x = (uv_5.x - 0.5);
  vec2 tmpvar_23;
  tmpvar_23 = (uv_5 + localCoords_3);
  uv_5 = tmpvar_23;
  norm_2.z = cos((6.28319 * tmpvar_23.x));
  norm_2.x = sin((6.28319 * tmpvar_23.x));
  norm_2.y = cos((3.14159 * tmpvar_23.y));
  vec3 tmpvar_24;
  tmpvar_24 = -(norm_2);
  norm_2 = tmpvar_24;
  vec3 tmpvar_25;
  tmpvar_25 = abs(xlv_TEXCOORD6);
  float tmpvar_26;
  tmpvar_26 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  cityoverlay_4.w = (tmpvar_21.w * clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0));
  vec4 tmpvar_27;
  tmpvar_27 = (cityoverlay_4 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_25.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_25.yyyy));
  citydarkoverlay_1 = tmpvar_27;
  vec4 tmpvar_28;
  tmpvar_28 = (cityoverlay_4 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_25.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_25.yyyy));
  vec4 tmpvar_29;
  tmpvar_29 = (mix (mix ((xlv_TEXCOORD1 + mix ((0.25 * (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_20)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_20)), tmpvar_25.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_20)), tmpvar_25.yyyy) - 0.5)), vec4(0.0, 0.0, 0.0, 0.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))), tmpvar_19, vec4(tmpvar_26)), tmpvar_28, tmpvar_28.wwww) * _Color);
  color_6 = tmpvar_29;
  float tmpvar_30;
  tmpvar_30 = clamp (dot (tmpvar_24, -(_SunDir)), 0.0, 1.0);
  float tmpvar_31;
  tmpvar_31 = mix (clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), tmpvar_30, tmpvar_26);
  vec4 tmpvar_32;
  tmpvar_32 = texture2D (_LightTexture0, vec2(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)));
  float tmpvar_33;
  tmpvar_33 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  float tmpvar_34;
  tmpvar_34 = dot (textureCube (_ShadowMapTexture, xlv_TEXCOORD4), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  float tmpvar_35;
  if ((tmpvar_34 < tmpvar_33)) {
    tmpvar_35 = _LightShadowData.x;
  } else {
    tmpvar_35 = 1.0;
  };
  float tmpvar_36;
  tmpvar_36 = (tmpvar_32.w * tmpvar_35);
  vec3 tmpvar_37;
  tmpvar_37 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_31) * 4.0) * tmpvar_36), 0.0, 1.0))), 0.0, 1.0) * clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0));
  color_6.xyz = (tmpvar_29.xyz + (_Albedo * tmpvar_37));
  color_6.xyz = (color_6.xyz * tmpvar_37);
  citydarkoverlay_1.w = (tmpvar_27.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_30 - 0.01)) / 0.99) * 4.0) * tmpvar_36), 0.0, 1.0), 0.0, 1.0)));
  color_6.xyz = mix (color_6, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_6.w = 1.0;
  gl_FragData[0] = color_6;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_LightPositionRange]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 32 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
def c14, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
mov r1.xyz, v2
mov r1.w, c14.x
dp4 r2.z, r1, c6
dp4 r2.x, r1, c4
dp4 r2.y, r1, c5
mov r0.zw, v4.xyxy
mov r0.xy, v3
dp4 r2.w, r0, r0
rsq r1.x, r2.w
mul r0.xyz, r1.x, r0
mov o7.xyz, -r0
dp3 r0.w, r2, r2
rsq r0.w, r0.w
mul o6.xyz, r0.w, r2
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
dp4 r0.w, v0, c7
add r1.xyz, -r0, c12
dp3 r1.x, r1, r1
rsq r1.x, r1.x
mov o2, v1
dp4 o4.z, r0, c10
dp4 o4.y, r0, c9
dp4 o4.x, r0, c8
rcp o1.x, r1.x
mov o3.xyz, v2
add o5.xyz, r0, -c13
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  highp vec3 p_2;
  p_2 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_1;
  highp vec4 tmpvar_4;
  tmpvar_4.x = _glesMultiTexCoord0.x;
  tmpvar_4.y = _glesMultiTexCoord0.y;
  tmpvar_4.z = _glesMultiTexCoord1.x;
  tmpvar_4.w = _glesMultiTexCoord1.y;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_4).xyz);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float terminator_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float TNdotL_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump vec4 citydarkoverlay_8;
  mediump float handoff_9;
  mediump float detailLevel_10;
  mediump vec4 detail_11;
  mediump vec3 norm_12;
  highp vec2 localCoords_13;
  mediump vec4 encnorm_14;
  mediump vec4 citylightoverlaydetailZ_15;
  mediump vec4 citylightoverlaydetailY_16;
  mediump vec4 citylightoverlaydetailX_17;
  mediump vec4 citydarkoverlaydetailZ_18;
  mediump vec4 citydarkoverlaydetailY_19;
  mediump vec4 citydarkoverlaydetailX_20;
  mediump vec4 cityoverlay_21;
  mediump float vertLerp_22;
  mediump vec4 main_23;
  highp vec2 uv_24;
  mediump vec4 color_25;
  highp float r_26;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_26));
  uv_24.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_30;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_31;
    y_over_x_31 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_32;
    highp float x_33;
    x_33 = (y_over_x_31 * inversesqrt(((y_over_x_31 * y_over_x_31) + 1.0)));
    s_32 = (sign(x_33) * (1.5708 - (sqrt((1.0 - abs(x_33))) * (1.5708 + (abs(x_33) * (-0.214602 + (abs(x_33) * (0.0865667 + (abs(x_33) * -0.0310296)))))))));
    r_30 = s_32;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_30 = (s_32 + 3.14159);
      } else {
        r_30 = (r_30 - 3.14159);
      };
    };
  } else {
    r_30 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_34;
  tmpvar_34 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_MainTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  main_23 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD6.zy * _DetailScale);
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zx * _DetailScale);
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.xy * _DetailScale);
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  highp float tmpvar_45;
  tmpvar_45 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_22 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailVertTex, tmpvar_42);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailTex, tmpvar_39);
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_47, vec4(vertLerp_22));
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailVertTex, tmpvar_43);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailTex, tmpvar_40);
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (tmpvar_49, tmpvar_50, vec4(vertLerp_22));
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailVertTex, tmpvar_44);
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailTex, tmpvar_41);
  mediump vec4 tmpvar_54;
  tmpvar_54 = mix (tmpvar_52, tmpvar_53, vec4(vertLerp_22));
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2DGradEXT (_CityOverlayTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  cityoverlay_21 = tmpvar_55;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_56 = texture2D (_CityDarkOverlayDetailTex, P_57);
  citydarkoverlaydetailX_20 = tmpvar_56;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityDarkOverlayDetailTex, P_59);
  citydarkoverlaydetailY_19 = tmpvar_58;
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_60 = texture2D (_CityDarkOverlayDetailTex, P_61);
  citydarkoverlaydetailZ_18 = tmpvar_60;
  lowp vec4 tmpvar_62;
  highp vec2 P_63;
  P_63 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_62 = texture2D (_CityLightOverlayDetailTex, P_63);
  citylightoverlaydetailX_17 = tmpvar_62;
  lowp vec4 tmpvar_64;
  highp vec2 P_65;
  P_65 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_64 = texture2D (_CityLightOverlayDetailTex, P_65);
  citylightoverlaydetailY_16 = tmpvar_64;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_66 = texture2D (_CityLightOverlayDetailTex, P_67);
  citylightoverlaydetailZ_15 = tmpvar_66;
  lowp vec4 tmpvar_68;
  tmpvar_68 = texture2DGradEXT (_BumpMap, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  encnorm_14 = tmpvar_68;
  mediump vec2 tmpvar_69;
  tmpvar_69 = encnorm_14.wy;
  localCoords_13 = tmpvar_69;
  highp vec2 tmpvar_70;
  tmpvar_70 = (localCoords_13 - vec2(0.5, 0.5));
  localCoords_13.x = (tmpvar_70.x * 0.25);
  localCoords_13.y = (tmpvar_70.y * 0.5);
  uv_24.x = (uv_24.x - 0.5);
  highp vec2 tmpvar_71;
  tmpvar_71 = (uv_24 + localCoords_13);
  uv_24 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = cos((6.28319 * tmpvar_71.x));
  norm_12.z = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = sin((6.28319 * tmpvar_71.x));
  norm_12.x = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = cos((3.14159 * tmpvar_71.y));
  norm_12.y = tmpvar_74;
  mediump vec3 tmpvar_75;
  tmpvar_75 = -(norm_12);
  norm_12 = tmpvar_75;
  highp vec3 tmpvar_76;
  tmpvar_76 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (tmpvar_54, tmpvar_48, tmpvar_76.xxxx);
  detail_11 = tmpvar_77;
  highp vec4 tmpvar_78;
  tmpvar_78 = (0.25 * (mix (detail_11, tmpvar_51, tmpvar_76.yyyy) - 0.5));
  detail_11 = tmpvar_78;
  highp float tmpvar_79;
  tmpvar_79 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_10 = tmpvar_79;
  mediump vec4 tmpvar_80;
  tmpvar_80 = mix (detail_11, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_10));
  highp vec4 tmpvar_81;
  tmpvar_81 = (xlv_TEXCOORD1 + tmpvar_80);
  color_25 = tmpvar_81;
  highp float tmpvar_82;
  tmpvar_82 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_9 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0);
  cityoverlay_21.w = (cityoverlay_21.w * tmpvar_83);
  highp vec4 tmpvar_84;
  tmpvar_84 = mix (citydarkoverlaydetailZ_18, citydarkoverlaydetailX_20, tmpvar_76.xxxx);
  detail_11 = tmpvar_84;
  highp vec4 tmpvar_85;
  tmpvar_85 = mix (detail_11, citydarkoverlaydetailY_19, tmpvar_76.yyyy);
  detail_11 = tmpvar_85;
  mediump vec4 tmpvar_86;
  tmpvar_86 = (cityoverlay_21 * detail_11);
  citydarkoverlay_8 = tmpvar_86;
  highp vec4 tmpvar_87;
  tmpvar_87 = mix (citylightoverlaydetailZ_15, citylightoverlaydetailX_17, tmpvar_76.xxxx);
  detail_11 = tmpvar_87;
  highp vec4 tmpvar_88;
  tmpvar_88 = mix (detail_11, citylightoverlaydetailY_16, tmpvar_76.yyyy);
  detail_11 = tmpvar_88;
  mediump vec4 tmpvar_89;
  tmpvar_89 = (cityoverlay_21 * detail_11);
  mediump vec4 tmpvar_90;
  tmpvar_90 = (mix (mix (color_25, main_23, vec4(handoff_9)), tmpvar_89, tmpvar_89.wwww) * _Color);
  color_25 = tmpvar_90;
  highp vec3 tmpvar_91;
  tmpvar_91 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_91;
  highp vec3 tmpvar_92;
  tmpvar_92 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_92;
  highp float tmpvar_93;
  tmpvar_93 = clamp (dot (xlv_TEXCOORD5, lightDirection_6), 0.0, 1.0);
  TNdotL_5 = tmpvar_93;
  mediump float tmpvar_94;
  tmpvar_94 = clamp (dot (tmpvar_75, -(_SunDir)), 0.0, 1.0);
  mediump float tmpvar_95;
  tmpvar_95 = mix (TNdotL_5, tmpvar_94, handoff_9);
  highp float tmpvar_96;
  tmpvar_96 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_97;
  tmpvar_97 = texture2D (_LightTexture0, vec2(tmpvar_96));
  highp float tmpvar_98;
  tmpvar_98 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  highp vec4 packDist_99;
  lowp vec4 tmpvar_100;
  tmpvar_100 = textureCube (_ShadowMapTexture, xlv_TEXCOORD4);
  packDist_99 = tmpvar_100;
  highp float tmpvar_101;
  tmpvar_101 = dot (packDist_99, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp float tmpvar_102;
  if ((tmpvar_101 < tmpvar_98)) {
    tmpvar_102 = _LightShadowData.x;
  } else {
    tmpvar_102 = 1.0;
  };
  highp float tmpvar_103;
  tmpvar_103 = (tmpvar_97.w * tmpvar_102);
  atten_4 = tmpvar_103;
  mediump float tmpvar_104;
  tmpvar_104 = clamp ((((_LightColor0.w * tmpvar_95) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_105;
  tmpvar_105 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_104)), 0.0, 1.0);
  light_3 = tmpvar_105;
  highp float tmpvar_106;
  tmpvar_106 = clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0);
  terminator_2 = tmpvar_106;
  mediump vec3 tmpvar_107;
  tmpvar_107 = (light_3 * terminator_2);
  light_3 = tmpvar_107;
  highp vec3 tmpvar_108;
  tmpvar_108 = (tmpvar_90.xyz + (_Albedo * tmpvar_107));
  color_25.xyz = tmpvar_108;
  color_25.xyz = (color_25.xyz * tmpvar_107);
  citydarkoverlay_8.w = (tmpvar_86.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_94 - 0.01)) / 0.99) * 4.0) * atten_4), 0.0, 1.0), 0.0, 1.0)));
  color_25.xyz = mix (color_25, citydarkoverlay_8, citydarkoverlay_8.wwww).xyz;
  color_25.w = 1.0;
  tmpvar_1 = color_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  highp vec3 p_2;
  p_2 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_1;
  highp vec4 tmpvar_4;
  tmpvar_4.x = _glesMultiTexCoord0.x;
  tmpvar_4.y = _glesMultiTexCoord0.y;
  tmpvar_4.z = _glesMultiTexCoord1.x;
  tmpvar_4.w = _glesMultiTexCoord1.y;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_4).xyz);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float terminator_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float TNdotL_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump vec4 citydarkoverlay_8;
  mediump float handoff_9;
  mediump float detailLevel_10;
  mediump vec4 detail_11;
  mediump vec3 norm_12;
  highp vec2 localCoords_13;
  mediump vec4 encnorm_14;
  mediump vec4 citylightoverlaydetailZ_15;
  mediump vec4 citylightoverlaydetailY_16;
  mediump vec4 citylightoverlaydetailX_17;
  mediump vec4 citydarkoverlaydetailZ_18;
  mediump vec4 citydarkoverlaydetailY_19;
  mediump vec4 citydarkoverlaydetailX_20;
  mediump vec4 cityoverlay_21;
  mediump float vertLerp_22;
  mediump vec4 main_23;
  highp vec2 uv_24;
  mediump vec4 color_25;
  highp float r_26;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_26));
  uv_24.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_30;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_31;
    y_over_x_31 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_32;
    highp float x_33;
    x_33 = (y_over_x_31 * inversesqrt(((y_over_x_31 * y_over_x_31) + 1.0)));
    s_32 = (sign(x_33) * (1.5708 - (sqrt((1.0 - abs(x_33))) * (1.5708 + (abs(x_33) * (-0.214602 + (abs(x_33) * (0.0865667 + (abs(x_33) * -0.0310296)))))))));
    r_30 = s_32;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_30 = (s_32 + 3.14159);
      } else {
        r_30 = (r_30 - 3.14159);
      };
    };
  } else {
    r_30 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_34;
  tmpvar_34 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_MainTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  main_23 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD6.zy * _DetailScale);
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zx * _DetailScale);
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.xy * _DetailScale);
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  highp float tmpvar_45;
  tmpvar_45 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_22 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailVertTex, tmpvar_42);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailTex, tmpvar_39);
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_47, vec4(vertLerp_22));
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailVertTex, tmpvar_43);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailTex, tmpvar_40);
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (tmpvar_49, tmpvar_50, vec4(vertLerp_22));
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailVertTex, tmpvar_44);
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailTex, tmpvar_41);
  mediump vec4 tmpvar_54;
  tmpvar_54 = mix (tmpvar_52, tmpvar_53, vec4(vertLerp_22));
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2DGradEXT (_CityOverlayTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  cityoverlay_21 = tmpvar_55;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_56 = texture2D (_CityDarkOverlayDetailTex, P_57);
  citydarkoverlaydetailX_20 = tmpvar_56;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityDarkOverlayDetailTex, P_59);
  citydarkoverlaydetailY_19 = tmpvar_58;
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_60 = texture2D (_CityDarkOverlayDetailTex, P_61);
  citydarkoverlaydetailZ_18 = tmpvar_60;
  lowp vec4 tmpvar_62;
  highp vec2 P_63;
  P_63 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_62 = texture2D (_CityLightOverlayDetailTex, P_63);
  citylightoverlaydetailX_17 = tmpvar_62;
  lowp vec4 tmpvar_64;
  highp vec2 P_65;
  P_65 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_64 = texture2D (_CityLightOverlayDetailTex, P_65);
  citylightoverlaydetailY_16 = tmpvar_64;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_66 = texture2D (_CityLightOverlayDetailTex, P_67);
  citylightoverlaydetailZ_15 = tmpvar_66;
  lowp vec4 tmpvar_68;
  tmpvar_68 = texture2DGradEXT (_BumpMap, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  encnorm_14 = tmpvar_68;
  mediump vec2 tmpvar_69;
  tmpvar_69 = encnorm_14.wy;
  localCoords_13 = tmpvar_69;
  highp vec2 tmpvar_70;
  tmpvar_70 = (localCoords_13 - vec2(0.5, 0.5));
  localCoords_13.x = (tmpvar_70.x * 0.25);
  localCoords_13.y = (tmpvar_70.y * 0.5);
  uv_24.x = (uv_24.x - 0.5);
  highp vec2 tmpvar_71;
  tmpvar_71 = (uv_24 + localCoords_13);
  uv_24 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = cos((6.28319 * tmpvar_71.x));
  norm_12.z = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = sin((6.28319 * tmpvar_71.x));
  norm_12.x = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = cos((3.14159 * tmpvar_71.y));
  norm_12.y = tmpvar_74;
  mediump vec3 tmpvar_75;
  tmpvar_75 = -(norm_12);
  norm_12 = tmpvar_75;
  highp vec3 tmpvar_76;
  tmpvar_76 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (tmpvar_54, tmpvar_48, tmpvar_76.xxxx);
  detail_11 = tmpvar_77;
  highp vec4 tmpvar_78;
  tmpvar_78 = (0.25 * (mix (detail_11, tmpvar_51, tmpvar_76.yyyy) - 0.5));
  detail_11 = tmpvar_78;
  highp float tmpvar_79;
  tmpvar_79 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_10 = tmpvar_79;
  mediump vec4 tmpvar_80;
  tmpvar_80 = mix (detail_11, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_10));
  highp vec4 tmpvar_81;
  tmpvar_81 = (xlv_TEXCOORD1 + tmpvar_80);
  color_25 = tmpvar_81;
  highp float tmpvar_82;
  tmpvar_82 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_9 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0);
  cityoverlay_21.w = (cityoverlay_21.w * tmpvar_83);
  highp vec4 tmpvar_84;
  tmpvar_84 = mix (citydarkoverlaydetailZ_18, citydarkoverlaydetailX_20, tmpvar_76.xxxx);
  detail_11 = tmpvar_84;
  highp vec4 tmpvar_85;
  tmpvar_85 = mix (detail_11, citydarkoverlaydetailY_19, tmpvar_76.yyyy);
  detail_11 = tmpvar_85;
  mediump vec4 tmpvar_86;
  tmpvar_86 = (cityoverlay_21 * detail_11);
  citydarkoverlay_8 = tmpvar_86;
  highp vec4 tmpvar_87;
  tmpvar_87 = mix (citylightoverlaydetailZ_15, citylightoverlaydetailX_17, tmpvar_76.xxxx);
  detail_11 = tmpvar_87;
  highp vec4 tmpvar_88;
  tmpvar_88 = mix (detail_11, citylightoverlaydetailY_16, tmpvar_76.yyyy);
  detail_11 = tmpvar_88;
  mediump vec4 tmpvar_89;
  tmpvar_89 = (cityoverlay_21 * detail_11);
  mediump vec4 tmpvar_90;
  tmpvar_90 = (mix (mix (color_25, main_23, vec4(handoff_9)), tmpvar_89, tmpvar_89.wwww) * _Color);
  color_25 = tmpvar_90;
  highp vec3 tmpvar_91;
  tmpvar_91 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_91;
  highp vec3 tmpvar_92;
  tmpvar_92 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_92;
  highp float tmpvar_93;
  tmpvar_93 = clamp (dot (xlv_TEXCOORD5, lightDirection_6), 0.0, 1.0);
  TNdotL_5 = tmpvar_93;
  mediump float tmpvar_94;
  tmpvar_94 = clamp (dot (tmpvar_75, -(_SunDir)), 0.0, 1.0);
  mediump float tmpvar_95;
  tmpvar_95 = mix (TNdotL_5, tmpvar_94, handoff_9);
  highp float tmpvar_96;
  tmpvar_96 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_97;
  tmpvar_97 = texture2D (_LightTexture0, vec2(tmpvar_96));
  highp float tmpvar_98;
  tmpvar_98 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  highp vec4 packDist_99;
  lowp vec4 tmpvar_100;
  tmpvar_100 = textureCube (_ShadowMapTexture, xlv_TEXCOORD4);
  packDist_99 = tmpvar_100;
  highp float tmpvar_101;
  tmpvar_101 = dot (packDist_99, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp float tmpvar_102;
  if ((tmpvar_101 < tmpvar_98)) {
    tmpvar_102 = _LightShadowData.x;
  } else {
    tmpvar_102 = 1.0;
  };
  highp float tmpvar_103;
  tmpvar_103 = (tmpvar_97.w * tmpvar_102);
  atten_4 = tmpvar_103;
  mediump float tmpvar_104;
  tmpvar_104 = clamp ((((_LightColor0.w * tmpvar_95) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_105;
  tmpvar_105 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_104)), 0.0, 1.0);
  light_3 = tmpvar_105;
  highp float tmpvar_106;
  tmpvar_106 = clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0);
  terminator_2 = tmpvar_106;
  mediump vec3 tmpvar_107;
  tmpvar_107 = (light_3 * terminator_2);
  light_3 = tmpvar_107;
  highp vec3 tmpvar_108;
  tmpvar_108 = (tmpvar_90.xyz + (_Albedo * tmpvar_107));
  color_25.xyz = tmpvar_108;
  color_25.xyz = (color_25.xyz * tmpvar_107);
  citydarkoverlay_8.w = (tmpvar_86.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_94 - 0.01)) / 0.99) * 4.0) * atten_4), 0.0, 1.0), 0.0, 1.0)));
  color_25.xyz = mix (color_25, citydarkoverlay_8, citydarkoverlay_8.wwww).xyz;
  color_25.w = 1.0;
  tmpvar_1 = color_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 330
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 435
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 objnormal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
};
#line 425
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 340
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 353
#line 361
#line 375
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 408
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 412
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 416
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp mat4 _Rotation;
#line 420
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 424
uniform sampler2D _CityLightOverlayDetailTex;
#line 447
#line 473
#line 447
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 451
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    #line 455
    o.color = v.color;
    o.objnormal = v.normal;
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    o._ShadowCoord = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    #line 460
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.objnormal);
    xlv_TEXCOORD3 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereCoords);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 330
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 435
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 objnormal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
};
#line 425
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 340
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 353
#line 361
#line 375
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 408
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 412
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 416
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp mat4 _Rotation;
#line 420
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 424
uniform sampler2D _CityLightOverlayDetailTex;
#line 447
#line 473
#line 462
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 464
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 468
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 215
highp float DecodeFloatRGBA( in highp vec4 enc ) {
    highp vec4 kDecodeDot = vec4( 1.0, 0.00392157, 1.53787e-05, 6.22737e-09);
    return dot( enc, kDecodeDot);
}
#line 316
highp float SampleCubeDistance( in highp vec3 vec ) {
    highp vec4 packDist = texture( _ShadowMapTexture, vec);
    #line 319
    return DecodeFloatRGBA( packDist);
}
#line 321
highp float unityCubeShadow( in highp vec3 vec ) {
    #line 323
    highp float mydist = (length(vec) * _LightPositionRange.w);
    mydist *= 0.97;
    highp float dist = SampleCubeDistance( vec);
    return (( (dist < mydist) ) ? ( _LightShadowData.x ) : ( 1.0 ));
}
#line 473
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    #line 477
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 481
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    highp vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    highp vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    highp vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    #line 485
    highp vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    highp vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    highp vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, (-IN.sphereCoords))) - 0.95)) + 0.5));
    #line 489
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    #line 493
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    #line 497
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    highp vec2 localCoords = encnorm.wy;
    #line 501
    localCoords -= vec2( 0.5);
    localCoords.x *= 0.25;
    localCoords.y *= 0.5;
    uv.x -= 0.5;
    #line 505
    uv += localCoords;
    mediump vec3 norm;
    norm.z = cos((6.28319 * uv.x));
    norm.x = sin((6.28319 * uv.x));
    #line 509
    norm.y = cos((3.14159 * uv.y));
    norm = (-norm);
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    #line 513
    detail = (0.25 * (mix( detail, detailY, vec4( sphereNrm.y)) - 0.5));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (IN.color + mix( detail.xyzw, vec4( 0.0), vec4( detailLevel)));
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    #line 517
    color = mix( color, main, vec4( handoff));
    cityoverlay.w *= xll_saturate_f(floor((IN.color.w + 0.99)));
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    #line 521
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    #line 525
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    #line 529
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    lowp float atten = (texture( _LightTexture0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * unityCubeShadow( IN._ShadowCoord));
    #line 533
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    mediump float terminator = xll_saturate_f(floor((1.01 + dot( IN.sphereCoords, _SunDir))));
    light *= terminator;
    #line 537
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (SNdotL - 0.01)) / 0.99) * 4.0) * atten));
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    #line 541
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.objnormal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec4 _LightPositionRange;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec4 tmpvar_3;
  tmpvar_3.x = gl_MultiTexCoord0.x;
  tmpvar_3.y = gl_MultiTexCoord0.y;
  tmpvar_3.z = gl_MultiTexCoord1.x;
  tmpvar_3.w = gl_MultiTexCoord1.y;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_3).xyz);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _LightPositionRange;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec3 norm_2;
  vec2 localCoords_3;
  vec4 cityoverlay_4;
  vec2 uv_5;
  vec4 color_6;
  float r_7;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_5.x = (0.5 + (0.159155 * r_7));
  uv_5.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_11;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_12;
    y_over_x_12 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_13;
    float x_14;
    x_14 = (y_over_x_12 * inversesqrt(((y_over_x_12 * y_over_x_12) + 1.0)));
    s_13 = (sign(x_14) * (1.5708 - (sqrt((1.0 - abs(x_14))) * (1.5708 + (abs(x_14) * (-0.214602 + (abs(x_14) * (0.0865667 + (abs(x_14) * -0.0310296)))))))));
    r_11 = s_13;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_11 = (s_13 + 3.14159);
      } else {
        r_11 = (r_11 - 3.14159);
      };
    };
  } else {
    r_11 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_15;
  tmpvar_15 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_16;
  tmpvar_16 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_17;
  tmpvar_17 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_18;
  tmpvar_18.x = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_18.y = dFdx(tmpvar_15);
  tmpvar_18.z = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_18.w = dFdy(tmpvar_15);
  vec4 tmpvar_19;
  tmpvar_19 = texture2DGradARB (_MainTex, uv_5, tmpvar_18.xy, tmpvar_18.zw);
  float tmpvar_20;
  tmpvar_20 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_21;
  tmpvar_21 = texture2DGradARB (_CityOverlayTex, uv_5, tmpvar_18.xy, tmpvar_18.zw);
  cityoverlay_4.xyz = tmpvar_21.xyz;
  vec2 tmpvar_22;
  tmpvar_22 = (texture2DGradARB (_BumpMap, uv_5, tmpvar_18.xy, tmpvar_18.zw).wy - vec2(0.5, 0.5));
  localCoords_3.x = (tmpvar_22.x * 0.25);
  localCoords_3.y = (tmpvar_22.y * 0.5);
  uv_5.x = (uv_5.x - 0.5);
  vec2 tmpvar_23;
  tmpvar_23 = (uv_5 + localCoords_3);
  uv_5 = tmpvar_23;
  norm_2.z = cos((6.28319 * tmpvar_23.x));
  norm_2.x = sin((6.28319 * tmpvar_23.x));
  norm_2.y = cos((3.14159 * tmpvar_23.y));
  vec3 tmpvar_24;
  tmpvar_24 = -(norm_2);
  norm_2 = tmpvar_24;
  vec3 tmpvar_25;
  tmpvar_25 = abs(xlv_TEXCOORD6);
  float tmpvar_26;
  tmpvar_26 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  cityoverlay_4.w = (tmpvar_21.w * clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0));
  vec4 tmpvar_27;
  tmpvar_27 = (cityoverlay_4 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_25.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_25.yyyy));
  citydarkoverlay_1 = tmpvar_27;
  vec4 tmpvar_28;
  tmpvar_28 = (cityoverlay_4 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_25.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_25.yyyy));
  vec4 tmpvar_29;
  tmpvar_29 = (mix (mix ((xlv_TEXCOORD1 + mix ((0.25 * (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_20)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_20)), tmpvar_25.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_20)), tmpvar_25.yyyy) - 0.5)), vec4(0.0, 0.0, 0.0, 0.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))), tmpvar_19, vec4(tmpvar_26)), tmpvar_28, tmpvar_28.wwww) * _Color);
  color_6 = tmpvar_29;
  float tmpvar_30;
  tmpvar_30 = clamp (dot (tmpvar_24, -(_SunDir)), 0.0, 1.0);
  float tmpvar_31;
  tmpvar_31 = mix (clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), tmpvar_30, tmpvar_26);
  vec4 tmpvar_32;
  tmpvar_32 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)));
  vec4 tmpvar_33;
  tmpvar_33 = textureCube (_LightTexture0, xlv_TEXCOORD3);
  float tmpvar_34;
  tmpvar_34 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  float tmpvar_35;
  tmpvar_35 = dot (textureCube (_ShadowMapTexture, xlv_TEXCOORD4), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  float tmpvar_36;
  if ((tmpvar_35 < tmpvar_34)) {
    tmpvar_36 = _LightShadowData.x;
  } else {
    tmpvar_36 = 1.0;
  };
  float tmpvar_37;
  tmpvar_37 = ((tmpvar_32.w * tmpvar_33.w) * tmpvar_36);
  vec3 tmpvar_38;
  tmpvar_38 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_31) * 4.0) * tmpvar_37), 0.0, 1.0))), 0.0, 1.0) * clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0));
  color_6.xyz = (tmpvar_29.xyz + (_Albedo * tmpvar_38));
  color_6.xyz = (color_6.xyz * tmpvar_38);
  citydarkoverlay_1.w = (tmpvar_27.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_30 - 0.01)) / 0.99) * 4.0) * tmpvar_37), 0.0, 1.0), 0.0, 1.0)));
  color_6.xyz = mix (color_6, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_6.w = 1.0;
  gl_FragData[0] = color_6;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_LightPositionRange]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 32 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
def c14, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
mov r1.xyz, v2
mov r1.w, c14.x
dp4 r2.z, r1, c6
dp4 r2.x, r1, c4
dp4 r2.y, r1, c5
mov r0.zw, v4.xyxy
mov r0.xy, v3
dp4 r2.w, r0, r0
rsq r1.x, r2.w
mul r0.xyz, r1.x, r0
mov o7.xyz, -r0
dp3 r0.w, r2, r2
rsq r0.w, r0.w
mul o6.xyz, r0.w, r2
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
dp4 r0.w, v0, c7
add r1.xyz, -r0, c12
dp3 r1.x, r1, r1
rsq r1.x, r1.x
mov o2, v1
dp4 o4.z, r0, c10
dp4 o4.y, r0, c9
dp4 o4.x, r0, c8
rcp o1.x, r1.x
mov o3.xyz, v2
add o5.xyz, r0, -c13
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  highp vec3 p_2;
  p_2 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_1;
  highp vec4 tmpvar_4;
  tmpvar_4.x = _glesMultiTexCoord0.x;
  tmpvar_4.y = _glesMultiTexCoord0.y;
  tmpvar_4.z = _glesMultiTexCoord1.x;
  tmpvar_4.w = _glesMultiTexCoord1.y;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_4).xyz);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float terminator_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float TNdotL_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump vec4 citydarkoverlay_8;
  mediump float handoff_9;
  mediump float detailLevel_10;
  mediump vec4 detail_11;
  mediump vec3 norm_12;
  highp vec2 localCoords_13;
  mediump vec4 encnorm_14;
  mediump vec4 citylightoverlaydetailZ_15;
  mediump vec4 citylightoverlaydetailY_16;
  mediump vec4 citylightoverlaydetailX_17;
  mediump vec4 citydarkoverlaydetailZ_18;
  mediump vec4 citydarkoverlaydetailY_19;
  mediump vec4 citydarkoverlaydetailX_20;
  mediump vec4 cityoverlay_21;
  mediump float vertLerp_22;
  mediump vec4 main_23;
  highp vec2 uv_24;
  mediump vec4 color_25;
  highp float r_26;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_26));
  uv_24.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_30;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_31;
    y_over_x_31 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_32;
    highp float x_33;
    x_33 = (y_over_x_31 * inversesqrt(((y_over_x_31 * y_over_x_31) + 1.0)));
    s_32 = (sign(x_33) * (1.5708 - (sqrt((1.0 - abs(x_33))) * (1.5708 + (abs(x_33) * (-0.214602 + (abs(x_33) * (0.0865667 + (abs(x_33) * -0.0310296)))))))));
    r_30 = s_32;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_30 = (s_32 + 3.14159);
      } else {
        r_30 = (r_30 - 3.14159);
      };
    };
  } else {
    r_30 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_34;
  tmpvar_34 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_MainTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  main_23 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD6.zy * _DetailScale);
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zx * _DetailScale);
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.xy * _DetailScale);
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  highp float tmpvar_45;
  tmpvar_45 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_22 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailVertTex, tmpvar_42);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailTex, tmpvar_39);
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_47, vec4(vertLerp_22));
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailVertTex, tmpvar_43);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailTex, tmpvar_40);
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (tmpvar_49, tmpvar_50, vec4(vertLerp_22));
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailVertTex, tmpvar_44);
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailTex, tmpvar_41);
  mediump vec4 tmpvar_54;
  tmpvar_54 = mix (tmpvar_52, tmpvar_53, vec4(vertLerp_22));
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2DGradEXT (_CityOverlayTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  cityoverlay_21 = tmpvar_55;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_56 = texture2D (_CityDarkOverlayDetailTex, P_57);
  citydarkoverlaydetailX_20 = tmpvar_56;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityDarkOverlayDetailTex, P_59);
  citydarkoverlaydetailY_19 = tmpvar_58;
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_60 = texture2D (_CityDarkOverlayDetailTex, P_61);
  citydarkoverlaydetailZ_18 = tmpvar_60;
  lowp vec4 tmpvar_62;
  highp vec2 P_63;
  P_63 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_62 = texture2D (_CityLightOverlayDetailTex, P_63);
  citylightoverlaydetailX_17 = tmpvar_62;
  lowp vec4 tmpvar_64;
  highp vec2 P_65;
  P_65 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_64 = texture2D (_CityLightOverlayDetailTex, P_65);
  citylightoverlaydetailY_16 = tmpvar_64;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_66 = texture2D (_CityLightOverlayDetailTex, P_67);
  citylightoverlaydetailZ_15 = tmpvar_66;
  lowp vec4 tmpvar_68;
  tmpvar_68 = texture2DGradEXT (_BumpMap, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  encnorm_14 = tmpvar_68;
  mediump vec2 tmpvar_69;
  tmpvar_69 = encnorm_14.wy;
  localCoords_13 = tmpvar_69;
  highp vec2 tmpvar_70;
  tmpvar_70 = (localCoords_13 - vec2(0.5, 0.5));
  localCoords_13.x = (tmpvar_70.x * 0.25);
  localCoords_13.y = (tmpvar_70.y * 0.5);
  uv_24.x = (uv_24.x - 0.5);
  highp vec2 tmpvar_71;
  tmpvar_71 = (uv_24 + localCoords_13);
  uv_24 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = cos((6.28319 * tmpvar_71.x));
  norm_12.z = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = sin((6.28319 * tmpvar_71.x));
  norm_12.x = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = cos((3.14159 * tmpvar_71.y));
  norm_12.y = tmpvar_74;
  mediump vec3 tmpvar_75;
  tmpvar_75 = -(norm_12);
  norm_12 = tmpvar_75;
  highp vec3 tmpvar_76;
  tmpvar_76 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (tmpvar_54, tmpvar_48, tmpvar_76.xxxx);
  detail_11 = tmpvar_77;
  highp vec4 tmpvar_78;
  tmpvar_78 = (0.25 * (mix (detail_11, tmpvar_51, tmpvar_76.yyyy) - 0.5));
  detail_11 = tmpvar_78;
  highp float tmpvar_79;
  tmpvar_79 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_10 = tmpvar_79;
  mediump vec4 tmpvar_80;
  tmpvar_80 = mix (detail_11, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_10));
  highp vec4 tmpvar_81;
  tmpvar_81 = (xlv_TEXCOORD1 + tmpvar_80);
  color_25 = tmpvar_81;
  highp float tmpvar_82;
  tmpvar_82 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_9 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0);
  cityoverlay_21.w = (cityoverlay_21.w * tmpvar_83);
  highp vec4 tmpvar_84;
  tmpvar_84 = mix (citydarkoverlaydetailZ_18, citydarkoverlaydetailX_20, tmpvar_76.xxxx);
  detail_11 = tmpvar_84;
  highp vec4 tmpvar_85;
  tmpvar_85 = mix (detail_11, citydarkoverlaydetailY_19, tmpvar_76.yyyy);
  detail_11 = tmpvar_85;
  mediump vec4 tmpvar_86;
  tmpvar_86 = (cityoverlay_21 * detail_11);
  citydarkoverlay_8 = tmpvar_86;
  highp vec4 tmpvar_87;
  tmpvar_87 = mix (citylightoverlaydetailZ_15, citylightoverlaydetailX_17, tmpvar_76.xxxx);
  detail_11 = tmpvar_87;
  highp vec4 tmpvar_88;
  tmpvar_88 = mix (detail_11, citylightoverlaydetailY_16, tmpvar_76.yyyy);
  detail_11 = tmpvar_88;
  mediump vec4 tmpvar_89;
  tmpvar_89 = (cityoverlay_21 * detail_11);
  mediump vec4 tmpvar_90;
  tmpvar_90 = (mix (mix (color_25, main_23, vec4(handoff_9)), tmpvar_89, tmpvar_89.wwww) * _Color);
  color_25 = tmpvar_90;
  highp vec3 tmpvar_91;
  tmpvar_91 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_91;
  highp vec3 tmpvar_92;
  tmpvar_92 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_92;
  highp float tmpvar_93;
  tmpvar_93 = clamp (dot (xlv_TEXCOORD5, lightDirection_6), 0.0, 1.0);
  TNdotL_5 = tmpvar_93;
  mediump float tmpvar_94;
  tmpvar_94 = clamp (dot (tmpvar_75, -(_SunDir)), 0.0, 1.0);
  mediump float tmpvar_95;
  tmpvar_95 = mix (TNdotL_5, tmpvar_94, handoff_9);
  highp float tmpvar_96;
  tmpvar_96 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_97;
  tmpvar_97 = texture2D (_LightTextureB0, vec2(tmpvar_96));
  lowp vec4 tmpvar_98;
  tmpvar_98 = textureCube (_LightTexture0, xlv_TEXCOORD3);
  highp float tmpvar_99;
  tmpvar_99 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  highp vec4 packDist_100;
  lowp vec4 tmpvar_101;
  tmpvar_101 = textureCube (_ShadowMapTexture, xlv_TEXCOORD4);
  packDist_100 = tmpvar_101;
  highp float tmpvar_102;
  tmpvar_102 = dot (packDist_100, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp float tmpvar_103;
  if ((tmpvar_102 < tmpvar_99)) {
    tmpvar_103 = _LightShadowData.x;
  } else {
    tmpvar_103 = 1.0;
  };
  highp float tmpvar_104;
  tmpvar_104 = ((tmpvar_97.w * tmpvar_98.w) * tmpvar_103);
  atten_4 = tmpvar_104;
  mediump float tmpvar_105;
  tmpvar_105 = clamp ((((_LightColor0.w * tmpvar_95) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_106;
  tmpvar_106 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_105)), 0.0, 1.0);
  light_3 = tmpvar_106;
  highp float tmpvar_107;
  tmpvar_107 = clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0);
  terminator_2 = tmpvar_107;
  mediump vec3 tmpvar_108;
  tmpvar_108 = (light_3 * terminator_2);
  light_3 = tmpvar_108;
  highp vec3 tmpvar_109;
  tmpvar_109 = (tmpvar_90.xyz + (_Albedo * tmpvar_108));
  color_25.xyz = tmpvar_109;
  color_25.xyz = (color_25.xyz * tmpvar_108);
  citydarkoverlay_8.w = (tmpvar_86.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_94 - 0.01)) / 0.99) * 4.0) * atten_4), 0.0, 1.0), 0.0, 1.0)));
  color_25.xyz = mix (color_25, citydarkoverlay_8, citydarkoverlay_8.wwww).xyz;
  color_25.w = 1.0;
  tmpvar_1 = color_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  highp vec3 p_2;
  p_2 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_1;
  highp vec4 tmpvar_4;
  tmpvar_4.x = _glesMultiTexCoord0.x;
  tmpvar_4.y = _glesMultiTexCoord0.y;
  tmpvar_4.z = _glesMultiTexCoord1.x;
  tmpvar_4.w = _glesMultiTexCoord1.y;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_4).xyz);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float terminator_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float TNdotL_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump vec4 citydarkoverlay_8;
  mediump float handoff_9;
  mediump float detailLevel_10;
  mediump vec4 detail_11;
  mediump vec3 norm_12;
  highp vec2 localCoords_13;
  mediump vec4 encnorm_14;
  mediump vec4 citylightoverlaydetailZ_15;
  mediump vec4 citylightoverlaydetailY_16;
  mediump vec4 citylightoverlaydetailX_17;
  mediump vec4 citydarkoverlaydetailZ_18;
  mediump vec4 citydarkoverlaydetailY_19;
  mediump vec4 citydarkoverlaydetailX_20;
  mediump vec4 cityoverlay_21;
  mediump float vertLerp_22;
  mediump vec4 main_23;
  highp vec2 uv_24;
  mediump vec4 color_25;
  highp float r_26;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_26));
  uv_24.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_30;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_31;
    y_over_x_31 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_32;
    highp float x_33;
    x_33 = (y_over_x_31 * inversesqrt(((y_over_x_31 * y_over_x_31) + 1.0)));
    s_32 = (sign(x_33) * (1.5708 - (sqrt((1.0 - abs(x_33))) * (1.5708 + (abs(x_33) * (-0.214602 + (abs(x_33) * (0.0865667 + (abs(x_33) * -0.0310296)))))))));
    r_30 = s_32;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_30 = (s_32 + 3.14159);
      } else {
        r_30 = (r_30 - 3.14159);
      };
    };
  } else {
    r_30 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_34;
  tmpvar_34 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_MainTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  main_23 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD6.zy * _DetailScale);
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zx * _DetailScale);
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.xy * _DetailScale);
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  highp float tmpvar_45;
  tmpvar_45 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_22 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailVertTex, tmpvar_42);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailTex, tmpvar_39);
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_47, vec4(vertLerp_22));
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailVertTex, tmpvar_43);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailTex, tmpvar_40);
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (tmpvar_49, tmpvar_50, vec4(vertLerp_22));
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailVertTex, tmpvar_44);
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailTex, tmpvar_41);
  mediump vec4 tmpvar_54;
  tmpvar_54 = mix (tmpvar_52, tmpvar_53, vec4(vertLerp_22));
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2DGradEXT (_CityOverlayTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  cityoverlay_21 = tmpvar_55;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_56 = texture2D (_CityDarkOverlayDetailTex, P_57);
  citydarkoverlaydetailX_20 = tmpvar_56;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityDarkOverlayDetailTex, P_59);
  citydarkoverlaydetailY_19 = tmpvar_58;
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_60 = texture2D (_CityDarkOverlayDetailTex, P_61);
  citydarkoverlaydetailZ_18 = tmpvar_60;
  lowp vec4 tmpvar_62;
  highp vec2 P_63;
  P_63 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_62 = texture2D (_CityLightOverlayDetailTex, P_63);
  citylightoverlaydetailX_17 = tmpvar_62;
  lowp vec4 tmpvar_64;
  highp vec2 P_65;
  P_65 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_64 = texture2D (_CityLightOverlayDetailTex, P_65);
  citylightoverlaydetailY_16 = tmpvar_64;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_66 = texture2D (_CityLightOverlayDetailTex, P_67);
  citylightoverlaydetailZ_15 = tmpvar_66;
  lowp vec4 tmpvar_68;
  tmpvar_68 = texture2DGradEXT (_BumpMap, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  encnorm_14 = tmpvar_68;
  mediump vec2 tmpvar_69;
  tmpvar_69 = encnorm_14.wy;
  localCoords_13 = tmpvar_69;
  highp vec2 tmpvar_70;
  tmpvar_70 = (localCoords_13 - vec2(0.5, 0.5));
  localCoords_13.x = (tmpvar_70.x * 0.25);
  localCoords_13.y = (tmpvar_70.y * 0.5);
  uv_24.x = (uv_24.x - 0.5);
  highp vec2 tmpvar_71;
  tmpvar_71 = (uv_24 + localCoords_13);
  uv_24 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = cos((6.28319 * tmpvar_71.x));
  norm_12.z = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = sin((6.28319 * tmpvar_71.x));
  norm_12.x = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = cos((3.14159 * tmpvar_71.y));
  norm_12.y = tmpvar_74;
  mediump vec3 tmpvar_75;
  tmpvar_75 = -(norm_12);
  norm_12 = tmpvar_75;
  highp vec3 tmpvar_76;
  tmpvar_76 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (tmpvar_54, tmpvar_48, tmpvar_76.xxxx);
  detail_11 = tmpvar_77;
  highp vec4 tmpvar_78;
  tmpvar_78 = (0.25 * (mix (detail_11, tmpvar_51, tmpvar_76.yyyy) - 0.5));
  detail_11 = tmpvar_78;
  highp float tmpvar_79;
  tmpvar_79 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_10 = tmpvar_79;
  mediump vec4 tmpvar_80;
  tmpvar_80 = mix (detail_11, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_10));
  highp vec4 tmpvar_81;
  tmpvar_81 = (xlv_TEXCOORD1 + tmpvar_80);
  color_25 = tmpvar_81;
  highp float tmpvar_82;
  tmpvar_82 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_9 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0);
  cityoverlay_21.w = (cityoverlay_21.w * tmpvar_83);
  highp vec4 tmpvar_84;
  tmpvar_84 = mix (citydarkoverlaydetailZ_18, citydarkoverlaydetailX_20, tmpvar_76.xxxx);
  detail_11 = tmpvar_84;
  highp vec4 tmpvar_85;
  tmpvar_85 = mix (detail_11, citydarkoverlaydetailY_19, tmpvar_76.yyyy);
  detail_11 = tmpvar_85;
  mediump vec4 tmpvar_86;
  tmpvar_86 = (cityoverlay_21 * detail_11);
  citydarkoverlay_8 = tmpvar_86;
  highp vec4 tmpvar_87;
  tmpvar_87 = mix (citylightoverlaydetailZ_15, citylightoverlaydetailX_17, tmpvar_76.xxxx);
  detail_11 = tmpvar_87;
  highp vec4 tmpvar_88;
  tmpvar_88 = mix (detail_11, citylightoverlaydetailY_16, tmpvar_76.yyyy);
  detail_11 = tmpvar_88;
  mediump vec4 tmpvar_89;
  tmpvar_89 = (cityoverlay_21 * detail_11);
  mediump vec4 tmpvar_90;
  tmpvar_90 = (mix (mix (color_25, main_23, vec4(handoff_9)), tmpvar_89, tmpvar_89.wwww) * _Color);
  color_25 = tmpvar_90;
  highp vec3 tmpvar_91;
  tmpvar_91 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_91;
  highp vec3 tmpvar_92;
  tmpvar_92 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_92;
  highp float tmpvar_93;
  tmpvar_93 = clamp (dot (xlv_TEXCOORD5, lightDirection_6), 0.0, 1.0);
  TNdotL_5 = tmpvar_93;
  mediump float tmpvar_94;
  tmpvar_94 = clamp (dot (tmpvar_75, -(_SunDir)), 0.0, 1.0);
  mediump float tmpvar_95;
  tmpvar_95 = mix (TNdotL_5, tmpvar_94, handoff_9);
  highp float tmpvar_96;
  tmpvar_96 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_97;
  tmpvar_97 = texture2D (_LightTextureB0, vec2(tmpvar_96));
  lowp vec4 tmpvar_98;
  tmpvar_98 = textureCube (_LightTexture0, xlv_TEXCOORD3);
  highp float tmpvar_99;
  tmpvar_99 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  highp vec4 packDist_100;
  lowp vec4 tmpvar_101;
  tmpvar_101 = textureCube (_ShadowMapTexture, xlv_TEXCOORD4);
  packDist_100 = tmpvar_101;
  highp float tmpvar_102;
  tmpvar_102 = dot (packDist_100, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp float tmpvar_103;
  if ((tmpvar_102 < tmpvar_99)) {
    tmpvar_103 = _LightShadowData.x;
  } else {
    tmpvar_103 = 1.0;
  };
  highp float tmpvar_104;
  tmpvar_104 = ((tmpvar_97.w * tmpvar_98.w) * tmpvar_103);
  atten_4 = tmpvar_104;
  mediump float tmpvar_105;
  tmpvar_105 = clamp ((((_LightColor0.w * tmpvar_95) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_106;
  tmpvar_106 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_105)), 0.0, 1.0);
  light_3 = tmpvar_106;
  highp float tmpvar_107;
  tmpvar_107 = clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0);
  terminator_2 = tmpvar_107;
  mediump vec3 tmpvar_108;
  tmpvar_108 = (light_3 * terminator_2);
  light_3 = tmpvar_108;
  highp vec3 tmpvar_109;
  tmpvar_109 = (tmpvar_90.xyz + (_Albedo * tmpvar_108));
  color_25.xyz = tmpvar_109;
  color_25.xyz = (color_25.xyz * tmpvar_108);
  citydarkoverlay_8.w = (tmpvar_86.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_94 - 0.01)) / 0.99) * 4.0) * atten_4), 0.0, 1.0), 0.0, 1.0)));
  color_25.xyz = mix (color_25, citydarkoverlay_8, citydarkoverlay_8.wwww).xyz;
  color_25.w = 1.0;
  tmpvar_1 = color_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 331
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 436
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 objnormal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
};
#line 426
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 341
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 354
#line 362
#line 376
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 409
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 413
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 417
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp mat4 _Rotation;
#line 421
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 425
uniform sampler2D _CityLightOverlayDetailTex;
#line 448
#line 474
#line 448
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 452
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    #line 456
    o.color = v.color;
    o.objnormal = v.normal;
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    o._ShadowCoord = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    #line 461
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.objnormal);
    xlv_TEXCOORD3 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereCoords);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 331
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 436
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 objnormal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
};
#line 426
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 341
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 354
#line 362
#line 376
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 409
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 413
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 417
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp mat4 _Rotation;
#line 421
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 425
uniform sampler2D _CityLightOverlayDetailTex;
#line 448
#line 474
#line 463
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 465
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 469
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 215
highp float DecodeFloatRGBA( in highp vec4 enc ) {
    highp vec4 kDecodeDot = vec4( 1.0, 0.00392157, 1.53787e-05, 6.22737e-09);
    return dot( enc, kDecodeDot);
}
#line 316
highp float SampleCubeDistance( in highp vec3 vec ) {
    highp vec4 packDist = texture( _ShadowMapTexture, vec);
    #line 319
    return DecodeFloatRGBA( packDist);
}
#line 321
highp float unityCubeShadow( in highp vec3 vec ) {
    #line 323
    highp float mydist = (length(vec) * _LightPositionRange.w);
    mydist *= 0.97;
    highp float dist = SampleCubeDistance( vec);
    return (( (dist < mydist) ) ? ( _LightShadowData.x ) : ( 1.0 ));
}
#line 474
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    #line 478
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 482
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    highp vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    highp vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    highp vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    #line 486
    highp vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    highp vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    highp vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, (-IN.sphereCoords))) - 0.95)) + 0.5));
    #line 490
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    #line 494
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    #line 498
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    highp vec2 localCoords = encnorm.wy;
    #line 502
    localCoords -= vec2( 0.5);
    localCoords.x *= 0.25;
    localCoords.y *= 0.5;
    uv.x -= 0.5;
    #line 506
    uv += localCoords;
    mediump vec3 norm;
    norm.z = cos((6.28319 * uv.x));
    norm.x = sin((6.28319 * uv.x));
    #line 510
    norm.y = cos((3.14159 * uv.y));
    norm = (-norm);
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    #line 514
    detail = (0.25 * (mix( detail, detailY, vec4( sphereNrm.y)) - 0.5));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (IN.color + mix( detail.xyzw, vec4( 0.0), vec4( detailLevel)));
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    #line 518
    color = mix( color, main, vec4( handoff));
    cityoverlay.w *= xll_saturate_f(floor((IN.color.w + 0.99)));
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    #line 522
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    #line 526
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    #line 530
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    lowp float atten = ((texture( _LightTextureB0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * texture( _LightTexture0, IN._LightCoord).w) * unityCubeShadow( IN._ShadowCoord));
    #line 534
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    mediump float terminator = xll_saturate_f(floor((1.01 + dot( IN.sphereCoords, _SunDir))));
    light *= terminator;
    #line 538
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (SNdotL - 0.01)) / 0.99) * 4.0) * atten));
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    #line 542
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.objnormal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform mat4 unity_World2Shadow[4];
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec4 tmpvar_3;
  tmpvar_3.x = gl_MultiTexCoord0.x;
  tmpvar_3.y = gl_MultiTexCoord0.y;
  tmpvar_3.z = gl_MultiTexCoord1.x;
  tmpvar_3.w = gl_MultiTexCoord1.y;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * gl_Vertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_3).xyz);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec3 norm_2;
  vec2 localCoords_3;
  vec4 cityoverlay_4;
  vec2 uv_5;
  vec4 color_6;
  float r_7;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_5.x = (0.5 + (0.159155 * r_7));
  uv_5.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_11;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_12;
    y_over_x_12 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_13;
    float x_14;
    x_14 = (y_over_x_12 * inversesqrt(((y_over_x_12 * y_over_x_12) + 1.0)));
    s_13 = (sign(x_14) * (1.5708 - (sqrt((1.0 - abs(x_14))) * (1.5708 + (abs(x_14) * (-0.214602 + (abs(x_14) * (0.0865667 + (abs(x_14) * -0.0310296)))))))));
    r_11 = s_13;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_11 = (s_13 + 3.14159);
      } else {
        r_11 = (r_11 - 3.14159);
      };
    };
  } else {
    r_11 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_15;
  tmpvar_15 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_16;
  tmpvar_16 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_17;
  tmpvar_17 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_18;
  tmpvar_18.x = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_18.y = dFdx(tmpvar_15);
  tmpvar_18.z = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_18.w = dFdy(tmpvar_15);
  vec4 tmpvar_19;
  tmpvar_19 = texture2DGradARB (_MainTex, uv_5, tmpvar_18.xy, tmpvar_18.zw);
  float tmpvar_20;
  tmpvar_20 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_21;
  tmpvar_21 = texture2DGradARB (_CityOverlayTex, uv_5, tmpvar_18.xy, tmpvar_18.zw);
  cityoverlay_4.xyz = tmpvar_21.xyz;
  vec2 tmpvar_22;
  tmpvar_22 = (texture2DGradARB (_BumpMap, uv_5, tmpvar_18.xy, tmpvar_18.zw).wy - vec2(0.5, 0.5));
  localCoords_3.x = (tmpvar_22.x * 0.25);
  localCoords_3.y = (tmpvar_22.y * 0.5);
  uv_5.x = (uv_5.x - 0.5);
  vec2 tmpvar_23;
  tmpvar_23 = (uv_5 + localCoords_3);
  uv_5 = tmpvar_23;
  norm_2.z = cos((6.28319 * tmpvar_23.x));
  norm_2.x = sin((6.28319 * tmpvar_23.x));
  norm_2.y = cos((3.14159 * tmpvar_23.y));
  vec3 tmpvar_24;
  tmpvar_24 = -(norm_2);
  norm_2 = tmpvar_24;
  vec3 tmpvar_25;
  tmpvar_25 = abs(xlv_TEXCOORD6);
  float tmpvar_26;
  tmpvar_26 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  cityoverlay_4.w = (tmpvar_21.w * clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0));
  vec4 tmpvar_27;
  tmpvar_27 = (cityoverlay_4 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_25.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_25.yyyy));
  citydarkoverlay_1 = tmpvar_27;
  vec4 tmpvar_28;
  tmpvar_28 = (cityoverlay_4 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_25.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_25.yyyy));
  vec4 tmpvar_29;
  tmpvar_29 = (mix (mix ((xlv_TEXCOORD1 + mix ((0.25 * (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_20)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_20)), tmpvar_25.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_20)), tmpvar_25.yyyy) - 0.5)), vec4(0.0, 0.0, 0.0, 0.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))), tmpvar_19, vec4(tmpvar_26)), tmpvar_28, tmpvar_28.wwww) * _Color);
  color_6 = tmpvar_29;
  float tmpvar_30;
  tmpvar_30 = clamp (dot (tmpvar_24, -(_SunDir)), 0.0, 1.0);
  float tmpvar_31;
  tmpvar_31 = mix (clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), tmpvar_30, tmpvar_26);
  vec4 tmpvar_32;
  tmpvar_32 = texture2D (_LightTexture0, ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5));
  vec4 tmpvar_33;
  tmpvar_33 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz)));
  vec4 shadowVals_34;
  vec3 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD4.xyz / xlv_TEXCOORD4.w);
  shadowVals_34.x = texture2D (_ShadowMapTexture, (tmpvar_35.xy + _ShadowOffsets[0].xy)).x;
  shadowVals_34.y = texture2D (_ShadowMapTexture, (tmpvar_35.xy + _ShadowOffsets[1].xy)).x;
  shadowVals_34.z = texture2D (_ShadowMapTexture, (tmpvar_35.xy + _ShadowOffsets[2].xy)).x;
  shadowVals_34.w = texture2D (_ShadowMapTexture, (tmpvar_35.xy + _ShadowOffsets[3].xy)).x;
  bvec4 tmpvar_36;
  tmpvar_36 = lessThan (shadowVals_34, tmpvar_35.zzzz);
  vec4 tmpvar_37;
  tmpvar_37 = _LightShadowData.xxxx;
  float tmpvar_38;
  if (tmpvar_36.x) {
    tmpvar_38 = tmpvar_37.x;
  } else {
    tmpvar_38 = 1.0;
  };
  float tmpvar_39;
  if (tmpvar_36.y) {
    tmpvar_39 = tmpvar_37.y;
  } else {
    tmpvar_39 = 1.0;
  };
  float tmpvar_40;
  if (tmpvar_36.z) {
    tmpvar_40 = tmpvar_37.z;
  } else {
    tmpvar_40 = 1.0;
  };
  float tmpvar_41;
  if (tmpvar_36.w) {
    tmpvar_41 = tmpvar_37.w;
  } else {
    tmpvar_41 = 1.0;
  };
  vec4 tmpvar_42;
  tmpvar_42.x = tmpvar_38;
  tmpvar_42.y = tmpvar_39;
  tmpvar_42.z = tmpvar_40;
  tmpvar_42.w = tmpvar_41;
  float tmpvar_43;
  tmpvar_43 = (((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_32.w) * tmpvar_33.w) * dot (tmpvar_42, vec4(0.25, 0.25, 0.25, 0.25)));
  vec3 tmpvar_44;
  tmpvar_44 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_31) * 4.0) * tmpvar_43), 0.0, 1.0))), 0.0, 1.0) * clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0));
  color_6.xyz = (tmpvar_29.xyz + (_Albedo * tmpvar_44));
  color_6.xyz = (color_6.xyz * tmpvar_44);
  citydarkoverlay_1.w = (tmpvar_27.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_30 - 0.01)) / 0.99) * 4.0) * tmpvar_43), 0.0, 1.0), 0.0, 1.0)));
  color_6.xyz = mix (color_6, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_6.w = 1.0;
  gl_FragData[0] = color_6;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Matrix 4 [unity_World2Shadow0]
Matrix 8 [_Object2World]
Matrix 12 [_LightMatrix0]
"vs_3_0
; 36 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
def c17, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
mov r1.xyz, v2
mov r1.w, c17.x
dp4 r2.z, r1, c10
dp4 r2.x, r1, c8
dp4 r2.y, r1, c9
mov r0.zw, v4.xyxy
mov r0.xy, v3
dp4 r2.w, r0, r0
rsq r1.x, r2.w
mul r0.xyz, r1.x, r0
mov o7.xyz, -r0
dp3 r0.w, r2, r2
rsq r0.w, r0.w
mul o6.xyz, r0.w, r2
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
dp4 r0.w, v0, c11
add r1.xyz, -r0, c16
dp3 r1.x, r1, r1
rsq r1.x, r1.x
mov o2, v1
dp4 o4.w, r0, c15
dp4 o4.z, r0, c14
dp4 o4.y, r0, c13
dp4 o4.x, r0, c12
dp4 o5.w, r0, c7
dp4 o5.z, r0, c6
dp4 o5.y, r0, c5
dp4 o5.x, r0, c4
rcp o1.x, r1.x
mov o3.xyz, v2
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  highp vec3 p_2;
  p_2 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_1;
  highp vec4 tmpvar_4;
  tmpvar_4.x = _glesMultiTexCoord0.x;
  tmpvar_4.y = _glesMultiTexCoord0.y;
  tmpvar_4.z = _glesMultiTexCoord1.x;
  tmpvar_4.w = _glesMultiTexCoord1.y;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_4).xyz);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float terminator_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float TNdotL_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump vec4 citydarkoverlay_8;
  mediump float handoff_9;
  mediump float detailLevel_10;
  mediump vec4 detail_11;
  mediump vec3 norm_12;
  highp vec2 localCoords_13;
  mediump vec4 encnorm_14;
  mediump vec4 citylightoverlaydetailZ_15;
  mediump vec4 citylightoverlaydetailY_16;
  mediump vec4 citylightoverlaydetailX_17;
  mediump vec4 citydarkoverlaydetailZ_18;
  mediump vec4 citydarkoverlaydetailY_19;
  mediump vec4 citydarkoverlaydetailX_20;
  mediump vec4 cityoverlay_21;
  mediump float vertLerp_22;
  mediump vec4 main_23;
  highp vec2 uv_24;
  mediump vec4 color_25;
  highp float r_26;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_26));
  uv_24.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_30;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_31;
    y_over_x_31 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_32;
    highp float x_33;
    x_33 = (y_over_x_31 * inversesqrt(((y_over_x_31 * y_over_x_31) + 1.0)));
    s_32 = (sign(x_33) * (1.5708 - (sqrt((1.0 - abs(x_33))) * (1.5708 + (abs(x_33) * (-0.214602 + (abs(x_33) * (0.0865667 + (abs(x_33) * -0.0310296)))))))));
    r_30 = s_32;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_30 = (s_32 + 3.14159);
      } else {
        r_30 = (r_30 - 3.14159);
      };
    };
  } else {
    r_30 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_34;
  tmpvar_34 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_MainTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  main_23 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD6.zy * _DetailScale);
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zx * _DetailScale);
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.xy * _DetailScale);
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  highp float tmpvar_45;
  tmpvar_45 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_22 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailVertTex, tmpvar_42);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailTex, tmpvar_39);
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_47, vec4(vertLerp_22));
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailVertTex, tmpvar_43);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailTex, tmpvar_40);
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (tmpvar_49, tmpvar_50, vec4(vertLerp_22));
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailVertTex, tmpvar_44);
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailTex, tmpvar_41);
  mediump vec4 tmpvar_54;
  tmpvar_54 = mix (tmpvar_52, tmpvar_53, vec4(vertLerp_22));
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2DGradEXT (_CityOverlayTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  cityoverlay_21 = tmpvar_55;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_56 = texture2D (_CityDarkOverlayDetailTex, P_57);
  citydarkoverlaydetailX_20 = tmpvar_56;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityDarkOverlayDetailTex, P_59);
  citydarkoverlaydetailY_19 = tmpvar_58;
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_60 = texture2D (_CityDarkOverlayDetailTex, P_61);
  citydarkoverlaydetailZ_18 = tmpvar_60;
  lowp vec4 tmpvar_62;
  highp vec2 P_63;
  P_63 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_62 = texture2D (_CityLightOverlayDetailTex, P_63);
  citylightoverlaydetailX_17 = tmpvar_62;
  lowp vec4 tmpvar_64;
  highp vec2 P_65;
  P_65 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_64 = texture2D (_CityLightOverlayDetailTex, P_65);
  citylightoverlaydetailY_16 = tmpvar_64;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_66 = texture2D (_CityLightOverlayDetailTex, P_67);
  citylightoverlaydetailZ_15 = tmpvar_66;
  lowp vec4 tmpvar_68;
  tmpvar_68 = texture2DGradEXT (_BumpMap, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  encnorm_14 = tmpvar_68;
  mediump vec2 tmpvar_69;
  tmpvar_69 = encnorm_14.wy;
  localCoords_13 = tmpvar_69;
  highp vec2 tmpvar_70;
  tmpvar_70 = (localCoords_13 - vec2(0.5, 0.5));
  localCoords_13.x = (tmpvar_70.x * 0.25);
  localCoords_13.y = (tmpvar_70.y * 0.5);
  uv_24.x = (uv_24.x - 0.5);
  highp vec2 tmpvar_71;
  tmpvar_71 = (uv_24 + localCoords_13);
  uv_24 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = cos((6.28319 * tmpvar_71.x));
  norm_12.z = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = sin((6.28319 * tmpvar_71.x));
  norm_12.x = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = cos((3.14159 * tmpvar_71.y));
  norm_12.y = tmpvar_74;
  mediump vec3 tmpvar_75;
  tmpvar_75 = -(norm_12);
  norm_12 = tmpvar_75;
  highp vec3 tmpvar_76;
  tmpvar_76 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (tmpvar_54, tmpvar_48, tmpvar_76.xxxx);
  detail_11 = tmpvar_77;
  highp vec4 tmpvar_78;
  tmpvar_78 = (0.25 * (mix (detail_11, tmpvar_51, tmpvar_76.yyyy) - 0.5));
  detail_11 = tmpvar_78;
  highp float tmpvar_79;
  tmpvar_79 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_10 = tmpvar_79;
  mediump vec4 tmpvar_80;
  tmpvar_80 = mix (detail_11, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_10));
  highp vec4 tmpvar_81;
  tmpvar_81 = (xlv_TEXCOORD1 + tmpvar_80);
  color_25 = tmpvar_81;
  highp float tmpvar_82;
  tmpvar_82 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_9 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0);
  cityoverlay_21.w = (cityoverlay_21.w * tmpvar_83);
  highp vec4 tmpvar_84;
  tmpvar_84 = mix (citydarkoverlaydetailZ_18, citydarkoverlaydetailX_20, tmpvar_76.xxxx);
  detail_11 = tmpvar_84;
  highp vec4 tmpvar_85;
  tmpvar_85 = mix (detail_11, citydarkoverlaydetailY_19, tmpvar_76.yyyy);
  detail_11 = tmpvar_85;
  mediump vec4 tmpvar_86;
  tmpvar_86 = (cityoverlay_21 * detail_11);
  citydarkoverlay_8 = tmpvar_86;
  highp vec4 tmpvar_87;
  tmpvar_87 = mix (citylightoverlaydetailZ_15, citylightoverlaydetailX_17, tmpvar_76.xxxx);
  detail_11 = tmpvar_87;
  highp vec4 tmpvar_88;
  tmpvar_88 = mix (detail_11, citylightoverlaydetailY_16, tmpvar_76.yyyy);
  detail_11 = tmpvar_88;
  mediump vec4 tmpvar_89;
  tmpvar_89 = (cityoverlay_21 * detail_11);
  mediump vec4 tmpvar_90;
  tmpvar_90 = (mix (mix (color_25, main_23, vec4(handoff_9)), tmpvar_89, tmpvar_89.wwww) * _Color);
  color_25 = tmpvar_90;
  highp vec3 tmpvar_91;
  tmpvar_91 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_91;
  highp vec3 tmpvar_92;
  tmpvar_92 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_92;
  highp float tmpvar_93;
  tmpvar_93 = clamp (dot (xlv_TEXCOORD5, lightDirection_6), 0.0, 1.0);
  TNdotL_5 = tmpvar_93;
  mediump float tmpvar_94;
  tmpvar_94 = clamp (dot (tmpvar_75, -(_SunDir)), 0.0, 1.0);
  mediump float tmpvar_95;
  tmpvar_95 = mix (TNdotL_5, tmpvar_94, handoff_9);
  lowp vec4 tmpvar_96;
  highp vec2 P_97;
  P_97 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_96 = texture2D (_LightTexture0, P_97);
  highp float tmpvar_98;
  tmpvar_98 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_99;
  tmpvar_99 = texture2D (_LightTextureB0, vec2(tmpvar_98));
  lowp float tmpvar_100;
  mediump vec4 shadows_101;
  highp vec4 shadowVals_102;
  highp vec3 tmpvar_103;
  tmpvar_103 = (xlv_TEXCOORD4.xyz / xlv_TEXCOORD4.w);
  highp vec2 P_104;
  P_104 = (tmpvar_103.xy + _ShadowOffsets[0].xy);
  lowp float tmpvar_105;
  tmpvar_105 = texture2D (_ShadowMapTexture, P_104).x;
  shadowVals_102.x = tmpvar_105;
  highp vec2 P_106;
  P_106 = (tmpvar_103.xy + _ShadowOffsets[1].xy);
  lowp float tmpvar_107;
  tmpvar_107 = texture2D (_ShadowMapTexture, P_106).x;
  shadowVals_102.y = tmpvar_107;
  highp vec2 P_108;
  P_108 = (tmpvar_103.xy + _ShadowOffsets[2].xy);
  lowp float tmpvar_109;
  tmpvar_109 = texture2D (_ShadowMapTexture, P_108).x;
  shadowVals_102.z = tmpvar_109;
  highp vec2 P_110;
  P_110 = (tmpvar_103.xy + _ShadowOffsets[3].xy);
  lowp float tmpvar_111;
  tmpvar_111 = texture2D (_ShadowMapTexture, P_110).x;
  shadowVals_102.w = tmpvar_111;
  bvec4 tmpvar_112;
  tmpvar_112 = lessThan (shadowVals_102, tmpvar_103.zzzz);
  highp vec4 tmpvar_113;
  tmpvar_113 = _LightShadowData.xxxx;
  highp float tmpvar_114;
  if (tmpvar_112.x) {
    tmpvar_114 = tmpvar_113.x;
  } else {
    tmpvar_114 = 1.0;
  };
  highp float tmpvar_115;
  if (tmpvar_112.y) {
    tmpvar_115 = tmpvar_113.y;
  } else {
    tmpvar_115 = 1.0;
  };
  highp float tmpvar_116;
  if (tmpvar_112.z) {
    tmpvar_116 = tmpvar_113.z;
  } else {
    tmpvar_116 = 1.0;
  };
  highp float tmpvar_117;
  if (tmpvar_112.w) {
    tmpvar_117 = tmpvar_113.w;
  } else {
    tmpvar_117 = 1.0;
  };
  highp vec4 tmpvar_118;
  tmpvar_118.x = tmpvar_114;
  tmpvar_118.y = tmpvar_115;
  tmpvar_118.z = tmpvar_116;
  tmpvar_118.w = tmpvar_117;
  shadows_101 = tmpvar_118;
  mediump float tmpvar_119;
  tmpvar_119 = dot (shadows_101, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_100 = tmpvar_119;
  highp float tmpvar_120;
  tmpvar_120 = (((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_96.w) * tmpvar_99.w) * tmpvar_100);
  atten_4 = tmpvar_120;
  mediump float tmpvar_121;
  tmpvar_121 = clamp ((((_LightColor0.w * tmpvar_95) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_122;
  tmpvar_122 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_121)), 0.0, 1.0);
  light_3 = tmpvar_122;
  highp float tmpvar_123;
  tmpvar_123 = clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0);
  terminator_2 = tmpvar_123;
  mediump vec3 tmpvar_124;
  tmpvar_124 = (light_3 * terminator_2);
  light_3 = tmpvar_124;
  highp vec3 tmpvar_125;
  tmpvar_125 = (tmpvar_90.xyz + (_Albedo * tmpvar_124));
  color_25.xyz = tmpvar_125;
  color_25.xyz = (color_25.xyz * tmpvar_124);
  citydarkoverlay_8.w = (tmpvar_86.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_94 - 0.01)) / 0.99) * 4.0) * atten_4), 0.0, 1.0), 0.0, 1.0)));
  color_25.xyz = mix (color_25, citydarkoverlay_8, citydarkoverlay_8.wwww).xyz;
  color_25.w = 1.0;
  tmpvar_1 = color_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  highp vec3 p_2;
  p_2 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_1;
  highp vec4 tmpvar_4;
  tmpvar_4.x = _glesMultiTexCoord0.x;
  tmpvar_4.y = _glesMultiTexCoord0.y;
  tmpvar_4.z = _glesMultiTexCoord1.x;
  tmpvar_4.w = _glesMultiTexCoord1.y;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_4).xyz);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float terminator_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float TNdotL_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump vec4 citydarkoverlay_8;
  mediump float handoff_9;
  mediump float detailLevel_10;
  mediump vec4 detail_11;
  mediump vec3 norm_12;
  highp vec2 localCoords_13;
  mediump vec4 encnorm_14;
  mediump vec4 citylightoverlaydetailZ_15;
  mediump vec4 citylightoverlaydetailY_16;
  mediump vec4 citylightoverlaydetailX_17;
  mediump vec4 citydarkoverlaydetailZ_18;
  mediump vec4 citydarkoverlaydetailY_19;
  mediump vec4 citydarkoverlaydetailX_20;
  mediump vec4 cityoverlay_21;
  mediump float vertLerp_22;
  mediump vec4 main_23;
  highp vec2 uv_24;
  mediump vec4 color_25;
  highp float r_26;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_26));
  uv_24.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_30;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_31;
    y_over_x_31 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_32;
    highp float x_33;
    x_33 = (y_over_x_31 * inversesqrt(((y_over_x_31 * y_over_x_31) + 1.0)));
    s_32 = (sign(x_33) * (1.5708 - (sqrt((1.0 - abs(x_33))) * (1.5708 + (abs(x_33) * (-0.214602 + (abs(x_33) * (0.0865667 + (abs(x_33) * -0.0310296)))))))));
    r_30 = s_32;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_30 = (s_32 + 3.14159);
      } else {
        r_30 = (r_30 - 3.14159);
      };
    };
  } else {
    r_30 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_34;
  tmpvar_34 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_MainTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  main_23 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD6.zy * _DetailScale);
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zx * _DetailScale);
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.xy * _DetailScale);
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  highp float tmpvar_45;
  tmpvar_45 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_22 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailVertTex, tmpvar_42);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailTex, tmpvar_39);
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_47, vec4(vertLerp_22));
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailVertTex, tmpvar_43);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailTex, tmpvar_40);
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (tmpvar_49, tmpvar_50, vec4(vertLerp_22));
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailVertTex, tmpvar_44);
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailTex, tmpvar_41);
  mediump vec4 tmpvar_54;
  tmpvar_54 = mix (tmpvar_52, tmpvar_53, vec4(vertLerp_22));
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2DGradEXT (_CityOverlayTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  cityoverlay_21 = tmpvar_55;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_56 = texture2D (_CityDarkOverlayDetailTex, P_57);
  citydarkoverlaydetailX_20 = tmpvar_56;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityDarkOverlayDetailTex, P_59);
  citydarkoverlaydetailY_19 = tmpvar_58;
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_60 = texture2D (_CityDarkOverlayDetailTex, P_61);
  citydarkoverlaydetailZ_18 = tmpvar_60;
  lowp vec4 tmpvar_62;
  highp vec2 P_63;
  P_63 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_62 = texture2D (_CityLightOverlayDetailTex, P_63);
  citylightoverlaydetailX_17 = tmpvar_62;
  lowp vec4 tmpvar_64;
  highp vec2 P_65;
  P_65 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_64 = texture2D (_CityLightOverlayDetailTex, P_65);
  citylightoverlaydetailY_16 = tmpvar_64;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_66 = texture2D (_CityLightOverlayDetailTex, P_67);
  citylightoverlaydetailZ_15 = tmpvar_66;
  lowp vec4 tmpvar_68;
  tmpvar_68 = texture2DGradEXT (_BumpMap, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  encnorm_14 = tmpvar_68;
  mediump vec2 tmpvar_69;
  tmpvar_69 = encnorm_14.wy;
  localCoords_13 = tmpvar_69;
  highp vec2 tmpvar_70;
  tmpvar_70 = (localCoords_13 - vec2(0.5, 0.5));
  localCoords_13.x = (tmpvar_70.x * 0.25);
  localCoords_13.y = (tmpvar_70.y * 0.5);
  uv_24.x = (uv_24.x - 0.5);
  highp vec2 tmpvar_71;
  tmpvar_71 = (uv_24 + localCoords_13);
  uv_24 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = cos((6.28319 * tmpvar_71.x));
  norm_12.z = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = sin((6.28319 * tmpvar_71.x));
  norm_12.x = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = cos((3.14159 * tmpvar_71.y));
  norm_12.y = tmpvar_74;
  mediump vec3 tmpvar_75;
  tmpvar_75 = -(norm_12);
  norm_12 = tmpvar_75;
  highp vec3 tmpvar_76;
  tmpvar_76 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (tmpvar_54, tmpvar_48, tmpvar_76.xxxx);
  detail_11 = tmpvar_77;
  highp vec4 tmpvar_78;
  tmpvar_78 = (0.25 * (mix (detail_11, tmpvar_51, tmpvar_76.yyyy) - 0.5));
  detail_11 = tmpvar_78;
  highp float tmpvar_79;
  tmpvar_79 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_10 = tmpvar_79;
  mediump vec4 tmpvar_80;
  tmpvar_80 = mix (detail_11, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_10));
  highp vec4 tmpvar_81;
  tmpvar_81 = (xlv_TEXCOORD1 + tmpvar_80);
  color_25 = tmpvar_81;
  highp float tmpvar_82;
  tmpvar_82 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_9 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0);
  cityoverlay_21.w = (cityoverlay_21.w * tmpvar_83);
  highp vec4 tmpvar_84;
  tmpvar_84 = mix (citydarkoverlaydetailZ_18, citydarkoverlaydetailX_20, tmpvar_76.xxxx);
  detail_11 = tmpvar_84;
  highp vec4 tmpvar_85;
  tmpvar_85 = mix (detail_11, citydarkoverlaydetailY_19, tmpvar_76.yyyy);
  detail_11 = tmpvar_85;
  mediump vec4 tmpvar_86;
  tmpvar_86 = (cityoverlay_21 * detail_11);
  citydarkoverlay_8 = tmpvar_86;
  highp vec4 tmpvar_87;
  tmpvar_87 = mix (citylightoverlaydetailZ_15, citylightoverlaydetailX_17, tmpvar_76.xxxx);
  detail_11 = tmpvar_87;
  highp vec4 tmpvar_88;
  tmpvar_88 = mix (detail_11, citylightoverlaydetailY_16, tmpvar_76.yyyy);
  detail_11 = tmpvar_88;
  mediump vec4 tmpvar_89;
  tmpvar_89 = (cityoverlay_21 * detail_11);
  mediump vec4 tmpvar_90;
  tmpvar_90 = (mix (mix (color_25, main_23, vec4(handoff_9)), tmpvar_89, tmpvar_89.wwww) * _Color);
  color_25 = tmpvar_90;
  highp vec3 tmpvar_91;
  tmpvar_91 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_91;
  highp vec3 tmpvar_92;
  tmpvar_92 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_92;
  highp float tmpvar_93;
  tmpvar_93 = clamp (dot (xlv_TEXCOORD5, lightDirection_6), 0.0, 1.0);
  TNdotL_5 = tmpvar_93;
  mediump float tmpvar_94;
  tmpvar_94 = clamp (dot (tmpvar_75, -(_SunDir)), 0.0, 1.0);
  mediump float tmpvar_95;
  tmpvar_95 = mix (TNdotL_5, tmpvar_94, handoff_9);
  lowp vec4 tmpvar_96;
  highp vec2 P_97;
  P_97 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_96 = texture2D (_LightTexture0, P_97);
  highp float tmpvar_98;
  tmpvar_98 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_99;
  tmpvar_99 = texture2D (_LightTextureB0, vec2(tmpvar_98));
  lowp float tmpvar_100;
  mediump vec4 shadows_101;
  highp vec4 shadowVals_102;
  highp vec3 tmpvar_103;
  tmpvar_103 = (xlv_TEXCOORD4.xyz / xlv_TEXCOORD4.w);
  highp vec2 P_104;
  P_104 = (tmpvar_103.xy + _ShadowOffsets[0].xy);
  lowp float tmpvar_105;
  tmpvar_105 = texture2D (_ShadowMapTexture, P_104).x;
  shadowVals_102.x = tmpvar_105;
  highp vec2 P_106;
  P_106 = (tmpvar_103.xy + _ShadowOffsets[1].xy);
  lowp float tmpvar_107;
  tmpvar_107 = texture2D (_ShadowMapTexture, P_106).x;
  shadowVals_102.y = tmpvar_107;
  highp vec2 P_108;
  P_108 = (tmpvar_103.xy + _ShadowOffsets[2].xy);
  lowp float tmpvar_109;
  tmpvar_109 = texture2D (_ShadowMapTexture, P_108).x;
  shadowVals_102.z = tmpvar_109;
  highp vec2 P_110;
  P_110 = (tmpvar_103.xy + _ShadowOffsets[3].xy);
  lowp float tmpvar_111;
  tmpvar_111 = texture2D (_ShadowMapTexture, P_110).x;
  shadowVals_102.w = tmpvar_111;
  bvec4 tmpvar_112;
  tmpvar_112 = lessThan (shadowVals_102, tmpvar_103.zzzz);
  highp vec4 tmpvar_113;
  tmpvar_113 = _LightShadowData.xxxx;
  highp float tmpvar_114;
  if (tmpvar_112.x) {
    tmpvar_114 = tmpvar_113.x;
  } else {
    tmpvar_114 = 1.0;
  };
  highp float tmpvar_115;
  if (tmpvar_112.y) {
    tmpvar_115 = tmpvar_113.y;
  } else {
    tmpvar_115 = 1.0;
  };
  highp float tmpvar_116;
  if (tmpvar_112.z) {
    tmpvar_116 = tmpvar_113.z;
  } else {
    tmpvar_116 = 1.0;
  };
  highp float tmpvar_117;
  if (tmpvar_112.w) {
    tmpvar_117 = tmpvar_113.w;
  } else {
    tmpvar_117 = 1.0;
  };
  highp vec4 tmpvar_118;
  tmpvar_118.x = tmpvar_114;
  tmpvar_118.y = tmpvar_115;
  tmpvar_118.z = tmpvar_116;
  tmpvar_118.w = tmpvar_117;
  shadows_101 = tmpvar_118;
  mediump float tmpvar_119;
  tmpvar_119 = dot (shadows_101, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_100 = tmpvar_119;
  highp float tmpvar_120;
  tmpvar_120 = (((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_96.w) * tmpvar_99.w) * tmpvar_100);
  atten_4 = tmpvar_120;
  mediump float tmpvar_121;
  tmpvar_121 = clamp ((((_LightColor0.w * tmpvar_95) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_122;
  tmpvar_122 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_121)), 0.0, 1.0);
  light_3 = tmpvar_122;
  highp float tmpvar_123;
  tmpvar_123 = clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0);
  terminator_2 = tmpvar_123;
  mediump vec3 tmpvar_124;
  tmpvar_124 = (light_3 * terminator_2);
  light_3 = tmpvar_124;
  highp vec3 tmpvar_125;
  tmpvar_125 = (tmpvar_90.xyz + (_Albedo * tmpvar_124));
  color_25.xyz = tmpvar_125;
  color_25.xyz = (color_25.xyz * tmpvar_124);
  citydarkoverlay_8.w = (tmpvar_86.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_94 - 0.01)) / 0.99) * 4.0) * atten_4), 0.0, 1.0), 0.0, 1.0)));
  color_25.xyz = mix (color_25, citydarkoverlay_8, citydarkoverlay_8.wwww).xyz;
  color_25.w = 1.0;
  tmpvar_1 = color_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 445
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 objnormal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
};
#line 435
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 418
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 422
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 426
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp mat4 _Rotation;
#line 430
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 434
uniform sampler2D _CityLightOverlayDetailTex;
#line 457
#line 483
#line 457
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 461
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    #line 465
    o.color = v.color;
    o.objnormal = v.normal;
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    #line 470
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.objnormal);
    xlv_TEXCOORD3 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereCoords);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
vec2 xll_vecTSel_vb2_vf2_vf2 (bvec2 a, vec2 b, vec2 c) {
  return vec2 (a.x ? b.x : c.x, a.y ? b.y : c.y);
}
vec3 xll_vecTSel_vb3_vf3_vf3 (bvec3 a, vec3 b, vec3 c) {
  return vec3 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z);
}
vec4 xll_vecTSel_vb4_vf4_vf4 (bvec4 a, vec4 b, vec4 c) {
  return vec4 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z, a.w ? b.w : c.w);
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 445
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 objnormal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
};
#line 435
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 418
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 422
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 426
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp mat4 _Rotation;
#line 430
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 434
uniform sampler2D _CityLightOverlayDetailTex;
#line 457
#line 483
#line 472
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 474
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 478
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 336
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 332
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 317
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    #line 319
    highp vec3 coord = (shadowCoord.xyz / shadowCoord.w);
    highp vec4 shadowVals;
    shadowVals.x = texture( _ShadowMapTexture, (vec2( coord) + _ShadowOffsets[0].xy)).x;
    shadowVals.y = texture( _ShadowMapTexture, (vec2( coord) + _ShadowOffsets[1].xy)).x;
    #line 323
    shadowVals.z = texture( _ShadowMapTexture, (vec2( coord) + _ShadowOffsets[2].xy)).x;
    shadowVals.w = texture( _ShadowMapTexture, (vec2( coord) + _ShadowOffsets[3].xy)).x;
    mediump vec4 shadows = xll_vecTSel_vb4_vf4_vf4 (lessThan( shadowVals, coord.zzzz), vec4( _LightShadowData.xxxx), vec4( 1.0));
    mediump float shadow = dot( shadows, vec4( 0.25));
    #line 327
    return shadow;
}
#line 483
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    #line 487
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 491
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    highp vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    highp vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    highp vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    #line 495
    highp vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    highp vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    highp vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, (-IN.sphereCoords))) - 0.95)) + 0.5));
    #line 499
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    #line 503
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    #line 507
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    highp vec2 localCoords = encnorm.wy;
    #line 511
    localCoords -= vec2( 0.5);
    localCoords.x *= 0.25;
    localCoords.y *= 0.5;
    uv.x -= 0.5;
    #line 515
    uv += localCoords;
    mediump vec3 norm;
    norm.z = cos((6.28319 * uv.x));
    norm.x = sin((6.28319 * uv.x));
    #line 519
    norm.y = cos((3.14159 * uv.y));
    norm = (-norm);
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    #line 523
    detail = (0.25 * (mix( detail, detailY, vec4( sphereNrm.y)) - 0.5));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (IN.color + mix( detail.xyzw, vec4( 0.0), vec4( detailLevel)));
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    #line 527
    color = mix( color, main, vec4( handoff));
    cityoverlay.w *= xll_saturate_f(floor((IN.color.w + 0.99)));
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    #line 531
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    #line 535
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    #line 539
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * unitySampleShadow( IN._ShadowCoord));
    #line 543
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    mediump float terminator = xll_saturate_f(floor((1.01 + dot( IN.sphereCoords, _SunDir))));
    light *= terminator;
    #line 547
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (SNdotL - 0.01)) / 0.99) * 4.0) * atten));
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    #line 551
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.objnormal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform mat4 unity_World2Shadow[4];
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec4 tmpvar_3;
  tmpvar_3.x = gl_MultiTexCoord0.x;
  tmpvar_3.y = gl_MultiTexCoord0.y;
  tmpvar_3.z = gl_MultiTexCoord1.x;
  tmpvar_3.w = gl_MultiTexCoord1.y;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * gl_Vertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_3).xyz);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform vec4 _ShadowOffsets[4];
uniform sampler2DShadow _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec3 norm_2;
  vec2 localCoords_3;
  vec4 cityoverlay_4;
  vec2 uv_5;
  vec4 color_6;
  float r_7;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_5.x = (0.5 + (0.159155 * r_7));
  uv_5.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_11;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_12;
    y_over_x_12 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_13;
    float x_14;
    x_14 = (y_over_x_12 * inversesqrt(((y_over_x_12 * y_over_x_12) + 1.0)));
    s_13 = (sign(x_14) * (1.5708 - (sqrt((1.0 - abs(x_14))) * (1.5708 + (abs(x_14) * (-0.214602 + (abs(x_14) * (0.0865667 + (abs(x_14) * -0.0310296)))))))));
    r_11 = s_13;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_11 = (s_13 + 3.14159);
      } else {
        r_11 = (r_11 - 3.14159);
      };
    };
  } else {
    r_11 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_15;
  tmpvar_15 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_16;
  tmpvar_16 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_17;
  tmpvar_17 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_18;
  tmpvar_18.x = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_18.y = dFdx(tmpvar_15);
  tmpvar_18.z = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_18.w = dFdy(tmpvar_15);
  vec4 tmpvar_19;
  tmpvar_19 = texture2DGradARB (_MainTex, uv_5, tmpvar_18.xy, tmpvar_18.zw);
  float tmpvar_20;
  tmpvar_20 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_21;
  tmpvar_21 = texture2DGradARB (_CityOverlayTex, uv_5, tmpvar_18.xy, tmpvar_18.zw);
  cityoverlay_4.xyz = tmpvar_21.xyz;
  vec2 tmpvar_22;
  tmpvar_22 = (texture2DGradARB (_BumpMap, uv_5, tmpvar_18.xy, tmpvar_18.zw).wy - vec2(0.5, 0.5));
  localCoords_3.x = (tmpvar_22.x * 0.25);
  localCoords_3.y = (tmpvar_22.y * 0.5);
  uv_5.x = (uv_5.x - 0.5);
  vec2 tmpvar_23;
  tmpvar_23 = (uv_5 + localCoords_3);
  uv_5 = tmpvar_23;
  norm_2.z = cos((6.28319 * tmpvar_23.x));
  norm_2.x = sin((6.28319 * tmpvar_23.x));
  norm_2.y = cos((3.14159 * tmpvar_23.y));
  vec3 tmpvar_24;
  tmpvar_24 = -(norm_2);
  norm_2 = tmpvar_24;
  vec3 tmpvar_25;
  tmpvar_25 = abs(xlv_TEXCOORD6);
  float tmpvar_26;
  tmpvar_26 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  cityoverlay_4.w = (tmpvar_21.w * clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0));
  vec4 tmpvar_27;
  tmpvar_27 = (cityoverlay_4 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_25.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_25.yyyy));
  citydarkoverlay_1.xyz = tmpvar_27.xyz;
  vec4 tmpvar_28;
  tmpvar_28 = (cityoverlay_4 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_25.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_25.yyyy));
  vec4 tmpvar_29;
  tmpvar_29 = (mix (mix ((xlv_TEXCOORD1 + mix ((0.25 * (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_20)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_20)), tmpvar_25.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_20)), tmpvar_25.yyyy) - 0.5)), vec4(0.0, 0.0, 0.0, 0.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))), tmpvar_19, vec4(tmpvar_26)), tmpvar_28, tmpvar_28.wwww) * _Color);
  color_6.w = tmpvar_29.w;
  float tmpvar_30;
  tmpvar_30 = clamp (dot (tmpvar_24, -(_SunDir)), 0.0, 1.0);
  vec4 shadows_31;
  vec3 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD4.xyz / xlv_TEXCOORD4.w);
  shadows_31.x = shadow2D (_ShadowMapTexture, (tmpvar_32 + _ShadowOffsets[0].xyz)).x;
  shadows_31.y = shadow2D (_ShadowMapTexture, (tmpvar_32 + _ShadowOffsets[1].xyz)).x;
  shadows_31.z = shadow2D (_ShadowMapTexture, (tmpvar_32 + _ShadowOffsets[2].xyz)).x;
  shadows_31.w = shadow2D (_ShadowMapTexture, (tmpvar_32 + _ShadowOffsets[3].xyz)).x;
  vec4 tmpvar_33;
  tmpvar_33 = (_LightShadowData.xxxx + (shadows_31 * (1.0 - _LightShadowData.xxxx)));
  shadows_31 = tmpvar_33;
  float tmpvar_34;
  tmpvar_34 = (((float((xlv_TEXCOORD3.z > 0.0)) * texture2D (_LightTexture0, ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5)).w) * texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz))).w) * dot (tmpvar_33, vec4(0.25, 0.25, 0.25, 0.25)));
  vec3 tmpvar_35;
  tmpvar_35 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * mix (clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), tmpvar_30, tmpvar_26)) * 4.0) * tmpvar_34), 0.0, 1.0))), 0.0, 1.0) * clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0));
  color_6.xyz = (tmpvar_29.xyz + (_Albedo * tmpvar_35));
  color_6.xyz = (color_6.xyz * tmpvar_35);
  citydarkoverlay_1.w = (tmpvar_27.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_30 - 0.01)) / 0.99) * 4.0) * tmpvar_34), 0.0, 1.0), 0.0, 1.0)));
  color_6.xyz = mix (color_6, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_6.w = 1.0;
  gl_FragData[0] = color_6;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Matrix 4 [unity_World2Shadow0]
Matrix 8 [_Object2World]
Matrix 12 [_LightMatrix0]
"vs_3_0
; 36 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
def c17, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
mov r1.xyz, v2
mov r1.w, c17.x
dp4 r2.z, r1, c10
dp4 r2.x, r1, c8
dp4 r2.y, r1, c9
mov r0.zw, v4.xyxy
mov r0.xy, v3
dp4 r2.w, r0, r0
rsq r1.x, r2.w
mul r0.xyz, r1.x, r0
mov o7.xyz, -r0
dp3 r0.w, r2, r2
rsq r0.w, r0.w
mul o6.xyz, r0.w, r2
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
dp4 r0.w, v0, c11
add r1.xyz, -r0, c16
dp3 r1.x, r1, r1
rsq r1.x, r1.x
mov o2, v1
dp4 o4.w, r0, c15
dp4 o4.z, r0, c14
dp4 o4.y, r0, c13
dp4 o4.x, r0, c12
dp4 o5.w, r0, c7
dp4 o5.z, r0, c6
dp4 o5.y, r0, c5
dp4 o5.x, r0, c4
rcp o1.x, r1.x
mov o3.xyz, v2
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  highp vec3 p_2;
  p_2 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_1;
  highp vec4 tmpvar_4;
  tmpvar_4.x = _glesMultiTexCoord0.x;
  tmpvar_4.y = _glesMultiTexCoord0.y;
  tmpvar_4.z = _glesMultiTexCoord1.x;
  tmpvar_4.w = _glesMultiTexCoord1.y;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_4).xyz);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shadow_samplers : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 _ShadowOffsets[4];
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float terminator_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float TNdotL_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump vec4 citydarkoverlay_8;
  mediump float handoff_9;
  mediump float detailLevel_10;
  mediump vec4 detail_11;
  mediump vec3 norm_12;
  highp vec2 localCoords_13;
  mediump vec4 encnorm_14;
  mediump vec4 citylightoverlaydetailZ_15;
  mediump vec4 citylightoverlaydetailY_16;
  mediump vec4 citylightoverlaydetailX_17;
  mediump vec4 citydarkoverlaydetailZ_18;
  mediump vec4 citydarkoverlaydetailY_19;
  mediump vec4 citydarkoverlaydetailX_20;
  mediump vec4 cityoverlay_21;
  mediump float vertLerp_22;
  mediump vec4 main_23;
  highp vec2 uv_24;
  mediump vec4 color_25;
  highp float r_26;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_26));
  uv_24.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_30;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_31;
    y_over_x_31 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_32;
    highp float x_33;
    x_33 = (y_over_x_31 * inversesqrt(((y_over_x_31 * y_over_x_31) + 1.0)));
    s_32 = (sign(x_33) * (1.5708 - (sqrt((1.0 - abs(x_33))) * (1.5708 + (abs(x_33) * (-0.214602 + (abs(x_33) * (0.0865667 + (abs(x_33) * -0.0310296)))))))));
    r_30 = s_32;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_30 = (s_32 + 3.14159);
      } else {
        r_30 = (r_30 - 3.14159);
      };
    };
  } else {
    r_30 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_34;
  tmpvar_34 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_MainTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  main_23 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD6.zy * _DetailScale);
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zx * _DetailScale);
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.xy * _DetailScale);
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  highp float tmpvar_45;
  tmpvar_45 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_22 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailVertTex, tmpvar_42);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailTex, tmpvar_39);
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_47, vec4(vertLerp_22));
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailVertTex, tmpvar_43);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailTex, tmpvar_40);
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (tmpvar_49, tmpvar_50, vec4(vertLerp_22));
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailVertTex, tmpvar_44);
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailTex, tmpvar_41);
  mediump vec4 tmpvar_54;
  tmpvar_54 = mix (tmpvar_52, tmpvar_53, vec4(vertLerp_22));
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2DGradEXT (_CityOverlayTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  cityoverlay_21 = tmpvar_55;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_56 = texture2D (_CityDarkOverlayDetailTex, P_57);
  citydarkoverlaydetailX_20 = tmpvar_56;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityDarkOverlayDetailTex, P_59);
  citydarkoverlaydetailY_19 = tmpvar_58;
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_60 = texture2D (_CityDarkOverlayDetailTex, P_61);
  citydarkoverlaydetailZ_18 = tmpvar_60;
  lowp vec4 tmpvar_62;
  highp vec2 P_63;
  P_63 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_62 = texture2D (_CityLightOverlayDetailTex, P_63);
  citylightoverlaydetailX_17 = tmpvar_62;
  lowp vec4 tmpvar_64;
  highp vec2 P_65;
  P_65 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_64 = texture2D (_CityLightOverlayDetailTex, P_65);
  citylightoverlaydetailY_16 = tmpvar_64;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_66 = texture2D (_CityLightOverlayDetailTex, P_67);
  citylightoverlaydetailZ_15 = tmpvar_66;
  lowp vec4 tmpvar_68;
  tmpvar_68 = texture2DGradEXT (_BumpMap, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  encnorm_14 = tmpvar_68;
  mediump vec2 tmpvar_69;
  tmpvar_69 = encnorm_14.wy;
  localCoords_13 = tmpvar_69;
  highp vec2 tmpvar_70;
  tmpvar_70 = (localCoords_13 - vec2(0.5, 0.5));
  localCoords_13.x = (tmpvar_70.x * 0.25);
  localCoords_13.y = (tmpvar_70.y * 0.5);
  uv_24.x = (uv_24.x - 0.5);
  highp vec2 tmpvar_71;
  tmpvar_71 = (uv_24 + localCoords_13);
  uv_24 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = cos((6.28319 * tmpvar_71.x));
  norm_12.z = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = sin((6.28319 * tmpvar_71.x));
  norm_12.x = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = cos((3.14159 * tmpvar_71.y));
  norm_12.y = tmpvar_74;
  mediump vec3 tmpvar_75;
  tmpvar_75 = -(norm_12);
  norm_12 = tmpvar_75;
  highp vec3 tmpvar_76;
  tmpvar_76 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (tmpvar_54, tmpvar_48, tmpvar_76.xxxx);
  detail_11 = tmpvar_77;
  highp vec4 tmpvar_78;
  tmpvar_78 = (0.25 * (mix (detail_11, tmpvar_51, tmpvar_76.yyyy) - 0.5));
  detail_11 = tmpvar_78;
  highp float tmpvar_79;
  tmpvar_79 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_10 = tmpvar_79;
  mediump vec4 tmpvar_80;
  tmpvar_80 = mix (detail_11, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_10));
  highp vec4 tmpvar_81;
  tmpvar_81 = (xlv_TEXCOORD1 + tmpvar_80);
  color_25 = tmpvar_81;
  highp float tmpvar_82;
  tmpvar_82 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_9 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0);
  cityoverlay_21.w = (cityoverlay_21.w * tmpvar_83);
  highp vec4 tmpvar_84;
  tmpvar_84 = mix (citydarkoverlaydetailZ_18, citydarkoverlaydetailX_20, tmpvar_76.xxxx);
  detail_11 = tmpvar_84;
  highp vec4 tmpvar_85;
  tmpvar_85 = mix (detail_11, citydarkoverlaydetailY_19, tmpvar_76.yyyy);
  detail_11 = tmpvar_85;
  mediump vec4 tmpvar_86;
  tmpvar_86 = (cityoverlay_21 * detail_11);
  citydarkoverlay_8.xyz = tmpvar_86.xyz;
  highp vec4 tmpvar_87;
  tmpvar_87 = mix (citylightoverlaydetailZ_15, citylightoverlaydetailX_17, tmpvar_76.xxxx);
  detail_11 = tmpvar_87;
  highp vec4 tmpvar_88;
  tmpvar_88 = mix (detail_11, citylightoverlaydetailY_16, tmpvar_76.yyyy);
  detail_11 = tmpvar_88;
  mediump vec4 tmpvar_89;
  tmpvar_89 = (cityoverlay_21 * detail_11);
  mediump vec4 tmpvar_90;
  tmpvar_90 = (mix (mix (color_25, main_23, vec4(handoff_9)), tmpvar_89, tmpvar_89.wwww) * _Color);
  color_25.w = tmpvar_90.w;
  highp vec3 tmpvar_91;
  tmpvar_91 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_91;
  highp vec3 tmpvar_92;
  tmpvar_92 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_92;
  highp float tmpvar_93;
  tmpvar_93 = clamp (dot (xlv_TEXCOORD5, lightDirection_6), 0.0, 1.0);
  TNdotL_5 = tmpvar_93;
  mediump float tmpvar_94;
  tmpvar_94 = clamp (dot (tmpvar_75, -(_SunDir)), 0.0, 1.0);
  lowp vec4 tmpvar_95;
  highp vec2 P_96;
  P_96 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_95 = texture2D (_LightTexture0, P_96);
  highp float tmpvar_97;
  tmpvar_97 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_98;
  tmpvar_98 = texture2D (_LightTextureB0, vec2(tmpvar_97));
  lowp float tmpvar_99;
  mediump vec4 shadows_100;
  highp vec3 tmpvar_101;
  tmpvar_101 = (xlv_TEXCOORD4.xyz / xlv_TEXCOORD4.w);
  highp vec3 coord_102;
  coord_102 = (tmpvar_101 + _ShadowOffsets[0].xyz);
  lowp float tmpvar_103;
  tmpvar_103 = shadow2DEXT (_ShadowMapTexture, coord_102);
  shadows_100.x = tmpvar_103;
  highp vec3 coord_104;
  coord_104 = (tmpvar_101 + _ShadowOffsets[1].xyz);
  lowp float tmpvar_105;
  tmpvar_105 = shadow2DEXT (_ShadowMapTexture, coord_104);
  shadows_100.y = tmpvar_105;
  highp vec3 coord_106;
  coord_106 = (tmpvar_101 + _ShadowOffsets[2].xyz);
  lowp float tmpvar_107;
  tmpvar_107 = shadow2DEXT (_ShadowMapTexture, coord_106);
  shadows_100.z = tmpvar_107;
  highp vec3 coord_108;
  coord_108 = (tmpvar_101 + _ShadowOffsets[3].xyz);
  lowp float tmpvar_109;
  tmpvar_109 = shadow2DEXT (_ShadowMapTexture, coord_108);
  shadows_100.w = tmpvar_109;
  highp vec4 tmpvar_110;
  tmpvar_110 = (_LightShadowData.xxxx + (shadows_100 * (1.0 - _LightShadowData.xxxx)));
  shadows_100 = tmpvar_110;
  mediump float tmpvar_111;
  tmpvar_111 = dot (shadows_100, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_99 = tmpvar_111;
  highp float tmpvar_112;
  tmpvar_112 = (((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_95.w) * tmpvar_98.w) * tmpvar_99);
  atten_4 = tmpvar_112;
  mediump float tmpvar_113;
  tmpvar_113 = clamp ((((_LightColor0.w * mix (TNdotL_5, tmpvar_94, handoff_9)) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_114;
  tmpvar_114 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_113)), 0.0, 1.0);
  light_3 = tmpvar_114;
  highp float tmpvar_115;
  tmpvar_115 = clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0);
  terminator_2 = tmpvar_115;
  mediump vec3 tmpvar_116;
  tmpvar_116 = (light_3 * terminator_2);
  light_3 = tmpvar_116;
  highp vec3 tmpvar_117;
  tmpvar_117 = (tmpvar_90.xyz + (_Albedo * tmpvar_116));
  color_25.xyz = tmpvar_117;
  color_25.xyz = (color_25.xyz * tmpvar_116);
  citydarkoverlay_8.w = (tmpvar_86.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_94 - 0.01)) / 0.99) * 4.0) * atten_4), 0.0, 1.0), 0.0, 1.0)));
  color_25.xyz = mix (color_25, citydarkoverlay_8, citydarkoverlay_8.wwww).xyz;
  color_25.w = 1.0;
  tmpvar_1 = color_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 445
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 objnormal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
};
#line 435
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 418
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 422
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 426
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp mat4 _Rotation;
#line 430
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 434
uniform sampler2D _CityLightOverlayDetailTex;
#line 457
#line 483
#line 457
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 461
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    #line 465
    o.color = v.color;
    o.objnormal = v.normal;
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    #line 470
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.objnormal);
    xlv_TEXCOORD3 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereCoords);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_shadow2D(mediump sampler2DShadow s, vec3 coord) { return texture (s, coord); }
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 445
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 objnormal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
};
#line 435
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 418
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 422
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 426
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp mat4 _Rotation;
#line 430
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 434
uniform sampler2D _CityLightOverlayDetailTex;
#line 457
#line 483
#line 472
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 474
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 478
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 336
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 332
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 317
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    #line 319
    highp vec3 coord = (shadowCoord.xyz / shadowCoord.w);
    mediump vec4 shadows;
    shadows.x = xll_shadow2D( _ShadowMapTexture, (coord + vec3( _ShadowOffsets[0])).xyz);
    shadows.y = xll_shadow2D( _ShadowMapTexture, (coord + vec3( _ShadowOffsets[1])).xyz);
    #line 323
    shadows.z = xll_shadow2D( _ShadowMapTexture, (coord + vec3( _ShadowOffsets[2])).xyz);
    shadows.w = xll_shadow2D( _ShadowMapTexture, (coord + vec3( _ShadowOffsets[3])).xyz);
    shadows = (_LightShadowData.xxxx + (shadows * (1.0 - _LightShadowData.xxxx)));
    mediump float shadow = dot( shadows, vec4( 0.25));
    #line 327
    return shadow;
}
#line 483
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    #line 487
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 491
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    highp vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    highp vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    highp vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    #line 495
    highp vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    highp vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    highp vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, (-IN.sphereCoords))) - 0.95)) + 0.5));
    #line 499
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    #line 503
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    #line 507
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    highp vec2 localCoords = encnorm.wy;
    #line 511
    localCoords -= vec2( 0.5);
    localCoords.x *= 0.25;
    localCoords.y *= 0.5;
    uv.x -= 0.5;
    #line 515
    uv += localCoords;
    mediump vec3 norm;
    norm.z = cos((6.28319 * uv.x));
    norm.x = sin((6.28319 * uv.x));
    #line 519
    norm.y = cos((3.14159 * uv.y));
    norm = (-norm);
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    #line 523
    detail = (0.25 * (mix( detail, detailY, vec4( sphereNrm.y)) - 0.5));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (IN.color + mix( detail.xyzw, vec4( 0.0), vec4( detailLevel)));
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    #line 527
    color = mix( color, main, vec4( handoff));
    cityoverlay.w *= xll_saturate_f(floor((IN.color.w + 0.99)));
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    #line 531
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    #line 535
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    #line 539
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * unitySampleShadow( IN._ShadowCoord));
    #line 543
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    mediump float terminator = xll_saturate_f(floor((1.01 + dot( IN.sphereCoords, _SunDir))));
    light *= terminator;
    #line 547
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (SNdotL - 0.01)) / 0.99) * 4.0) * atten));
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    #line 551
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.objnormal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec4 _LightPositionRange;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec4 tmpvar_3;
  tmpvar_3.x = gl_MultiTexCoord0.x;
  tmpvar_3.y = gl_MultiTexCoord0.y;
  tmpvar_3.z = gl_MultiTexCoord1.x;
  tmpvar_3.w = gl_MultiTexCoord1.y;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_3).xyz);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _LightPositionRange;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec3 norm_2;
  vec2 localCoords_3;
  vec4 cityoverlay_4;
  vec2 uv_5;
  vec4 color_6;
  float r_7;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_5.x = (0.5 + (0.159155 * r_7));
  uv_5.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_11;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_12;
    y_over_x_12 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_13;
    float x_14;
    x_14 = (y_over_x_12 * inversesqrt(((y_over_x_12 * y_over_x_12) + 1.0)));
    s_13 = (sign(x_14) * (1.5708 - (sqrt((1.0 - abs(x_14))) * (1.5708 + (abs(x_14) * (-0.214602 + (abs(x_14) * (0.0865667 + (abs(x_14) * -0.0310296)))))))));
    r_11 = s_13;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_11 = (s_13 + 3.14159);
      } else {
        r_11 = (r_11 - 3.14159);
      };
    };
  } else {
    r_11 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_15;
  tmpvar_15 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_16;
  tmpvar_16 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_17;
  tmpvar_17 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_18;
  tmpvar_18.x = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_18.y = dFdx(tmpvar_15);
  tmpvar_18.z = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_18.w = dFdy(tmpvar_15);
  vec4 tmpvar_19;
  tmpvar_19 = texture2DGradARB (_MainTex, uv_5, tmpvar_18.xy, tmpvar_18.zw);
  float tmpvar_20;
  tmpvar_20 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_21;
  tmpvar_21 = texture2DGradARB (_CityOverlayTex, uv_5, tmpvar_18.xy, tmpvar_18.zw);
  cityoverlay_4.xyz = tmpvar_21.xyz;
  vec2 tmpvar_22;
  tmpvar_22 = (texture2DGradARB (_BumpMap, uv_5, tmpvar_18.xy, tmpvar_18.zw).wy - vec2(0.5, 0.5));
  localCoords_3.x = (tmpvar_22.x * 0.25);
  localCoords_3.y = (tmpvar_22.y * 0.5);
  uv_5.x = (uv_5.x - 0.5);
  vec2 tmpvar_23;
  tmpvar_23 = (uv_5 + localCoords_3);
  uv_5 = tmpvar_23;
  norm_2.z = cos((6.28319 * tmpvar_23.x));
  norm_2.x = sin((6.28319 * tmpvar_23.x));
  norm_2.y = cos((3.14159 * tmpvar_23.y));
  vec3 tmpvar_24;
  tmpvar_24 = -(norm_2);
  norm_2 = tmpvar_24;
  vec3 tmpvar_25;
  tmpvar_25 = abs(xlv_TEXCOORD6);
  float tmpvar_26;
  tmpvar_26 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  cityoverlay_4.w = (tmpvar_21.w * clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0));
  vec4 tmpvar_27;
  tmpvar_27 = (cityoverlay_4 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_25.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_25.yyyy));
  citydarkoverlay_1 = tmpvar_27;
  vec4 tmpvar_28;
  tmpvar_28 = (cityoverlay_4 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_25.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_25.yyyy));
  vec4 tmpvar_29;
  tmpvar_29 = (mix (mix ((xlv_TEXCOORD1 + mix ((0.25 * (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_20)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_20)), tmpvar_25.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_20)), tmpvar_25.yyyy) - 0.5)), vec4(0.0, 0.0, 0.0, 0.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))), tmpvar_19, vec4(tmpvar_26)), tmpvar_28, tmpvar_28.wwww) * _Color);
  color_6 = tmpvar_29;
  float tmpvar_30;
  tmpvar_30 = clamp (dot (tmpvar_24, -(_SunDir)), 0.0, 1.0);
  float tmpvar_31;
  tmpvar_31 = mix (clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), tmpvar_30, tmpvar_26);
  vec4 tmpvar_32;
  tmpvar_32 = texture2D (_LightTexture0, vec2(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)));
  vec4 shadowVals_33;
  shadowVals_33.x = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD4 + vec3(0.0078125, 0.0078125, 0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_33.y = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD4 + vec3(-0.0078125, -0.0078125, 0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_33.z = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD4 + vec3(-0.0078125, 0.0078125, -0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_33.w = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD4 + vec3(0.0078125, -0.0078125, -0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_34;
  tmpvar_34 = lessThan (shadowVals_33, vec4(((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97)));
  vec4 tmpvar_35;
  tmpvar_35 = _LightShadowData.xxxx;
  float tmpvar_36;
  if (tmpvar_34.x) {
    tmpvar_36 = tmpvar_35.x;
  } else {
    tmpvar_36 = 1.0;
  };
  float tmpvar_37;
  if (tmpvar_34.y) {
    tmpvar_37 = tmpvar_35.y;
  } else {
    tmpvar_37 = 1.0;
  };
  float tmpvar_38;
  if (tmpvar_34.z) {
    tmpvar_38 = tmpvar_35.z;
  } else {
    tmpvar_38 = 1.0;
  };
  float tmpvar_39;
  if (tmpvar_34.w) {
    tmpvar_39 = tmpvar_35.w;
  } else {
    tmpvar_39 = 1.0;
  };
  vec4 tmpvar_40;
  tmpvar_40.x = tmpvar_36;
  tmpvar_40.y = tmpvar_37;
  tmpvar_40.z = tmpvar_38;
  tmpvar_40.w = tmpvar_39;
  float tmpvar_41;
  tmpvar_41 = (tmpvar_32.w * dot (tmpvar_40, vec4(0.25, 0.25, 0.25, 0.25)));
  vec3 tmpvar_42;
  tmpvar_42 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_31) * 4.0) * tmpvar_41), 0.0, 1.0))), 0.0, 1.0) * clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0));
  color_6.xyz = (tmpvar_29.xyz + (_Albedo * tmpvar_42));
  color_6.xyz = (color_6.xyz * tmpvar_42);
  citydarkoverlay_1.w = (tmpvar_27.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_30 - 0.01)) / 0.99) * 4.0) * tmpvar_41), 0.0, 1.0), 0.0, 1.0)));
  color_6.xyz = mix (color_6, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_6.w = 1.0;
  gl_FragData[0] = color_6;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_LightPositionRange]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 32 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
def c14, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
mov r1.xyz, v2
mov r1.w, c14.x
dp4 r2.z, r1, c6
dp4 r2.x, r1, c4
dp4 r2.y, r1, c5
mov r0.zw, v4.xyxy
mov r0.xy, v3
dp4 r2.w, r0, r0
rsq r1.x, r2.w
mul r0.xyz, r1.x, r0
mov o7.xyz, -r0
dp3 r0.w, r2, r2
rsq r0.w, r0.w
mul o6.xyz, r0.w, r2
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
dp4 r0.w, v0, c7
add r1.xyz, -r0, c12
dp3 r1.x, r1, r1
rsq r1.x, r1.x
mov o2, v1
dp4 o4.z, r0, c10
dp4 o4.y, r0, c9
dp4 o4.x, r0, c8
rcp o1.x, r1.x
mov o3.xyz, v2
add o5.xyz, r0, -c13
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  highp vec3 p_2;
  p_2 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_1;
  highp vec4 tmpvar_4;
  tmpvar_4.x = _glesMultiTexCoord0.x;
  tmpvar_4.y = _glesMultiTexCoord0.y;
  tmpvar_4.z = _glesMultiTexCoord1.x;
  tmpvar_4.w = _glesMultiTexCoord1.y;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_4).xyz);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float terminator_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float TNdotL_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump vec4 citydarkoverlay_8;
  mediump float handoff_9;
  mediump float detailLevel_10;
  mediump vec4 detail_11;
  mediump vec3 norm_12;
  highp vec2 localCoords_13;
  mediump vec4 encnorm_14;
  mediump vec4 citylightoverlaydetailZ_15;
  mediump vec4 citylightoverlaydetailY_16;
  mediump vec4 citylightoverlaydetailX_17;
  mediump vec4 citydarkoverlaydetailZ_18;
  mediump vec4 citydarkoverlaydetailY_19;
  mediump vec4 citydarkoverlaydetailX_20;
  mediump vec4 cityoverlay_21;
  mediump float vertLerp_22;
  mediump vec4 main_23;
  highp vec2 uv_24;
  mediump vec4 color_25;
  highp float r_26;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_26));
  uv_24.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_30;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_31;
    y_over_x_31 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_32;
    highp float x_33;
    x_33 = (y_over_x_31 * inversesqrt(((y_over_x_31 * y_over_x_31) + 1.0)));
    s_32 = (sign(x_33) * (1.5708 - (sqrt((1.0 - abs(x_33))) * (1.5708 + (abs(x_33) * (-0.214602 + (abs(x_33) * (0.0865667 + (abs(x_33) * -0.0310296)))))))));
    r_30 = s_32;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_30 = (s_32 + 3.14159);
      } else {
        r_30 = (r_30 - 3.14159);
      };
    };
  } else {
    r_30 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_34;
  tmpvar_34 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_MainTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  main_23 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD6.zy * _DetailScale);
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zx * _DetailScale);
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.xy * _DetailScale);
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  highp float tmpvar_45;
  tmpvar_45 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_22 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailVertTex, tmpvar_42);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailTex, tmpvar_39);
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_47, vec4(vertLerp_22));
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailVertTex, tmpvar_43);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailTex, tmpvar_40);
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (tmpvar_49, tmpvar_50, vec4(vertLerp_22));
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailVertTex, tmpvar_44);
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailTex, tmpvar_41);
  mediump vec4 tmpvar_54;
  tmpvar_54 = mix (tmpvar_52, tmpvar_53, vec4(vertLerp_22));
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2DGradEXT (_CityOverlayTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  cityoverlay_21 = tmpvar_55;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_56 = texture2D (_CityDarkOverlayDetailTex, P_57);
  citydarkoverlaydetailX_20 = tmpvar_56;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityDarkOverlayDetailTex, P_59);
  citydarkoverlaydetailY_19 = tmpvar_58;
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_60 = texture2D (_CityDarkOverlayDetailTex, P_61);
  citydarkoverlaydetailZ_18 = tmpvar_60;
  lowp vec4 tmpvar_62;
  highp vec2 P_63;
  P_63 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_62 = texture2D (_CityLightOverlayDetailTex, P_63);
  citylightoverlaydetailX_17 = tmpvar_62;
  lowp vec4 tmpvar_64;
  highp vec2 P_65;
  P_65 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_64 = texture2D (_CityLightOverlayDetailTex, P_65);
  citylightoverlaydetailY_16 = tmpvar_64;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_66 = texture2D (_CityLightOverlayDetailTex, P_67);
  citylightoverlaydetailZ_15 = tmpvar_66;
  lowp vec4 tmpvar_68;
  tmpvar_68 = texture2DGradEXT (_BumpMap, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  encnorm_14 = tmpvar_68;
  mediump vec2 tmpvar_69;
  tmpvar_69 = encnorm_14.wy;
  localCoords_13 = tmpvar_69;
  highp vec2 tmpvar_70;
  tmpvar_70 = (localCoords_13 - vec2(0.5, 0.5));
  localCoords_13.x = (tmpvar_70.x * 0.25);
  localCoords_13.y = (tmpvar_70.y * 0.5);
  uv_24.x = (uv_24.x - 0.5);
  highp vec2 tmpvar_71;
  tmpvar_71 = (uv_24 + localCoords_13);
  uv_24 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = cos((6.28319 * tmpvar_71.x));
  norm_12.z = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = sin((6.28319 * tmpvar_71.x));
  norm_12.x = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = cos((3.14159 * tmpvar_71.y));
  norm_12.y = tmpvar_74;
  mediump vec3 tmpvar_75;
  tmpvar_75 = -(norm_12);
  norm_12 = tmpvar_75;
  highp vec3 tmpvar_76;
  tmpvar_76 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (tmpvar_54, tmpvar_48, tmpvar_76.xxxx);
  detail_11 = tmpvar_77;
  highp vec4 tmpvar_78;
  tmpvar_78 = (0.25 * (mix (detail_11, tmpvar_51, tmpvar_76.yyyy) - 0.5));
  detail_11 = tmpvar_78;
  highp float tmpvar_79;
  tmpvar_79 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_10 = tmpvar_79;
  mediump vec4 tmpvar_80;
  tmpvar_80 = mix (detail_11, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_10));
  highp vec4 tmpvar_81;
  tmpvar_81 = (xlv_TEXCOORD1 + tmpvar_80);
  color_25 = tmpvar_81;
  highp float tmpvar_82;
  tmpvar_82 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_9 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0);
  cityoverlay_21.w = (cityoverlay_21.w * tmpvar_83);
  highp vec4 tmpvar_84;
  tmpvar_84 = mix (citydarkoverlaydetailZ_18, citydarkoverlaydetailX_20, tmpvar_76.xxxx);
  detail_11 = tmpvar_84;
  highp vec4 tmpvar_85;
  tmpvar_85 = mix (detail_11, citydarkoverlaydetailY_19, tmpvar_76.yyyy);
  detail_11 = tmpvar_85;
  mediump vec4 tmpvar_86;
  tmpvar_86 = (cityoverlay_21 * detail_11);
  citydarkoverlay_8 = tmpvar_86;
  highp vec4 tmpvar_87;
  tmpvar_87 = mix (citylightoverlaydetailZ_15, citylightoverlaydetailX_17, tmpvar_76.xxxx);
  detail_11 = tmpvar_87;
  highp vec4 tmpvar_88;
  tmpvar_88 = mix (detail_11, citylightoverlaydetailY_16, tmpvar_76.yyyy);
  detail_11 = tmpvar_88;
  mediump vec4 tmpvar_89;
  tmpvar_89 = (cityoverlay_21 * detail_11);
  mediump vec4 tmpvar_90;
  tmpvar_90 = (mix (mix (color_25, main_23, vec4(handoff_9)), tmpvar_89, tmpvar_89.wwww) * _Color);
  color_25 = tmpvar_90;
  highp vec3 tmpvar_91;
  tmpvar_91 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_91;
  highp vec3 tmpvar_92;
  tmpvar_92 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_92;
  highp float tmpvar_93;
  tmpvar_93 = clamp (dot (xlv_TEXCOORD5, lightDirection_6), 0.0, 1.0);
  TNdotL_5 = tmpvar_93;
  mediump float tmpvar_94;
  tmpvar_94 = clamp (dot (tmpvar_75, -(_SunDir)), 0.0, 1.0);
  mediump float tmpvar_95;
  tmpvar_95 = mix (TNdotL_5, tmpvar_94, handoff_9);
  highp float tmpvar_96;
  tmpvar_96 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_97;
  tmpvar_97 = texture2D (_LightTexture0, vec2(tmpvar_96));
  highp float tmpvar_98;
  mediump vec4 shadows_99;
  highp vec4 shadowVals_100;
  highp float tmpvar_101;
  tmpvar_101 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  highp vec3 vec_102;
  vec_102 = (xlv_TEXCOORD4 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 packDist_103;
  lowp vec4 tmpvar_104;
  tmpvar_104 = textureCube (_ShadowMapTexture, vec_102);
  packDist_103 = tmpvar_104;
  shadowVals_100.x = dot (packDist_103, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_105;
  vec_105 = (xlv_TEXCOORD4 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 packDist_106;
  lowp vec4 tmpvar_107;
  tmpvar_107 = textureCube (_ShadowMapTexture, vec_105);
  packDist_106 = tmpvar_107;
  shadowVals_100.y = dot (packDist_106, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_108;
  vec_108 = (xlv_TEXCOORD4 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 packDist_109;
  lowp vec4 tmpvar_110;
  tmpvar_110 = textureCube (_ShadowMapTexture, vec_108);
  packDist_109 = tmpvar_110;
  shadowVals_100.z = dot (packDist_109, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_111;
  vec_111 = (xlv_TEXCOORD4 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 packDist_112;
  lowp vec4 tmpvar_113;
  tmpvar_113 = textureCube (_ShadowMapTexture, vec_111);
  packDist_112 = tmpvar_113;
  shadowVals_100.w = dot (packDist_112, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_114;
  tmpvar_114 = lessThan (shadowVals_100, vec4(tmpvar_101));
  highp vec4 tmpvar_115;
  tmpvar_115 = _LightShadowData.xxxx;
  highp float tmpvar_116;
  if (tmpvar_114.x) {
    tmpvar_116 = tmpvar_115.x;
  } else {
    tmpvar_116 = 1.0;
  };
  highp float tmpvar_117;
  if (tmpvar_114.y) {
    tmpvar_117 = tmpvar_115.y;
  } else {
    tmpvar_117 = 1.0;
  };
  highp float tmpvar_118;
  if (tmpvar_114.z) {
    tmpvar_118 = tmpvar_115.z;
  } else {
    tmpvar_118 = 1.0;
  };
  highp float tmpvar_119;
  if (tmpvar_114.w) {
    tmpvar_119 = tmpvar_115.w;
  } else {
    tmpvar_119 = 1.0;
  };
  highp vec4 tmpvar_120;
  tmpvar_120.x = tmpvar_116;
  tmpvar_120.y = tmpvar_117;
  tmpvar_120.z = tmpvar_118;
  tmpvar_120.w = tmpvar_119;
  shadows_99 = tmpvar_120;
  mediump float tmpvar_121;
  tmpvar_121 = dot (shadows_99, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_98 = tmpvar_121;
  highp float tmpvar_122;
  tmpvar_122 = (tmpvar_97.w * tmpvar_98);
  atten_4 = tmpvar_122;
  mediump float tmpvar_123;
  tmpvar_123 = clamp ((((_LightColor0.w * tmpvar_95) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_124;
  tmpvar_124 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_123)), 0.0, 1.0);
  light_3 = tmpvar_124;
  highp float tmpvar_125;
  tmpvar_125 = clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0);
  terminator_2 = tmpvar_125;
  mediump vec3 tmpvar_126;
  tmpvar_126 = (light_3 * terminator_2);
  light_3 = tmpvar_126;
  highp vec3 tmpvar_127;
  tmpvar_127 = (tmpvar_90.xyz + (_Albedo * tmpvar_126));
  color_25.xyz = tmpvar_127;
  color_25.xyz = (color_25.xyz * tmpvar_126);
  citydarkoverlay_8.w = (tmpvar_86.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_94 - 0.01)) / 0.99) * 4.0) * atten_4), 0.0, 1.0), 0.0, 1.0)));
  color_25.xyz = mix (color_25, citydarkoverlay_8, citydarkoverlay_8.wwww).xyz;
  color_25.w = 1.0;
  tmpvar_1 = color_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  highp vec3 p_2;
  p_2 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_1;
  highp vec4 tmpvar_4;
  tmpvar_4.x = _glesMultiTexCoord0.x;
  tmpvar_4.y = _glesMultiTexCoord0.y;
  tmpvar_4.z = _glesMultiTexCoord1.x;
  tmpvar_4.w = _glesMultiTexCoord1.y;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_4).xyz);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float terminator_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float TNdotL_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump vec4 citydarkoverlay_8;
  mediump float handoff_9;
  mediump float detailLevel_10;
  mediump vec4 detail_11;
  mediump vec3 norm_12;
  highp vec2 localCoords_13;
  mediump vec4 encnorm_14;
  mediump vec4 citylightoverlaydetailZ_15;
  mediump vec4 citylightoverlaydetailY_16;
  mediump vec4 citylightoverlaydetailX_17;
  mediump vec4 citydarkoverlaydetailZ_18;
  mediump vec4 citydarkoverlaydetailY_19;
  mediump vec4 citydarkoverlaydetailX_20;
  mediump vec4 cityoverlay_21;
  mediump float vertLerp_22;
  mediump vec4 main_23;
  highp vec2 uv_24;
  mediump vec4 color_25;
  highp float r_26;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_26));
  uv_24.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_30;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_31;
    y_over_x_31 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_32;
    highp float x_33;
    x_33 = (y_over_x_31 * inversesqrt(((y_over_x_31 * y_over_x_31) + 1.0)));
    s_32 = (sign(x_33) * (1.5708 - (sqrt((1.0 - abs(x_33))) * (1.5708 + (abs(x_33) * (-0.214602 + (abs(x_33) * (0.0865667 + (abs(x_33) * -0.0310296)))))))));
    r_30 = s_32;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_30 = (s_32 + 3.14159);
      } else {
        r_30 = (r_30 - 3.14159);
      };
    };
  } else {
    r_30 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_34;
  tmpvar_34 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_MainTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  main_23 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD6.zy * _DetailScale);
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zx * _DetailScale);
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.xy * _DetailScale);
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  highp float tmpvar_45;
  tmpvar_45 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_22 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailVertTex, tmpvar_42);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailTex, tmpvar_39);
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_47, vec4(vertLerp_22));
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailVertTex, tmpvar_43);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailTex, tmpvar_40);
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (tmpvar_49, tmpvar_50, vec4(vertLerp_22));
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailVertTex, tmpvar_44);
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailTex, tmpvar_41);
  mediump vec4 tmpvar_54;
  tmpvar_54 = mix (tmpvar_52, tmpvar_53, vec4(vertLerp_22));
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2DGradEXT (_CityOverlayTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  cityoverlay_21 = tmpvar_55;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_56 = texture2D (_CityDarkOverlayDetailTex, P_57);
  citydarkoverlaydetailX_20 = tmpvar_56;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityDarkOverlayDetailTex, P_59);
  citydarkoverlaydetailY_19 = tmpvar_58;
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_60 = texture2D (_CityDarkOverlayDetailTex, P_61);
  citydarkoverlaydetailZ_18 = tmpvar_60;
  lowp vec4 tmpvar_62;
  highp vec2 P_63;
  P_63 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_62 = texture2D (_CityLightOverlayDetailTex, P_63);
  citylightoverlaydetailX_17 = tmpvar_62;
  lowp vec4 tmpvar_64;
  highp vec2 P_65;
  P_65 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_64 = texture2D (_CityLightOverlayDetailTex, P_65);
  citylightoverlaydetailY_16 = tmpvar_64;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_66 = texture2D (_CityLightOverlayDetailTex, P_67);
  citylightoverlaydetailZ_15 = tmpvar_66;
  lowp vec4 tmpvar_68;
  tmpvar_68 = texture2DGradEXT (_BumpMap, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  encnorm_14 = tmpvar_68;
  mediump vec2 tmpvar_69;
  tmpvar_69 = encnorm_14.wy;
  localCoords_13 = tmpvar_69;
  highp vec2 tmpvar_70;
  tmpvar_70 = (localCoords_13 - vec2(0.5, 0.5));
  localCoords_13.x = (tmpvar_70.x * 0.25);
  localCoords_13.y = (tmpvar_70.y * 0.5);
  uv_24.x = (uv_24.x - 0.5);
  highp vec2 tmpvar_71;
  tmpvar_71 = (uv_24 + localCoords_13);
  uv_24 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = cos((6.28319 * tmpvar_71.x));
  norm_12.z = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = sin((6.28319 * tmpvar_71.x));
  norm_12.x = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = cos((3.14159 * tmpvar_71.y));
  norm_12.y = tmpvar_74;
  mediump vec3 tmpvar_75;
  tmpvar_75 = -(norm_12);
  norm_12 = tmpvar_75;
  highp vec3 tmpvar_76;
  tmpvar_76 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (tmpvar_54, tmpvar_48, tmpvar_76.xxxx);
  detail_11 = tmpvar_77;
  highp vec4 tmpvar_78;
  tmpvar_78 = (0.25 * (mix (detail_11, tmpvar_51, tmpvar_76.yyyy) - 0.5));
  detail_11 = tmpvar_78;
  highp float tmpvar_79;
  tmpvar_79 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_10 = tmpvar_79;
  mediump vec4 tmpvar_80;
  tmpvar_80 = mix (detail_11, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_10));
  highp vec4 tmpvar_81;
  tmpvar_81 = (xlv_TEXCOORD1 + tmpvar_80);
  color_25 = tmpvar_81;
  highp float tmpvar_82;
  tmpvar_82 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_9 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0);
  cityoverlay_21.w = (cityoverlay_21.w * tmpvar_83);
  highp vec4 tmpvar_84;
  tmpvar_84 = mix (citydarkoverlaydetailZ_18, citydarkoverlaydetailX_20, tmpvar_76.xxxx);
  detail_11 = tmpvar_84;
  highp vec4 tmpvar_85;
  tmpvar_85 = mix (detail_11, citydarkoverlaydetailY_19, tmpvar_76.yyyy);
  detail_11 = tmpvar_85;
  mediump vec4 tmpvar_86;
  tmpvar_86 = (cityoverlay_21 * detail_11);
  citydarkoverlay_8 = tmpvar_86;
  highp vec4 tmpvar_87;
  tmpvar_87 = mix (citylightoverlaydetailZ_15, citylightoverlaydetailX_17, tmpvar_76.xxxx);
  detail_11 = tmpvar_87;
  highp vec4 tmpvar_88;
  tmpvar_88 = mix (detail_11, citylightoverlaydetailY_16, tmpvar_76.yyyy);
  detail_11 = tmpvar_88;
  mediump vec4 tmpvar_89;
  tmpvar_89 = (cityoverlay_21 * detail_11);
  mediump vec4 tmpvar_90;
  tmpvar_90 = (mix (mix (color_25, main_23, vec4(handoff_9)), tmpvar_89, tmpvar_89.wwww) * _Color);
  color_25 = tmpvar_90;
  highp vec3 tmpvar_91;
  tmpvar_91 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_91;
  highp vec3 tmpvar_92;
  tmpvar_92 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_92;
  highp float tmpvar_93;
  tmpvar_93 = clamp (dot (xlv_TEXCOORD5, lightDirection_6), 0.0, 1.0);
  TNdotL_5 = tmpvar_93;
  mediump float tmpvar_94;
  tmpvar_94 = clamp (dot (tmpvar_75, -(_SunDir)), 0.0, 1.0);
  mediump float tmpvar_95;
  tmpvar_95 = mix (TNdotL_5, tmpvar_94, handoff_9);
  highp float tmpvar_96;
  tmpvar_96 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_97;
  tmpvar_97 = texture2D (_LightTexture0, vec2(tmpvar_96));
  highp float tmpvar_98;
  mediump vec4 shadows_99;
  highp vec4 shadowVals_100;
  highp float tmpvar_101;
  tmpvar_101 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  highp vec3 vec_102;
  vec_102 = (xlv_TEXCOORD4 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 packDist_103;
  lowp vec4 tmpvar_104;
  tmpvar_104 = textureCube (_ShadowMapTexture, vec_102);
  packDist_103 = tmpvar_104;
  shadowVals_100.x = dot (packDist_103, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_105;
  vec_105 = (xlv_TEXCOORD4 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 packDist_106;
  lowp vec4 tmpvar_107;
  tmpvar_107 = textureCube (_ShadowMapTexture, vec_105);
  packDist_106 = tmpvar_107;
  shadowVals_100.y = dot (packDist_106, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_108;
  vec_108 = (xlv_TEXCOORD4 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 packDist_109;
  lowp vec4 tmpvar_110;
  tmpvar_110 = textureCube (_ShadowMapTexture, vec_108);
  packDist_109 = tmpvar_110;
  shadowVals_100.z = dot (packDist_109, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_111;
  vec_111 = (xlv_TEXCOORD4 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 packDist_112;
  lowp vec4 tmpvar_113;
  tmpvar_113 = textureCube (_ShadowMapTexture, vec_111);
  packDist_112 = tmpvar_113;
  shadowVals_100.w = dot (packDist_112, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_114;
  tmpvar_114 = lessThan (shadowVals_100, vec4(tmpvar_101));
  highp vec4 tmpvar_115;
  tmpvar_115 = _LightShadowData.xxxx;
  highp float tmpvar_116;
  if (tmpvar_114.x) {
    tmpvar_116 = tmpvar_115.x;
  } else {
    tmpvar_116 = 1.0;
  };
  highp float tmpvar_117;
  if (tmpvar_114.y) {
    tmpvar_117 = tmpvar_115.y;
  } else {
    tmpvar_117 = 1.0;
  };
  highp float tmpvar_118;
  if (tmpvar_114.z) {
    tmpvar_118 = tmpvar_115.z;
  } else {
    tmpvar_118 = 1.0;
  };
  highp float tmpvar_119;
  if (tmpvar_114.w) {
    tmpvar_119 = tmpvar_115.w;
  } else {
    tmpvar_119 = 1.0;
  };
  highp vec4 tmpvar_120;
  tmpvar_120.x = tmpvar_116;
  tmpvar_120.y = tmpvar_117;
  tmpvar_120.z = tmpvar_118;
  tmpvar_120.w = tmpvar_119;
  shadows_99 = tmpvar_120;
  mediump float tmpvar_121;
  tmpvar_121 = dot (shadows_99, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_98 = tmpvar_121;
  highp float tmpvar_122;
  tmpvar_122 = (tmpvar_97.w * tmpvar_98);
  atten_4 = tmpvar_122;
  mediump float tmpvar_123;
  tmpvar_123 = clamp ((((_LightColor0.w * tmpvar_95) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_124;
  tmpvar_124 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_123)), 0.0, 1.0);
  light_3 = tmpvar_124;
  highp float tmpvar_125;
  tmpvar_125 = clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0);
  terminator_2 = tmpvar_125;
  mediump vec3 tmpvar_126;
  tmpvar_126 = (light_3 * terminator_2);
  light_3 = tmpvar_126;
  highp vec3 tmpvar_127;
  tmpvar_127 = (tmpvar_90.xyz + (_Albedo * tmpvar_126));
  color_25.xyz = tmpvar_127;
  color_25.xyz = (color_25.xyz * tmpvar_126);
  citydarkoverlay_8.w = (tmpvar_86.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_94 - 0.01)) / 0.99) * 4.0) * atten_4), 0.0, 1.0), 0.0, 1.0)));
  color_25.xyz = mix (color_25, citydarkoverlay_8, citydarkoverlay_8.wwww).xyz;
  color_25.w = 1.0;
  tmpvar_1 = color_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 336
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 441
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 objnormal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
};
#line 431
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
#line 346
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 359
#line 367
#line 381
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 414
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 418
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 422
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp mat4 _Rotation;
#line 426
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 430
uniform sampler2D _CityLightOverlayDetailTex;
#line 453
#line 479
#line 453
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 457
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    #line 461
    o.color = v.color;
    o.objnormal = v.normal;
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    o._ShadowCoord = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    #line 466
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.objnormal);
    xlv_TEXCOORD3 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereCoords);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
vec2 xll_vecTSel_vb2_vf2_vf2 (bvec2 a, vec2 b, vec2 c) {
  return vec2 (a.x ? b.x : c.x, a.y ? b.y : c.y);
}
vec3 xll_vecTSel_vb3_vf3_vf3 (bvec3 a, vec3 b, vec3 c) {
  return vec3 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z);
}
vec4 xll_vecTSel_vb4_vf4_vf4 (bvec4 a, vec4 b, vec4 c) {
  return vec4 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z, a.w ? b.w : c.w);
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 336
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 441
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 objnormal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
};
#line 431
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
#line 346
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 359
#line 367
#line 381
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 414
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 418
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 422
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp mat4 _Rotation;
#line 426
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 430
uniform sampler2D _CityLightOverlayDetailTex;
#line 453
#line 479
#line 468
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 470
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 474
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 215
highp float DecodeFloatRGBA( in highp vec4 enc ) {
    highp vec4 kDecodeDot = vec4( 1.0, 0.00392157, 1.53787e-05, 6.22737e-09);
    return dot( enc, kDecodeDot);
}
#line 316
highp float SampleCubeDistance( in highp vec3 vec ) {
    highp vec4 packDist = texture( _ShadowMapTexture, vec);
    #line 319
    return DecodeFloatRGBA( packDist);
}
#line 321
highp float unityCubeShadow( in highp vec3 vec ) {
    #line 323
    highp float mydist = (length(vec) * _LightPositionRange.w);
    mydist *= 0.97;
    highp float z = 0.0078125;
    highp vec4 shadowVals;
    #line 327
    shadowVals.x = SampleCubeDistance( (vec + vec3( z, z, z)));
    shadowVals.y = SampleCubeDistance( (vec + vec3( (-z), (-z), z)));
    shadowVals.z = SampleCubeDistance( (vec + vec3( (-z), z, (-z))));
    shadowVals.w = SampleCubeDistance( (vec + vec3( z, (-z), (-z))));
    #line 331
    mediump vec4 shadows = xll_vecTSel_vb4_vf4_vf4 (lessThan( shadowVals, vec4( mydist)), vec4( _LightShadowData.xxxx), vec4( 1.0));
    return dot( shadows, vec4( 0.25));
}
#line 479
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    #line 483
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 487
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    highp vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    highp vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    highp vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    #line 491
    highp vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    highp vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    highp vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, (-IN.sphereCoords))) - 0.95)) + 0.5));
    #line 495
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    #line 499
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    #line 503
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    highp vec2 localCoords = encnorm.wy;
    #line 507
    localCoords -= vec2( 0.5);
    localCoords.x *= 0.25;
    localCoords.y *= 0.5;
    uv.x -= 0.5;
    #line 511
    uv += localCoords;
    mediump vec3 norm;
    norm.z = cos((6.28319 * uv.x));
    norm.x = sin((6.28319 * uv.x));
    #line 515
    norm.y = cos((3.14159 * uv.y));
    norm = (-norm);
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    #line 519
    detail = (0.25 * (mix( detail, detailY, vec4( sphereNrm.y)) - 0.5));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (IN.color + mix( detail.xyzw, vec4( 0.0), vec4( detailLevel)));
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    #line 523
    color = mix( color, main, vec4( handoff));
    cityoverlay.w *= xll_saturate_f(floor((IN.color.w + 0.99)));
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    #line 527
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    #line 531
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    #line 535
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    lowp float atten = (texture( _LightTexture0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * unityCubeShadow( IN._ShadowCoord));
    #line 539
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    mediump float terminator = xll_saturate_f(floor((1.01 + dot( IN.sphereCoords, _SunDir))));
    light *= terminator;
    #line 543
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (SNdotL - 0.01)) / 0.99) * 4.0) * atten));
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    #line 547
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.objnormal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec4 _LightPositionRange;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec4 tmpvar_3;
  tmpvar_3.x = gl_MultiTexCoord0.x;
  tmpvar_3.y = gl_MultiTexCoord0.y;
  tmpvar_3.z = gl_MultiTexCoord1.x;
  tmpvar_3.w = gl_MultiTexCoord1.y;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_3).xyz);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _LightPositionRange;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec3 norm_2;
  vec2 localCoords_3;
  vec4 cityoverlay_4;
  vec2 uv_5;
  vec4 color_6;
  float r_7;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_5.x = (0.5 + (0.159155 * r_7));
  uv_5.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_11;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_12;
    y_over_x_12 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_13;
    float x_14;
    x_14 = (y_over_x_12 * inversesqrt(((y_over_x_12 * y_over_x_12) + 1.0)));
    s_13 = (sign(x_14) * (1.5708 - (sqrt((1.0 - abs(x_14))) * (1.5708 + (abs(x_14) * (-0.214602 + (abs(x_14) * (0.0865667 + (abs(x_14) * -0.0310296)))))))));
    r_11 = s_13;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_11 = (s_13 + 3.14159);
      } else {
        r_11 = (r_11 - 3.14159);
      };
    };
  } else {
    r_11 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_15;
  tmpvar_15 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_16;
  tmpvar_16 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_17;
  tmpvar_17 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_18;
  tmpvar_18.x = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_18.y = dFdx(tmpvar_15);
  tmpvar_18.z = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_18.w = dFdy(tmpvar_15);
  vec4 tmpvar_19;
  tmpvar_19 = texture2DGradARB (_MainTex, uv_5, tmpvar_18.xy, tmpvar_18.zw);
  float tmpvar_20;
  tmpvar_20 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_21;
  tmpvar_21 = texture2DGradARB (_CityOverlayTex, uv_5, tmpvar_18.xy, tmpvar_18.zw);
  cityoverlay_4.xyz = tmpvar_21.xyz;
  vec2 tmpvar_22;
  tmpvar_22 = (texture2DGradARB (_BumpMap, uv_5, tmpvar_18.xy, tmpvar_18.zw).wy - vec2(0.5, 0.5));
  localCoords_3.x = (tmpvar_22.x * 0.25);
  localCoords_3.y = (tmpvar_22.y * 0.5);
  uv_5.x = (uv_5.x - 0.5);
  vec2 tmpvar_23;
  tmpvar_23 = (uv_5 + localCoords_3);
  uv_5 = tmpvar_23;
  norm_2.z = cos((6.28319 * tmpvar_23.x));
  norm_2.x = sin((6.28319 * tmpvar_23.x));
  norm_2.y = cos((3.14159 * tmpvar_23.y));
  vec3 tmpvar_24;
  tmpvar_24 = -(norm_2);
  norm_2 = tmpvar_24;
  vec3 tmpvar_25;
  tmpvar_25 = abs(xlv_TEXCOORD6);
  float tmpvar_26;
  tmpvar_26 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  cityoverlay_4.w = (tmpvar_21.w * clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0));
  vec4 tmpvar_27;
  tmpvar_27 = (cityoverlay_4 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_25.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_25.yyyy));
  citydarkoverlay_1 = tmpvar_27;
  vec4 tmpvar_28;
  tmpvar_28 = (cityoverlay_4 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_25.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_25.yyyy));
  vec4 tmpvar_29;
  tmpvar_29 = (mix (mix ((xlv_TEXCOORD1 + mix ((0.25 * (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_20)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_20)), tmpvar_25.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_20)), tmpvar_25.yyyy) - 0.5)), vec4(0.0, 0.0, 0.0, 0.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))), tmpvar_19, vec4(tmpvar_26)), tmpvar_28, tmpvar_28.wwww) * _Color);
  color_6 = tmpvar_29;
  float tmpvar_30;
  tmpvar_30 = clamp (dot (tmpvar_24, -(_SunDir)), 0.0, 1.0);
  float tmpvar_31;
  tmpvar_31 = mix (clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), tmpvar_30, tmpvar_26);
  vec4 tmpvar_32;
  tmpvar_32 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)));
  vec4 tmpvar_33;
  tmpvar_33 = textureCube (_LightTexture0, xlv_TEXCOORD3);
  vec4 shadowVals_34;
  shadowVals_34.x = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD4 + vec3(0.0078125, 0.0078125, 0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_34.y = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD4 + vec3(-0.0078125, -0.0078125, 0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_34.z = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD4 + vec3(-0.0078125, 0.0078125, -0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_34.w = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD4 + vec3(0.0078125, -0.0078125, -0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_35;
  tmpvar_35 = lessThan (shadowVals_34, vec4(((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97)));
  vec4 tmpvar_36;
  tmpvar_36 = _LightShadowData.xxxx;
  float tmpvar_37;
  if (tmpvar_35.x) {
    tmpvar_37 = tmpvar_36.x;
  } else {
    tmpvar_37 = 1.0;
  };
  float tmpvar_38;
  if (tmpvar_35.y) {
    tmpvar_38 = tmpvar_36.y;
  } else {
    tmpvar_38 = 1.0;
  };
  float tmpvar_39;
  if (tmpvar_35.z) {
    tmpvar_39 = tmpvar_36.z;
  } else {
    tmpvar_39 = 1.0;
  };
  float tmpvar_40;
  if (tmpvar_35.w) {
    tmpvar_40 = tmpvar_36.w;
  } else {
    tmpvar_40 = 1.0;
  };
  vec4 tmpvar_41;
  tmpvar_41.x = tmpvar_37;
  tmpvar_41.y = tmpvar_38;
  tmpvar_41.z = tmpvar_39;
  tmpvar_41.w = tmpvar_40;
  float tmpvar_42;
  tmpvar_42 = ((tmpvar_32.w * tmpvar_33.w) * dot (tmpvar_41, vec4(0.25, 0.25, 0.25, 0.25)));
  vec3 tmpvar_43;
  tmpvar_43 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_31) * 4.0) * tmpvar_42), 0.0, 1.0))), 0.0, 1.0) * clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0));
  color_6.xyz = (tmpvar_29.xyz + (_Albedo * tmpvar_43));
  color_6.xyz = (color_6.xyz * tmpvar_43);
  citydarkoverlay_1.w = (tmpvar_27.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_30 - 0.01)) / 0.99) * 4.0) * tmpvar_42), 0.0, 1.0), 0.0, 1.0)));
  color_6.xyz = mix (color_6, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_6.w = 1.0;
  gl_FragData[0] = color_6;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_LightPositionRange]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 32 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
def c14, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
mov r1.xyz, v2
mov r1.w, c14.x
dp4 r2.z, r1, c6
dp4 r2.x, r1, c4
dp4 r2.y, r1, c5
mov r0.zw, v4.xyxy
mov r0.xy, v3
dp4 r2.w, r0, r0
rsq r1.x, r2.w
mul r0.xyz, r1.x, r0
mov o7.xyz, -r0
dp3 r0.w, r2, r2
rsq r0.w, r0.w
mul o6.xyz, r0.w, r2
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
dp4 r0.w, v0, c7
add r1.xyz, -r0, c12
dp3 r1.x, r1, r1
rsq r1.x, r1.x
mov o2, v1
dp4 o4.z, r0, c10
dp4 o4.y, r0, c9
dp4 o4.x, r0, c8
rcp o1.x, r1.x
mov o3.xyz, v2
add o5.xyz, r0, -c13
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  highp vec3 p_2;
  p_2 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_1;
  highp vec4 tmpvar_4;
  tmpvar_4.x = _glesMultiTexCoord0.x;
  tmpvar_4.y = _glesMultiTexCoord0.y;
  tmpvar_4.z = _glesMultiTexCoord1.x;
  tmpvar_4.w = _glesMultiTexCoord1.y;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_4).xyz);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float terminator_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float TNdotL_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump vec4 citydarkoverlay_8;
  mediump float handoff_9;
  mediump float detailLevel_10;
  mediump vec4 detail_11;
  mediump vec3 norm_12;
  highp vec2 localCoords_13;
  mediump vec4 encnorm_14;
  mediump vec4 citylightoverlaydetailZ_15;
  mediump vec4 citylightoverlaydetailY_16;
  mediump vec4 citylightoverlaydetailX_17;
  mediump vec4 citydarkoverlaydetailZ_18;
  mediump vec4 citydarkoverlaydetailY_19;
  mediump vec4 citydarkoverlaydetailX_20;
  mediump vec4 cityoverlay_21;
  mediump float vertLerp_22;
  mediump vec4 main_23;
  highp vec2 uv_24;
  mediump vec4 color_25;
  highp float r_26;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_26));
  uv_24.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_30;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_31;
    y_over_x_31 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_32;
    highp float x_33;
    x_33 = (y_over_x_31 * inversesqrt(((y_over_x_31 * y_over_x_31) + 1.0)));
    s_32 = (sign(x_33) * (1.5708 - (sqrt((1.0 - abs(x_33))) * (1.5708 + (abs(x_33) * (-0.214602 + (abs(x_33) * (0.0865667 + (abs(x_33) * -0.0310296)))))))));
    r_30 = s_32;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_30 = (s_32 + 3.14159);
      } else {
        r_30 = (r_30 - 3.14159);
      };
    };
  } else {
    r_30 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_34;
  tmpvar_34 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_MainTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  main_23 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD6.zy * _DetailScale);
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zx * _DetailScale);
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.xy * _DetailScale);
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  highp float tmpvar_45;
  tmpvar_45 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_22 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailVertTex, tmpvar_42);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailTex, tmpvar_39);
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_47, vec4(vertLerp_22));
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailVertTex, tmpvar_43);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailTex, tmpvar_40);
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (tmpvar_49, tmpvar_50, vec4(vertLerp_22));
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailVertTex, tmpvar_44);
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailTex, tmpvar_41);
  mediump vec4 tmpvar_54;
  tmpvar_54 = mix (tmpvar_52, tmpvar_53, vec4(vertLerp_22));
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2DGradEXT (_CityOverlayTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  cityoverlay_21 = tmpvar_55;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_56 = texture2D (_CityDarkOverlayDetailTex, P_57);
  citydarkoverlaydetailX_20 = tmpvar_56;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityDarkOverlayDetailTex, P_59);
  citydarkoverlaydetailY_19 = tmpvar_58;
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_60 = texture2D (_CityDarkOverlayDetailTex, P_61);
  citydarkoverlaydetailZ_18 = tmpvar_60;
  lowp vec4 tmpvar_62;
  highp vec2 P_63;
  P_63 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_62 = texture2D (_CityLightOverlayDetailTex, P_63);
  citylightoverlaydetailX_17 = tmpvar_62;
  lowp vec4 tmpvar_64;
  highp vec2 P_65;
  P_65 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_64 = texture2D (_CityLightOverlayDetailTex, P_65);
  citylightoverlaydetailY_16 = tmpvar_64;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_66 = texture2D (_CityLightOverlayDetailTex, P_67);
  citylightoverlaydetailZ_15 = tmpvar_66;
  lowp vec4 tmpvar_68;
  tmpvar_68 = texture2DGradEXT (_BumpMap, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  encnorm_14 = tmpvar_68;
  mediump vec2 tmpvar_69;
  tmpvar_69 = encnorm_14.wy;
  localCoords_13 = tmpvar_69;
  highp vec2 tmpvar_70;
  tmpvar_70 = (localCoords_13 - vec2(0.5, 0.5));
  localCoords_13.x = (tmpvar_70.x * 0.25);
  localCoords_13.y = (tmpvar_70.y * 0.5);
  uv_24.x = (uv_24.x - 0.5);
  highp vec2 tmpvar_71;
  tmpvar_71 = (uv_24 + localCoords_13);
  uv_24 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = cos((6.28319 * tmpvar_71.x));
  norm_12.z = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = sin((6.28319 * tmpvar_71.x));
  norm_12.x = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = cos((3.14159 * tmpvar_71.y));
  norm_12.y = tmpvar_74;
  mediump vec3 tmpvar_75;
  tmpvar_75 = -(norm_12);
  norm_12 = tmpvar_75;
  highp vec3 tmpvar_76;
  tmpvar_76 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (tmpvar_54, tmpvar_48, tmpvar_76.xxxx);
  detail_11 = tmpvar_77;
  highp vec4 tmpvar_78;
  tmpvar_78 = (0.25 * (mix (detail_11, tmpvar_51, tmpvar_76.yyyy) - 0.5));
  detail_11 = tmpvar_78;
  highp float tmpvar_79;
  tmpvar_79 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_10 = tmpvar_79;
  mediump vec4 tmpvar_80;
  tmpvar_80 = mix (detail_11, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_10));
  highp vec4 tmpvar_81;
  tmpvar_81 = (xlv_TEXCOORD1 + tmpvar_80);
  color_25 = tmpvar_81;
  highp float tmpvar_82;
  tmpvar_82 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_9 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0);
  cityoverlay_21.w = (cityoverlay_21.w * tmpvar_83);
  highp vec4 tmpvar_84;
  tmpvar_84 = mix (citydarkoverlaydetailZ_18, citydarkoverlaydetailX_20, tmpvar_76.xxxx);
  detail_11 = tmpvar_84;
  highp vec4 tmpvar_85;
  tmpvar_85 = mix (detail_11, citydarkoverlaydetailY_19, tmpvar_76.yyyy);
  detail_11 = tmpvar_85;
  mediump vec4 tmpvar_86;
  tmpvar_86 = (cityoverlay_21 * detail_11);
  citydarkoverlay_8 = tmpvar_86;
  highp vec4 tmpvar_87;
  tmpvar_87 = mix (citylightoverlaydetailZ_15, citylightoverlaydetailX_17, tmpvar_76.xxxx);
  detail_11 = tmpvar_87;
  highp vec4 tmpvar_88;
  tmpvar_88 = mix (detail_11, citylightoverlaydetailY_16, tmpvar_76.yyyy);
  detail_11 = tmpvar_88;
  mediump vec4 tmpvar_89;
  tmpvar_89 = (cityoverlay_21 * detail_11);
  mediump vec4 tmpvar_90;
  tmpvar_90 = (mix (mix (color_25, main_23, vec4(handoff_9)), tmpvar_89, tmpvar_89.wwww) * _Color);
  color_25 = tmpvar_90;
  highp vec3 tmpvar_91;
  tmpvar_91 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_91;
  highp vec3 tmpvar_92;
  tmpvar_92 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_92;
  highp float tmpvar_93;
  tmpvar_93 = clamp (dot (xlv_TEXCOORD5, lightDirection_6), 0.0, 1.0);
  TNdotL_5 = tmpvar_93;
  mediump float tmpvar_94;
  tmpvar_94 = clamp (dot (tmpvar_75, -(_SunDir)), 0.0, 1.0);
  mediump float tmpvar_95;
  tmpvar_95 = mix (TNdotL_5, tmpvar_94, handoff_9);
  highp float tmpvar_96;
  tmpvar_96 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_97;
  tmpvar_97 = texture2D (_LightTextureB0, vec2(tmpvar_96));
  lowp vec4 tmpvar_98;
  tmpvar_98 = textureCube (_LightTexture0, xlv_TEXCOORD3);
  highp float tmpvar_99;
  mediump vec4 shadows_100;
  highp vec4 shadowVals_101;
  highp float tmpvar_102;
  tmpvar_102 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  highp vec3 vec_103;
  vec_103 = (xlv_TEXCOORD4 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 packDist_104;
  lowp vec4 tmpvar_105;
  tmpvar_105 = textureCube (_ShadowMapTexture, vec_103);
  packDist_104 = tmpvar_105;
  shadowVals_101.x = dot (packDist_104, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_106;
  vec_106 = (xlv_TEXCOORD4 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 packDist_107;
  lowp vec4 tmpvar_108;
  tmpvar_108 = textureCube (_ShadowMapTexture, vec_106);
  packDist_107 = tmpvar_108;
  shadowVals_101.y = dot (packDist_107, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_109;
  vec_109 = (xlv_TEXCOORD4 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 packDist_110;
  lowp vec4 tmpvar_111;
  tmpvar_111 = textureCube (_ShadowMapTexture, vec_109);
  packDist_110 = tmpvar_111;
  shadowVals_101.z = dot (packDist_110, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_112;
  vec_112 = (xlv_TEXCOORD4 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 packDist_113;
  lowp vec4 tmpvar_114;
  tmpvar_114 = textureCube (_ShadowMapTexture, vec_112);
  packDist_113 = tmpvar_114;
  shadowVals_101.w = dot (packDist_113, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_115;
  tmpvar_115 = lessThan (shadowVals_101, vec4(tmpvar_102));
  highp vec4 tmpvar_116;
  tmpvar_116 = _LightShadowData.xxxx;
  highp float tmpvar_117;
  if (tmpvar_115.x) {
    tmpvar_117 = tmpvar_116.x;
  } else {
    tmpvar_117 = 1.0;
  };
  highp float tmpvar_118;
  if (tmpvar_115.y) {
    tmpvar_118 = tmpvar_116.y;
  } else {
    tmpvar_118 = 1.0;
  };
  highp float tmpvar_119;
  if (tmpvar_115.z) {
    tmpvar_119 = tmpvar_116.z;
  } else {
    tmpvar_119 = 1.0;
  };
  highp float tmpvar_120;
  if (tmpvar_115.w) {
    tmpvar_120 = tmpvar_116.w;
  } else {
    tmpvar_120 = 1.0;
  };
  highp vec4 tmpvar_121;
  tmpvar_121.x = tmpvar_117;
  tmpvar_121.y = tmpvar_118;
  tmpvar_121.z = tmpvar_119;
  tmpvar_121.w = tmpvar_120;
  shadows_100 = tmpvar_121;
  mediump float tmpvar_122;
  tmpvar_122 = dot (shadows_100, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_99 = tmpvar_122;
  highp float tmpvar_123;
  tmpvar_123 = ((tmpvar_97.w * tmpvar_98.w) * tmpvar_99);
  atten_4 = tmpvar_123;
  mediump float tmpvar_124;
  tmpvar_124 = clamp ((((_LightColor0.w * tmpvar_95) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_125;
  tmpvar_125 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_124)), 0.0, 1.0);
  light_3 = tmpvar_125;
  highp float tmpvar_126;
  tmpvar_126 = clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0);
  terminator_2 = tmpvar_126;
  mediump vec3 tmpvar_127;
  tmpvar_127 = (light_3 * terminator_2);
  light_3 = tmpvar_127;
  highp vec3 tmpvar_128;
  tmpvar_128 = (tmpvar_90.xyz + (_Albedo * tmpvar_127));
  color_25.xyz = tmpvar_128;
  color_25.xyz = (color_25.xyz * tmpvar_127);
  citydarkoverlay_8.w = (tmpvar_86.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_94 - 0.01)) / 0.99) * 4.0) * atten_4), 0.0, 1.0), 0.0, 1.0)));
  color_25.xyz = mix (color_25, citydarkoverlay_8, citydarkoverlay_8.wwww).xyz;
  color_25.w = 1.0;
  tmpvar_1 = color_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  highp vec3 p_2;
  p_2 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_1;
  highp vec4 tmpvar_4;
  tmpvar_4.x = _glesMultiTexCoord0.x;
  tmpvar_4.y = _glesMultiTexCoord0.y;
  tmpvar_4.z = _glesMultiTexCoord1.x;
  tmpvar_4.w = _glesMultiTexCoord1.y;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_4).xyz);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float terminator_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float TNdotL_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump vec4 citydarkoverlay_8;
  mediump float handoff_9;
  mediump float detailLevel_10;
  mediump vec4 detail_11;
  mediump vec3 norm_12;
  highp vec2 localCoords_13;
  mediump vec4 encnorm_14;
  mediump vec4 citylightoverlaydetailZ_15;
  mediump vec4 citylightoverlaydetailY_16;
  mediump vec4 citylightoverlaydetailX_17;
  mediump vec4 citydarkoverlaydetailZ_18;
  mediump vec4 citydarkoverlaydetailY_19;
  mediump vec4 citydarkoverlaydetailX_20;
  mediump vec4 cityoverlay_21;
  mediump float vertLerp_22;
  mediump vec4 main_23;
  highp vec2 uv_24;
  mediump vec4 color_25;
  highp float r_26;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_26));
  uv_24.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_30;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_31;
    y_over_x_31 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_32;
    highp float x_33;
    x_33 = (y_over_x_31 * inversesqrt(((y_over_x_31 * y_over_x_31) + 1.0)));
    s_32 = (sign(x_33) * (1.5708 - (sqrt((1.0 - abs(x_33))) * (1.5708 + (abs(x_33) * (-0.214602 + (abs(x_33) * (0.0865667 + (abs(x_33) * -0.0310296)))))))));
    r_30 = s_32;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_30 = (s_32 + 3.14159);
      } else {
        r_30 = (r_30 - 3.14159);
      };
    };
  } else {
    r_30 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_34;
  tmpvar_34 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_MainTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  main_23 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD6.zy * _DetailScale);
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zx * _DetailScale);
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.xy * _DetailScale);
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  highp float tmpvar_45;
  tmpvar_45 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_22 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailVertTex, tmpvar_42);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailTex, tmpvar_39);
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_47, vec4(vertLerp_22));
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailVertTex, tmpvar_43);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailTex, tmpvar_40);
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (tmpvar_49, tmpvar_50, vec4(vertLerp_22));
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailVertTex, tmpvar_44);
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailTex, tmpvar_41);
  mediump vec4 tmpvar_54;
  tmpvar_54 = mix (tmpvar_52, tmpvar_53, vec4(vertLerp_22));
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2DGradEXT (_CityOverlayTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  cityoverlay_21 = tmpvar_55;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_56 = texture2D (_CityDarkOverlayDetailTex, P_57);
  citydarkoverlaydetailX_20 = tmpvar_56;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityDarkOverlayDetailTex, P_59);
  citydarkoverlaydetailY_19 = tmpvar_58;
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_60 = texture2D (_CityDarkOverlayDetailTex, P_61);
  citydarkoverlaydetailZ_18 = tmpvar_60;
  lowp vec4 tmpvar_62;
  highp vec2 P_63;
  P_63 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_62 = texture2D (_CityLightOverlayDetailTex, P_63);
  citylightoverlaydetailX_17 = tmpvar_62;
  lowp vec4 tmpvar_64;
  highp vec2 P_65;
  P_65 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_64 = texture2D (_CityLightOverlayDetailTex, P_65);
  citylightoverlaydetailY_16 = tmpvar_64;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_66 = texture2D (_CityLightOverlayDetailTex, P_67);
  citylightoverlaydetailZ_15 = tmpvar_66;
  lowp vec4 tmpvar_68;
  tmpvar_68 = texture2DGradEXT (_BumpMap, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  encnorm_14 = tmpvar_68;
  mediump vec2 tmpvar_69;
  tmpvar_69 = encnorm_14.wy;
  localCoords_13 = tmpvar_69;
  highp vec2 tmpvar_70;
  tmpvar_70 = (localCoords_13 - vec2(0.5, 0.5));
  localCoords_13.x = (tmpvar_70.x * 0.25);
  localCoords_13.y = (tmpvar_70.y * 0.5);
  uv_24.x = (uv_24.x - 0.5);
  highp vec2 tmpvar_71;
  tmpvar_71 = (uv_24 + localCoords_13);
  uv_24 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = cos((6.28319 * tmpvar_71.x));
  norm_12.z = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = sin((6.28319 * tmpvar_71.x));
  norm_12.x = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = cos((3.14159 * tmpvar_71.y));
  norm_12.y = tmpvar_74;
  mediump vec3 tmpvar_75;
  tmpvar_75 = -(norm_12);
  norm_12 = tmpvar_75;
  highp vec3 tmpvar_76;
  tmpvar_76 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (tmpvar_54, tmpvar_48, tmpvar_76.xxxx);
  detail_11 = tmpvar_77;
  highp vec4 tmpvar_78;
  tmpvar_78 = (0.25 * (mix (detail_11, tmpvar_51, tmpvar_76.yyyy) - 0.5));
  detail_11 = tmpvar_78;
  highp float tmpvar_79;
  tmpvar_79 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_10 = tmpvar_79;
  mediump vec4 tmpvar_80;
  tmpvar_80 = mix (detail_11, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_10));
  highp vec4 tmpvar_81;
  tmpvar_81 = (xlv_TEXCOORD1 + tmpvar_80);
  color_25 = tmpvar_81;
  highp float tmpvar_82;
  tmpvar_82 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_9 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0);
  cityoverlay_21.w = (cityoverlay_21.w * tmpvar_83);
  highp vec4 tmpvar_84;
  tmpvar_84 = mix (citydarkoverlaydetailZ_18, citydarkoverlaydetailX_20, tmpvar_76.xxxx);
  detail_11 = tmpvar_84;
  highp vec4 tmpvar_85;
  tmpvar_85 = mix (detail_11, citydarkoverlaydetailY_19, tmpvar_76.yyyy);
  detail_11 = tmpvar_85;
  mediump vec4 tmpvar_86;
  tmpvar_86 = (cityoverlay_21 * detail_11);
  citydarkoverlay_8 = tmpvar_86;
  highp vec4 tmpvar_87;
  tmpvar_87 = mix (citylightoverlaydetailZ_15, citylightoverlaydetailX_17, tmpvar_76.xxxx);
  detail_11 = tmpvar_87;
  highp vec4 tmpvar_88;
  tmpvar_88 = mix (detail_11, citylightoverlaydetailY_16, tmpvar_76.yyyy);
  detail_11 = tmpvar_88;
  mediump vec4 tmpvar_89;
  tmpvar_89 = (cityoverlay_21 * detail_11);
  mediump vec4 tmpvar_90;
  tmpvar_90 = (mix (mix (color_25, main_23, vec4(handoff_9)), tmpvar_89, tmpvar_89.wwww) * _Color);
  color_25 = tmpvar_90;
  highp vec3 tmpvar_91;
  tmpvar_91 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_91;
  highp vec3 tmpvar_92;
  tmpvar_92 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_92;
  highp float tmpvar_93;
  tmpvar_93 = clamp (dot (xlv_TEXCOORD5, lightDirection_6), 0.0, 1.0);
  TNdotL_5 = tmpvar_93;
  mediump float tmpvar_94;
  tmpvar_94 = clamp (dot (tmpvar_75, -(_SunDir)), 0.0, 1.0);
  mediump float tmpvar_95;
  tmpvar_95 = mix (TNdotL_5, tmpvar_94, handoff_9);
  highp float tmpvar_96;
  tmpvar_96 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_97;
  tmpvar_97 = texture2D (_LightTextureB0, vec2(tmpvar_96));
  lowp vec4 tmpvar_98;
  tmpvar_98 = textureCube (_LightTexture0, xlv_TEXCOORD3);
  highp float tmpvar_99;
  mediump vec4 shadows_100;
  highp vec4 shadowVals_101;
  highp float tmpvar_102;
  tmpvar_102 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  highp vec3 vec_103;
  vec_103 = (xlv_TEXCOORD4 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 packDist_104;
  lowp vec4 tmpvar_105;
  tmpvar_105 = textureCube (_ShadowMapTexture, vec_103);
  packDist_104 = tmpvar_105;
  shadowVals_101.x = dot (packDist_104, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_106;
  vec_106 = (xlv_TEXCOORD4 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 packDist_107;
  lowp vec4 tmpvar_108;
  tmpvar_108 = textureCube (_ShadowMapTexture, vec_106);
  packDist_107 = tmpvar_108;
  shadowVals_101.y = dot (packDist_107, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_109;
  vec_109 = (xlv_TEXCOORD4 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 packDist_110;
  lowp vec4 tmpvar_111;
  tmpvar_111 = textureCube (_ShadowMapTexture, vec_109);
  packDist_110 = tmpvar_111;
  shadowVals_101.z = dot (packDist_110, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_112;
  vec_112 = (xlv_TEXCOORD4 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 packDist_113;
  lowp vec4 tmpvar_114;
  tmpvar_114 = textureCube (_ShadowMapTexture, vec_112);
  packDist_113 = tmpvar_114;
  shadowVals_101.w = dot (packDist_113, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_115;
  tmpvar_115 = lessThan (shadowVals_101, vec4(tmpvar_102));
  highp vec4 tmpvar_116;
  tmpvar_116 = _LightShadowData.xxxx;
  highp float tmpvar_117;
  if (tmpvar_115.x) {
    tmpvar_117 = tmpvar_116.x;
  } else {
    tmpvar_117 = 1.0;
  };
  highp float tmpvar_118;
  if (tmpvar_115.y) {
    tmpvar_118 = tmpvar_116.y;
  } else {
    tmpvar_118 = 1.0;
  };
  highp float tmpvar_119;
  if (tmpvar_115.z) {
    tmpvar_119 = tmpvar_116.z;
  } else {
    tmpvar_119 = 1.0;
  };
  highp float tmpvar_120;
  if (tmpvar_115.w) {
    tmpvar_120 = tmpvar_116.w;
  } else {
    tmpvar_120 = 1.0;
  };
  highp vec4 tmpvar_121;
  tmpvar_121.x = tmpvar_117;
  tmpvar_121.y = tmpvar_118;
  tmpvar_121.z = tmpvar_119;
  tmpvar_121.w = tmpvar_120;
  shadows_100 = tmpvar_121;
  mediump float tmpvar_122;
  tmpvar_122 = dot (shadows_100, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_99 = tmpvar_122;
  highp float tmpvar_123;
  tmpvar_123 = ((tmpvar_97.w * tmpvar_98.w) * tmpvar_99);
  atten_4 = tmpvar_123;
  mediump float tmpvar_124;
  tmpvar_124 = clamp ((((_LightColor0.w * tmpvar_95) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_125;
  tmpvar_125 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_124)), 0.0, 1.0);
  light_3 = tmpvar_125;
  highp float tmpvar_126;
  tmpvar_126 = clamp (floor((1.01 + dot (xlv_TEXCOORD6, _SunDir))), 0.0, 1.0);
  terminator_2 = tmpvar_126;
  mediump vec3 tmpvar_127;
  tmpvar_127 = (light_3 * terminator_2);
  light_3 = tmpvar_127;
  highp vec3 tmpvar_128;
  tmpvar_128 = (tmpvar_90.xyz + (_Albedo * tmpvar_127));
  color_25.xyz = tmpvar_128;
  color_25.xyz = (color_25.xyz * tmpvar_127);
  citydarkoverlay_8.w = (tmpvar_86.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_94 - 0.01)) / 0.99) * 4.0) * atten_4), 0.0, 1.0), 0.0, 1.0)));
  color_25.xyz = mix (color_25, citydarkoverlay_8, citydarkoverlay_8.wwww).xyz;
  color_25.w = 1.0;
  tmpvar_1 = color_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 337
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 442
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 objnormal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
};
#line 432
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform samplerCube _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 347
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 360
#line 368
#line 382
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 415
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 419
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 423
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp mat4 _Rotation;
#line 427
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 431
uniform sampler2D _CityLightOverlayDetailTex;
#line 454
#line 480
#line 454
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 458
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    #line 462
    o.color = v.color;
    o.objnormal = v.normal;
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    o._ShadowCoord = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    #line 467
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.objnormal);
    xlv_TEXCOORD3 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereCoords);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
vec2 xll_vecTSel_vb2_vf2_vf2 (bvec2 a, vec2 b, vec2 c) {
  return vec2 (a.x ? b.x : c.x, a.y ? b.y : c.y);
}
vec3 xll_vecTSel_vb3_vf3_vf3 (bvec3 a, vec3 b, vec3 c) {
  return vec3 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z);
}
vec4 xll_vecTSel_vb4_vf4_vf4 (bvec4 a, vec4 b, vec4 c) {
  return vec4 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z, a.w ? b.w : c.w);
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 337
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 442
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 objnormal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
};
#line 432
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform samplerCube _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 347
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 360
#line 368
#line 382
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 415
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 419
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 423
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp mat4 _Rotation;
#line 427
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 431
uniform sampler2D _CityLightOverlayDetailTex;
#line 454
#line 480
#line 469
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 471
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 475
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 215
highp float DecodeFloatRGBA( in highp vec4 enc ) {
    highp vec4 kDecodeDot = vec4( 1.0, 0.00392157, 1.53787e-05, 6.22737e-09);
    return dot( enc, kDecodeDot);
}
#line 316
highp float SampleCubeDistance( in highp vec3 vec ) {
    highp vec4 packDist = texture( _ShadowMapTexture, vec);
    #line 319
    return DecodeFloatRGBA( packDist);
}
#line 321
highp float unityCubeShadow( in highp vec3 vec ) {
    #line 323
    highp float mydist = (length(vec) * _LightPositionRange.w);
    mydist *= 0.97;
    highp float z = 0.0078125;
    highp vec4 shadowVals;
    #line 327
    shadowVals.x = SampleCubeDistance( (vec + vec3( z, z, z)));
    shadowVals.y = SampleCubeDistance( (vec + vec3( (-z), (-z), z)));
    shadowVals.z = SampleCubeDistance( (vec + vec3( (-z), z, (-z))));
    shadowVals.w = SampleCubeDistance( (vec + vec3( z, (-z), (-z))));
    #line 331
    mediump vec4 shadows = xll_vecTSel_vb4_vf4_vf4 (lessThan( shadowVals, vec4( mydist)), vec4( _LightShadowData.xxxx), vec4( 1.0));
    return dot( shadows, vec4( 0.25));
}
#line 480
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    #line 484
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 488
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    highp vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    highp vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    highp vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    #line 492
    highp vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    highp vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    highp vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, (-IN.sphereCoords))) - 0.95)) + 0.5));
    #line 496
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    #line 500
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    #line 504
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    highp vec2 localCoords = encnorm.wy;
    #line 508
    localCoords -= vec2( 0.5);
    localCoords.x *= 0.25;
    localCoords.y *= 0.5;
    uv.x -= 0.5;
    #line 512
    uv += localCoords;
    mediump vec3 norm;
    norm.z = cos((6.28319 * uv.x));
    norm.x = sin((6.28319 * uv.x));
    #line 516
    norm.y = cos((3.14159 * uv.y));
    norm = (-norm);
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    #line 520
    detail = (0.25 * (mix( detail, detailY, vec4( sphereNrm.y)) - 0.5));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (IN.color + mix( detail.xyzw, vec4( 0.0), vec4( detailLevel)));
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    #line 524
    color = mix( color, main, vec4( handoff));
    cityoverlay.w *= xll_saturate_f(floor((IN.color.w + 0.99)));
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    #line 528
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    #line 532
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    #line 536
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    lowp float atten = ((texture( _LightTextureB0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * texture( _LightTexture0, IN._LightCoord).w) * unityCubeShadow( IN._ShadowCoord));
    #line 540
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    mediump float terminator = xll_saturate_f(floor((1.01 + dot( IN.sphereCoords, _SunDir))));
    light *= terminator;
    #line 544
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (SNdotL - 0.01)) / 0.99) * 4.0) * atten));
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    #line 548
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.objnormal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

}
Program "fp" {
// Fragment combos: 60
//   d3d9 - ALU: 143 to 189, TEX: 12 to 27
SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
Float 8 [_Albedo]
Vector 9 [_SunDir]
Float 10 [_PlanetOpacity]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_BumpMap] 2D
SetTexture 4 [_LightTexture0] 2D
"ps_3_0
; 145 ALU, 13 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
def c11, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c12, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c13, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c14, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c15, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c16, -0.50000000, 0.25000000, 0.50000000, 0.49999991
def c17, 6.28318501, -3.14159298, 0.99999982, 0.50000000
def c18, 4.00000000, 1.00999999, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord5 v4.xyz
dcl_texcoord6 v5.xyz
mov r3.xyz, v5
dp3_sat r3.x, v2, -r3
mul r2.xy, v5.zyzw, c4.x
dsy r4.xy, v5
abs r0.w, v5.z
abs r1.zw, v5.xyxy
max r0.x, r1.z, r0.w
rcp r0.y, r0.x
min r0.x, r1.z, r0.w
mul r1.x, r0, r0.y
mul r1.y, r1.x, r1.x
mad r2.w, r1.y, c13.y, c13.z
mad r2.w, r2, r1.y, c13
mad r3.w, r2, r1.y, c14.x
mad r3.w, r3, r1.y, c14.y
add r3.x, r3, c15.z
mad r1.y, r3.w, r1, c14.z
mul r1.y, r1, r1.x
mul r0.xy, v5.zyzw, c5.x
mul r4.xy, r4, r4
texld r0.xyz, r0, s1
texld r2.xyz, r2, s2
add r2.xyz, r2, -r0
mad_sat r2.w, r3.x, c15, c15.y
mad r3.xyz, r2.w, r2, r0
mul r2.xy, v5, c5.x
mul r0.xy, v5, c4.x
add r1.x, r1.z, -r0.w
texld r2.xyz, r2, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r2
mad r0.xyz, r2.w, r0, r2
add_pp r2.xyz, r3, -r0
mad_pp r0.xyz, r1.z, r2, r0
add r3.x, -r1.y, c14.w
cmp r3.x, -r1, r1.y, r3
add r3.y, -r3.x, c12.w
cmp r3.x, v5.z, r3, r3.y
add r3.y, -r0.w, c11
mul r2.xy, v5.zxzw, c5.x
mul r1.xy, v5.zxzw, c4.x
rsq r3.y, r3.y
texld r2.xyz, r2, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r2
mad r1.xyz, r2.w, r1, r2
add_pp r1.xyz, r1, -r0
mad_pp r0.xyz, r1.w, r1, r0
cmp r2.x, v5, r3, -r3
mul r3.x, r2, c15
abs r2.x, v5.y
add r2.z, -r2.x, c11.y
mad r2.y, r2.x, c11.z, c11.w
mad r2.y, r2, r2.x, c12.x
mad r2.w, r0, c11.z, c11
mad r2.w, r0, r2, c12.x
mad r0.w, r0, r2, c12.y
rsq r2.z, r2.z
rcp r3.y, r3.y
add_pp r0.xyz, r0, c16.x
mul r3.y, r0.w, r3
cmp r2.w, v5.z, c11.x, c11.y
mul r3.z, r2.w, r3.y
add r5.x, r3, c15.y
mad r2.x, r2.y, r2, c12.y
rcp r2.z, r2.z
mul r2.z, r2.x, r2
cmp r2.x, v5.y, c11, c11.y
mul r2.y, r2.x, r2.z
mad r0.w, -r2.y, c12.z, r2.z
mad r2.y, -r3.z, c12.z, r3
mad r0.w, r2.x, c12, r0
mad r2.x, r2.w, c12.w, r2.y
mul r2.x, r2, c13
mul r0.w, r0, c13.x
add r2.z, r4.x, r4.y
rsq r2.z, r2.z
dsx r3.zw, v5.xyxy
mul r3.zw, r3, r3
mov r5.y, r0.w
dsx r2.w, r2.x
dsy r2.y, r2.x
add r2.x, r3.z, r3.w
rsq r2.x, r2.x
rcp r3.y, r2.z
rcp r2.x, r2.x
mul r2.z, r2.x, c15.x
mul r2.x, r3.y, c15
texldd r3.yw, r5, s3, r2.zwzw, r2
add r1.xy, r3.wyzw, c16.x
mov r3.y, r0.w
mul r1.xy, r1, c16.yzzw
add r3.xy, r3, r1
mad r1.x, r3.y, c16.w, c16.z
frc r1.x, r1
mul r0.w, v0.x, c6.x
mad r1.w, r1.x, c17.x, c17.y
mul_sat r0.w, r0, c12.z
mul_pp r0.xyz, r0, c16.y
mad_pp r0.xyz, r0.w, -r0, r0
add r1.xyz, v1, r0
sincos r0.xy, r1.w
mad r0.y, r3.x, c17.z, c17.w
frc r0.y, r0
texldd r2.xyz, r5, s0, r2.zwzw, r2
mad r1.w, r0.y, c17.x, c17.y
mov_pp r4.y, r0.x
sincos r0.xy, r1.w
dp4 r3.x, c1, c1
rsq r0.z, r3.x
mov_pp r4.xz, r0.yyxw
mul r3.xyz, r0.z, c1
dp3_sat r0.y, v4, r3
dp3_pp_sat r0.x, -r4, -c9
add_pp r0.z, r0.x, -r0.y
mul_sat r0.w, c10.x, c10.x
mad_pp r0.y, r0.w, r0.z, r0
dp3 r0.x, v3, v3
add_pp r2.xyz, r2, -r1
mul_pp r0.y, r0, c2.w
texld r0.x, r0.x, s4
mul_pp r0.x, r0.y, r0
dp3 r0.y, v5, c9
add r3.x, r0.y, c18.y
frc r3.y, r3.x
mul_pp_sat r1.w, r0.x, c18.x
mov r0.x, c7
add r0.xyz, c2, r0.x
add_sat r3.x, r3, -r3.y
mad_sat r0.xyz, r0, r1.w, c0
mul_pp r0.xyz, r0, r3.x
mul r3.xyz, r0, c8.x
mad_pp r1.xyz, r0.w, r2, r1
mad_pp r1.xyz, r1, c3, r3
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c11.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
Float 8 [_Albedo]
Vector 9 [_SunDir]
Float 10 [_PlanetOpacity]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_BumpMap] 2D
"ps_3_0
; 143 ALU, 12 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
def c11, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c12, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c13, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c14, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c15, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c16, -0.50000000, 0.25000000, 0.50000000, 0.49999991
def c17, 6.28318501, -3.14159298, 0.99999982, 0.50000000
def c18, 4.00000000, 1.00999999, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord5 v3.xyz
dcl_texcoord6 v4.xyz
abs r0.w, v4.z
abs r1.zw, v4.xyxy
max r0.x, r1.z, r0.w
rcp r0.y, r0.x
min r0.x, r1.z, r0.w
mul r3.w, r0.x, r0.y
mul r2.w, r3, r3
mul r1.xy, v4.zyzw, c4.x
add r4.y, -r0.w, c11
mad r4.x, r0.w, c11.z, c11.w
mul r0.xy, v4.zyzw, c5.x
rsq r4.y, r4.y
dsy r5.zw, v4.xyxy
texld r0.xyz, r0, s1
texld r2.xyz, r1, s2
mad r3.x, r2.w, c13.y, c13.z
mad r1.x, r3, r2.w, c13.w
mad r1.x, r1, r2.w, c14
mad r1.x, r1, r2.w, c14.y
mad r1.x, r1, r2.w, c14.z
mov r3.xyz, v4
dp3_sat r1.y, v2, -r3
add r1.y, r1, c15.z
add r2.xyz, r2, -r0
mad_sat r2.w, r1.y, c15, c15.y
mad r3.xyz, r2.w, r2, r0
mul r3.w, r1.x, r3
mul r1.xy, v4, c5.x
texld r2.xyz, r1, s1
mul r0.xy, v4, c4.x
texld r0.xyz, r0, s2
add r0.xyz, r0, -r2
mad r0.xyz, r2.w, r0, r2
add_pp r2.xyz, r3, -r0
mad_pp r2.xyz, r1.z, r2, r0
abs r3.y, v4
mad r3.z, r3.y, c11, c11.w
mul r0.xy, v4.zxzw, c5.x
mad r3.z, r3, r3.y, c12.x
add r1.y, -r3.w, c14.w
add r1.x, r1.z, -r0.w
cmp r1.x, -r1, r3.w, r1.y
add r3.w, -r3.y, c11.y
add r1.y, -r1.x, c12.w
mad r4.x, r0.w, r4, c12
mad r0.w, r0, r4.x, c12.y
cmp r1.x, v4.z, r1, r1.y
cmp r3.x, v4, r1, -r1
mul r3.x, r3, c15
mul r1.xy, v4.zxzw, c4.x
rsq r3.w, r3.w
rcp r4.y, r4.y
mul r4.y, r0.w, r4
cmp r4.x, v4.z, c11, c11.y
mul r4.z, r4.x, r4.y
add r5.x, r3, c15.y
mad r3.y, r3.z, r3, c12
rcp r3.w, r3.w
mul r3.w, r3.y, r3
cmp r3.y, v4, c11.x, c11
mul r3.z, r3.y, r3.w
mad r0.w, -r3.z, c12.z, r3
mad r0.w, r3.y, c12, r0
mad r3.z, -r4, c12, r4.y
mad r3.y, r4.x, c12.w, r3.z
mul r3.y, r3, c13.x
mul r0.w, r0, c13.x
dsx r3.zw, v4.xyxy
mul r3.zw, r3, r3
mov r5.y, r0.w
dsx r4.w, r3.y
dsy r4.y, r3
add r3.y, r3.z, r3.w
mul r5.zw, r5, r5
add r3.z, r5, r5.w
rsq r3.y, r3.y
rcp r3.y, r3.y
rsq r3.z, r3.z
rcp r3.z, r3.z
mul r4.z, r3.y, c15.x
mul r4.x, r3.z, c15
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad r0.xyz, r2.w, r1, r0
add_pp r0.xyz, r0, -r2
mad_pp r0.xyz, r1.w, r0, r2
texldd r3.yw, r5, s3, r4.zwzw, r4
add r1.xy, r3.wyzw, c16.x
add_pp r0.xyz, r0, c16.x
mul r1.xy, r1, c16.yzzw
mov r3.y, r0.w
add r2.xy, r3, r1
mad r0.w, r2.y, c16, c16.z
frc r1.x, r0.w
mul r0.w, v0.x, c6.x
mad r1.w, r1.x, c17.x, c17.y
mul_pp r0.xyz, r0, c16.y
mul_sat r0.w, r0, c12.z
mad_pp r1.xyz, r0.w, -r0, r0
sincos r0.xy, r1.w
mad r0.y, r2.x, c17.z, c17.w
frc r0.y, r0
mov_pp r3.y, r0.x
mad r1.w, r0.y, c17.x, c17.y
sincos r0.xy, r1.w
dp4_pp r2.x, c1, c1
rsq_pp r0.z, r2.x
mov_pp r3.xz, r0.yyxw
mul_pp r2.xyz, r0.z, c1
dp3_sat r0.y, v3, r2
dp3_pp_sat r0.x, -r3, -c9
add_pp r0.x, r0, -r0.y
mul_sat r0.w, c10.x, c10.x
mad_pp r1.w, r0, r0.x, r0.y
add r0.xyz, v1, r1
mul_pp r1.x, r1.w, c2.w
dp3 r1.y, v4, c9
add r2.x, r1.y, c18.y
frc r2.y, r2.x
mul_pp_sat r1.w, r1.x, c18.x
mov r1.x, c7
add r1.xyz, c2, r1.x
add_sat r2.x, r2, -r2.y
mad_sat r1.xyz, r1, r1.w, c0
mul_pp r1.xyz, r1, r2.x
texldd r2.xyz, r5, s0, r4.zwzw, r4
add_pp r2.xyz, r2, -r0
mul r3.xyz, r1, c8.x
mad_pp r0.xyz, r0.w, r2, r0
mad_pp r0.xyz, r0, c3, r3
mul_pp oC0.xyz, r0, r1
mov_pp oC0.w, c11.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
Float 8 [_Albedo]
Vector 9 [_SunDir]
Float 10 [_PlanetOpacity]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_BumpMap] 2D
SetTexture 4 [_LightTexture0] 2D
SetTexture 5 [_LightTextureB0] 2D
"ps_3_0
; 150 ALU, 14 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
def c11, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c12, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c13, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c14, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c15, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c16, -0.50000000, 0.25000000, 0.50000000, 0.49999991
def c17, 6.28318501, -3.14159298, 0.99999982, 0.50000000
def c18, 4.00000000, 1.00999999, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3
dcl_texcoord5 v4.xyz
dcl_texcoord6 v5.xyz
mov r3.xyz, v5
dp3_sat r3.x, v2, -r3
mul r2.xy, v5.zyzw, c4.x
dsy r4.xy, v5
abs r0.w, v5.z
abs r1.zw, v5.xyxy
max r0.x, r1.z, r0.w
rcp r0.y, r0.x
min r0.x, r1.z, r0.w
mul r1.x, r0, r0.y
mul r1.y, r1.x, r1.x
mad r2.w, r1.y, c13.y, c13.z
mad r2.w, r2, r1.y, c13
mad r3.w, r2, r1.y, c14.x
mad r3.w, r3, r1.y, c14.y
add r3.x, r3, c15.z
mad r1.y, r3.w, r1, c14.z
mul r1.y, r1, r1.x
mul r0.xy, v5.zyzw, c5.x
mul r4.xy, r4, r4
texld r0.xyz, r0, s1
texld r2.xyz, r2, s2
add r2.xyz, r2, -r0
mad_sat r2.w, r3.x, c15, c15.y
mad r3.xyz, r2.w, r2, r0
mul r2.xy, v5, c5.x
mul r0.xy, v5, c4.x
add r1.x, r1.z, -r0.w
texld r2.xyz, r2, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r2
mad r0.xyz, r2.w, r0, r2
add_pp r2.xyz, r3, -r0
mad_pp r0.xyz, r1.z, r2, r0
add r3.x, -r1.y, c14.w
cmp r3.x, -r1, r1.y, r3
add r3.y, -r3.x, c12.w
cmp r3.x, v5.z, r3, r3.y
add r3.y, -r0.w, c11
mul r2.xy, v5.zxzw, c5.x
mul r1.xy, v5.zxzw, c4.x
rsq r3.y, r3.y
texld r2.xyz, r2, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r2
mad r1.xyz, r2.w, r1, r2
add_pp r1.xyz, r1, -r0
mad_pp r0.xyz, r1.w, r1, r0
cmp r2.x, v5, r3, -r3
mul r3.x, r2, c15
abs r2.x, v5.y
add r2.z, -r2.x, c11.y
mad r2.y, r2.x, c11.z, c11.w
mad r2.y, r2, r2.x, c12.x
mad r2.w, r0, c11.z, c11
mad r2.w, r0, r2, c12.x
mad r0.w, r0, r2, c12.y
rsq r2.z, r2.z
rcp r3.y, r3.y
add_pp r0.xyz, r0, c16.x
mul r3.y, r0.w, r3
cmp r2.w, v5.z, c11.x, c11.y
mul r3.z, r2.w, r3.y
add r5.x, r3, c15.y
mad r2.x, r2.y, r2, c12.y
rcp r2.z, r2.z
mul r2.z, r2.x, r2
cmp r2.x, v5.y, c11, c11.y
mul r2.y, r2.x, r2.z
mad r0.w, -r2.y, c12.z, r2.z
mad r2.y, -r3.z, c12.z, r3
mad r0.w, r2.x, c12, r0
mad r2.x, r2.w, c12.w, r2.y
mul r2.x, r2, c13
mul r0.w, r0, c13.x
add r2.z, r4.x, r4.y
rsq r2.z, r2.z
dsx r3.zw, v5.xyxy
mul r3.zw, r3, r3
mov r5.y, r0.w
dsx r2.w, r2.x
dsy r2.y, r2.x
add r2.x, r3.z, r3.w
rsq r2.x, r2.x
rcp r3.y, r2.z
rcp r2.x, r2.x
mul r2.z, r2.x, c15.x
mul r2.x, r3.y, c15
texldd r3.yw, r5, s3, r2.zwzw, r2
add r1.xy, r3.wyzw, c16.x
mov r3.y, r0.w
mul r1.xy, r1, c16.yzzw
add r3.xy, r3, r1
mad r1.x, r3.y, c16.w, c16.z
frc r1.x, r1
mul r0.w, v0.x, c6.x
mad r1.w, r1.x, c17.x, c17.y
mul_sat r0.w, r0, c12.z
mul_pp r0.xyz, r0, c16.y
mad_pp r0.xyz, r0.w, -r0, r0
add r1.xyz, v1, r0
sincos r0.xy, r1.w
mad r0.y, r3.x, c17.z, c17.w
frc r0.y, r0
texldd r2.xyz, r5, s0, r2.zwzw, r2
mad r1.w, r0.y, c17.x, c17.y
mov_pp r4.y, r0.x
sincos r0.xy, r1.w
dp4 r3.x, c1, c1
rsq r0.z, r3.x
mul r3.xyz, r0.z, c1
mov_pp r4.xz, r0.yyxw
dp3_sat r0.y, v4, r3
rcp r0.z, v3.w
mad r3.xy, v3, r0.z, c15.y
dp3_pp_sat r0.x, -r4, -c9
add_pp r0.x, r0, -r0.y
mul_sat r1.w, c10.x, c10.x
mad_pp r0.y, r1.w, r0.x, r0
dp3 r0.x, v3, v3
add_pp r2.xyz, r2, -r1
texld r0.w, r3, s4
cmp r0.z, -v3, c11.x, c11.y
mul_pp r0.z, r0, r0.w
texld r0.x, r0.x, s5
mul_pp r0.z, r0, r0.x
mul_pp r0.x, r0.y, c2.w
mul_pp r0.x, r0, r0.z
dp3 r0.y, v5, c9
add r3.x, r0.y, c18.y
frc r3.y, r3.x
mul_pp_sat r0.w, r0.x, c18.x
mov r0.x, c7
add r0.xyz, c2, r0.x
add_sat r3.x, r3, -r3.y
mad_sat r0.xyz, r0, r0.w, c0
mul_pp r0.xyz, r0, r3.x
mul r3.xyz, r0, c8.x
mad_pp r1.xyz, r1.w, r2, r1
mad_pp r1.xyz, r1, c3, r3
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c11.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
Float 8 [_Albedo]
Vector 9 [_SunDir]
Float 10 [_PlanetOpacity]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_BumpMap] 2D
SetTexture 4 [_LightTextureB0] 2D
SetTexture 5 [_LightTexture0] CUBE
"ps_3_0
; 146 ALU, 14 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_cube s5
def c11, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c12, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c13, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c14, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c15, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c16, -0.50000000, 0.25000000, 0.50000000, 0.49999991
def c17, 6.28318501, -3.14159298, 0.99999982, 0.50000000
def c18, 4.00000000, 1.00999999, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord5 v4.xyz
dcl_texcoord6 v5.xyz
mov r3.xyz, v5
dp3_sat r3.x, v2, -r3
mul r2.xy, v5.zyzw, c4.x
dsy r4.xy, v5
abs r0.w, v5.z
abs r1.zw, v5.xyxy
max r0.x, r1.z, r0.w
rcp r0.y, r0.x
min r0.x, r1.z, r0.w
mul r1.x, r0, r0.y
mul r1.y, r1.x, r1.x
mad r2.w, r1.y, c13.y, c13.z
mad r2.w, r2, r1.y, c13
mad r3.w, r2, r1.y, c14.x
mad r3.w, r3, r1.y, c14.y
add r3.x, r3, c15.z
mad r1.y, r3.w, r1, c14.z
mul r1.y, r1, r1.x
mul r0.xy, v5.zyzw, c5.x
mul r4.xy, r4, r4
texld r0.xyz, r0, s1
texld r2.xyz, r2, s2
add r2.xyz, r2, -r0
mad_sat r2.w, r3.x, c15, c15.y
mad r3.xyz, r2.w, r2, r0
mul r2.xy, v5, c5.x
mul r0.xy, v5, c4.x
add r1.x, r1.z, -r0.w
texld r2.xyz, r2, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r2
mad r0.xyz, r2.w, r0, r2
add_pp r2.xyz, r3, -r0
mad_pp r0.xyz, r1.z, r2, r0
add r3.x, -r1.y, c14.w
cmp r3.x, -r1, r1.y, r3
add r3.y, -r3.x, c12.w
cmp r3.x, v5.z, r3, r3.y
add r3.y, -r0.w, c11
mul r2.xy, v5.zxzw, c5.x
mul r1.xy, v5.zxzw, c4.x
rsq r3.y, r3.y
texld r2.xyz, r2, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r2
mad r1.xyz, r2.w, r1, r2
add_pp r1.xyz, r1, -r0
mad_pp r0.xyz, r1.w, r1, r0
cmp r2.x, v5, r3, -r3
mul r3.x, r2, c15
abs r2.x, v5.y
add r2.z, -r2.x, c11.y
mad r2.y, r2.x, c11.z, c11.w
mad r2.y, r2, r2.x, c12.x
mad r2.w, r0, c11.z, c11
mad r2.w, r0, r2, c12.x
mad r0.w, r0, r2, c12.y
rsq r2.z, r2.z
rcp r3.y, r3.y
add_pp r0.xyz, r0, c16.x
mul r3.y, r0.w, r3
cmp r2.w, v5.z, c11.x, c11.y
mul r3.z, r2.w, r3.y
add r5.x, r3, c15.y
mad r2.x, r2.y, r2, c12.y
rcp r2.z, r2.z
mul r2.z, r2.x, r2
cmp r2.x, v5.y, c11, c11.y
mul r2.y, r2.x, r2.z
mad r0.w, -r2.y, c12.z, r2.z
mad r2.y, -r3.z, c12.z, r3
mad r0.w, r2.x, c12, r0
mad r2.x, r2.w, c12.w, r2.y
mul r2.x, r2, c13
mul r0.w, r0, c13.x
add r2.z, r4.x, r4.y
rsq r2.z, r2.z
dsx r3.zw, v5.xyxy
mul r3.zw, r3, r3
mov r5.y, r0.w
dsx r2.w, r2.x
dsy r2.y, r2.x
add r2.x, r3.z, r3.w
rsq r2.x, r2.x
rcp r3.y, r2.z
rcp r2.x, r2.x
mul r2.z, r2.x, c15.x
mul r2.x, r3.y, c15
texldd r3.yw, r5, s3, r2.zwzw, r2
add r1.xy, r3.wyzw, c16.x
mov r3.y, r0.w
mul r1.xy, r1, c16.yzzw
add r3.xy, r3, r1
mad r1.x, r3.y, c16.w, c16.z
frc r1.x, r1
mul r0.w, v0.x, c6.x
mad r1.w, r1.x, c17.x, c17.y
mul_sat r0.w, r0, c12.z
mul_pp r0.xyz, r0, c16.y
mad_pp r0.xyz, r0.w, -r0, r0
add r1.xyz, v1, r0
sincos r0.xy, r1.w
mad r0.y, r3.x, c17.z, c17.w
frc r0.y, r0
texldd r2.xyz, r5, s0, r2.zwzw, r2
mad r1.w, r0.y, c17.x, c17.y
mov_pp r4.y, r0.x
sincos r0.xy, r1.w
dp4 r3.x, c1, c1
rsq r0.z, r3.x
mov_pp r4.xz, r0.yyxw
mul r3.xyz, r0.z, c1
dp3_sat r0.y, v4, r3
dp3_pp_sat r0.x, -r4, -c9
add_pp r0.x, r0, -r0.y
mul_sat r1.w, c10.x, c10.x
mad_pp r0.y, r1.w, r0.x, r0
dp3 r0.x, v3, v3
add_pp r2.xyz, r2, -r1
texld r0.w, v3, s5
texld r0.x, r0.x, s4
mul r0.z, r0.x, r0.w
mul_pp r0.x, r0.y, c2.w
mul_pp r0.x, r0, r0.z
dp3 r0.y, v5, c9
add r3.x, r0.y, c18.y
frc r3.y, r3.x
mul_pp_sat r0.w, r0.x, c18.x
mov r0.x, c7
add r0.xyz, c2, r0.x
add_sat r3.x, r3, -r3.y
mad_sat r0.xyz, r0, r0.w, c0
mul_pp r0.xyz, r0, r3.x
mul r3.xyz, r0, c8.x
mad_pp r1.xyz, r1.w, r2, r1
mad_pp r1.xyz, r1, c3, r3
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c11.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
Float 8 [_Albedo]
Vector 9 [_SunDir]
Float 10 [_PlanetOpacity]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_BumpMap] 2D
SetTexture 4 [_LightTexture0] 2D
"ps_3_0
; 144 ALU, 13 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
def c11, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c12, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c13, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c14, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c15, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c16, -0.50000000, 0.25000000, 0.50000000, 0.49999991
def c17, 6.28318501, -3.14159298, 0.99999982, 0.50000000
def c18, 4.00000000, 1.00999999, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xy
dcl_texcoord5 v4.xyz
dcl_texcoord6 v5.xyz
mov r3.xyz, v5
dp3_sat r3.x, v2, -r3
mul r2.xy, v5.zyzw, c4.x
abs r0.w, v5.z
abs r1.zw, v5.xyxy
max r0.x, r1.z, r0.w
rcp r0.y, r0.x
min r0.x, r1.z, r0.w
mul r1.x, r0, r0.y
mul r1.y, r1.x, r1.x
mad r2.w, r1.y, c13.y, c13.z
mad r2.w, r2, r1.y, c13
mad r3.w, r2, r1.y, c14.x
add r3.x, r3, c15.z
mul r0.xy, v5.zyzw, c5.x
mad r3.w, r3, r1.y, c14.y
mad r1.y, r3.w, r1, c14.z
mul r1.y, r1, r1.x
texld r0.xyz, r0, s1
texld r2.xyz, r2, s2
add r2.xyz, r2, -r0
mad_sat r2.w, r3.x, c15, c15.y
mad r3.xyz, r2.w, r2, r0
mul r2.xy, v5, c5.x
mul r0.xy, v5, c4.x
add r1.x, r1.z, -r0.w
texld r2.xyz, r2, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r2
mad r0.xyz, r2.w, r0, r2
add_pp r2.xyz, r3, -r0
mad_pp r0.xyz, r1.z, r2, r0
add r3.x, -r1.y, c14.w
cmp r3.x, -r1, r1.y, r3
add r3.y, -r3.x, c12.w
cmp r3.x, v5.z, r3, r3.y
add r3.y, -r0.w, c11
mul r2.xy, v5.zxzw, c5.x
mul r1.xy, v5.zxzw, c4.x
rsq r3.y, r3.y
texld r2.xyz, r2, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r2
mad r1.xyz, r2.w, r1, r2
abs r2.y, v5
cmp r2.x, v5, r3, -r3
add_pp r1.xyz, r1, -r0
mad_pp r0.xyz, r1.w, r1, r0
mul r2.x, r2, c15
add r2.w, -r2.y, c11.y
mad r2.z, r2.y, c11, c11.w
mad r2.z, r2, r2.y, c12.x
mad r3.x, r0.w, c11.z, c11.w
mad r3.x, r0.w, r3, c12
mad r0.w, r0, r3.x, c12.y
rsq r2.w, r2.w
rcp r3.y, r3.y
add_pp r0.xyz, r0, c16.x
mul r3.y, r0.w, r3
cmp r3.x, v5.z, c11, c11.y
add r5.x, r2, c15.y
mad r2.y, r2.z, r2, c12
rcp r2.w, r2.w
mul r2.w, r2.y, r2
cmp r2.y, v5, c11.x, c11
mul r2.z, r2.y, r2.w
mad r0.w, -r2.z, c12.z, r2
mul r3.z, r3.x, r3.y
mad r0.w, r2.y, c12, r0
mad r2.z, -r3, c12, r3.y
mad r2.y, r3.x, c12.w, r2.z
mul r2.y, r2, c13.x
mul r0.w, r0, c13.x
dsx r2.zw, v5.xyxy
dsy r3.xy, v5
mul r2.zw, r2, r2
mul r3.xy, r3, r3
mov r5.y, r0.w
dsx r4.w, r2.y
dsy r4.y, r2
add r2.y, r2.z, r2.w
add r2.z, r3.x, r3.y
rsq r2.y, r2.y
rcp r2.y, r2.y
rsq r2.z, r2.z
rcp r2.z, r2.z
mul r4.z, r2.y, c15.x
mul r4.x, r2.z, c15
texldd r2.yw, r5, s3, r4.zwzw, r4
add r1.xy, r2.wyzw, c16.x
mov r2.y, r0.w
mul r1.xy, r1, c16.yzzw
add r2.xy, r2, r1
mad r1.x, r2.y, c16.w, c16.z
frc r1.x, r1
mul r0.w, v0.x, c6.x
mad r1.w, r1.x, c17.x, c17.y
mul_sat r0.w, r0, c12.z
mul_pp r0.xyz, r0, c16.y
mad_pp r0.xyz, r0.w, -r0, r0
add r1.xyz, v1, r0
sincos r0.xy, r1.w
mad r0.y, r2.x, c17.z, c17.w
frc r0.y, r0
mov_pp r3.y, r0.x
mad r1.w, r0.y, c17.x, c17.y
sincos r0.xy, r1.w
dp4_pp r2.x, c1, c1
rsq_pp r0.z, r2.x
mov_pp r3.xz, r0.yyxw
mul_pp r2.xyz, r0.z, c1
dp3_sat r0.y, v4, r2
dp3_pp_sat r0.x, -r3, -c9
add_pp r0.x, r0, -r0.y
mul_sat r0.w, c10.x, c10.x
mad_pp r0.x, r0.w, r0, r0.y
dp3 r0.y, v5, c9
add r2.x, r0.y, c18.y
frc r2.y, r2.x
texld r1.w, v3, s4
mul_pp r0.x, r0, c2.w
mul_pp r0.x, r0, r1.w
mul_pp_sat r1.w, r0.x, c18.x
mov r0.x, c7
add r0.xyz, c2, r0.x
add_sat r2.x, r2, -r2.y
mad_sat r0.xyz, r0, r1.w, c0
mul_pp r0.xyz, r0, r2.x
texldd r2.xyz, r5, s0, r4.zwzw, r4
add_pp r2.xyz, r2, -r1
mul r3.xyz, r0, c8.x
mad_pp r1.xyz, r0.w, r2, r1
mad_pp r1.xyz, r1, c3, r3
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c11.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightShadowData]
Vector 3 [_LightColor0]
Vector 4 [_Color]
Float 5 [_DetailScale]
Float 6 [_DetailVertScale]
Float 7 [_DetailDist]
Float 8 [_MinLight]
Float 9 [_Albedo]
Vector 10 [_SunDir]
Float 11 [_PlanetOpacity]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_BumpMap] 2D
SetTexture 4 [_LightTexture0] 2D
SetTexture 5 [_LightTextureB0] 2D
SetTexture 6 [_ShadowMapTexture] 2D
"ps_3_0
; 155 ALU, 15 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
def c12, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c13, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c14, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c15, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c16, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c17, -0.50000000, 0.25000000, 0.50000000, 0.49999991
def c18, 6.28318501, -3.14159298, 0.99999982, 0.50000000
def c19, 4.00000000, 1.00999999, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3
dcl_texcoord4 v4
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
mov r3.xyz, v6
dp3_sat r3.x, v2, -r3
mul r2.xy, v6.zyzw, c5.x
dsx r4.xy, v6
dsy r4.zw, v6.xyxy
abs r0.w, v6.z
abs r1.zw, v6.xyxy
max r0.x, r1.z, r0.w
rcp r0.y, r0.x
min r0.x, r1.z, r0.w
mul r1.x, r0, r0.y
mul r1.y, r1.x, r1.x
mad r2.w, r1.y, c14.y, c14.z
mad r2.w, r2, r1.y, c14
mad r3.w, r2, r1.y, c15.x
mad r3.w, r3, r1.y, c15.y
add r3.x, r3, c16.z
mad r1.y, r3.w, r1, c15.z
mul r1.y, r1, r1.x
mul r0.xy, v6.zyzw, c6.x
mul r4.xy, r4, r4
mul r4.zw, r4, r4
texld r0.xyz, r0, s1
texld r2.xyz, r2, s2
add r2.xyz, r2, -r0
mad_sat r2.w, r3.x, c16, c16.y
mad r3.xyz, r2.w, r2, r0
mul r2.xy, v6, c6.x
mul r0.xy, v6, c5.x
add r1.x, r1.z, -r0.w
texld r2.xyz, r2, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r2
mad r0.xyz, r2.w, r0, r2
add_pp r2.xyz, r3, -r0
mad_pp r0.xyz, r1.z, r2, r0
add r3.x, -r1.y, c15.w
cmp r3.x, -r1, r1.y, r3
add r3.y, -r3.x, c13.w
cmp r3.x, v6.z, r3, r3.y
add r3.y, -r0.w, c12
mul r2.xy, v6.zxzw, c6.x
mul r1.xy, v6.zxzw, c5.x
rsq r3.y, r3.y
texld r2.xyz, r2, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r2
mad r1.xyz, r2.w, r1, r2
add_pp r1.xyz, r1, -r0
mad_pp r0.xyz, r1.w, r1, r0
cmp r2.x, v6, r3, -r3
mul r3.z, r2.x, c16.x
abs r2.x, v6.y
add r2.z, -r2.x, c12.y
mad r2.y, r2.x, c12.z, c12.w
mad r2.y, r2, r2.x, c13.x
mad r2.w, r0, c12.z, c12
mad r2.w, r0, r2, c13.x
mad r0.w, r0, r2, c13.y
rsq r2.z, r2.z
rcp r3.y, r3.y
add_pp r0.xyz, r0, c17.x
add r3.x, r3.z, c16.y
mul r3.y, r0.w, r3
cmp r2.w, v6.z, c12.x, c12.y
mul r3.w, r2, r3.y
mad r2.x, r2.y, r2, c13.y
rcp r2.z, r2.z
mul r2.z, r2.x, r2
cmp r2.x, v6.y, c12, c12.y
mul r2.y, r2.x, r2.z
mad r0.w, -r2.y, c13.z, r2.z
add r2.z, r4, r4.w
mad r0.w, r2.x, c13, r0
mad r2.y, -r3.w, c13.z, r3
mad r2.x, r2.w, c13.w, r2.y
mul r2.x, r2, c14
mul r0.w, r0, c14.x
rsq r2.z, r2.z
mov r3.y, r0.w
dsx r2.w, r2.x
dsy r2.y, r2.x
add r2.x, r4, r4.y
rsq r2.x, r2.x
rcp r3.w, r2.z
rcp r2.x, r2.x
mul r2.z, r2.x, c16.x
mul r2.x, r3.w, c16
texldd r4.yw, r3, s3, r2.zwzw, r2
add r1.xy, r4.wyzw, c17.x
mov r3.w, r0
mul r1.xy, r1, c17.yzzw
add r3.zw, r3, r1.xyxy
mad r1.x, r3.w, c17.w, c17.z
frc r1.x, r1
mul r0.w, v0.x, c7.x
mad r1.w, r1.x, c18.x, c18.y
mul_sat r0.w, r0, c13.z
mul_pp r0.xyz, r0, c17.y
mad_pp r0.xyz, r0.w, -r0, r0
add r1.xyz, v1, r0
sincos r0.xy, r1.w
mad r0.y, r3.z, c18.z, c18.w
frc r0.y, r0
texldd r2.xyz, r3, s0, r2.zwzw, r2
mad r1.w, r0.y, c18.x, c18.y
mov_pp r5.y, r0.x
sincos r0.xy, r1.w
dp4 r3.z, c1, c1
rsq r0.z, r3.z
mul r4.xyz, r0.z, c1
mov_pp r5.xz, r0.yyxw
dp3_sat r0.y, v5, r4
dp3_pp_sat r0.x, -r5, -c10
add_pp r0.x, r0, -r0.y
mul_sat r1.w, c11.x, c11.x
mad_pp r0.y, r1.w, r0.x, r0
add_pp r2.xyz, r2, -r1
texldp r0.x, v4, s6
rcp r0.z, v4.w
mad r0.z, -v4, r0, r0.x
mov r0.w, c2.x
rcp r0.x, v3.w
mad r4.xy, v3, r0.x, c16.y
cmp r0.z, r0, c12.y, r0.w
dp3 r0.x, v3, v3
cmp r3.z, -v3, c12.x, c12.y
texld r0.w, r4, s4
mul_pp r0.w, r3.z, r0
texld r0.x, r0.x, s5
mul_pp r0.x, r0.w, r0
mul_pp r0.z, r0.x, r0
mul_pp r0.x, r0.y, c3.w
mul_pp r0.x, r0, r0.z
dp3 r0.y, v6, c10
add r3.z, r0.y, c19.y
mul_pp_sat r0.w, r0.x, c19.x
mov r0.x, c8
frc r3.w, r3.z
add r0.xyz, c3, r0.x
add_sat r3.z, r3, -r3.w
mad_sat r0.xyz, r0, r0.w, c0
mul_pp r0.xyz, r0, r3.z
mul r3.xyz, r0, c9.x
mad_pp r1.xyz, r1.w, r2, r1
mad_pp r1.xyz, r1, c4, r3
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c12.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightShadowData]
Vector 3 [_LightColor0]
Vector 4 [_Color]
Float 5 [_DetailScale]
Float 6 [_DetailVertScale]
Float 7 [_DetailDist]
Float 8 [_MinLight]
Float 9 [_Albedo]
Vector 10 [_SunDir]
Float 11 [_PlanetOpacity]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_BumpMap] 2D
SetTexture 4 [_LightTexture0] 2D
SetTexture 5 [_LightTextureB0] 2D
SetTexture 6 [_ShadowMapTexture] 2D
"ps_3_0
; 154 ALU, 15 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
def c12, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c13, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c14, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c15, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c16, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c17, -0.50000000, 0.25000000, 0.50000000, 0.49999991
def c18, 6.28318501, -3.14159298, 0.99999982, 0.50000000
def c19, 4.00000000, 1.00999999, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3
dcl_texcoord4 v4
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
mov r3.xyz, v6
dp3_sat r3.x, v2, -r3
mul r2.xy, v6.zyzw, c5.x
dsx r4.xy, v6
dsy r4.zw, v6.xyxy
abs r0.w, v6.z
abs r1.zw, v6.xyxy
max r0.x, r1.z, r0.w
rcp r0.y, r0.x
min r0.x, r1.z, r0.w
mul r1.x, r0, r0.y
mul r1.y, r1.x, r1.x
mad r2.w, r1.y, c14.y, c14.z
mad r2.w, r2, r1.y, c14
mad r3.w, r2, r1.y, c15.x
mad r3.w, r3, r1.y, c15.y
add r3.x, r3, c16.z
mad r1.y, r3.w, r1, c15.z
mul r1.y, r1, r1.x
mul r0.xy, v6.zyzw, c6.x
mul r4.xy, r4, r4
mul r4.zw, r4, r4
texld r0.xyz, r0, s1
texld r2.xyz, r2, s2
add r2.xyz, r2, -r0
mad_sat r2.w, r3.x, c16, c16.y
mad r3.xyz, r2.w, r2, r0
mul r2.xy, v6, c6.x
mul r0.xy, v6, c5.x
add r1.x, r1.z, -r0.w
texld r2.xyz, r2, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r2
mad r0.xyz, r2.w, r0, r2
add_pp r2.xyz, r3, -r0
mad_pp r0.xyz, r1.z, r2, r0
add r3.x, -r1.y, c15.w
cmp r3.x, -r1, r1.y, r3
add r3.y, -r3.x, c13.w
cmp r3.x, v6.z, r3, r3.y
add r3.y, -r0.w, c12
mul r2.xy, v6.zxzw, c6.x
mul r1.xy, v6.zxzw, c5.x
rsq r3.y, r3.y
texld r2.xyz, r2, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r2
mad r1.xyz, r2.w, r1, r2
add_pp r1.xyz, r1, -r0
mad_pp r0.xyz, r1.w, r1, r0
cmp r2.x, v6, r3, -r3
mul r3.z, r2.x, c16.x
abs r2.x, v6.y
add r2.z, -r2.x, c12.y
mad r2.y, r2.x, c12.z, c12.w
mad r2.y, r2, r2.x, c13.x
mad r2.w, r0, c12.z, c12
mad r2.w, r0, r2, c13.x
mad r0.w, r0, r2, c13.y
rsq r2.z, r2.z
rcp r3.y, r3.y
add_pp r0.xyz, r0, c17.x
add r3.x, r3.z, c16.y
mul r3.y, r0.w, r3
cmp r2.w, v6.z, c12.x, c12.y
mul r3.w, r2, r3.y
mad r2.x, r2.y, r2, c13.y
rcp r2.z, r2.z
mul r2.z, r2.x, r2
cmp r2.x, v6.y, c12, c12.y
mul r2.y, r2.x, r2.z
mad r0.w, -r2.y, c13.z, r2.z
add r2.z, r4, r4.w
mad r0.w, r2.x, c13, r0
mad r2.y, -r3.w, c13.z, r3
mad r2.x, r2.w, c13.w, r2.y
mul r2.x, r2, c14
mul r0.w, r0, c14.x
rsq r2.z, r2.z
mov r3.y, r0.w
dsx r2.w, r2.x
dsy r2.y, r2.x
add r2.x, r4, r4.y
rsq r2.x, r2.x
rcp r3.w, r2.z
rcp r2.x, r2.x
mul r2.z, r2.x, c16.x
mul r2.x, r3.w, c16
texldd r4.yw, r3, s3, r2.zwzw, r2
add r1.xy, r4.wyzw, c17.x
mov r3.w, r0
mul r1.xy, r1, c17.yzzw
add r3.zw, r3, r1.xyxy
mad r1.x, r3.w, c17.w, c17.z
frc r1.x, r1
mul r0.w, v0.x, c7.x
mad r1.w, r1.x, c18.x, c18.y
mul_sat r0.w, r0, c13.z
mul_pp r0.xyz, r0, c17.y
mad_pp r0.xyz, r0.w, -r0, r0
add r1.xyz, v1, r0
sincos r0.xy, r1.w
mad r0.y, r3.z, c18.z, c18.w
frc r0.y, r0
texldd r2.xyz, r3, s0, r2.zwzw, r2
mad r1.w, r0.y, c18.x, c18.y
mov_pp r5.y, r0.x
sincos r0.xy, r1.w
dp4 r3.z, c1, c1
rsq r0.z, r3.z
mov_pp r5.xz, r0.yyxw
mul r4.xyz, r0.z, c1
dp3_sat r0.y, v5, r4
rcp r0.w, v3.w
dp3_pp_sat r0.x, -r5, -c10
mad r4.xy, v3, r0.w, c16.y
add_pp r0.x, r0, -r0.y
mul_sat r1.w, c11.x, c11.x
mad_pp r0.y, r1.w, r0.x, r0
mov r0.x, c2
add r0.z, c12.y, -r0.x
texldp r0.x, v4, s6
mad r0.z, r0.x, r0, c2.x
dp3 r0.x, v3, v3
add_pp r2.xyz, r2, -r1
cmp r3.z, -v3, c12.x, c12.y
texld r0.w, r4, s4
mul_pp r0.w, r3.z, r0
texld r0.x, r0.x, s5
mul_pp r0.x, r0.w, r0
mul_pp r0.z, r0.x, r0
mul_pp r0.x, r0.y, c3.w
mul_pp r0.x, r0, r0.z
dp3 r0.y, v6, c10
add r3.z, r0.y, c19.y
mul_pp_sat r0.w, r0.x, c19.x
mov r0.x, c8
frc r3.w, r3.z
add r0.xyz, c3, r0.x
add_sat r3.z, r3, -r3.w
mad_sat r0.xyz, r0, r0.w, c0
mul_pp r0.xyz, r0, r3.z
mul r3.xyz, r0, c9.x
mad_pp r1.xyz, r1.w, r2, r1
mad_pp r1.xyz, r1, c4, r3
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c12.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
Float 8 [_Albedo]
Vector 9 [_SunDir]
Float 10 [_PlanetOpacity]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_BumpMap] 2D
SetTexture 4 [_ShadowMapTexture] 2D
"ps_3_0
; 144 ALU, 13 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
def c11, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c12, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c13, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c14, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c15, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c16, -0.50000000, 0.25000000, 0.50000000, 0.49999991
def c17, 6.28318501, -3.14159298, 0.99999982, 0.50000000
def c18, 4.00000000, 1.00999999, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3
dcl_texcoord5 v4.xyz
dcl_texcoord6 v5.xyz
mov r3.xyz, v5
dp3_sat r3.x, v2, -r3
mul r2.xy, v5.zyzw, c4.x
abs r0.w, v5.z
abs r1.zw, v5.xyxy
max r0.x, r1.z, r0.w
rcp r0.y, r0.x
min r0.x, r1.z, r0.w
mul r1.x, r0, r0.y
mul r1.y, r1.x, r1.x
mad r2.w, r1.y, c13.y, c13.z
mad r2.w, r2, r1.y, c13
mad r3.w, r2, r1.y, c14.x
add r3.x, r3, c15.z
mul r0.xy, v5.zyzw, c5.x
mad r3.w, r3, r1.y, c14.y
mad r1.y, r3.w, r1, c14.z
mul r1.y, r1, r1.x
texld r0.xyz, r0, s1
texld r2.xyz, r2, s2
add r2.xyz, r2, -r0
mad_sat r2.w, r3.x, c15, c15.y
mad r3.xyz, r2.w, r2, r0
mul r2.xy, v5, c5.x
mul r0.xy, v5, c4.x
add r1.x, r1.z, -r0.w
texld r2.xyz, r2, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r2
mad r0.xyz, r2.w, r0, r2
add_pp r2.xyz, r3, -r0
mad_pp r0.xyz, r1.z, r2, r0
add r3.x, -r1.y, c14.w
cmp r3.x, -r1, r1.y, r3
add r3.y, -r3.x, c12.w
cmp r3.x, v5.z, r3, r3.y
add r3.y, -r0.w, c11
mul r2.xy, v5.zxzw, c5.x
mul r1.xy, v5.zxzw, c4.x
rsq r3.y, r3.y
texld r2.xyz, r2, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r2
mad r1.xyz, r2.w, r1, r2
abs r2.y, v5
cmp r2.x, v5, r3, -r3
add_pp r1.xyz, r1, -r0
mad_pp r0.xyz, r1.w, r1, r0
mul r2.x, r2, c15
add r2.w, -r2.y, c11.y
mad r2.z, r2.y, c11, c11.w
mad r2.z, r2, r2.y, c12.x
mad r3.x, r0.w, c11.z, c11.w
mad r3.x, r0.w, r3, c12
mad r0.w, r0, r3.x, c12.y
rsq r2.w, r2.w
rcp r3.y, r3.y
add_pp r0.xyz, r0, c16.x
mul r3.y, r0.w, r3
cmp r3.x, v5.z, c11, c11.y
add r5.x, r2, c15.y
mad r2.y, r2.z, r2, c12
rcp r2.w, r2.w
mul r2.w, r2.y, r2
cmp r2.y, v5, c11.x, c11
mul r2.z, r2.y, r2.w
mad r0.w, -r2.z, c12.z, r2
mul r3.z, r3.x, r3.y
mad r0.w, r2.y, c12, r0
mad r2.z, -r3, c12, r3.y
mad r2.y, r3.x, c12.w, r2.z
mul r2.y, r2, c13.x
mul r0.w, r0, c13.x
dsx r2.zw, v5.xyxy
dsy r3.xy, v5
mul r2.zw, r2, r2
mul r3.xy, r3, r3
mov r5.y, r0.w
dsx r4.w, r2.y
dsy r4.y, r2
add r2.y, r2.z, r2.w
add r2.z, r3.x, r3.y
rsq r2.y, r2.y
rcp r2.y, r2.y
rsq r2.z, r2.z
rcp r2.z, r2.z
mul r4.z, r2.y, c15.x
mul r4.x, r2.z, c15
texldd r2.yw, r5, s3, r4.zwzw, r4
add r1.xy, r2.wyzw, c16.x
mov r2.y, r0.w
mul r1.xy, r1, c16.yzzw
add r2.xy, r2, r1
mad r1.x, r2.y, c16.w, c16.z
frc r1.x, r1
mul r0.w, v0.x, c6.x
mad r1.w, r1.x, c17.x, c17.y
mul_sat r0.w, r0, c12.z
mul_pp r0.xyz, r0, c16.y
mad_pp r0.xyz, r0.w, -r0, r0
add r1.xyz, v1, r0
sincos r0.xy, r1.w
mad r0.y, r2.x, c17.z, c17.w
frc r0.y, r0
mov_pp r3.y, r0.x
mad r1.w, r0.y, c17.x, c17.y
sincos r0.xy, r1.w
dp4_pp r2.x, c1, c1
rsq_pp r0.z, r2.x
mov_pp r3.xz, r0.yyxw
mul_pp r2.xyz, r0.z, c1
dp3_sat r0.y, v4, r2
dp3_pp_sat r0.x, -r3, -c9
add_pp r0.x, r0, -r0.y
mul_sat r0.w, c10.x, c10.x
mad_pp r0.y, r0.w, r0.x, r0
mul_pp r0.y, r0, c2.w
texldp r0.x, v3, s4
mul_pp r0.x, r0.y, r0
dp3 r0.y, v5, c9
add r2.x, r0.y, c18.y
frc r2.y, r2.x
mul_pp_sat r1.w, r0.x, c18.x
mov r0.x, c7
add r0.xyz, c2, r0.x
add_sat r2.x, r2, -r2.y
mad_sat r0.xyz, r0, r1.w, c0
mul_pp r0.xyz, r0, r2.x
texldd r2.xyz, r5, s0, r4.zwzw, r4
add_pp r2.xyz, r2, -r1
mul r3.xyz, r0, c8.x
mad_pp r1.xyz, r0.w, r2, r1
mad_pp r1.xyz, r1, c3, r3
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c11.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
Float 8 [_Albedo]
Vector 9 [_SunDir]
Float 10 [_PlanetOpacity]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_BumpMap] 2D
SetTexture 4 [_ShadowMapTexture] 2D
SetTexture 5 [_LightTexture0] 2D
"ps_3_0
; 145 ALU, 14 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
def c11, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c12, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c13, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c14, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c15, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c16, -0.50000000, 0.25000000, 0.50000000, 0.49999991
def c17, 6.28318501, -3.14159298, 0.99999982, 0.50000000
def c18, 4.00000000, 1.00999999, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xy
dcl_texcoord4 v4
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
mov r3.xyz, v6
dp3_sat r3.x, v2, -r3
mul r2.xy, v6.zyzw, c4.x
dsy r4.xy, v6
abs r0.w, v6.z
abs r1.zw, v6.xyxy
max r0.x, r1.z, r0.w
rcp r0.y, r0.x
min r0.x, r1.z, r0.w
mul r1.x, r0, r0.y
mul r1.y, r1.x, r1.x
mad r2.w, r1.y, c13.y, c13.z
mad r2.w, r2, r1.y, c13
mad r3.w, r2, r1.y, c14.x
mad r3.w, r3, r1.y, c14.y
add r3.x, r3, c15.z
mad r1.y, r3.w, r1, c14.z
mul r1.y, r1, r1.x
mul r0.xy, v6.zyzw, c5.x
mul r4.xy, r4, r4
texld r0.xyz, r0, s1
texld r2.xyz, r2, s2
add r2.xyz, r2, -r0
mad_sat r2.w, r3.x, c15, c15.y
mad r3.xyz, r2.w, r2, r0
mul r2.xy, v6, c5.x
mul r0.xy, v6, c4.x
add r1.x, r1.z, -r0.w
texld r2.xyz, r2, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r2
mad r0.xyz, r2.w, r0, r2
add_pp r2.xyz, r3, -r0
mad_pp r0.xyz, r1.z, r2, r0
add r3.x, -r1.y, c14.w
cmp r3.x, -r1, r1.y, r3
add r3.y, -r3.x, c12.w
cmp r3.x, v6.z, r3, r3.y
add r3.y, -r0.w, c11
mul r2.xy, v6.zxzw, c5.x
mul r1.xy, v6.zxzw, c4.x
rsq r3.y, r3.y
texld r2.xyz, r2, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r2
mad r1.xyz, r2.w, r1, r2
add_pp r1.xyz, r1, -r0
mad_pp r0.xyz, r1.w, r1, r0
cmp r2.x, v6, r3, -r3
mul r3.x, r2, c15
abs r2.x, v6.y
add r2.z, -r2.x, c11.y
mad r2.y, r2.x, c11.z, c11.w
mad r2.y, r2, r2.x, c12.x
mad r2.w, r0, c11.z, c11
mad r2.w, r0, r2, c12.x
mad r0.w, r0, r2, c12.y
rsq r2.z, r2.z
rcp r3.y, r3.y
add_pp r0.xyz, r0, c16.x
mul r3.y, r0.w, r3
cmp r2.w, v6.z, c11.x, c11.y
mul r3.z, r2.w, r3.y
add r5.x, r3, c15.y
mad r2.x, r2.y, r2, c12.y
rcp r2.z, r2.z
mul r2.z, r2.x, r2
cmp r2.x, v6.y, c11, c11.y
mul r2.y, r2.x, r2.z
mad r0.w, -r2.y, c12.z, r2.z
mad r2.y, -r3.z, c12.z, r3
mad r0.w, r2.x, c12, r0
mad r2.x, r2.w, c12.w, r2.y
mul r2.x, r2, c13
mul r0.w, r0, c13.x
add r2.z, r4.x, r4.y
rsq r2.z, r2.z
dsx r3.zw, v6.xyxy
mul r3.zw, r3, r3
mov r5.y, r0.w
dsx r2.w, r2.x
dsy r2.y, r2.x
add r2.x, r3.z, r3.w
rsq r2.x, r2.x
rcp r3.y, r2.z
rcp r2.x, r2.x
mul r2.z, r2.x, c15.x
mul r2.x, r3.y, c15
texldd r3.yw, r5, s3, r2.zwzw, r2
add r1.xy, r3.wyzw, c16.x
mov r3.y, r0.w
mul r1.xy, r1, c16.yzzw
add r3.xy, r3, r1
mad r1.x, r3.y, c16.w, c16.z
frc r1.x, r1
mul r0.w, v0.x, c6.x
mad r1.w, r1.x, c17.x, c17.y
mul_sat r0.w, r0, c12.z
mul_pp r0.xyz, r0, c16.y
mad_pp r0.xyz, r0.w, -r0, r0
add r1.xyz, v1, r0
sincos r0.xy, r1.w
mad r0.y, r3.x, c17.z, c17.w
frc r0.y, r0
texldd r2.xyz, r5, s0, r2.zwzw, r2
mad r1.w, r0.y, c17.x, c17.y
mov_pp r4.y, r0.x
sincos r0.xy, r1.w
dp4_pp r3.x, c1, c1
rsq_pp r0.z, r3.x
mov_pp r4.xz, r0.yyxw
mul_pp r3.xyz, r0.z, c1
dp3_sat r0.y, v5, r3
dp3_pp_sat r0.x, -r4, -c9
add_pp r0.x, r0, -r0.y
mul_sat r1.w, c10.x, c10.x
mad_pp r0.y, r1.w, r0.x, r0
add_pp r2.xyz, r2, -r1
texldp r0.x, v4, s4
texld r0.w, v3, s5
mul r0.z, r0.w, r0.x
mul_pp r0.x, r0.y, c2.w
mul_pp r0.x, r0, r0.z
dp3 r0.y, v6, c9
add r3.x, r0.y, c18.y
frc r3.y, r3.x
mul_pp_sat r0.w, r0.x, c18.x
mov r0.x, c7
add r0.xyz, c2, r0.x
add_sat r3.x, r3, -r3.y
mad_sat r0.xyz, r0, r0.w, c0
mul_pp r0.xyz, r0, r3.x
mul r3.xyz, r0, c8.x
mad_pp r1.xyz, r1.w, r2, r1
mad_pp r1.xyz, r1, c3, r3
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c11.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightPositionRange]
Vector 3 [_LightShadowData]
Vector 4 [_LightColor0]
Vector 5 [_Color]
Float 6 [_DetailScale]
Float 7 [_DetailVertScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_Albedo]
Vector 11 [_SunDir]
Float 12 [_PlanetOpacity]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_BumpMap] 2D
SetTexture 4 [_ShadowMapTexture] CUBE
SetTexture 5 [_LightTexture0] 2D
"ps_3_0
; 154 ALU, 14 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_cube s4
dcl_2d s5
def c13, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c14, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c15, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c16, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c17, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c18, -0.50000000, 0.25000000, 0.50000000, 0.49999991
def c19, 6.28318501, -3.14159298, 0.99999982, 0.50000000
def c20, 1.00000000, 0.00392157, 0.00001538, 0.00000001
def c21, 0.97000003, 4.00000000, 1.00999999, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
mov r3.xyz, v6
dp3_sat r3.x, v2, -r3
mul r2.xy, v6.zyzw, c6.x
dsy r4.xy, v6
abs r0.w, v6.z
abs r1.zw, v6.xyxy
max r0.x, r1.z, r0.w
rcp r0.y, r0.x
min r0.x, r1.z, r0.w
mul r1.x, r0, r0.y
mul r1.y, r1.x, r1.x
mad r2.w, r1.y, c15.y, c15.z
mad r2.w, r2, r1.y, c15
mad r3.w, r2, r1.y, c16.x
mad r3.w, r3, r1.y, c16.y
add r3.x, r3, c17.z
mad r1.y, r3.w, r1, c16.z
mul r1.y, r1, r1.x
mul r0.xy, v6.zyzw, c7.x
mul r4.xy, r4, r4
texld r0.xyz, r0, s1
texld r2.xyz, r2, s2
add r2.xyz, r2, -r0
mad_sat r2.w, r3.x, c17, c17.y
mad r3.xyz, r2.w, r2, r0
mul r2.xy, v6, c7.x
mul r0.xy, v6, c6.x
add r1.x, r1.z, -r0.w
texld r2.xyz, r2, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r2
mad r0.xyz, r2.w, r0, r2
add_pp r2.xyz, r3, -r0
mad_pp r0.xyz, r1.z, r2, r0
add r3.x, -r1.y, c16.w
cmp r3.x, -r1, r1.y, r3
add r3.y, -r3.x, c14.w
cmp r3.x, v6.z, r3, r3.y
add r3.y, -r0.w, c13
mul r2.xy, v6.zxzw, c7.x
mul r1.xy, v6.zxzw, c6.x
rsq r3.y, r3.y
texld r2.xyz, r2, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r2
mad r1.xyz, r2.w, r1, r2
add_pp r1.xyz, r1, -r0
mad_pp r0.xyz, r1.w, r1, r0
cmp r2.x, v6, r3, -r3
mul r3.x, r2, c17
abs r2.x, v6.y
add r2.z, -r2.x, c13.y
mad r2.y, r2.x, c13.z, c13.w
mad r2.y, r2, r2.x, c14.x
mad r2.w, r0, c13.z, c13
mad r2.w, r0, r2, c14.x
mad r0.w, r0, r2, c14.y
rsq r2.z, r2.z
rcp r3.y, r3.y
add_pp r0.xyz, r0, c18.x
mul r3.y, r0.w, r3
cmp r2.w, v6.z, c13.x, c13.y
mul r3.z, r2.w, r3.y
add r5.x, r3, c17.y
mad r2.x, r2.y, r2, c14.y
rcp r2.z, r2.z
mul r2.z, r2.x, r2
cmp r2.x, v6.y, c13, c13.y
mul r2.y, r2.x, r2.z
mad r0.w, -r2.y, c14.z, r2.z
mad r2.y, -r3.z, c14.z, r3
mad r0.w, r2.x, c14, r0
mad r2.x, r2.w, c14.w, r2.y
mul r2.x, r2, c15
mul r0.w, r0, c15.x
add r2.z, r4.x, r4.y
rsq r2.z, r2.z
dsx r3.zw, v6.xyxy
mul r3.zw, r3, r3
mov r5.y, r0.w
dsx r2.w, r2.x
dsy r2.y, r2.x
add r2.x, r3.z, r3.w
rsq r2.x, r2.x
rcp r3.y, r2.z
rcp r2.x, r2.x
mul r2.z, r2.x, c17.x
mul r2.x, r3.y, c17
texldd r3.yw, r5, s3, r2.zwzw, r2
add r1.xy, r3.wyzw, c18.x
mov r3.y, r0.w
mul r1.xy, r1, c18.yzzw
add r3.xy, r3, r1
mad r1.x, r3.y, c18.w, c18.z
frc r1.x, r1
mul r0.w, v0.x, c8.x
mad r1.w, r1.x, c19.x, c19.y
mul_sat r0.w, r0, c14.z
mul_pp r0.xyz, r0, c18.y
mad_pp r0.xyz, r0.w, -r0, r0
add r1.xyz, v1, r0
sincos r0.xy, r1.w
mad r0.y, r3.x, c19.z, c19.w
frc r0.y, r0
texldd r2.xyz, r5, s0, r2.zwzw, r2
mad r1.w, r0.y, c19.x, c19.y
mov_pp r4.y, r0.x
sincos r0.xy, r1.w
dp4 r3.x, c1, c1
rsq r0.z, r3.x
mul r3.xyz, r0.z, c1
mov_pp r4.xz, r0.yyxw
dp3_sat r0.y, v5, r3
dp3 r0.z, v4, v4
rsq r3.y, r0.z
dp3_pp_sat r0.x, -r4, -c11
add_pp r0.x, r0, -r0.y
mul_sat r1.w, c12.x, c12.x
mad_pp r3.x, r1.w, r0, r0.y
texld r0, v4, s4
dp4 r0.y, r0, c20
rcp r3.y, r3.y
mul r0.x, r3.y, c2.w
mad r0.y, -r0.x, c21.x, r0
mov r0.z, c3.x
dp3 r0.x, v3, v3
add_pp r2.xyz, r2, -r1
cmp r0.y, r0, c13, r0.z
texld r0.x, r0.x, s5
mul r0.y, r0.x, r0
mul_pp r0.x, r3, c4.w
mul_pp r0.x, r0, r0.y
dp3 r0.y, v6, c11
add r3.x, r0.y, c21.z
frc r3.y, r3.x
mul_pp_sat r0.w, r0.x, c21.y
mov r0.x, c9
add r0.xyz, c4, r0.x
add_sat r3.x, r3, -r3.y
mad_sat r0.xyz, r0, r0.w, c0
mul_pp r0.xyz, r0, r3.x
mul r3.xyz, r0, c10.x
mad_pp r1.xyz, r1.w, r2, r1
mad_pp r1.xyz, r1, c5, r3
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c13.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightPositionRange]
Vector 3 [_LightShadowData]
Vector 4 [_LightColor0]
Vector 5 [_Color]
Float 6 [_DetailScale]
Float 7 [_DetailVertScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_Albedo]
Vector 11 [_SunDir]
Float 12 [_PlanetOpacity]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_BumpMap] 2D
SetTexture 4 [_ShadowMapTexture] CUBE
SetTexture 5 [_LightTextureB0] 2D
SetTexture 6 [_LightTexture0] CUBE
"ps_3_0
; 155 ALU, 15 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_cube s4
dcl_2d s5
dcl_cube s6
def c13, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c14, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c15, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c16, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c17, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c18, -0.50000000, 0.25000000, 0.50000000, 0.49999991
def c19, 6.28318501, -3.14159298, 0.99999982, 0.50000000
def c20, 1.00000000, 0.00392157, 0.00001538, 0.00000001
def c21, 0.97000003, 4.00000000, 1.00999999, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
mov r3.xyz, v6
dp3_sat r3.x, v2, -r3
mul r2.xy, v6.zyzw, c6.x
dsy r4.xy, v6
abs r0.w, v6.z
abs r1.zw, v6.xyxy
max r0.x, r1.z, r0.w
rcp r0.y, r0.x
min r0.x, r1.z, r0.w
mul r1.x, r0, r0.y
mul r1.y, r1.x, r1.x
mad r2.w, r1.y, c15.y, c15.z
mad r2.w, r2, r1.y, c15
mad r3.w, r2, r1.y, c16.x
mad r3.w, r3, r1.y, c16.y
add r3.x, r3, c17.z
mad r1.y, r3.w, r1, c16.z
mul r1.y, r1, r1.x
mul r0.xy, v6.zyzw, c7.x
mul r4.xy, r4, r4
texld r0.xyz, r0, s1
texld r2.xyz, r2, s2
add r2.xyz, r2, -r0
mad_sat r2.w, r3.x, c17, c17.y
mad r3.xyz, r2.w, r2, r0
mul r2.xy, v6, c7.x
mul r0.xy, v6, c6.x
add r1.x, r1.z, -r0.w
texld r2.xyz, r2, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r2
mad r0.xyz, r2.w, r0, r2
add_pp r2.xyz, r3, -r0
mad_pp r0.xyz, r1.z, r2, r0
add r3.x, -r1.y, c16.w
cmp r3.x, -r1, r1.y, r3
add r3.y, -r3.x, c14.w
cmp r3.x, v6.z, r3, r3.y
add r3.y, -r0.w, c13
mul r2.xy, v6.zxzw, c7.x
mul r1.xy, v6.zxzw, c6.x
rsq r3.y, r3.y
texld r2.xyz, r2, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r2
mad r1.xyz, r2.w, r1, r2
add_pp r1.xyz, r1, -r0
mad_pp r0.xyz, r1.w, r1, r0
cmp r2.x, v6, r3, -r3
mul r3.x, r2, c17
abs r2.x, v6.y
add r2.z, -r2.x, c13.y
mad r2.y, r2.x, c13.z, c13.w
mad r2.y, r2, r2.x, c14.x
mad r2.w, r0, c13.z, c13
mad r2.w, r0, r2, c14.x
mad r0.w, r0, r2, c14.y
rsq r2.z, r2.z
rcp r3.y, r3.y
add_pp r0.xyz, r0, c18.x
mul r3.y, r0.w, r3
cmp r2.w, v6.z, c13.x, c13.y
mul r3.z, r2.w, r3.y
add r5.x, r3, c17.y
mad r2.x, r2.y, r2, c14.y
rcp r2.z, r2.z
mul r2.z, r2.x, r2
cmp r2.x, v6.y, c13, c13.y
mul r2.y, r2.x, r2.z
mad r0.w, -r2.y, c14.z, r2.z
mad r2.y, -r3.z, c14.z, r3
mad r0.w, r2.x, c14, r0
mad r2.x, r2.w, c14.w, r2.y
mul r2.x, r2, c15
mul r0.w, r0, c15.x
add r2.z, r4.x, r4.y
rsq r2.z, r2.z
dsx r3.zw, v6.xyxy
mul r3.zw, r3, r3
mov r5.y, r0.w
dsx r2.w, r2.x
dsy r2.y, r2.x
add r2.x, r3.z, r3.w
rsq r2.x, r2.x
rcp r3.y, r2.z
rcp r2.x, r2.x
mul r2.z, r2.x, c17.x
mul r2.x, r3.y, c17
texldd r3.yw, r5, s3, r2.zwzw, r2
add r1.xy, r3.wyzw, c18.x
mov r3.y, r0.w
mul r1.xy, r1, c18.yzzw
add r3.xy, r3, r1
mad r1.x, r3.y, c18.w, c18.z
frc r1.x, r1
mul r0.w, v0.x, c8.x
mad r1.w, r1.x, c19.x, c19.y
mul_sat r0.w, r0, c14.z
mul_pp r0.xyz, r0, c18.y
mad_pp r0.xyz, r0.w, -r0, r0
add r1.xyz, v1, r0
sincos r0.xy, r1.w
mad r0.y, r3.x, c19.z, c19.w
frc r0.y, r0
texldd r2.xyz, r5, s0, r2.zwzw, r2
mad r1.w, r0.y, c19.x, c19.y
mov_pp r4.y, r0.x
sincos r0.xy, r1.w
dp4 r3.x, c1, c1
rsq r0.z, r3.x
mov_pp r4.xz, r0.yyxw
mul r3.xyz, r0.z, c1
dp3_sat r0.y, v5, r3
dp3_pp_sat r0.x, -r4, -c11
dp3 r3.y, v4, v4
add_pp r0.x, r0, -r0.y
mul_sat r1.w, c12.x, c12.x
mad_pp r3.x, r1.w, r0, r0.y
texld r0, v4, s4
dp4 r0.y, r0, c20
rsq r3.y, r3.y
rcp r0.x, r3.y
mul r0.x, r0, c2.w
add_pp r2.xyz, r2, -r1
mad r0.x, -r0, c21, r0.y
mov r0.z, c3.x
cmp r0.y, r0.x, c13, r0.z
dp3 r0.x, v3, v3
texld r0.w, v3, s6
texld r0.x, r0.x, s5
mul r0.x, r0, r0.w
mul r0.y, r0.x, r0
mul_pp r0.x, r3, c4.w
mul_pp r0.x, r0, r0.y
dp3 r0.y, v6, c11
add r3.x, r0.y, c21.z
frc r3.y, r3.x
mul_pp_sat r0.w, r0.x, c21.y
mov r0.x, c9
add r0.xyz, c4, r0.x
add_sat r3.x, r3, -r3.y
mad_sat r0.xyz, r0, r0.w, c0
mul_pp r0.xyz, r0, r3.x
mul r3.xyz, r0, c10.x
mad_pp r1.xyz, r1.w, r2, r1
mad_pp r1.xyz, r1, c5, r3
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c13.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightShadowData]
Vector 3 [_ShadowOffsets0]
Vector 4 [_ShadowOffsets1]
Vector 5 [_ShadowOffsets2]
Vector 6 [_ShadowOffsets3]
Vector 7 [_LightColor0]
Vector 8 [_Color]
Float 9 [_DetailScale]
Float 10 [_DetailVertScale]
Float 11 [_DetailDist]
Float 12 [_MinLight]
Float 13 [_Albedo]
Vector 14 [_SunDir]
Float 15 [_PlanetOpacity]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_BumpMap] 2D
SetTexture 4 [_LightTexture0] 2D
SetTexture 5 [_LightTextureB0] 2D
SetTexture 6 [_ShadowMapTexture] 2D
"ps_3_0
; 163 ALU, 18 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
def c16, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c17, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c18, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c19, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c20, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c21, -0.50000000, 0.25000000, 0.50000000, 0.49999991
def c22, 6.28318501, -3.14159298, 0.99999982, 0.50000000
def c23, 4.00000000, 1.00999999, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3
dcl_texcoord4 v4
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
mul r1.xy, v6.zyzw, c9.x
mul r0.xy, v6.zyzw, c10.x
abs r0.w, v6.z
abs r3.xy, v6
max r1.w, r3.x, r0
rcp r2.x, r1.w
min r1.w, r3.x, r0
mul r2.w, r1, r2.x
mul r3.z, r2.w, r2.w
mad r1.w, r3.z, c18.y, c18.z
mad r3.w, r1, r3.z, c18
mad r3.w, r3, r3.z, c19.x
mad r3.w, r3, r3.z, c19.y
mov r2.xyz, v6
dp3_sat r2.x, v2, -r2
add r2.x, r2, c20.z
mad r3.z, r3.w, r3, c19
mul r2.w, r3.z, r2
dsy r3.zw, v6.xyxy
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad_sat r1.w, r2.x, c20, c20.y
mad r2.xyz, r1.w, r1, r0
mul r1.xy, v6, c10.x
mul r0.xy, v6, c9.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r1.w, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r3.x, r1, r0
mul r1.xy, v6.zxzw, c10.x
texld r1.xyz, r1, s1
add r0.x, r3, -r0.w
add r0.y, -r2.w, c19.w
cmp r2.w, -r0.x, r2, r0.y
mul r0.xy, v6.zxzw, c9.x
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r1.w, r0, r1
abs r1.y, v6
add_pp r0.xyz, r0, -r2
mad_pp r0.xyz, r3.y, r0, r2
add r3.x, -r2.w, c17.w
cmp r1.x, v6.z, r2.w, r3
add r1.w, -r1.y, c16.y
mad r1.z, r1.y, c16, c16.w
mad r1.z, r1, r1.y, c17.x
add r2.y, -r0.w, c16
mad r2.x, r0.w, c16.z, c16.w
mad r2.x, r0.w, r2, c17
mad r0.w, r0, r2.x, c17.y
cmp r1.x, v6, r1, -r1
mul r1.x, r1, c20
rsq r1.w, r1.w
rsq r2.y, r2.y
rcp r2.y, r2.y
add_pp r0.xyz, r0, c21.x
add r3.x, r1, c20.y
mul r2.y, r0.w, r2
cmp r2.x, v6.z, c16, c16.y
mul r2.z, r2.x, r2.y
mad r1.y, r1.z, r1, c17
rcp r1.w, r1.w
mul r1.z, r1.y, r1.w
cmp r1.y, v6, c16.x, c16
mul r1.w, r1.y, r1.z
mad r0.w, -r1, c17.z, r1.z
mad r0.w, r1.y, c17, r0
mad r1.z, -r2, c17, r2.y
mad r1.y, r2.x, c17.w, r1.z
mul r1.y, r1, c18.x
mul r0.w, r0, c18.x
dsx r1.zw, v6.xyxy
mul r1.zw, r1, r1
mov r3.y, r0.w
dsx r2.w, r1.y
dsy r2.y, r1
add r1.y, r1.z, r1.w
mul r3.zw, r3, r3
add r1.z, r3, r3.w
rsq r1.y, r1.y
rcp r1.y, r1.y
rsq r1.z, r1.z
rcp r1.z, r1.z
mul r2.z, r1.y, c20.x
mul r2.x, r1.z, c20
texldd r1.yw, r3, s3, r2.zwzw, r2
add r1.zw, r1.xywy, c21.x
mov r1.y, r0.w
mul r1.zw, r1, c21.xyyz
add r3.zw, r1.xyxy, r1
mad r1.x, r3.w, c21.w, c21.z
mul r0.w, v0.x, c11.x
rcp r3.w, v4.w
mul_sat r0.w, r0, c17.z
mul_pp r0.xyz, r0, c21.y
mad_pp r0.xyz, r0.w, -r0, r0
frc r0.w, r1.x
add r1.xyz, v1, r0
mad r1.w, r0, c22.x, c22.y
texldd r2.xyz, r3, s0, r2.zwzw, r2
sincos r0.xy, r1.w
mad r3.z, r3, c22, c22.w
frc r0.y, r3.z
mad r1.w, r0.y, c22.x, c22.y
mov_pp r4.y, r0.x
sincos r0.xy, r1.w
dp4 r0.z, c1, c1
mov_pp r4.xz, r0.yyxw
dp3_pp_sat r0.w, -r4, -c14
rsq r0.z, r0.z
mul r0.xyz, r0.z, c1
dp3_sat r0.z, v5, r0
mad r0.xy, v4, r3.w, c6
add_pp r0.w, r0, -r0.z
mul_sat r1.w, c15.x, c15.x
add_pp r2.xyz, r2, -r1
mad_pp r3.z, r1.w, r0.w, r0
texld r0.x, r0, s6
mad r4.xy, v4, r3.w, c5
mov r0.w, r0.x
texld r0.x, r4, s6
mad r4.xy, v4, r3.w, c4
mov r0.z, r0.x
texld r0.x, r4, s6
mad r4.xy, v4, r3.w, c3
mov r0.y, r0.x
texld r0.x, r4, s6
mad r0, -v4.z, r3.w, r0
mov r4.x, c2
cmp r0, r0, c16.y, r4.x
dp4_pp r0.y, r0, c21.y
rcp r3.w, v3.w
mad r4.xy, v3, r3.w, c20.y
dp3 r0.x, v3, v3
texld r0.w, r4, s4
cmp r0.z, -v3, c16.x, c16.y
mul_pp r0.z, r0, r0.w
texld r0.x, r0.x, s5
mul_pp r0.x, r0.z, r0
mul_pp r0.y, r0.x, r0
mul_pp r0.x, r3.z, c7.w
mul_pp r0.x, r0, r0.y
dp3 r0.y, v6, c14
add r3.z, r0.y, c23.y
mul_pp_sat r0.w, r0.x, c23.x
mov r0.x, c12
frc r3.w, r3.z
add r0.xyz, c7, r0.x
add_sat r3.z, r3, -r3.w
mad_sat r0.xyz, r0, r0.w, c0
mul_pp r0.xyz, r0, r3.z
mul r3.xyz, r0, c13.x
mad_pp r1.xyz, r1.w, r2, r1
mad_pp r1.xyz, r1, c8, r3
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c16.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightShadowData]
Vector 3 [_ShadowOffsets0]
Vector 4 [_ShadowOffsets1]
Vector 5 [_ShadowOffsets2]
Vector 6 [_ShadowOffsets3]
Vector 7 [_LightColor0]
Vector 8 [_Color]
Float 9 [_DetailScale]
Float 10 [_DetailVertScale]
Float 11 [_DetailDist]
Float 12 [_MinLight]
Float 13 [_Albedo]
Vector 14 [_SunDir]
Float 15 [_PlanetOpacity]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_BumpMap] 2D
SetTexture 4 [_LightTexture0] 2D
SetTexture 5 [_LightTextureB0] 2D
SetTexture 6 [_ShadowMapTexture] 2D
"ps_3_0
; 163 ALU, 18 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
def c16, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c17, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c18, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c19, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c20, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c21, -0.50000000, 0.25000000, 0.50000000, 0.49999991
def c22, 6.28318501, -3.14159298, 0.99999982, 0.50000000
def c23, 4.00000000, 1.00999999, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3
dcl_texcoord4 v4
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
mul r1.xy, v6.zyzw, c9.x
mul r0.xy, v6.zyzw, c10.x
abs r0.w, v6.z
abs r3.xy, v6
max r1.w, r3.x, r0
rcp r2.x, r1.w
min r1.w, r3.x, r0
mul r2.w, r1, r2.x
mul r3.z, r2.w, r2.w
mad r1.w, r3.z, c18.y, c18.z
mad r3.w, r1, r3.z, c18
mad r3.w, r3, r3.z, c19.x
mad r3.w, r3, r3.z, c19.y
mad r3.z, r3.w, r3, c19
mov r2.xyz, v6
dp3_sat r2.x, v2, -r2
add r2.x, r2, c20.z
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad_sat r1.w, r2.x, c20, c20.y
mad r2.xyz, r1.w, r1, r0
mul r1.xy, v6, c10.x
mul r0.xy, v6, c9.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r1.w, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r3.x, r1, r0
mul r2.w, r3.z, r2
mul r1.xy, v6.zxzw, c10.x
texld r1.xyz, r1, s1
add r0.x, r3, -r0.w
add r0.y, -r2.w, c19.w
cmp r2.w, -r0.x, r2, r0.y
mul r0.xy, v6.zxzw, c9.x
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r1.w, r0, r1
abs r1.y, v6
add_pp r0.xyz, r0, -r2
mad_pp r0.xyz, r3.y, r0, r2
add r3.x, -r2.w, c17.w
cmp r1.x, v6.z, r2.w, r3
add r1.w, -r1.y, c16.y
mad r1.z, r1.y, c16, c16.w
mad r1.z, r1, r1.y, c17.x
add r2.y, -r0.w, c16
mad r2.x, r0.w, c16.z, c16.w
mad r2.x, r0.w, r2, c17
mad r0.w, r0, r2.x, c17.y
cmp r1.x, v6, r1, -r1
mul r1.x, r1, c20
rsq r1.w, r1.w
rsq r2.y, r2.y
rcp r2.y, r2.y
add_pp r0.xyz, r0, c21.x
mul r2.y, r0.w, r2
cmp r2.x, v6.z, c16, c16.y
add r3.z, r1.x, c20.y
mad r1.y, r1.z, r1, c17
rcp r1.w, r1.w
mul r1.z, r1.y, r1.w
cmp r1.y, v6, c16.x, c16
mul r1.w, r1.y, r1.z
mad r0.w, -r1, c17.z, r1.z
mul r2.z, r2.x, r2.y
mad r1.z, -r2, c17, r2.y
mad r0.w, r1.y, c17, r0
mad r1.y, r2.x, c17.w, r1.z
mul r1.y, r1, c18.x
mul r0.w, r0, c18.x
dsx r2.xy, v6
dsy r2.zw, v6.xyxy
mul r2.zw, r2, r2
add r1.z, r2, r2.w
rsq r1.z, r1.z
rcp r1.z, r1.z
mul r2.xy, r2, r2
mov r3.w, r0
dsx r3.y, r1
dsy r1.w, r1.y
add r1.y, r2.x, r2
rsq r1.y, r1.y
rcp r1.y, r1.y
mul r3.x, r1.y, c20
mul r1.z, r1, c20.x
texldd r2.yw, r3.zwzw, s3, r3, r1.zwzw
add r2.xy, r2.wyzw, c21.x
mov r1.y, r0.w
mul r2.xy, r2, c21.yzzw
mul r0.w, v0.x, c11.x
add r1.xy, r1, r2
texldd r3.xyz, r3.zwzw, s0, r3, r1.zwzw
mul_sat r0.w, r0, c17.z
mul_pp r0.xyz, r0, c21.y
mad_pp r0.xyz, r0.w, -r0, r0
add r2.xyz, v1, r0
mad r0.w, r1.y, c21, c21.z
frc r0.x, r0.w
mad r0.y, r1.x, c22.z, c22.w
mad r0.x, r0, c22, c22.y
sincos r4.xy, r0.x
frc r0.y, r0
mad r1.x, r0.y, c22, c22.y
sincos r0.xy, r1.x
mov_pp r4.y, r4.x
mov_pp r4.xz, r0.yyxw
dp4 r0.z, c1, c1
rsq r0.x, r0.z
mul r0.xyz, r0.x, c1
rcp r4.w, v4.w
dp3_sat r1.x, v5, r0
dp3_pp_sat r0.w, -r4, -c14
mad r0.xyz, v4, r4.w, c6
add_pp r0.w, r0, -r1.x
mul_sat r1.y, c15.x, c15.x
mad_pp r2.w, r1.y, r0, r1.x
texld r0.x, r0, s6
mov_pp r0.w, r0.x
mad r0.xyz, v4, r4.w, c5
texld r0.x, r0, s6
mad r4.xyz, v4, r4.w, c4
texld r1.x, r4, s6
mov_pp r0.z, r0.x
mad r4.xyz, v4, r4.w, c3
mov_pp r0.y, r1.x
mov r0.x, c2
add r1.x, c16.y, -r0
texld r0.x, r4, s6
mad r0, r0, r1.x, c2.x
dp4_pp r0.y, r0, c21.y
rcp r1.x, v3.w
mad r4.xy, v3, r1.x, c20.y
dp3 r0.x, v3, v3
texld r0.w, r4, s4
cmp r0.z, -v3, c16.x, c16.y
mul_pp r0.z, r0, r0.w
texld r0.x, r0.x, s5
mul_pp r0.x, r0.z, r0
mul_pp r0.y, r0.x, r0
mul_pp r0.x, r2.w, c7.w
mul_pp r0.x, r0, r0.y
dp3 r0.y, v6, c14
add r1.x, r0.y, c23.y
mul_pp_sat r0.w, r0.x, c23.x
mov r0.x, c12
frc r2.w, r1.x
add r0.xyz, c7, r0.x
add_sat r1.x, r1, -r2.w
mad_sat r0.xyz, r0, r0.w, c0
mul_pp r0.xyz, r0, r1.x
add_pp r3.xyz, r3, -r2
mul r4.xyz, r0, c13.x
mad_pp r1.xyz, r1.y, r3, r2
mad_pp r1.xyz, r1, c8, r4
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c16.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightPositionRange]
Vector 3 [_LightShadowData]
Vector 4 [_LightColor0]
Vector 5 [_Color]
Float 6 [_DetailScale]
Float 7 [_DetailVertScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_Albedo]
Vector 11 [_SunDir]
Float 12 [_PlanetOpacity]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_BumpMap] 2D
SetTexture 4 [_ShadowMapTexture] CUBE
SetTexture 5 [_LightTexture0] 2D
"ps_3_0
; 162 ALU, 17 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_cube s4
dcl_2d s5
def c13, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c14, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c15, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c16, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c17, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c18, -0.50000000, 0.25000000, 0.50000000, 0.49999991
def c19, 6.28318501, -3.14159298, 0.99999982, 0.50000000
def c20, 0.00781250, -0.00781250, 0.97000003, 4.00000000
def c21, 1.00000000, 0.00392157, 0.00001538, 0.00000001
def c22, 1.00999999, 0, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
mul r1.xy, v6.zyzw, c6.x
mul r0.xy, v6.zyzw, c7.x
abs r0.w, v6.z
abs r3.xy, v6
max r1.w, r3.x, r0
rcp r2.x, r1.w
min r1.w, r3.x, r0
mul r2.w, r1, r2.x
mul r3.z, r2.w, r2.w
mad r1.w, r3.z, c15.y, c15.z
mad r3.w, r1, r3.z, c15
mad r3.w, r3, r3.z, c16.x
mad r3.w, r3, r3.z, c16.y
mad r3.z, r3.w, r3, c16
mov r2.xyz, v6
dp3_sat r2.x, v2, -r2
add r2.x, r2, c17.z
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad_sat r1.w, r2.x, c17, c17.y
mad r2.xyz, r1.w, r1, r0
mul r1.xy, v6, c7.x
mul r0.xy, v6, c6.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r1.w, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r3.x, r1, r0
mul r2.w, r3.z, r2
mul r1.xy, v6.zxzw, c7.x
texld r1.xyz, r1, s1
add r0.x, r3, -r0.w
add r0.y, -r2.w, c16.w
cmp r2.w, -r0.x, r2, r0.y
mul r0.xy, v6.zxzw, c6.x
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r1.w, r0, r1
abs r1.y, v6
add_pp r0.xyz, r0, -r2
mad_pp r0.xyz, r3.y, r0, r2
add r3.x, -r2.w, c14.w
cmp r1.x, v6.z, r2.w, r3
add r1.w, -r1.y, c13.y
mad r1.z, r1.y, c13, c13.w
mad r1.z, r1, r1.y, c14.x
add r2.y, -r0.w, c13
mad r2.x, r0.w, c13.z, c13.w
mad r2.x, r0.w, r2, c14
mad r0.w, r0, r2.x, c14.y
cmp r1.x, v6, r1, -r1
mul r1.x, r1, c17
rsq r1.w, r1.w
rsq r2.y, r2.y
rcp r2.y, r2.y
add_pp r0.xyz, r0, c18.x
mul r2.y, r0.w, r2
cmp r2.x, v6.z, c13, c13.y
add r5.x, r1, c17.y
mad r1.y, r1.z, r1, c14
rcp r1.w, r1.w
mul r1.z, r1.y, r1.w
cmp r1.y, v6, c13.x, c13
mul r1.w, r1.y, r1.z
mad r0.w, -r1, c14.z, r1.z
mul r2.z, r2.x, r2.y
mad r0.w, r1.y, c14, r0
mad r1.z, -r2, c14, r2.y
mad r1.y, r2.x, c14.w, r1.z
mul r1.y, r1, c15.x
mul r0.w, r0, c15.x
dsx r1.zw, v6.xyxy
dsy r2.xy, v6
mul r1.zw, r1, r1
mov r5.y, r0.w
dsx r4.w, r1.y
dsy r4.y, r1
add r1.y, r1.z, r1.w
mul r2.xy, r2, r2
add r1.z, r2.x, r2.y
rsq r1.y, r1.y
rcp r1.y, r1.y
rsq r1.z, r1.z
rcp r1.z, r1.z
mul r4.z, r1.y, c17.x
mul r4.x, r1.z, c17
texldd r1.yw, r5, s3, r4.zwzw, r4
add r1.zw, r1.xywy, c18.x
mov r1.y, r0.w
mul r1.zw, r1, c18.xyyz
add r1.xy, r1, r1.zwzw
mul r0.w, v0.x, c8.x
mad r1.y, r1, c18.w, c18.z
mul_sat r0.w, r0, c14.z
mul_pp r0.xyz, r0, c18.y
mad_pp r0.xyz, r0.w, -r0, r0
frc r0.w, r1.y
add r2.xyz, v1, r0
mad r1.y, r0.w, c19.x, c19
sincos r0.xy, r1.y
mad r1.x, r1, c19.z, c19.w
frc r0.y, r1.x
mad r1.x, r0.y, c19, c19.y
mov_pp r1.y, r0.x
sincos r0.xy, r1.x
dp4 r0.z, c1, c1
mov_pp r1.xz, r0.yyxw
rsq r0.z, r0.z
dp3_pp_sat r0.w, -r1, -c11
mul r0.xyz, r0.z, c1
dp3_sat r1.x, v5, r0
add_pp r1.y, r0.w, -r1.x
mul_sat r2.w, c12.x, c12.x
mad_pp r5.z, r2.w, r1.y, r1.x
add r0.xyz, v4, c20.xyyw
texld r0, r0, s4
dp4 r3.w, r0, c21
add r0.xyz, v4, c20.yxyw
texld r0, r0, s4
dp4 r3.z, r0, c21
add r1.xyz, v4, c20.yyxw
texld r1, r1, s4
dp4 r3.y, r1, c21
add r0.xyz, v4, c20.x
texld r0, r0, s4
dp3 r1.x, v4, v4
dp4 r3.x, r0, c21
rsq r1.x, r1.x
rcp r0.x, r1.x
mul r0.x, r0, c2.w
mad r0, -r0.x, c20.z, r3
mov r1.x, c3
cmp r1, r0, c13.y, r1.x
dp3 r0.x, v3, v3
dp4_pp r0.y, r1, c18.y
texld r0.x, r0.x, s5
mul r0.y, r0.x, r0
mul_pp r0.x, r5.z, c4.w
mul_pp r0.x, r0, r0.y
dp3 r0.y, v6, c11
add r1.x, r0.y, c22
frc r1.y, r1.x
mul_pp_sat r0.w, r0.x, c20
mov r0.x, c9
add r0.xyz, c4, r0.x
add_sat r1.x, r1, -r1.y
mad_sat r0.xyz, r0, r0.w, c0
mul_pp r0.xyz, r0, r1.x
texldd r1.xyz, r5, s0, r4.zwzw, r4
add_pp r1.xyz, r1, -r2
mul r3.xyz, r0, c10.x
mad_pp r1.xyz, r2.w, r1, r2
mad_pp r1.xyz, r1, c5, r3
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c13.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightPositionRange]
Vector 3 [_LightShadowData]
Vector 4 [_LightColor0]
Vector 5 [_Color]
Float 6 [_DetailScale]
Float 7 [_DetailVertScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_Albedo]
Vector 11 [_SunDir]
Float 12 [_PlanetOpacity]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_BumpMap] 2D
SetTexture 4 [_ShadowMapTexture] CUBE
SetTexture 5 [_LightTextureB0] 2D
SetTexture 6 [_LightTexture0] CUBE
"ps_3_0
; 163 ALU, 18 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_cube s4
dcl_2d s5
dcl_cube s6
def c13, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c14, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c15, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c16, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c17, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c18, -0.50000000, 0.25000000, 0.50000000, 0.49999991
def c19, 6.28318501, -3.14159298, 0.99999982, 0.50000000
def c20, 0.00781250, -0.00781250, 0.97000003, 4.00000000
def c21, 1.00000000, 0.00392157, 0.00001538, 0.00000001
def c22, 1.00999999, 0, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
mul r1.xy, v6.zyzw, c6.x
mul r0.xy, v6.zyzw, c7.x
abs r0.w, v6.z
abs r3.xy, v6
max r1.w, r3.x, r0
rcp r2.x, r1.w
min r1.w, r3.x, r0
mul r2.w, r1, r2.x
mul r3.z, r2.w, r2.w
mad r1.w, r3.z, c15.y, c15.z
mad r3.w, r1, r3.z, c15
mad r3.w, r3, r3.z, c16.x
mad r3.w, r3, r3.z, c16.y
mad r3.z, r3.w, r3, c16
mov r2.xyz, v6
dp3_sat r2.x, v2, -r2
add r2.x, r2, c17.z
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad_sat r1.w, r2.x, c17, c17.y
mad r2.xyz, r1.w, r1, r0
mul r1.xy, v6, c7.x
mul r0.xy, v6, c6.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r1.w, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r3.x, r1, r0
mul r2.w, r3.z, r2
mul r1.xy, v6.zxzw, c7.x
texld r1.xyz, r1, s1
add r0.x, r3, -r0.w
add r0.y, -r2.w, c16.w
cmp r2.w, -r0.x, r2, r0.y
mul r0.xy, v6.zxzw, c6.x
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r1.w, r0, r1
abs r1.y, v6
add_pp r0.xyz, r0, -r2
mad_pp r0.xyz, r3.y, r0, r2
add r3.x, -r2.w, c14.w
cmp r1.x, v6.z, r2.w, r3
add r1.w, -r1.y, c13.y
mad r1.z, r1.y, c13, c13.w
mad r1.z, r1, r1.y, c14.x
add r2.y, -r0.w, c13
mad r2.x, r0.w, c13.z, c13.w
mad r2.x, r0.w, r2, c14
mad r0.w, r0, r2.x, c14.y
cmp r1.x, v6, r1, -r1
mul r1.x, r1, c17
rsq r1.w, r1.w
rsq r2.y, r2.y
rcp r2.y, r2.y
add_pp r0.xyz, r0, c18.x
mul r2.y, r0.w, r2
cmp r2.x, v6.z, c13, c13.y
add r5.x, r1, c17.y
mad r1.y, r1.z, r1, c14
rcp r1.w, r1.w
mul r1.z, r1.y, r1.w
cmp r1.y, v6, c13.x, c13
mul r1.w, r1.y, r1.z
mad r0.w, -r1, c14.z, r1.z
mul r2.z, r2.x, r2.y
mad r0.w, r1.y, c14, r0
mad r1.z, -r2, c14, r2.y
mad r1.y, r2.x, c14.w, r1.z
mul r1.y, r1, c15.x
mul r0.w, r0, c15.x
dsx r1.zw, v6.xyxy
dsy r2.xy, v6
mul r1.zw, r1, r1
dsy r4.y, r1
dsx r4.w, r1.y
add r1.y, r1.z, r1.w
mul r2.xy, r2, r2
add r1.z, r2.x, r2.y
rsq r1.y, r1.y
rcp r1.y, r1.y
rsq r1.z, r1.z
rcp r1.z, r1.z
mul r4.z, r1.y, c17.x
mul r4.x, r1.z, c17
mov r5.y, r0.w
texldd r1.yw, r5, s3, r4.zwzw, r4
add r1.zw, r1.xywy, c18.x
mov r1.y, r0.w
mul r1.zw, r1, c18.xyyz
mul r0.w, v0.x, c8.x
add r1.xy, r1, r1.zwzw
mul_sat r0.w, r0, c14.z
mul_pp r0.xyz, r0, c18.y
mad_pp r0.xyz, r0.w, -r0, r0
add r2.xyz, v1, r0
mad r0.w, r1.y, c18, c18.z
frc r0.x, r0.w
mad r0.y, r1.x, c19.z, c19.w
mad r0.x, r0, c19, c19.y
sincos r1.xy, r0.x
frc r0.y, r0
mad r1.y, r0, c19.x, c19
sincos r0.xy, r1.y
mov_pp r1.y, r1.x
mov_pp r1.xz, r0.yyxw
dp4 r0.z, c1, c1
dp3_pp_sat r1.w, -r1, -c11
rsq r0.x, r0.z
mul r1.xyz, r0.x, c1
dp3_sat r2.w, v5, r1
add r0.xyz, v4, c20.xyyw
texld r0, r0, s4
dp4 r3.w, r0, c21
add r0.xyz, v4, c20.yxyw
texld r0, r0, s4
dp4 r3.z, r0, c21
add r0.xyz, v4, c20.x
texld r0, r0, s4
dp4 r3.x, r0, c21
add_pp r5.z, r1.w, -r2.w
add r1.xyz, v4, c20.yyxw
texld r1, r1, s4
dp4 r3.y, r1, c21
dp3 r1.x, v4, v4
rsq r1.x, r1.x
rcp r0.x, r1.x
mul r0.x, r0, c2.w
mad r0, -r0.x, c20.z, r3
mov r1.x, c3
cmp r0, r0, c13.y, r1.x
dp4_pp r0.y, r0, c18.y
mul_sat r1.x, c12, c12
texldd r3.xyz, r5, s0, r4.zwzw, r4
dp3 r0.x, v3, v3
mad_pp r1.y, r1.x, r5.z, r2.w
texld r0.w, v3, s6
texld r0.x, r0.x, s5
mul r0.x, r0, r0.w
mul r0.y, r0.x, r0
mul_pp r0.x, r1.y, c4.w
mul_pp r0.x, r0, r0.y
dp3 r0.y, v6, c11
add r1.y, r0, c22.x
frc r1.z, r1.y
mul_pp_sat r0.w, r0.x, c20
mov r0.x, c9
add r0.xyz, c4, r0.x
add_sat r1.y, r1, -r1.z
mad_sat r0.xyz, r0, r0.w, c0
mul_pp r0.xyz, r0, r1.y
add_pp r3.xyz, r3, -r2
mul r4.xyz, r0, c10.x
mad_pp r1.xyz, r1.x, r3, r2
mad_pp r1.xyz, r1, c5, r4
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c13.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
Float 8 [_Albedo]
Vector 9 [_SunDir]
Float 10 [_PlanetOpacity]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_BumpMap] 2D
SetTexture 4 [_LightTexture0] 2D
"ps_3_0
; 145 ALU, 13 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
def c11, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c12, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c13, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c14, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c15, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c16, -0.50000000, 0.25000000, 0.50000000, 0.49999991
def c17, 6.28318501, -3.14159298, 0.99999982, 0.50000000
def c18, 4.00000000, 1.00999999, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord5 v4.xyz
dcl_texcoord6 v5.xyz
mov r3.xyz, v5
dp3_sat r3.x, v2, -r3
mul r2.xy, v5.zyzw, c4.x
dsy r4.xy, v5
abs r0.w, v5.z
abs r1.zw, v5.xyxy
max r0.x, r1.z, r0.w
rcp r0.y, r0.x
min r0.x, r1.z, r0.w
mul r1.x, r0, r0.y
mul r1.y, r1.x, r1.x
mad r2.w, r1.y, c13.y, c13.z
mad r2.w, r2, r1.y, c13
mad r3.w, r2, r1.y, c14.x
mad r3.w, r3, r1.y, c14.y
add r3.x, r3, c15.z
mad r1.y, r3.w, r1, c14.z
mul r1.y, r1, r1.x
mul r0.xy, v5.zyzw, c5.x
mul r4.xy, r4, r4
texld r0.xyz, r0, s1
texld r2.xyz, r2, s2
add r2.xyz, r2, -r0
mad_sat r2.w, r3.x, c15, c15.y
mad r3.xyz, r2.w, r2, r0
mul r2.xy, v5, c5.x
mul r0.xy, v5, c4.x
add r1.x, r1.z, -r0.w
texld r2.xyz, r2, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r2
mad r0.xyz, r2.w, r0, r2
add_pp r2.xyz, r3, -r0
mad_pp r0.xyz, r1.z, r2, r0
add r3.x, -r1.y, c14.w
cmp r3.x, -r1, r1.y, r3
add r3.y, -r3.x, c12.w
cmp r3.x, v5.z, r3, r3.y
add r3.y, -r0.w, c11
mul r2.xy, v5.zxzw, c5.x
mul r1.xy, v5.zxzw, c4.x
rsq r3.y, r3.y
texld r2.xyz, r2, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r2
mad r1.xyz, r2.w, r1, r2
add_pp r1.xyz, r1, -r0
mad_pp r0.xyz, r1.w, r1, r0
cmp r2.x, v5, r3, -r3
mul r3.x, r2, c15
abs r2.x, v5.y
add r2.z, -r2.x, c11.y
mad r2.y, r2.x, c11.z, c11.w
mad r2.y, r2, r2.x, c12.x
mad r2.w, r0, c11.z, c11
mad r2.w, r0, r2, c12.x
mad r0.w, r0, r2, c12.y
rsq r2.z, r2.z
rcp r3.y, r3.y
add_pp r0.xyz, r0, c16.x
mul r3.y, r0.w, r3
cmp r2.w, v5.z, c11.x, c11.y
mul r3.z, r2.w, r3.y
add r5.x, r3, c15.y
mad r2.x, r2.y, r2, c12.y
rcp r2.z, r2.z
mul r2.z, r2.x, r2
cmp r2.x, v5.y, c11, c11.y
mul r2.y, r2.x, r2.z
mad r0.w, -r2.y, c12.z, r2.z
mad r2.y, -r3.z, c12.z, r3
mad r0.w, r2.x, c12, r0
mad r2.x, r2.w, c12.w, r2.y
mul r2.x, r2, c13
mul r0.w, r0, c13.x
add r2.z, r4.x, r4.y
rsq r2.z, r2.z
dsx r3.zw, v5.xyxy
mul r3.zw, r3, r3
mov r5.y, r0.w
dsx r2.w, r2.x
dsy r2.y, r2.x
add r2.x, r3.z, r3.w
rsq r2.x, r2.x
rcp r3.y, r2.z
rcp r2.x, r2.x
mul r2.z, r2.x, c15.x
mul r2.x, r3.y, c15
texldd r3.yw, r5, s3, r2.zwzw, r2
add r1.xy, r3.wyzw, c16.x
mov r3.y, r0.w
mul r1.xy, r1, c16.yzzw
add r3.xy, r3, r1
mad r1.x, r3.y, c16.w, c16.z
frc r1.x, r1
mul r0.w, v0.x, c6.x
mad r1.w, r1.x, c17.x, c17.y
mul_sat r0.w, r0, c12.z
mul_pp r0.xyz, r0, c16.y
mad_pp r0.xyz, r0.w, -r0, r0
add r1.xyz, v1, r0
sincos r0.xy, r1.w
mad r0.y, r3.x, c17.z, c17.w
frc r0.y, r0
texldd r2.xyz, r5, s0, r2.zwzw, r2
mad r1.w, r0.y, c17.x, c17.y
mov_pp r4.y, r0.x
sincos r0.xy, r1.w
dp4 r3.x, c1, c1
rsq r0.z, r3.x
mov_pp r4.xz, r0.yyxw
mul r3.xyz, r0.z, c1
dp3_sat r0.y, v4, r3
dp3_pp_sat r0.x, -r4, -c9
add_pp r0.z, r0.x, -r0.y
mul_sat r0.w, c10.x, c10.x
mad_pp r0.y, r0.w, r0.z, r0
dp3 r0.x, v3, v3
add_pp r2.xyz, r2, -r1
mul_pp r0.y, r0, c2.w
texld r0.x, r0.x, s4
mul_pp r0.x, r0.y, r0
dp3 r0.y, v5, c9
add r3.x, r0.y, c18.y
frc r3.y, r3.x
mul_pp_sat r1.w, r0.x, c18.x
mov r0.x, c7
add r0.xyz, c2, r0.x
add_sat r3.x, r3, -r3.y
mad_sat r0.xyz, r0, r1.w, c0
mul_pp r0.xyz, r0, r3.x
mul r3.xyz, r0, c8.x
mad_pp r1.xyz, r0.w, r2, r1
mad_pp r1.xyz, r1, c3, r3
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c11.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
Float 8 [_Albedo]
Vector 9 [_SunDir]
Float 10 [_PlanetOpacity]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_BumpMap] 2D
"ps_3_0
; 143 ALU, 12 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
def c11, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c12, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c13, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c14, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c15, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c16, -0.50000000, 0.25000000, 0.50000000, 0.49999991
def c17, 6.28318501, -3.14159298, 0.99999982, 0.50000000
def c18, 4.00000000, 1.00999999, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord5 v3.xyz
dcl_texcoord6 v4.xyz
abs r0.w, v4.z
abs r1.zw, v4.xyxy
max r0.x, r1.z, r0.w
rcp r0.y, r0.x
min r0.x, r1.z, r0.w
mul r3.w, r0.x, r0.y
mul r2.w, r3, r3
mul r1.xy, v4.zyzw, c4.x
add r4.y, -r0.w, c11
mad r4.x, r0.w, c11.z, c11.w
mul r0.xy, v4.zyzw, c5.x
rsq r4.y, r4.y
dsy r5.zw, v4.xyxy
texld r0.xyz, r0, s1
texld r2.xyz, r1, s2
mad r3.x, r2.w, c13.y, c13.z
mad r1.x, r3, r2.w, c13.w
mad r1.x, r1, r2.w, c14
mad r1.x, r1, r2.w, c14.y
mad r1.x, r1, r2.w, c14.z
mov r3.xyz, v4
dp3_sat r1.y, v2, -r3
add r1.y, r1, c15.z
add r2.xyz, r2, -r0
mad_sat r2.w, r1.y, c15, c15.y
mad r3.xyz, r2.w, r2, r0
mul r3.w, r1.x, r3
mul r1.xy, v4, c5.x
texld r2.xyz, r1, s1
mul r0.xy, v4, c4.x
texld r0.xyz, r0, s2
add r0.xyz, r0, -r2
mad r0.xyz, r2.w, r0, r2
add_pp r2.xyz, r3, -r0
mad_pp r2.xyz, r1.z, r2, r0
abs r3.y, v4
mad r3.z, r3.y, c11, c11.w
mul r0.xy, v4.zxzw, c5.x
mad r3.z, r3, r3.y, c12.x
add r1.y, -r3.w, c14.w
add r1.x, r1.z, -r0.w
cmp r1.x, -r1, r3.w, r1.y
add r3.w, -r3.y, c11.y
add r1.y, -r1.x, c12.w
mad r4.x, r0.w, r4, c12
mad r0.w, r0, r4.x, c12.y
cmp r1.x, v4.z, r1, r1.y
cmp r3.x, v4, r1, -r1
mul r3.x, r3, c15
mul r1.xy, v4.zxzw, c4.x
rsq r3.w, r3.w
rcp r4.y, r4.y
mul r4.y, r0.w, r4
cmp r4.x, v4.z, c11, c11.y
mul r4.z, r4.x, r4.y
add r5.x, r3, c15.y
mad r3.y, r3.z, r3, c12
rcp r3.w, r3.w
mul r3.w, r3.y, r3
cmp r3.y, v4, c11.x, c11
mul r3.z, r3.y, r3.w
mad r0.w, -r3.z, c12.z, r3
mad r0.w, r3.y, c12, r0
mad r3.z, -r4, c12, r4.y
mad r3.y, r4.x, c12.w, r3.z
mul r3.y, r3, c13.x
mul r0.w, r0, c13.x
dsx r3.zw, v4.xyxy
mul r3.zw, r3, r3
mov r5.y, r0.w
dsx r4.w, r3.y
dsy r4.y, r3
add r3.y, r3.z, r3.w
mul r5.zw, r5, r5
add r3.z, r5, r5.w
rsq r3.y, r3.y
rcp r3.y, r3.y
rsq r3.z, r3.z
rcp r3.z, r3.z
mul r4.z, r3.y, c15.x
mul r4.x, r3.z, c15
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad r0.xyz, r2.w, r1, r0
add_pp r0.xyz, r0, -r2
mad_pp r0.xyz, r1.w, r0, r2
texldd r3.yw, r5, s3, r4.zwzw, r4
add r1.xy, r3.wyzw, c16.x
add_pp r0.xyz, r0, c16.x
mul r1.xy, r1, c16.yzzw
mov r3.y, r0.w
add r2.xy, r3, r1
mad r0.w, r2.y, c16, c16.z
frc r1.x, r0.w
mul r0.w, v0.x, c6.x
mad r1.w, r1.x, c17.x, c17.y
mul_pp r0.xyz, r0, c16.y
mul_sat r0.w, r0, c12.z
mad_pp r1.xyz, r0.w, -r0, r0
sincos r0.xy, r1.w
mad r0.y, r2.x, c17.z, c17.w
frc r0.y, r0
mov_pp r3.y, r0.x
mad r1.w, r0.y, c17.x, c17.y
sincos r0.xy, r1.w
dp4_pp r2.x, c1, c1
rsq_pp r0.z, r2.x
mov_pp r3.xz, r0.yyxw
mul_pp r2.xyz, r0.z, c1
dp3_sat r0.y, v3, r2
dp3_pp_sat r0.x, -r3, -c9
add_pp r0.x, r0, -r0.y
mul_sat r0.w, c10.x, c10.x
mad_pp r1.w, r0, r0.x, r0.y
add r0.xyz, v1, r1
mul_pp r1.x, r1.w, c2.w
dp3 r1.y, v4, c9
add r2.x, r1.y, c18.y
frc r2.y, r2.x
mul_pp_sat r1.w, r1.x, c18.x
mov r1.x, c7
add r1.xyz, c2, r1.x
add_sat r2.x, r2, -r2.y
mad_sat r1.xyz, r1, r1.w, c0
mul_pp r1.xyz, r1, r2.x
texldd r2.xyz, r5, s0, r4.zwzw, r4
add_pp r2.xyz, r2, -r0
mul r3.xyz, r1, c8.x
mad_pp r0.xyz, r0.w, r2, r0
mad_pp r0.xyz, r0, c3, r3
mul_pp oC0.xyz, r0, r1
mov_pp oC0.w, c11.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
Float 8 [_Albedo]
Vector 9 [_SunDir]
Float 10 [_PlanetOpacity]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_BumpMap] 2D
SetTexture 4 [_LightTexture0] 2D
SetTexture 5 [_LightTextureB0] 2D
"ps_3_0
; 150 ALU, 14 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
def c11, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c12, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c13, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c14, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c15, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c16, -0.50000000, 0.25000000, 0.50000000, 0.49999991
def c17, 6.28318501, -3.14159298, 0.99999982, 0.50000000
def c18, 4.00000000, 1.00999999, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3
dcl_texcoord5 v4.xyz
dcl_texcoord6 v5.xyz
mov r3.xyz, v5
dp3_sat r3.x, v2, -r3
mul r2.xy, v5.zyzw, c4.x
dsy r4.xy, v5
abs r0.w, v5.z
abs r1.zw, v5.xyxy
max r0.x, r1.z, r0.w
rcp r0.y, r0.x
min r0.x, r1.z, r0.w
mul r1.x, r0, r0.y
mul r1.y, r1.x, r1.x
mad r2.w, r1.y, c13.y, c13.z
mad r2.w, r2, r1.y, c13
mad r3.w, r2, r1.y, c14.x
mad r3.w, r3, r1.y, c14.y
add r3.x, r3, c15.z
mad r1.y, r3.w, r1, c14.z
mul r1.y, r1, r1.x
mul r0.xy, v5.zyzw, c5.x
mul r4.xy, r4, r4
texld r0.xyz, r0, s1
texld r2.xyz, r2, s2
add r2.xyz, r2, -r0
mad_sat r2.w, r3.x, c15, c15.y
mad r3.xyz, r2.w, r2, r0
mul r2.xy, v5, c5.x
mul r0.xy, v5, c4.x
add r1.x, r1.z, -r0.w
texld r2.xyz, r2, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r2
mad r0.xyz, r2.w, r0, r2
add_pp r2.xyz, r3, -r0
mad_pp r0.xyz, r1.z, r2, r0
add r3.x, -r1.y, c14.w
cmp r3.x, -r1, r1.y, r3
add r3.y, -r3.x, c12.w
cmp r3.x, v5.z, r3, r3.y
add r3.y, -r0.w, c11
mul r2.xy, v5.zxzw, c5.x
mul r1.xy, v5.zxzw, c4.x
rsq r3.y, r3.y
texld r2.xyz, r2, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r2
mad r1.xyz, r2.w, r1, r2
add_pp r1.xyz, r1, -r0
mad_pp r0.xyz, r1.w, r1, r0
cmp r2.x, v5, r3, -r3
mul r3.x, r2, c15
abs r2.x, v5.y
add r2.z, -r2.x, c11.y
mad r2.y, r2.x, c11.z, c11.w
mad r2.y, r2, r2.x, c12.x
mad r2.w, r0, c11.z, c11
mad r2.w, r0, r2, c12.x
mad r0.w, r0, r2, c12.y
rsq r2.z, r2.z
rcp r3.y, r3.y
add_pp r0.xyz, r0, c16.x
mul r3.y, r0.w, r3
cmp r2.w, v5.z, c11.x, c11.y
mul r3.z, r2.w, r3.y
add r5.x, r3, c15.y
mad r2.x, r2.y, r2, c12.y
rcp r2.z, r2.z
mul r2.z, r2.x, r2
cmp r2.x, v5.y, c11, c11.y
mul r2.y, r2.x, r2.z
mad r0.w, -r2.y, c12.z, r2.z
mad r2.y, -r3.z, c12.z, r3
mad r0.w, r2.x, c12, r0
mad r2.x, r2.w, c12.w, r2.y
mul r2.x, r2, c13
mul r0.w, r0, c13.x
add r2.z, r4.x, r4.y
rsq r2.z, r2.z
dsx r3.zw, v5.xyxy
mul r3.zw, r3, r3
mov r5.y, r0.w
dsx r2.w, r2.x
dsy r2.y, r2.x
add r2.x, r3.z, r3.w
rsq r2.x, r2.x
rcp r3.y, r2.z
rcp r2.x, r2.x
mul r2.z, r2.x, c15.x
mul r2.x, r3.y, c15
texldd r3.yw, r5, s3, r2.zwzw, r2
add r1.xy, r3.wyzw, c16.x
mov r3.y, r0.w
mul r1.xy, r1, c16.yzzw
add r3.xy, r3, r1
mad r1.x, r3.y, c16.w, c16.z
frc r1.x, r1
mul r0.w, v0.x, c6.x
mad r1.w, r1.x, c17.x, c17.y
mul_sat r0.w, r0, c12.z
mul_pp r0.xyz, r0, c16.y
mad_pp r0.xyz, r0.w, -r0, r0
add r1.xyz, v1, r0
sincos r0.xy, r1.w
mad r0.y, r3.x, c17.z, c17.w
frc r0.y, r0
texldd r2.xyz, r5, s0, r2.zwzw, r2
mad r1.w, r0.y, c17.x, c17.y
mov_pp r4.y, r0.x
sincos r0.xy, r1.w
dp4 r3.x, c1, c1
rsq r0.z, r3.x
mul r3.xyz, r0.z, c1
mov_pp r4.xz, r0.yyxw
dp3_sat r0.y, v4, r3
rcp r0.z, v3.w
mad r3.xy, v3, r0.z, c15.y
dp3_pp_sat r0.x, -r4, -c9
add_pp r0.x, r0, -r0.y
mul_sat r1.w, c10.x, c10.x
mad_pp r0.y, r1.w, r0.x, r0
dp3 r0.x, v3, v3
add_pp r2.xyz, r2, -r1
texld r0.w, r3, s4
cmp r0.z, -v3, c11.x, c11.y
mul_pp r0.z, r0, r0.w
texld r0.x, r0.x, s5
mul_pp r0.z, r0, r0.x
mul_pp r0.x, r0.y, c2.w
mul_pp r0.x, r0, r0.z
dp3 r0.y, v5, c9
add r3.x, r0.y, c18.y
frc r3.y, r3.x
mul_pp_sat r0.w, r0.x, c18.x
mov r0.x, c7
add r0.xyz, c2, r0.x
add_sat r3.x, r3, -r3.y
mad_sat r0.xyz, r0, r0.w, c0
mul_pp r0.xyz, r0, r3.x
mul r3.xyz, r0, c8.x
mad_pp r1.xyz, r1.w, r2, r1
mad_pp r1.xyz, r1, c3, r3
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c11.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
Float 8 [_Albedo]
Vector 9 [_SunDir]
Float 10 [_PlanetOpacity]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_BumpMap] 2D
SetTexture 4 [_LightTextureB0] 2D
SetTexture 5 [_LightTexture0] CUBE
"ps_3_0
; 146 ALU, 14 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_cube s5
def c11, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c12, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c13, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c14, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c15, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c16, -0.50000000, 0.25000000, 0.50000000, 0.49999991
def c17, 6.28318501, -3.14159298, 0.99999982, 0.50000000
def c18, 4.00000000, 1.00999999, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord5 v4.xyz
dcl_texcoord6 v5.xyz
mov r3.xyz, v5
dp3_sat r3.x, v2, -r3
mul r2.xy, v5.zyzw, c4.x
dsy r4.xy, v5
abs r0.w, v5.z
abs r1.zw, v5.xyxy
max r0.x, r1.z, r0.w
rcp r0.y, r0.x
min r0.x, r1.z, r0.w
mul r1.x, r0, r0.y
mul r1.y, r1.x, r1.x
mad r2.w, r1.y, c13.y, c13.z
mad r2.w, r2, r1.y, c13
mad r3.w, r2, r1.y, c14.x
mad r3.w, r3, r1.y, c14.y
add r3.x, r3, c15.z
mad r1.y, r3.w, r1, c14.z
mul r1.y, r1, r1.x
mul r0.xy, v5.zyzw, c5.x
mul r4.xy, r4, r4
texld r0.xyz, r0, s1
texld r2.xyz, r2, s2
add r2.xyz, r2, -r0
mad_sat r2.w, r3.x, c15, c15.y
mad r3.xyz, r2.w, r2, r0
mul r2.xy, v5, c5.x
mul r0.xy, v5, c4.x
add r1.x, r1.z, -r0.w
texld r2.xyz, r2, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r2
mad r0.xyz, r2.w, r0, r2
add_pp r2.xyz, r3, -r0
mad_pp r0.xyz, r1.z, r2, r0
add r3.x, -r1.y, c14.w
cmp r3.x, -r1, r1.y, r3
add r3.y, -r3.x, c12.w
cmp r3.x, v5.z, r3, r3.y
add r3.y, -r0.w, c11
mul r2.xy, v5.zxzw, c5.x
mul r1.xy, v5.zxzw, c4.x
rsq r3.y, r3.y
texld r2.xyz, r2, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r2
mad r1.xyz, r2.w, r1, r2
add_pp r1.xyz, r1, -r0
mad_pp r0.xyz, r1.w, r1, r0
cmp r2.x, v5, r3, -r3
mul r3.x, r2, c15
abs r2.x, v5.y
add r2.z, -r2.x, c11.y
mad r2.y, r2.x, c11.z, c11.w
mad r2.y, r2, r2.x, c12.x
mad r2.w, r0, c11.z, c11
mad r2.w, r0, r2, c12.x
mad r0.w, r0, r2, c12.y
rsq r2.z, r2.z
rcp r3.y, r3.y
add_pp r0.xyz, r0, c16.x
mul r3.y, r0.w, r3
cmp r2.w, v5.z, c11.x, c11.y
mul r3.z, r2.w, r3.y
add r5.x, r3, c15.y
mad r2.x, r2.y, r2, c12.y
rcp r2.z, r2.z
mul r2.z, r2.x, r2
cmp r2.x, v5.y, c11, c11.y
mul r2.y, r2.x, r2.z
mad r0.w, -r2.y, c12.z, r2.z
mad r2.y, -r3.z, c12.z, r3
mad r0.w, r2.x, c12, r0
mad r2.x, r2.w, c12.w, r2.y
mul r2.x, r2, c13
mul r0.w, r0, c13.x
add r2.z, r4.x, r4.y
rsq r2.z, r2.z
dsx r3.zw, v5.xyxy
mul r3.zw, r3, r3
mov r5.y, r0.w
dsx r2.w, r2.x
dsy r2.y, r2.x
add r2.x, r3.z, r3.w
rsq r2.x, r2.x
rcp r3.y, r2.z
rcp r2.x, r2.x
mul r2.z, r2.x, c15.x
mul r2.x, r3.y, c15
texldd r3.yw, r5, s3, r2.zwzw, r2
add r1.xy, r3.wyzw, c16.x
mov r3.y, r0.w
mul r1.xy, r1, c16.yzzw
add r3.xy, r3, r1
mad r1.x, r3.y, c16.w, c16.z
frc r1.x, r1
mul r0.w, v0.x, c6.x
mad r1.w, r1.x, c17.x, c17.y
mul_sat r0.w, r0, c12.z
mul_pp r0.xyz, r0, c16.y
mad_pp r0.xyz, r0.w, -r0, r0
add r1.xyz, v1, r0
sincos r0.xy, r1.w
mad r0.y, r3.x, c17.z, c17.w
frc r0.y, r0
texldd r2.xyz, r5, s0, r2.zwzw, r2
mad r1.w, r0.y, c17.x, c17.y
mov_pp r4.y, r0.x
sincos r0.xy, r1.w
dp4 r3.x, c1, c1
rsq r0.z, r3.x
mov_pp r4.xz, r0.yyxw
mul r3.xyz, r0.z, c1
dp3_sat r0.y, v4, r3
dp3_pp_sat r0.x, -r4, -c9
add_pp r0.x, r0, -r0.y
mul_sat r1.w, c10.x, c10.x
mad_pp r0.y, r1.w, r0.x, r0
dp3 r0.x, v3, v3
add_pp r2.xyz, r2, -r1
texld r0.w, v3, s5
texld r0.x, r0.x, s4
mul r0.z, r0.x, r0.w
mul_pp r0.x, r0.y, c2.w
mul_pp r0.x, r0, r0.z
dp3 r0.y, v5, c9
add r3.x, r0.y, c18.y
frc r3.y, r3.x
mul_pp_sat r0.w, r0.x, c18.x
mov r0.x, c7
add r0.xyz, c2, r0.x
add_sat r3.x, r3, -r3.y
mad_sat r0.xyz, r0, r0.w, c0
mul_pp r0.xyz, r0, r3.x
mul r3.xyz, r0, c8.x
mad_pp r1.xyz, r1.w, r2, r1
mad_pp r1.xyz, r1, c3, r3
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c11.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
Float 8 [_Albedo]
Vector 9 [_SunDir]
Float 10 [_PlanetOpacity]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_BumpMap] 2D
SetTexture 4 [_LightTexture0] 2D
"ps_3_0
; 144 ALU, 13 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
def c11, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c12, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c13, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c14, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c15, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c16, -0.50000000, 0.25000000, 0.50000000, 0.49999991
def c17, 6.28318501, -3.14159298, 0.99999982, 0.50000000
def c18, 4.00000000, 1.00999999, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xy
dcl_texcoord5 v4.xyz
dcl_texcoord6 v5.xyz
mov r3.xyz, v5
dp3_sat r3.x, v2, -r3
mul r2.xy, v5.zyzw, c4.x
abs r0.w, v5.z
abs r1.zw, v5.xyxy
max r0.x, r1.z, r0.w
rcp r0.y, r0.x
min r0.x, r1.z, r0.w
mul r1.x, r0, r0.y
mul r1.y, r1.x, r1.x
mad r2.w, r1.y, c13.y, c13.z
mad r2.w, r2, r1.y, c13
mad r3.w, r2, r1.y, c14.x
add r3.x, r3, c15.z
mul r0.xy, v5.zyzw, c5.x
mad r3.w, r3, r1.y, c14.y
mad r1.y, r3.w, r1, c14.z
mul r1.y, r1, r1.x
texld r0.xyz, r0, s1
texld r2.xyz, r2, s2
add r2.xyz, r2, -r0
mad_sat r2.w, r3.x, c15, c15.y
mad r3.xyz, r2.w, r2, r0
mul r2.xy, v5, c5.x
mul r0.xy, v5, c4.x
add r1.x, r1.z, -r0.w
texld r2.xyz, r2, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r2
mad r0.xyz, r2.w, r0, r2
add_pp r2.xyz, r3, -r0
mad_pp r0.xyz, r1.z, r2, r0
add r3.x, -r1.y, c14.w
cmp r3.x, -r1, r1.y, r3
add r3.y, -r3.x, c12.w
cmp r3.x, v5.z, r3, r3.y
add r3.y, -r0.w, c11
mul r2.xy, v5.zxzw, c5.x
mul r1.xy, v5.zxzw, c4.x
rsq r3.y, r3.y
texld r2.xyz, r2, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r2
mad r1.xyz, r2.w, r1, r2
abs r2.y, v5
cmp r2.x, v5, r3, -r3
add_pp r1.xyz, r1, -r0
mad_pp r0.xyz, r1.w, r1, r0
mul r2.x, r2, c15
add r2.w, -r2.y, c11.y
mad r2.z, r2.y, c11, c11.w
mad r2.z, r2, r2.y, c12.x
mad r3.x, r0.w, c11.z, c11.w
mad r3.x, r0.w, r3, c12
mad r0.w, r0, r3.x, c12.y
rsq r2.w, r2.w
rcp r3.y, r3.y
add_pp r0.xyz, r0, c16.x
mul r3.y, r0.w, r3
cmp r3.x, v5.z, c11, c11.y
add r5.x, r2, c15.y
mad r2.y, r2.z, r2, c12
rcp r2.w, r2.w
mul r2.w, r2.y, r2
cmp r2.y, v5, c11.x, c11
mul r2.z, r2.y, r2.w
mad r0.w, -r2.z, c12.z, r2
mul r3.z, r3.x, r3.y
mad r0.w, r2.y, c12, r0
mad r2.z, -r3, c12, r3.y
mad r2.y, r3.x, c12.w, r2.z
mul r2.y, r2, c13.x
mul r0.w, r0, c13.x
dsx r2.zw, v5.xyxy
dsy r3.xy, v5
mul r2.zw, r2, r2
mul r3.xy, r3, r3
mov r5.y, r0.w
dsx r4.w, r2.y
dsy r4.y, r2
add r2.y, r2.z, r2.w
add r2.z, r3.x, r3.y
rsq r2.y, r2.y
rcp r2.y, r2.y
rsq r2.z, r2.z
rcp r2.z, r2.z
mul r4.z, r2.y, c15.x
mul r4.x, r2.z, c15
texldd r2.yw, r5, s3, r4.zwzw, r4
add r1.xy, r2.wyzw, c16.x
mov r2.y, r0.w
mul r1.xy, r1, c16.yzzw
add r2.xy, r2, r1
mad r1.x, r2.y, c16.w, c16.z
frc r1.x, r1
mul r0.w, v0.x, c6.x
mad r1.w, r1.x, c17.x, c17.y
mul_sat r0.w, r0, c12.z
mul_pp r0.xyz, r0, c16.y
mad_pp r0.xyz, r0.w, -r0, r0
add r1.xyz, v1, r0
sincos r0.xy, r1.w
mad r0.y, r2.x, c17.z, c17.w
frc r0.y, r0
mov_pp r3.y, r0.x
mad r1.w, r0.y, c17.x, c17.y
sincos r0.xy, r1.w
dp4_pp r2.x, c1, c1
rsq_pp r0.z, r2.x
mov_pp r3.xz, r0.yyxw
mul_pp r2.xyz, r0.z, c1
dp3_sat r0.y, v4, r2
dp3_pp_sat r0.x, -r3, -c9
add_pp r0.x, r0, -r0.y
mul_sat r0.w, c10.x, c10.x
mad_pp r0.x, r0.w, r0, r0.y
dp3 r0.y, v5, c9
add r2.x, r0.y, c18.y
frc r2.y, r2.x
texld r1.w, v3, s4
mul_pp r0.x, r0, c2.w
mul_pp r0.x, r0, r1.w
mul_pp_sat r1.w, r0.x, c18.x
mov r0.x, c7
add r0.xyz, c2, r0.x
add_sat r2.x, r2, -r2.y
mad_sat r0.xyz, r0, r1.w, c0
mul_pp r0.xyz, r0, r2.x
texldd r2.xyz, r5, s0, r4.zwzw, r4
add_pp r2.xyz, r2, -r1
mul r3.xyz, r0, c8.x
mad_pp r1.xyz, r0.w, r2, r1
mad_pp r1.xyz, r1, c3, r3
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c11.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightShadowData]
Vector 3 [_LightColor0]
Vector 4 [_Color]
Float 5 [_DetailScale]
Float 6 [_DetailVertScale]
Float 7 [_DetailDist]
Float 8 [_MinLight]
Float 9 [_Albedo]
Vector 10 [_SunDir]
Float 11 [_PlanetOpacity]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_BumpMap] 2D
SetTexture 4 [_LightTexture0] 2D
SetTexture 5 [_LightTextureB0] 2D
SetTexture 6 [_ShadowMapTexture] 2D
"ps_3_0
; 155 ALU, 15 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
def c12, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c13, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c14, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c15, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c16, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c17, -0.50000000, 0.25000000, 0.50000000, 0.49999991
def c18, 6.28318501, -3.14159298, 0.99999982, 0.50000000
def c19, 4.00000000, 1.00999999, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3
dcl_texcoord4 v4
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
mov r3.xyz, v6
dp3_sat r3.x, v2, -r3
mul r2.xy, v6.zyzw, c5.x
dsx r4.xy, v6
dsy r4.zw, v6.xyxy
abs r0.w, v6.z
abs r1.zw, v6.xyxy
max r0.x, r1.z, r0.w
rcp r0.y, r0.x
min r0.x, r1.z, r0.w
mul r1.x, r0, r0.y
mul r1.y, r1.x, r1.x
mad r2.w, r1.y, c14.y, c14.z
mad r2.w, r2, r1.y, c14
mad r3.w, r2, r1.y, c15.x
mad r3.w, r3, r1.y, c15.y
add r3.x, r3, c16.z
mad r1.y, r3.w, r1, c15.z
mul r1.y, r1, r1.x
mul r0.xy, v6.zyzw, c6.x
mul r4.xy, r4, r4
mul r4.zw, r4, r4
texld r0.xyz, r0, s1
texld r2.xyz, r2, s2
add r2.xyz, r2, -r0
mad_sat r2.w, r3.x, c16, c16.y
mad r3.xyz, r2.w, r2, r0
mul r2.xy, v6, c6.x
mul r0.xy, v6, c5.x
add r1.x, r1.z, -r0.w
texld r2.xyz, r2, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r2
mad r0.xyz, r2.w, r0, r2
add_pp r2.xyz, r3, -r0
mad_pp r0.xyz, r1.z, r2, r0
add r3.x, -r1.y, c15.w
cmp r3.x, -r1, r1.y, r3
add r3.y, -r3.x, c13.w
cmp r3.x, v6.z, r3, r3.y
add r3.y, -r0.w, c12
mul r2.xy, v6.zxzw, c6.x
mul r1.xy, v6.zxzw, c5.x
rsq r3.y, r3.y
texld r2.xyz, r2, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r2
mad r1.xyz, r2.w, r1, r2
add_pp r1.xyz, r1, -r0
mad_pp r0.xyz, r1.w, r1, r0
cmp r2.x, v6, r3, -r3
mul r3.z, r2.x, c16.x
abs r2.x, v6.y
add r2.z, -r2.x, c12.y
mad r2.y, r2.x, c12.z, c12.w
mad r2.y, r2, r2.x, c13.x
mad r2.w, r0, c12.z, c12
mad r2.w, r0, r2, c13.x
mad r0.w, r0, r2, c13.y
rsq r2.z, r2.z
rcp r3.y, r3.y
add_pp r0.xyz, r0, c17.x
add r3.x, r3.z, c16.y
mul r3.y, r0.w, r3
cmp r2.w, v6.z, c12.x, c12.y
mul r3.w, r2, r3.y
mad r2.x, r2.y, r2, c13.y
rcp r2.z, r2.z
mul r2.z, r2.x, r2
cmp r2.x, v6.y, c12, c12.y
mul r2.y, r2.x, r2.z
mad r0.w, -r2.y, c13.z, r2.z
add r2.z, r4, r4.w
mad r0.w, r2.x, c13, r0
mad r2.y, -r3.w, c13.z, r3
mad r2.x, r2.w, c13.w, r2.y
mul r2.x, r2, c14
mul r0.w, r0, c14.x
rsq r2.z, r2.z
mov r3.y, r0.w
dsx r2.w, r2.x
dsy r2.y, r2.x
add r2.x, r4, r4.y
rsq r2.x, r2.x
rcp r3.w, r2.z
rcp r2.x, r2.x
mul r2.z, r2.x, c16.x
mul r2.x, r3.w, c16
texldd r4.yw, r3, s3, r2.zwzw, r2
add r1.xy, r4.wyzw, c17.x
mov r3.w, r0
mul r1.xy, r1, c17.yzzw
add r3.zw, r3, r1.xyxy
mad r1.x, r3.w, c17.w, c17.z
frc r1.x, r1
mul r0.w, v0.x, c7.x
mad r1.w, r1.x, c18.x, c18.y
mul_sat r0.w, r0, c13.z
mul_pp r0.xyz, r0, c17.y
mad_pp r0.xyz, r0.w, -r0, r0
add r1.xyz, v1, r0
sincos r0.xy, r1.w
mad r0.y, r3.z, c18.z, c18.w
frc r0.y, r0
texldd r2.xyz, r3, s0, r2.zwzw, r2
mad r1.w, r0.y, c18.x, c18.y
mov_pp r5.y, r0.x
sincos r0.xy, r1.w
dp4 r3.z, c1, c1
rsq r0.z, r3.z
mul r4.xyz, r0.z, c1
mov_pp r5.xz, r0.yyxw
dp3_sat r0.y, v5, r4
dp3_pp_sat r0.x, -r5, -c10
add_pp r0.x, r0, -r0.y
mul_sat r1.w, c11.x, c11.x
mad_pp r0.y, r1.w, r0.x, r0
add_pp r2.xyz, r2, -r1
texldp r0.x, v4, s6
rcp r0.z, v4.w
mad r0.z, -v4, r0, r0.x
mov r0.w, c2.x
rcp r0.x, v3.w
mad r4.xy, v3, r0.x, c16.y
cmp r0.z, r0, c12.y, r0.w
dp3 r0.x, v3, v3
cmp r3.z, -v3, c12.x, c12.y
texld r0.w, r4, s4
mul_pp r0.w, r3.z, r0
texld r0.x, r0.x, s5
mul_pp r0.x, r0.w, r0
mul_pp r0.z, r0.x, r0
mul_pp r0.x, r0.y, c3.w
mul_pp r0.x, r0, r0.z
dp3 r0.y, v6, c10
add r3.z, r0.y, c19.y
mul_pp_sat r0.w, r0.x, c19.x
mov r0.x, c8
frc r3.w, r3.z
add r0.xyz, c3, r0.x
add_sat r3.z, r3, -r3.w
mad_sat r0.xyz, r0, r0.w, c0
mul_pp r0.xyz, r0, r3.z
mul r3.xyz, r0, c9.x
mad_pp r1.xyz, r1.w, r2, r1
mad_pp r1.xyz, r1, c4, r3
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c12.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightShadowData]
Vector 3 [_LightColor0]
Vector 4 [_Color]
Float 5 [_DetailScale]
Float 6 [_DetailVertScale]
Float 7 [_DetailDist]
Float 8 [_MinLight]
Float 9 [_Albedo]
Vector 10 [_SunDir]
Float 11 [_PlanetOpacity]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_BumpMap] 2D
SetTexture 4 [_LightTexture0] 2D
SetTexture 5 [_LightTextureB0] 2D
SetTexture 6 [_ShadowMapTexture] 2D
"ps_3_0
; 154 ALU, 15 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
def c12, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c13, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c14, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c15, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c16, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c17, -0.50000000, 0.25000000, 0.50000000, 0.49999991
def c18, 6.28318501, -3.14159298, 0.99999982, 0.50000000
def c19, 4.00000000, 1.00999999, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3
dcl_texcoord4 v4
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
mov r3.xyz, v6
dp3_sat r3.x, v2, -r3
mul r2.xy, v6.zyzw, c5.x
dsx r4.xy, v6
dsy r4.zw, v6.xyxy
abs r0.w, v6.z
abs r1.zw, v6.xyxy
max r0.x, r1.z, r0.w
rcp r0.y, r0.x
min r0.x, r1.z, r0.w
mul r1.x, r0, r0.y
mul r1.y, r1.x, r1.x
mad r2.w, r1.y, c14.y, c14.z
mad r2.w, r2, r1.y, c14
mad r3.w, r2, r1.y, c15.x
mad r3.w, r3, r1.y, c15.y
add r3.x, r3, c16.z
mad r1.y, r3.w, r1, c15.z
mul r1.y, r1, r1.x
mul r0.xy, v6.zyzw, c6.x
mul r4.xy, r4, r4
mul r4.zw, r4, r4
texld r0.xyz, r0, s1
texld r2.xyz, r2, s2
add r2.xyz, r2, -r0
mad_sat r2.w, r3.x, c16, c16.y
mad r3.xyz, r2.w, r2, r0
mul r2.xy, v6, c6.x
mul r0.xy, v6, c5.x
add r1.x, r1.z, -r0.w
texld r2.xyz, r2, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r2
mad r0.xyz, r2.w, r0, r2
add_pp r2.xyz, r3, -r0
mad_pp r0.xyz, r1.z, r2, r0
add r3.x, -r1.y, c15.w
cmp r3.x, -r1, r1.y, r3
add r3.y, -r3.x, c13.w
cmp r3.x, v6.z, r3, r3.y
add r3.y, -r0.w, c12
mul r2.xy, v6.zxzw, c6.x
mul r1.xy, v6.zxzw, c5.x
rsq r3.y, r3.y
texld r2.xyz, r2, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r2
mad r1.xyz, r2.w, r1, r2
add_pp r1.xyz, r1, -r0
mad_pp r0.xyz, r1.w, r1, r0
cmp r2.x, v6, r3, -r3
mul r3.z, r2.x, c16.x
abs r2.x, v6.y
add r2.z, -r2.x, c12.y
mad r2.y, r2.x, c12.z, c12.w
mad r2.y, r2, r2.x, c13.x
mad r2.w, r0, c12.z, c12
mad r2.w, r0, r2, c13.x
mad r0.w, r0, r2, c13.y
rsq r2.z, r2.z
rcp r3.y, r3.y
add_pp r0.xyz, r0, c17.x
add r3.x, r3.z, c16.y
mul r3.y, r0.w, r3
cmp r2.w, v6.z, c12.x, c12.y
mul r3.w, r2, r3.y
mad r2.x, r2.y, r2, c13.y
rcp r2.z, r2.z
mul r2.z, r2.x, r2
cmp r2.x, v6.y, c12, c12.y
mul r2.y, r2.x, r2.z
mad r0.w, -r2.y, c13.z, r2.z
add r2.z, r4, r4.w
mad r0.w, r2.x, c13, r0
mad r2.y, -r3.w, c13.z, r3
mad r2.x, r2.w, c13.w, r2.y
mul r2.x, r2, c14
mul r0.w, r0, c14.x
rsq r2.z, r2.z
mov r3.y, r0.w
dsx r2.w, r2.x
dsy r2.y, r2.x
add r2.x, r4, r4.y
rsq r2.x, r2.x
rcp r3.w, r2.z
rcp r2.x, r2.x
mul r2.z, r2.x, c16.x
mul r2.x, r3.w, c16
texldd r4.yw, r3, s3, r2.zwzw, r2
add r1.xy, r4.wyzw, c17.x
mov r3.w, r0
mul r1.xy, r1, c17.yzzw
add r3.zw, r3, r1.xyxy
mad r1.x, r3.w, c17.w, c17.z
frc r1.x, r1
mul r0.w, v0.x, c7.x
mad r1.w, r1.x, c18.x, c18.y
mul_sat r0.w, r0, c13.z
mul_pp r0.xyz, r0, c17.y
mad_pp r0.xyz, r0.w, -r0, r0
add r1.xyz, v1, r0
sincos r0.xy, r1.w
mad r0.y, r3.z, c18.z, c18.w
frc r0.y, r0
texldd r2.xyz, r3, s0, r2.zwzw, r2
mad r1.w, r0.y, c18.x, c18.y
mov_pp r5.y, r0.x
sincos r0.xy, r1.w
dp4 r3.z, c1, c1
rsq r0.z, r3.z
mov_pp r5.xz, r0.yyxw
mul r4.xyz, r0.z, c1
dp3_sat r0.y, v5, r4
rcp r0.w, v3.w
dp3_pp_sat r0.x, -r5, -c10
mad r4.xy, v3, r0.w, c16.y
add_pp r0.x, r0, -r0.y
mul_sat r1.w, c11.x, c11.x
mad_pp r0.y, r1.w, r0.x, r0
mov r0.x, c2
add r0.z, c12.y, -r0.x
texldp r0.x, v4, s6
mad r0.z, r0.x, r0, c2.x
dp3 r0.x, v3, v3
add_pp r2.xyz, r2, -r1
cmp r3.z, -v3, c12.x, c12.y
texld r0.w, r4, s4
mul_pp r0.w, r3.z, r0
texld r0.x, r0.x, s5
mul_pp r0.x, r0.w, r0
mul_pp r0.z, r0.x, r0
mul_pp r0.x, r0.y, c3.w
mul_pp r0.x, r0, r0.z
dp3 r0.y, v6, c10
add r3.z, r0.y, c19.y
mul_pp_sat r0.w, r0.x, c19.x
mov r0.x, c8
frc r3.w, r3.z
add r0.xyz, c3, r0.x
add_sat r3.z, r3, -r3.w
mad_sat r0.xyz, r0, r0.w, c0
mul_pp r0.xyz, r0, r3.z
mul r3.xyz, r0, c9.x
mad_pp r1.xyz, r1.w, r2, r1
mad_pp r1.xyz, r1, c4, r3
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c12.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
Float 8 [_Albedo]
Vector 9 [_SunDir]
Float 10 [_PlanetOpacity]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_BumpMap] 2D
SetTexture 4 [_ShadowMapTexture] 2D
"ps_3_0
; 144 ALU, 13 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
def c11, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c12, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c13, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c14, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c15, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c16, -0.50000000, 0.25000000, 0.50000000, 0.49999991
def c17, 6.28318501, -3.14159298, 0.99999982, 0.50000000
def c18, 4.00000000, 1.00999999, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3
dcl_texcoord5 v4.xyz
dcl_texcoord6 v5.xyz
mov r3.xyz, v5
dp3_sat r3.x, v2, -r3
mul r2.xy, v5.zyzw, c4.x
abs r0.w, v5.z
abs r1.zw, v5.xyxy
max r0.x, r1.z, r0.w
rcp r0.y, r0.x
min r0.x, r1.z, r0.w
mul r1.x, r0, r0.y
mul r1.y, r1.x, r1.x
mad r2.w, r1.y, c13.y, c13.z
mad r2.w, r2, r1.y, c13
mad r3.w, r2, r1.y, c14.x
add r3.x, r3, c15.z
mul r0.xy, v5.zyzw, c5.x
mad r3.w, r3, r1.y, c14.y
mad r1.y, r3.w, r1, c14.z
mul r1.y, r1, r1.x
texld r0.xyz, r0, s1
texld r2.xyz, r2, s2
add r2.xyz, r2, -r0
mad_sat r2.w, r3.x, c15, c15.y
mad r3.xyz, r2.w, r2, r0
mul r2.xy, v5, c5.x
mul r0.xy, v5, c4.x
add r1.x, r1.z, -r0.w
texld r2.xyz, r2, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r2
mad r0.xyz, r2.w, r0, r2
add_pp r2.xyz, r3, -r0
mad_pp r0.xyz, r1.z, r2, r0
add r3.x, -r1.y, c14.w
cmp r3.x, -r1, r1.y, r3
add r3.y, -r3.x, c12.w
cmp r3.x, v5.z, r3, r3.y
add r3.y, -r0.w, c11
mul r2.xy, v5.zxzw, c5.x
mul r1.xy, v5.zxzw, c4.x
rsq r3.y, r3.y
texld r2.xyz, r2, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r2
mad r1.xyz, r2.w, r1, r2
abs r2.y, v5
cmp r2.x, v5, r3, -r3
add_pp r1.xyz, r1, -r0
mad_pp r0.xyz, r1.w, r1, r0
mul r2.x, r2, c15
add r2.w, -r2.y, c11.y
mad r2.z, r2.y, c11, c11.w
mad r2.z, r2, r2.y, c12.x
mad r3.x, r0.w, c11.z, c11.w
mad r3.x, r0.w, r3, c12
mad r0.w, r0, r3.x, c12.y
rsq r2.w, r2.w
rcp r3.y, r3.y
add_pp r0.xyz, r0, c16.x
mul r3.y, r0.w, r3
cmp r3.x, v5.z, c11, c11.y
add r5.x, r2, c15.y
mad r2.y, r2.z, r2, c12
rcp r2.w, r2.w
mul r2.w, r2.y, r2
cmp r2.y, v5, c11.x, c11
mul r2.z, r2.y, r2.w
mad r0.w, -r2.z, c12.z, r2
mul r3.z, r3.x, r3.y
mad r0.w, r2.y, c12, r0
mad r2.z, -r3, c12, r3.y
mad r2.y, r3.x, c12.w, r2.z
mul r2.y, r2, c13.x
mul r0.w, r0, c13.x
dsx r2.zw, v5.xyxy
dsy r3.xy, v5
mul r2.zw, r2, r2
mul r3.xy, r3, r3
mov r5.y, r0.w
dsx r4.w, r2.y
dsy r4.y, r2
add r2.y, r2.z, r2.w
add r2.z, r3.x, r3.y
rsq r2.y, r2.y
rcp r2.y, r2.y
rsq r2.z, r2.z
rcp r2.z, r2.z
mul r4.z, r2.y, c15.x
mul r4.x, r2.z, c15
texldd r2.yw, r5, s3, r4.zwzw, r4
add r1.xy, r2.wyzw, c16.x
mov r2.y, r0.w
mul r1.xy, r1, c16.yzzw
add r2.xy, r2, r1
mad r1.x, r2.y, c16.w, c16.z
frc r1.x, r1
mul r0.w, v0.x, c6.x
mad r1.w, r1.x, c17.x, c17.y
mul_sat r0.w, r0, c12.z
mul_pp r0.xyz, r0, c16.y
mad_pp r0.xyz, r0.w, -r0, r0
add r1.xyz, v1, r0
sincos r0.xy, r1.w
mad r0.y, r2.x, c17.z, c17.w
frc r0.y, r0
mov_pp r3.y, r0.x
mad r1.w, r0.y, c17.x, c17.y
sincos r0.xy, r1.w
dp4_pp r2.x, c1, c1
rsq_pp r0.z, r2.x
mov_pp r3.xz, r0.yyxw
mul_pp r2.xyz, r0.z, c1
dp3_sat r0.y, v4, r2
dp3_pp_sat r0.x, -r3, -c9
add_pp r0.x, r0, -r0.y
mul_sat r0.w, c10.x, c10.x
mad_pp r0.y, r0.w, r0.x, r0
mul_pp r0.y, r0, c2.w
texldp r0.x, v3, s4
mul_pp r0.x, r0.y, r0
dp3 r0.y, v5, c9
add r2.x, r0.y, c18.y
frc r2.y, r2.x
mul_pp_sat r1.w, r0.x, c18.x
mov r0.x, c7
add r0.xyz, c2, r0.x
add_sat r2.x, r2, -r2.y
mad_sat r0.xyz, r0, r1.w, c0
mul_pp r0.xyz, r0, r2.x
texldd r2.xyz, r5, s0, r4.zwzw, r4
add_pp r2.xyz, r2, -r1
mul r3.xyz, r0, c8.x
mad_pp r1.xyz, r0.w, r2, r1
mad_pp r1.xyz, r1, c3, r3
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c11.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
Float 8 [_Albedo]
Vector 9 [_SunDir]
Float 10 [_PlanetOpacity]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_BumpMap] 2D
SetTexture 4 [_ShadowMapTexture] 2D
SetTexture 5 [_LightTexture0] 2D
"ps_3_0
; 145 ALU, 14 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
def c11, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c12, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c13, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c14, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c15, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c16, -0.50000000, 0.25000000, 0.50000000, 0.49999991
def c17, 6.28318501, -3.14159298, 0.99999982, 0.50000000
def c18, 4.00000000, 1.00999999, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xy
dcl_texcoord4 v4
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
mov r3.xyz, v6
dp3_sat r3.x, v2, -r3
mul r2.xy, v6.zyzw, c4.x
dsy r4.xy, v6
abs r0.w, v6.z
abs r1.zw, v6.xyxy
max r0.x, r1.z, r0.w
rcp r0.y, r0.x
min r0.x, r1.z, r0.w
mul r1.x, r0, r0.y
mul r1.y, r1.x, r1.x
mad r2.w, r1.y, c13.y, c13.z
mad r2.w, r2, r1.y, c13
mad r3.w, r2, r1.y, c14.x
mad r3.w, r3, r1.y, c14.y
add r3.x, r3, c15.z
mad r1.y, r3.w, r1, c14.z
mul r1.y, r1, r1.x
mul r0.xy, v6.zyzw, c5.x
mul r4.xy, r4, r4
texld r0.xyz, r0, s1
texld r2.xyz, r2, s2
add r2.xyz, r2, -r0
mad_sat r2.w, r3.x, c15, c15.y
mad r3.xyz, r2.w, r2, r0
mul r2.xy, v6, c5.x
mul r0.xy, v6, c4.x
add r1.x, r1.z, -r0.w
texld r2.xyz, r2, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r2
mad r0.xyz, r2.w, r0, r2
add_pp r2.xyz, r3, -r0
mad_pp r0.xyz, r1.z, r2, r0
add r3.x, -r1.y, c14.w
cmp r3.x, -r1, r1.y, r3
add r3.y, -r3.x, c12.w
cmp r3.x, v6.z, r3, r3.y
add r3.y, -r0.w, c11
mul r2.xy, v6.zxzw, c5.x
mul r1.xy, v6.zxzw, c4.x
rsq r3.y, r3.y
texld r2.xyz, r2, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r2
mad r1.xyz, r2.w, r1, r2
add_pp r1.xyz, r1, -r0
mad_pp r0.xyz, r1.w, r1, r0
cmp r2.x, v6, r3, -r3
mul r3.x, r2, c15
abs r2.x, v6.y
add r2.z, -r2.x, c11.y
mad r2.y, r2.x, c11.z, c11.w
mad r2.y, r2, r2.x, c12.x
mad r2.w, r0, c11.z, c11
mad r2.w, r0, r2, c12.x
mad r0.w, r0, r2, c12.y
rsq r2.z, r2.z
rcp r3.y, r3.y
add_pp r0.xyz, r0, c16.x
mul r3.y, r0.w, r3
cmp r2.w, v6.z, c11.x, c11.y
mul r3.z, r2.w, r3.y
add r5.x, r3, c15.y
mad r2.x, r2.y, r2, c12.y
rcp r2.z, r2.z
mul r2.z, r2.x, r2
cmp r2.x, v6.y, c11, c11.y
mul r2.y, r2.x, r2.z
mad r0.w, -r2.y, c12.z, r2.z
mad r2.y, -r3.z, c12.z, r3
mad r0.w, r2.x, c12, r0
mad r2.x, r2.w, c12.w, r2.y
mul r2.x, r2, c13
mul r0.w, r0, c13.x
add r2.z, r4.x, r4.y
rsq r2.z, r2.z
dsx r3.zw, v6.xyxy
mul r3.zw, r3, r3
mov r5.y, r0.w
dsx r2.w, r2.x
dsy r2.y, r2.x
add r2.x, r3.z, r3.w
rsq r2.x, r2.x
rcp r3.y, r2.z
rcp r2.x, r2.x
mul r2.z, r2.x, c15.x
mul r2.x, r3.y, c15
texldd r3.yw, r5, s3, r2.zwzw, r2
add r1.xy, r3.wyzw, c16.x
mov r3.y, r0.w
mul r1.xy, r1, c16.yzzw
add r3.xy, r3, r1
mad r1.x, r3.y, c16.w, c16.z
frc r1.x, r1
mul r0.w, v0.x, c6.x
mad r1.w, r1.x, c17.x, c17.y
mul_sat r0.w, r0, c12.z
mul_pp r0.xyz, r0, c16.y
mad_pp r0.xyz, r0.w, -r0, r0
add r1.xyz, v1, r0
sincos r0.xy, r1.w
mad r0.y, r3.x, c17.z, c17.w
frc r0.y, r0
texldd r2.xyz, r5, s0, r2.zwzw, r2
mad r1.w, r0.y, c17.x, c17.y
mov_pp r4.y, r0.x
sincos r0.xy, r1.w
dp4_pp r3.x, c1, c1
rsq_pp r0.z, r3.x
mov_pp r4.xz, r0.yyxw
mul_pp r3.xyz, r0.z, c1
dp3_sat r0.y, v5, r3
dp3_pp_sat r0.x, -r4, -c9
add_pp r0.x, r0, -r0.y
mul_sat r1.w, c10.x, c10.x
mad_pp r0.y, r1.w, r0.x, r0
add_pp r2.xyz, r2, -r1
texldp r0.x, v4, s4
texld r0.w, v3, s5
mul r0.z, r0.w, r0.x
mul_pp r0.x, r0.y, c2.w
mul_pp r0.x, r0, r0.z
dp3 r0.y, v6, c9
add r3.x, r0.y, c18.y
frc r3.y, r3.x
mul_pp_sat r0.w, r0.x, c18.x
mov r0.x, c7
add r0.xyz, c2, r0.x
add_sat r3.x, r3, -r3.y
mad_sat r0.xyz, r0, r0.w, c0
mul_pp r0.xyz, r0, r3.x
mul r3.xyz, r0, c8.x
mad_pp r1.xyz, r1.w, r2, r1
mad_pp r1.xyz, r1, c3, r3
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c11.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightPositionRange]
Vector 3 [_LightShadowData]
Vector 4 [_LightColor0]
Vector 5 [_Color]
Float 6 [_DetailScale]
Float 7 [_DetailVertScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_Albedo]
Vector 11 [_SunDir]
Float 12 [_PlanetOpacity]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_BumpMap] 2D
SetTexture 4 [_ShadowMapTexture] CUBE
SetTexture 5 [_LightTexture0] 2D
"ps_3_0
; 154 ALU, 14 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_cube s4
dcl_2d s5
def c13, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c14, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c15, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c16, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c17, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c18, -0.50000000, 0.25000000, 0.50000000, 0.49999991
def c19, 6.28318501, -3.14159298, 0.99999982, 0.50000000
def c20, 1.00000000, 0.00392157, 0.00001538, 0.00000001
def c21, 0.97000003, 4.00000000, 1.00999999, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
mov r3.xyz, v6
dp3_sat r3.x, v2, -r3
mul r2.xy, v6.zyzw, c6.x
dsy r4.xy, v6
abs r0.w, v6.z
abs r1.zw, v6.xyxy
max r0.x, r1.z, r0.w
rcp r0.y, r0.x
min r0.x, r1.z, r0.w
mul r1.x, r0, r0.y
mul r1.y, r1.x, r1.x
mad r2.w, r1.y, c15.y, c15.z
mad r2.w, r2, r1.y, c15
mad r3.w, r2, r1.y, c16.x
mad r3.w, r3, r1.y, c16.y
add r3.x, r3, c17.z
mad r1.y, r3.w, r1, c16.z
mul r1.y, r1, r1.x
mul r0.xy, v6.zyzw, c7.x
mul r4.xy, r4, r4
texld r0.xyz, r0, s1
texld r2.xyz, r2, s2
add r2.xyz, r2, -r0
mad_sat r2.w, r3.x, c17, c17.y
mad r3.xyz, r2.w, r2, r0
mul r2.xy, v6, c7.x
mul r0.xy, v6, c6.x
add r1.x, r1.z, -r0.w
texld r2.xyz, r2, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r2
mad r0.xyz, r2.w, r0, r2
add_pp r2.xyz, r3, -r0
mad_pp r0.xyz, r1.z, r2, r0
add r3.x, -r1.y, c16.w
cmp r3.x, -r1, r1.y, r3
add r3.y, -r3.x, c14.w
cmp r3.x, v6.z, r3, r3.y
add r3.y, -r0.w, c13
mul r2.xy, v6.zxzw, c7.x
mul r1.xy, v6.zxzw, c6.x
rsq r3.y, r3.y
texld r2.xyz, r2, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r2
mad r1.xyz, r2.w, r1, r2
add_pp r1.xyz, r1, -r0
mad_pp r0.xyz, r1.w, r1, r0
cmp r2.x, v6, r3, -r3
mul r3.x, r2, c17
abs r2.x, v6.y
add r2.z, -r2.x, c13.y
mad r2.y, r2.x, c13.z, c13.w
mad r2.y, r2, r2.x, c14.x
mad r2.w, r0, c13.z, c13
mad r2.w, r0, r2, c14.x
mad r0.w, r0, r2, c14.y
rsq r2.z, r2.z
rcp r3.y, r3.y
add_pp r0.xyz, r0, c18.x
mul r3.y, r0.w, r3
cmp r2.w, v6.z, c13.x, c13.y
mul r3.z, r2.w, r3.y
add r5.x, r3, c17.y
mad r2.x, r2.y, r2, c14.y
rcp r2.z, r2.z
mul r2.z, r2.x, r2
cmp r2.x, v6.y, c13, c13.y
mul r2.y, r2.x, r2.z
mad r0.w, -r2.y, c14.z, r2.z
mad r2.y, -r3.z, c14.z, r3
mad r0.w, r2.x, c14, r0
mad r2.x, r2.w, c14.w, r2.y
mul r2.x, r2, c15
mul r0.w, r0, c15.x
add r2.z, r4.x, r4.y
rsq r2.z, r2.z
dsx r3.zw, v6.xyxy
mul r3.zw, r3, r3
mov r5.y, r0.w
dsx r2.w, r2.x
dsy r2.y, r2.x
add r2.x, r3.z, r3.w
rsq r2.x, r2.x
rcp r3.y, r2.z
rcp r2.x, r2.x
mul r2.z, r2.x, c17.x
mul r2.x, r3.y, c17
texldd r3.yw, r5, s3, r2.zwzw, r2
add r1.xy, r3.wyzw, c18.x
mov r3.y, r0.w
mul r1.xy, r1, c18.yzzw
add r3.xy, r3, r1
mad r1.x, r3.y, c18.w, c18.z
frc r1.x, r1
mul r0.w, v0.x, c8.x
mad r1.w, r1.x, c19.x, c19.y
mul_sat r0.w, r0, c14.z
mul_pp r0.xyz, r0, c18.y
mad_pp r0.xyz, r0.w, -r0, r0
add r1.xyz, v1, r0
sincos r0.xy, r1.w
mad r0.y, r3.x, c19.z, c19.w
frc r0.y, r0
texldd r2.xyz, r5, s0, r2.zwzw, r2
mad r1.w, r0.y, c19.x, c19.y
mov_pp r4.y, r0.x
sincos r0.xy, r1.w
dp4 r3.x, c1, c1
rsq r0.z, r3.x
mul r3.xyz, r0.z, c1
mov_pp r4.xz, r0.yyxw
dp3_sat r0.y, v5, r3
dp3 r0.z, v4, v4
rsq r3.y, r0.z
dp3_pp_sat r0.x, -r4, -c11
add_pp r0.x, r0, -r0.y
mul_sat r1.w, c12.x, c12.x
mad_pp r3.x, r1.w, r0, r0.y
texld r0, v4, s4
dp4 r0.y, r0, c20
rcp r3.y, r3.y
mul r0.x, r3.y, c2.w
mad r0.y, -r0.x, c21.x, r0
mov r0.z, c3.x
dp3 r0.x, v3, v3
add_pp r2.xyz, r2, -r1
cmp r0.y, r0, c13, r0.z
texld r0.x, r0.x, s5
mul r0.y, r0.x, r0
mul_pp r0.x, r3, c4.w
mul_pp r0.x, r0, r0.y
dp3 r0.y, v6, c11
add r3.x, r0.y, c21.z
frc r3.y, r3.x
mul_pp_sat r0.w, r0.x, c21.y
mov r0.x, c9
add r0.xyz, c4, r0.x
add_sat r3.x, r3, -r3.y
mad_sat r0.xyz, r0, r0.w, c0
mul_pp r0.xyz, r0, r3.x
mul r3.xyz, r0, c10.x
mad_pp r1.xyz, r1.w, r2, r1
mad_pp r1.xyz, r1, c5, r3
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c13.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightPositionRange]
Vector 3 [_LightShadowData]
Vector 4 [_LightColor0]
Vector 5 [_Color]
Float 6 [_DetailScale]
Float 7 [_DetailVertScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_Albedo]
Vector 11 [_SunDir]
Float 12 [_PlanetOpacity]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_BumpMap] 2D
SetTexture 4 [_ShadowMapTexture] CUBE
SetTexture 5 [_LightTextureB0] 2D
SetTexture 6 [_LightTexture0] CUBE
"ps_3_0
; 155 ALU, 15 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_cube s4
dcl_2d s5
dcl_cube s6
def c13, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c14, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c15, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c16, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c17, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c18, -0.50000000, 0.25000000, 0.50000000, 0.49999991
def c19, 6.28318501, -3.14159298, 0.99999982, 0.50000000
def c20, 1.00000000, 0.00392157, 0.00001538, 0.00000001
def c21, 0.97000003, 4.00000000, 1.00999999, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
mov r3.xyz, v6
dp3_sat r3.x, v2, -r3
mul r2.xy, v6.zyzw, c6.x
dsy r4.xy, v6
abs r0.w, v6.z
abs r1.zw, v6.xyxy
max r0.x, r1.z, r0.w
rcp r0.y, r0.x
min r0.x, r1.z, r0.w
mul r1.x, r0, r0.y
mul r1.y, r1.x, r1.x
mad r2.w, r1.y, c15.y, c15.z
mad r2.w, r2, r1.y, c15
mad r3.w, r2, r1.y, c16.x
mad r3.w, r3, r1.y, c16.y
add r3.x, r3, c17.z
mad r1.y, r3.w, r1, c16.z
mul r1.y, r1, r1.x
mul r0.xy, v6.zyzw, c7.x
mul r4.xy, r4, r4
texld r0.xyz, r0, s1
texld r2.xyz, r2, s2
add r2.xyz, r2, -r0
mad_sat r2.w, r3.x, c17, c17.y
mad r3.xyz, r2.w, r2, r0
mul r2.xy, v6, c7.x
mul r0.xy, v6, c6.x
add r1.x, r1.z, -r0.w
texld r2.xyz, r2, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r2
mad r0.xyz, r2.w, r0, r2
add_pp r2.xyz, r3, -r0
mad_pp r0.xyz, r1.z, r2, r0
add r3.x, -r1.y, c16.w
cmp r3.x, -r1, r1.y, r3
add r3.y, -r3.x, c14.w
cmp r3.x, v6.z, r3, r3.y
add r3.y, -r0.w, c13
mul r2.xy, v6.zxzw, c7.x
mul r1.xy, v6.zxzw, c6.x
rsq r3.y, r3.y
texld r2.xyz, r2, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r2
mad r1.xyz, r2.w, r1, r2
add_pp r1.xyz, r1, -r0
mad_pp r0.xyz, r1.w, r1, r0
cmp r2.x, v6, r3, -r3
mul r3.x, r2, c17
abs r2.x, v6.y
add r2.z, -r2.x, c13.y
mad r2.y, r2.x, c13.z, c13.w
mad r2.y, r2, r2.x, c14.x
mad r2.w, r0, c13.z, c13
mad r2.w, r0, r2, c14.x
mad r0.w, r0, r2, c14.y
rsq r2.z, r2.z
rcp r3.y, r3.y
add_pp r0.xyz, r0, c18.x
mul r3.y, r0.w, r3
cmp r2.w, v6.z, c13.x, c13.y
mul r3.z, r2.w, r3.y
add r5.x, r3, c17.y
mad r2.x, r2.y, r2, c14.y
rcp r2.z, r2.z
mul r2.z, r2.x, r2
cmp r2.x, v6.y, c13, c13.y
mul r2.y, r2.x, r2.z
mad r0.w, -r2.y, c14.z, r2.z
mad r2.y, -r3.z, c14.z, r3
mad r0.w, r2.x, c14, r0
mad r2.x, r2.w, c14.w, r2.y
mul r2.x, r2, c15
mul r0.w, r0, c15.x
add r2.z, r4.x, r4.y
rsq r2.z, r2.z
dsx r3.zw, v6.xyxy
mul r3.zw, r3, r3
mov r5.y, r0.w
dsx r2.w, r2.x
dsy r2.y, r2.x
add r2.x, r3.z, r3.w
rsq r2.x, r2.x
rcp r3.y, r2.z
rcp r2.x, r2.x
mul r2.z, r2.x, c17.x
mul r2.x, r3.y, c17
texldd r3.yw, r5, s3, r2.zwzw, r2
add r1.xy, r3.wyzw, c18.x
mov r3.y, r0.w
mul r1.xy, r1, c18.yzzw
add r3.xy, r3, r1
mad r1.x, r3.y, c18.w, c18.z
frc r1.x, r1
mul r0.w, v0.x, c8.x
mad r1.w, r1.x, c19.x, c19.y
mul_sat r0.w, r0, c14.z
mul_pp r0.xyz, r0, c18.y
mad_pp r0.xyz, r0.w, -r0, r0
add r1.xyz, v1, r0
sincos r0.xy, r1.w
mad r0.y, r3.x, c19.z, c19.w
frc r0.y, r0
texldd r2.xyz, r5, s0, r2.zwzw, r2
mad r1.w, r0.y, c19.x, c19.y
mov_pp r4.y, r0.x
sincos r0.xy, r1.w
dp4 r3.x, c1, c1
rsq r0.z, r3.x
mov_pp r4.xz, r0.yyxw
mul r3.xyz, r0.z, c1
dp3_sat r0.y, v5, r3
dp3_pp_sat r0.x, -r4, -c11
dp3 r3.y, v4, v4
add_pp r0.x, r0, -r0.y
mul_sat r1.w, c12.x, c12.x
mad_pp r3.x, r1.w, r0, r0.y
texld r0, v4, s4
dp4 r0.y, r0, c20
rsq r3.y, r3.y
rcp r0.x, r3.y
mul r0.x, r0, c2.w
add_pp r2.xyz, r2, -r1
mad r0.x, -r0, c21, r0.y
mov r0.z, c3.x
cmp r0.y, r0.x, c13, r0.z
dp3 r0.x, v3, v3
texld r0.w, v3, s6
texld r0.x, r0.x, s5
mul r0.x, r0, r0.w
mul r0.y, r0.x, r0
mul_pp r0.x, r3, c4.w
mul_pp r0.x, r0, r0.y
dp3 r0.y, v6, c11
add r3.x, r0.y, c21.z
frc r3.y, r3.x
mul_pp_sat r0.w, r0.x, c21.y
mov r0.x, c9
add r0.xyz, c4, r0.x
add_sat r3.x, r3, -r3.y
mad_sat r0.xyz, r0, r0.w, c0
mul_pp r0.xyz, r0, r3.x
mul r3.xyz, r0, c10.x
mad_pp r1.xyz, r1.w, r2, r1
mad_pp r1.xyz, r1, c5, r3
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c13.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightShadowData]
Vector 3 [_ShadowOffsets0]
Vector 4 [_ShadowOffsets1]
Vector 5 [_ShadowOffsets2]
Vector 6 [_ShadowOffsets3]
Vector 7 [_LightColor0]
Vector 8 [_Color]
Float 9 [_DetailScale]
Float 10 [_DetailVertScale]
Float 11 [_DetailDist]
Float 12 [_MinLight]
Float 13 [_Albedo]
Vector 14 [_SunDir]
Float 15 [_PlanetOpacity]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_BumpMap] 2D
SetTexture 4 [_LightTexture0] 2D
SetTexture 5 [_LightTextureB0] 2D
SetTexture 6 [_ShadowMapTexture] 2D
"ps_3_0
; 163 ALU, 18 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
def c16, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c17, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c18, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c19, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c20, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c21, -0.50000000, 0.25000000, 0.50000000, 0.49999991
def c22, 6.28318501, -3.14159298, 0.99999982, 0.50000000
def c23, 4.00000000, 1.00999999, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3
dcl_texcoord4 v4
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
mul r1.xy, v6.zyzw, c9.x
mul r0.xy, v6.zyzw, c10.x
abs r0.w, v6.z
abs r3.xy, v6
max r1.w, r3.x, r0
rcp r2.x, r1.w
min r1.w, r3.x, r0
mul r2.w, r1, r2.x
mul r3.z, r2.w, r2.w
mad r1.w, r3.z, c18.y, c18.z
mad r3.w, r1, r3.z, c18
mad r3.w, r3, r3.z, c19.x
mad r3.w, r3, r3.z, c19.y
mov r2.xyz, v6
dp3_sat r2.x, v2, -r2
add r2.x, r2, c20.z
mad r3.z, r3.w, r3, c19
mul r2.w, r3.z, r2
dsy r3.zw, v6.xyxy
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad_sat r1.w, r2.x, c20, c20.y
mad r2.xyz, r1.w, r1, r0
mul r1.xy, v6, c10.x
mul r0.xy, v6, c9.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r1.w, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r3.x, r1, r0
mul r1.xy, v6.zxzw, c10.x
texld r1.xyz, r1, s1
add r0.x, r3, -r0.w
add r0.y, -r2.w, c19.w
cmp r2.w, -r0.x, r2, r0.y
mul r0.xy, v6.zxzw, c9.x
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r1.w, r0, r1
abs r1.y, v6
add_pp r0.xyz, r0, -r2
mad_pp r0.xyz, r3.y, r0, r2
add r3.x, -r2.w, c17.w
cmp r1.x, v6.z, r2.w, r3
add r1.w, -r1.y, c16.y
mad r1.z, r1.y, c16, c16.w
mad r1.z, r1, r1.y, c17.x
add r2.y, -r0.w, c16
mad r2.x, r0.w, c16.z, c16.w
mad r2.x, r0.w, r2, c17
mad r0.w, r0, r2.x, c17.y
cmp r1.x, v6, r1, -r1
mul r1.x, r1, c20
rsq r1.w, r1.w
rsq r2.y, r2.y
rcp r2.y, r2.y
add_pp r0.xyz, r0, c21.x
add r3.x, r1, c20.y
mul r2.y, r0.w, r2
cmp r2.x, v6.z, c16, c16.y
mul r2.z, r2.x, r2.y
mad r1.y, r1.z, r1, c17
rcp r1.w, r1.w
mul r1.z, r1.y, r1.w
cmp r1.y, v6, c16.x, c16
mul r1.w, r1.y, r1.z
mad r0.w, -r1, c17.z, r1.z
mad r0.w, r1.y, c17, r0
mad r1.z, -r2, c17, r2.y
mad r1.y, r2.x, c17.w, r1.z
mul r1.y, r1, c18.x
mul r0.w, r0, c18.x
dsx r1.zw, v6.xyxy
mul r1.zw, r1, r1
mov r3.y, r0.w
dsx r2.w, r1.y
dsy r2.y, r1
add r1.y, r1.z, r1.w
mul r3.zw, r3, r3
add r1.z, r3, r3.w
rsq r1.y, r1.y
rcp r1.y, r1.y
rsq r1.z, r1.z
rcp r1.z, r1.z
mul r2.z, r1.y, c20.x
mul r2.x, r1.z, c20
texldd r1.yw, r3, s3, r2.zwzw, r2
add r1.zw, r1.xywy, c21.x
mov r1.y, r0.w
mul r1.zw, r1, c21.xyyz
add r3.zw, r1.xyxy, r1
mad r1.x, r3.w, c21.w, c21.z
mul r0.w, v0.x, c11.x
rcp r3.w, v4.w
mul_sat r0.w, r0, c17.z
mul_pp r0.xyz, r0, c21.y
mad_pp r0.xyz, r0.w, -r0, r0
frc r0.w, r1.x
add r1.xyz, v1, r0
mad r1.w, r0, c22.x, c22.y
texldd r2.xyz, r3, s0, r2.zwzw, r2
sincos r0.xy, r1.w
mad r3.z, r3, c22, c22.w
frc r0.y, r3.z
mad r1.w, r0.y, c22.x, c22.y
mov_pp r4.y, r0.x
sincos r0.xy, r1.w
dp4 r0.z, c1, c1
mov_pp r4.xz, r0.yyxw
dp3_pp_sat r0.w, -r4, -c14
rsq r0.z, r0.z
mul r0.xyz, r0.z, c1
dp3_sat r0.z, v5, r0
mad r0.xy, v4, r3.w, c6
add_pp r0.w, r0, -r0.z
mul_sat r1.w, c15.x, c15.x
add_pp r2.xyz, r2, -r1
mad_pp r3.z, r1.w, r0.w, r0
texld r0.x, r0, s6
mad r4.xy, v4, r3.w, c5
mov r0.w, r0.x
texld r0.x, r4, s6
mad r4.xy, v4, r3.w, c4
mov r0.z, r0.x
texld r0.x, r4, s6
mad r4.xy, v4, r3.w, c3
mov r0.y, r0.x
texld r0.x, r4, s6
mad r0, -v4.z, r3.w, r0
mov r4.x, c2
cmp r0, r0, c16.y, r4.x
dp4_pp r0.y, r0, c21.y
rcp r3.w, v3.w
mad r4.xy, v3, r3.w, c20.y
dp3 r0.x, v3, v3
texld r0.w, r4, s4
cmp r0.z, -v3, c16.x, c16.y
mul_pp r0.z, r0, r0.w
texld r0.x, r0.x, s5
mul_pp r0.x, r0.z, r0
mul_pp r0.y, r0.x, r0
mul_pp r0.x, r3.z, c7.w
mul_pp r0.x, r0, r0.y
dp3 r0.y, v6, c14
add r3.z, r0.y, c23.y
mul_pp_sat r0.w, r0.x, c23.x
mov r0.x, c12
frc r3.w, r3.z
add r0.xyz, c7, r0.x
add_sat r3.z, r3, -r3.w
mad_sat r0.xyz, r0, r0.w, c0
mul_pp r0.xyz, r0, r3.z
mul r3.xyz, r0, c13.x
mad_pp r1.xyz, r1.w, r2, r1
mad_pp r1.xyz, r1, c8, r3
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c16.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightShadowData]
Vector 3 [_ShadowOffsets0]
Vector 4 [_ShadowOffsets1]
Vector 5 [_ShadowOffsets2]
Vector 6 [_ShadowOffsets3]
Vector 7 [_LightColor0]
Vector 8 [_Color]
Float 9 [_DetailScale]
Float 10 [_DetailVertScale]
Float 11 [_DetailDist]
Float 12 [_MinLight]
Float 13 [_Albedo]
Vector 14 [_SunDir]
Float 15 [_PlanetOpacity]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_BumpMap] 2D
SetTexture 4 [_LightTexture0] 2D
SetTexture 5 [_LightTextureB0] 2D
SetTexture 6 [_ShadowMapTexture] 2D
"ps_3_0
; 163 ALU, 18 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
def c16, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c17, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c18, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c19, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c20, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c21, -0.50000000, 0.25000000, 0.50000000, 0.49999991
def c22, 6.28318501, -3.14159298, 0.99999982, 0.50000000
def c23, 4.00000000, 1.00999999, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3
dcl_texcoord4 v4
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
mul r1.xy, v6.zyzw, c9.x
mul r0.xy, v6.zyzw, c10.x
abs r0.w, v6.z
abs r3.xy, v6
max r1.w, r3.x, r0
rcp r2.x, r1.w
min r1.w, r3.x, r0
mul r2.w, r1, r2.x
mul r3.z, r2.w, r2.w
mad r1.w, r3.z, c18.y, c18.z
mad r3.w, r1, r3.z, c18
mad r3.w, r3, r3.z, c19.x
mad r3.w, r3, r3.z, c19.y
mad r3.z, r3.w, r3, c19
mov r2.xyz, v6
dp3_sat r2.x, v2, -r2
add r2.x, r2, c20.z
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad_sat r1.w, r2.x, c20, c20.y
mad r2.xyz, r1.w, r1, r0
mul r1.xy, v6, c10.x
mul r0.xy, v6, c9.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r1.w, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r3.x, r1, r0
mul r2.w, r3.z, r2
mul r1.xy, v6.zxzw, c10.x
texld r1.xyz, r1, s1
add r0.x, r3, -r0.w
add r0.y, -r2.w, c19.w
cmp r2.w, -r0.x, r2, r0.y
mul r0.xy, v6.zxzw, c9.x
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r1.w, r0, r1
abs r1.y, v6
add_pp r0.xyz, r0, -r2
mad_pp r0.xyz, r3.y, r0, r2
add r3.x, -r2.w, c17.w
cmp r1.x, v6.z, r2.w, r3
add r1.w, -r1.y, c16.y
mad r1.z, r1.y, c16, c16.w
mad r1.z, r1, r1.y, c17.x
add r2.y, -r0.w, c16
mad r2.x, r0.w, c16.z, c16.w
mad r2.x, r0.w, r2, c17
mad r0.w, r0, r2.x, c17.y
cmp r1.x, v6, r1, -r1
mul r1.x, r1, c20
rsq r1.w, r1.w
rsq r2.y, r2.y
rcp r2.y, r2.y
add_pp r0.xyz, r0, c21.x
mul r2.y, r0.w, r2
cmp r2.x, v6.z, c16, c16.y
add r3.z, r1.x, c20.y
mad r1.y, r1.z, r1, c17
rcp r1.w, r1.w
mul r1.z, r1.y, r1.w
cmp r1.y, v6, c16.x, c16
mul r1.w, r1.y, r1.z
mad r0.w, -r1, c17.z, r1.z
mul r2.z, r2.x, r2.y
mad r1.z, -r2, c17, r2.y
mad r0.w, r1.y, c17, r0
mad r1.y, r2.x, c17.w, r1.z
mul r1.y, r1, c18.x
mul r0.w, r0, c18.x
dsx r2.xy, v6
dsy r2.zw, v6.xyxy
mul r2.zw, r2, r2
add r1.z, r2, r2.w
rsq r1.z, r1.z
rcp r1.z, r1.z
mul r2.xy, r2, r2
mov r3.w, r0
dsx r3.y, r1
dsy r1.w, r1.y
add r1.y, r2.x, r2
rsq r1.y, r1.y
rcp r1.y, r1.y
mul r3.x, r1.y, c20
mul r1.z, r1, c20.x
texldd r2.yw, r3.zwzw, s3, r3, r1.zwzw
add r2.xy, r2.wyzw, c21.x
mov r1.y, r0.w
mul r2.xy, r2, c21.yzzw
mul r0.w, v0.x, c11.x
add r1.xy, r1, r2
texldd r3.xyz, r3.zwzw, s0, r3, r1.zwzw
mul_sat r0.w, r0, c17.z
mul_pp r0.xyz, r0, c21.y
mad_pp r0.xyz, r0.w, -r0, r0
add r2.xyz, v1, r0
mad r0.w, r1.y, c21, c21.z
frc r0.x, r0.w
mad r0.y, r1.x, c22.z, c22.w
mad r0.x, r0, c22, c22.y
sincos r4.xy, r0.x
frc r0.y, r0
mad r1.x, r0.y, c22, c22.y
sincos r0.xy, r1.x
mov_pp r4.y, r4.x
mov_pp r4.xz, r0.yyxw
dp4 r0.z, c1, c1
rsq r0.x, r0.z
mul r0.xyz, r0.x, c1
rcp r4.w, v4.w
dp3_sat r1.x, v5, r0
dp3_pp_sat r0.w, -r4, -c14
mad r0.xyz, v4, r4.w, c6
add_pp r0.w, r0, -r1.x
mul_sat r1.y, c15.x, c15.x
mad_pp r2.w, r1.y, r0, r1.x
texld r0.x, r0, s6
mov_pp r0.w, r0.x
mad r0.xyz, v4, r4.w, c5
texld r0.x, r0, s6
mad r4.xyz, v4, r4.w, c4
texld r1.x, r4, s6
mov_pp r0.z, r0.x
mad r4.xyz, v4, r4.w, c3
mov_pp r0.y, r1.x
mov r0.x, c2
add r1.x, c16.y, -r0
texld r0.x, r4, s6
mad r0, r0, r1.x, c2.x
dp4_pp r0.y, r0, c21.y
rcp r1.x, v3.w
mad r4.xy, v3, r1.x, c20.y
dp3 r0.x, v3, v3
texld r0.w, r4, s4
cmp r0.z, -v3, c16.x, c16.y
mul_pp r0.z, r0, r0.w
texld r0.x, r0.x, s5
mul_pp r0.x, r0.z, r0
mul_pp r0.y, r0.x, r0
mul_pp r0.x, r2.w, c7.w
mul_pp r0.x, r0, r0.y
dp3 r0.y, v6, c14
add r1.x, r0.y, c23.y
mul_pp_sat r0.w, r0.x, c23.x
mov r0.x, c12
frc r2.w, r1.x
add r0.xyz, c7, r0.x
add_sat r1.x, r1, -r2.w
mad_sat r0.xyz, r0, r0.w, c0
mul_pp r0.xyz, r0, r1.x
add_pp r3.xyz, r3, -r2
mul r4.xyz, r0, c13.x
mad_pp r1.xyz, r1.y, r3, r2
mad_pp r1.xyz, r1, c8, r4
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c16.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightPositionRange]
Vector 3 [_LightShadowData]
Vector 4 [_LightColor0]
Vector 5 [_Color]
Float 6 [_DetailScale]
Float 7 [_DetailVertScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_Albedo]
Vector 11 [_SunDir]
Float 12 [_PlanetOpacity]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_BumpMap] 2D
SetTexture 4 [_ShadowMapTexture] CUBE
SetTexture 5 [_LightTexture0] 2D
"ps_3_0
; 162 ALU, 17 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_cube s4
dcl_2d s5
def c13, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c14, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c15, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c16, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c17, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c18, -0.50000000, 0.25000000, 0.50000000, 0.49999991
def c19, 6.28318501, -3.14159298, 0.99999982, 0.50000000
def c20, 0.00781250, -0.00781250, 0.97000003, 4.00000000
def c21, 1.00000000, 0.00392157, 0.00001538, 0.00000001
def c22, 1.00999999, 0, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
mul r1.xy, v6.zyzw, c6.x
mul r0.xy, v6.zyzw, c7.x
abs r0.w, v6.z
abs r3.xy, v6
max r1.w, r3.x, r0
rcp r2.x, r1.w
min r1.w, r3.x, r0
mul r2.w, r1, r2.x
mul r3.z, r2.w, r2.w
mad r1.w, r3.z, c15.y, c15.z
mad r3.w, r1, r3.z, c15
mad r3.w, r3, r3.z, c16.x
mad r3.w, r3, r3.z, c16.y
mad r3.z, r3.w, r3, c16
mov r2.xyz, v6
dp3_sat r2.x, v2, -r2
add r2.x, r2, c17.z
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad_sat r1.w, r2.x, c17, c17.y
mad r2.xyz, r1.w, r1, r0
mul r1.xy, v6, c7.x
mul r0.xy, v6, c6.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r1.w, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r3.x, r1, r0
mul r2.w, r3.z, r2
mul r1.xy, v6.zxzw, c7.x
texld r1.xyz, r1, s1
add r0.x, r3, -r0.w
add r0.y, -r2.w, c16.w
cmp r2.w, -r0.x, r2, r0.y
mul r0.xy, v6.zxzw, c6.x
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r1.w, r0, r1
abs r1.y, v6
add_pp r0.xyz, r0, -r2
mad_pp r0.xyz, r3.y, r0, r2
add r3.x, -r2.w, c14.w
cmp r1.x, v6.z, r2.w, r3
add r1.w, -r1.y, c13.y
mad r1.z, r1.y, c13, c13.w
mad r1.z, r1, r1.y, c14.x
add r2.y, -r0.w, c13
mad r2.x, r0.w, c13.z, c13.w
mad r2.x, r0.w, r2, c14
mad r0.w, r0, r2.x, c14.y
cmp r1.x, v6, r1, -r1
mul r1.x, r1, c17
rsq r1.w, r1.w
rsq r2.y, r2.y
rcp r2.y, r2.y
add_pp r0.xyz, r0, c18.x
mul r2.y, r0.w, r2
cmp r2.x, v6.z, c13, c13.y
add r5.x, r1, c17.y
mad r1.y, r1.z, r1, c14
rcp r1.w, r1.w
mul r1.z, r1.y, r1.w
cmp r1.y, v6, c13.x, c13
mul r1.w, r1.y, r1.z
mad r0.w, -r1, c14.z, r1.z
mul r2.z, r2.x, r2.y
mad r0.w, r1.y, c14, r0
mad r1.z, -r2, c14, r2.y
mad r1.y, r2.x, c14.w, r1.z
mul r1.y, r1, c15.x
mul r0.w, r0, c15.x
dsx r1.zw, v6.xyxy
dsy r2.xy, v6
mul r1.zw, r1, r1
mov r5.y, r0.w
dsx r4.w, r1.y
dsy r4.y, r1
add r1.y, r1.z, r1.w
mul r2.xy, r2, r2
add r1.z, r2.x, r2.y
rsq r1.y, r1.y
rcp r1.y, r1.y
rsq r1.z, r1.z
rcp r1.z, r1.z
mul r4.z, r1.y, c17.x
mul r4.x, r1.z, c17
texldd r1.yw, r5, s3, r4.zwzw, r4
add r1.zw, r1.xywy, c18.x
mov r1.y, r0.w
mul r1.zw, r1, c18.xyyz
add r1.xy, r1, r1.zwzw
mul r0.w, v0.x, c8.x
mad r1.y, r1, c18.w, c18.z
mul_sat r0.w, r0, c14.z
mul_pp r0.xyz, r0, c18.y
mad_pp r0.xyz, r0.w, -r0, r0
frc r0.w, r1.y
add r2.xyz, v1, r0
mad r1.y, r0.w, c19.x, c19
sincos r0.xy, r1.y
mad r1.x, r1, c19.z, c19.w
frc r0.y, r1.x
mad r1.x, r0.y, c19, c19.y
mov_pp r1.y, r0.x
sincos r0.xy, r1.x
dp4 r0.z, c1, c1
mov_pp r1.xz, r0.yyxw
rsq r0.z, r0.z
dp3_pp_sat r0.w, -r1, -c11
mul r0.xyz, r0.z, c1
dp3_sat r1.x, v5, r0
add_pp r1.y, r0.w, -r1.x
mul_sat r2.w, c12.x, c12.x
mad_pp r5.z, r2.w, r1.y, r1.x
add r0.xyz, v4, c20.xyyw
texld r0, r0, s4
dp4 r3.w, r0, c21
add r0.xyz, v4, c20.yxyw
texld r0, r0, s4
dp4 r3.z, r0, c21
add r1.xyz, v4, c20.yyxw
texld r1, r1, s4
dp4 r3.y, r1, c21
add r0.xyz, v4, c20.x
texld r0, r0, s4
dp3 r1.x, v4, v4
dp4 r3.x, r0, c21
rsq r1.x, r1.x
rcp r0.x, r1.x
mul r0.x, r0, c2.w
mad r0, -r0.x, c20.z, r3
mov r1.x, c3
cmp r1, r0, c13.y, r1.x
dp3 r0.x, v3, v3
dp4_pp r0.y, r1, c18.y
texld r0.x, r0.x, s5
mul r0.y, r0.x, r0
mul_pp r0.x, r5.z, c4.w
mul_pp r0.x, r0, r0.y
dp3 r0.y, v6, c11
add r1.x, r0.y, c22
frc r1.y, r1.x
mul_pp_sat r0.w, r0.x, c20
mov r0.x, c9
add r0.xyz, c4, r0.x
add_sat r1.x, r1, -r1.y
mad_sat r0.xyz, r0, r0.w, c0
mul_pp r0.xyz, r0, r1.x
texldd r1.xyz, r5, s0, r4.zwzw, r4
add_pp r1.xyz, r1, -r2
mul r3.xyz, r0, c10.x
mad_pp r1.xyz, r2.w, r1, r2
mad_pp r1.xyz, r1, c5, r3
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c13.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightPositionRange]
Vector 3 [_LightShadowData]
Vector 4 [_LightColor0]
Vector 5 [_Color]
Float 6 [_DetailScale]
Float 7 [_DetailVertScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_Albedo]
Vector 11 [_SunDir]
Float 12 [_PlanetOpacity]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_BumpMap] 2D
SetTexture 4 [_ShadowMapTexture] CUBE
SetTexture 5 [_LightTextureB0] 2D
SetTexture 6 [_LightTexture0] CUBE
"ps_3_0
; 163 ALU, 18 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_cube s4
dcl_2d s5
dcl_cube s6
def c13, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c14, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c15, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c16, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c17, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c18, -0.50000000, 0.25000000, 0.50000000, 0.49999991
def c19, 6.28318501, -3.14159298, 0.99999982, 0.50000000
def c20, 0.00781250, -0.00781250, 0.97000003, 4.00000000
def c21, 1.00000000, 0.00392157, 0.00001538, 0.00000001
def c22, 1.00999999, 0, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
mul r1.xy, v6.zyzw, c6.x
mul r0.xy, v6.zyzw, c7.x
abs r0.w, v6.z
abs r3.xy, v6
max r1.w, r3.x, r0
rcp r2.x, r1.w
min r1.w, r3.x, r0
mul r2.w, r1, r2.x
mul r3.z, r2.w, r2.w
mad r1.w, r3.z, c15.y, c15.z
mad r3.w, r1, r3.z, c15
mad r3.w, r3, r3.z, c16.x
mad r3.w, r3, r3.z, c16.y
mad r3.z, r3.w, r3, c16
mov r2.xyz, v6
dp3_sat r2.x, v2, -r2
add r2.x, r2, c17.z
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad_sat r1.w, r2.x, c17, c17.y
mad r2.xyz, r1.w, r1, r0
mul r1.xy, v6, c7.x
mul r0.xy, v6, c6.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r1.w, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r3.x, r1, r0
mul r2.w, r3.z, r2
mul r1.xy, v6.zxzw, c7.x
texld r1.xyz, r1, s1
add r0.x, r3, -r0.w
add r0.y, -r2.w, c16.w
cmp r2.w, -r0.x, r2, r0.y
mul r0.xy, v6.zxzw, c6.x
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r1.w, r0, r1
abs r1.y, v6
add_pp r0.xyz, r0, -r2
mad_pp r0.xyz, r3.y, r0, r2
add r3.x, -r2.w, c14.w
cmp r1.x, v6.z, r2.w, r3
add r1.w, -r1.y, c13.y
mad r1.z, r1.y, c13, c13.w
mad r1.z, r1, r1.y, c14.x
add r2.y, -r0.w, c13
mad r2.x, r0.w, c13.z, c13.w
mad r2.x, r0.w, r2, c14
mad r0.w, r0, r2.x, c14.y
cmp r1.x, v6, r1, -r1
mul r1.x, r1, c17
rsq r1.w, r1.w
rsq r2.y, r2.y
rcp r2.y, r2.y
add_pp r0.xyz, r0, c18.x
mul r2.y, r0.w, r2
cmp r2.x, v6.z, c13, c13.y
add r5.x, r1, c17.y
mad r1.y, r1.z, r1, c14
rcp r1.w, r1.w
mul r1.z, r1.y, r1.w
cmp r1.y, v6, c13.x, c13
mul r1.w, r1.y, r1.z
mad r0.w, -r1, c14.z, r1.z
mul r2.z, r2.x, r2.y
mad r0.w, r1.y, c14, r0
mad r1.z, -r2, c14, r2.y
mad r1.y, r2.x, c14.w, r1.z
mul r1.y, r1, c15.x
mul r0.w, r0, c15.x
dsx r1.zw, v6.xyxy
dsy r2.xy, v6
mul r1.zw, r1, r1
dsy r4.y, r1
dsx r4.w, r1.y
add r1.y, r1.z, r1.w
mul r2.xy, r2, r2
add r1.z, r2.x, r2.y
rsq r1.y, r1.y
rcp r1.y, r1.y
rsq r1.z, r1.z
rcp r1.z, r1.z
mul r4.z, r1.y, c17.x
mul r4.x, r1.z, c17
mov r5.y, r0.w
texldd r1.yw, r5, s3, r4.zwzw, r4
add r1.zw, r1.xywy, c18.x
mov r1.y, r0.w
mul r1.zw, r1, c18.xyyz
mul r0.w, v0.x, c8.x
add r1.xy, r1, r1.zwzw
mul_sat r0.w, r0, c14.z
mul_pp r0.xyz, r0, c18.y
mad_pp r0.xyz, r0.w, -r0, r0
add r2.xyz, v1, r0
mad r0.w, r1.y, c18, c18.z
frc r0.x, r0.w
mad r0.y, r1.x, c19.z, c19.w
mad r0.x, r0, c19, c19.y
sincos r1.xy, r0.x
frc r0.y, r0
mad r1.y, r0, c19.x, c19
sincos r0.xy, r1.y
mov_pp r1.y, r1.x
mov_pp r1.xz, r0.yyxw
dp4 r0.z, c1, c1
dp3_pp_sat r1.w, -r1, -c11
rsq r0.x, r0.z
mul r1.xyz, r0.x, c1
dp3_sat r2.w, v5, r1
add r0.xyz, v4, c20.xyyw
texld r0, r0, s4
dp4 r3.w, r0, c21
add r0.xyz, v4, c20.yxyw
texld r0, r0, s4
dp4 r3.z, r0, c21
add r0.xyz, v4, c20.x
texld r0, r0, s4
dp4 r3.x, r0, c21
add_pp r5.z, r1.w, -r2.w
add r1.xyz, v4, c20.yyxw
texld r1, r1, s4
dp4 r3.y, r1, c21
dp3 r1.x, v4, v4
rsq r1.x, r1.x
rcp r0.x, r1.x
mul r0.x, r0, c2.w
mad r0, -r0.x, c20.z, r3
mov r1.x, c3
cmp r0, r0, c13.y, r1.x
dp4_pp r0.y, r0, c18.y
mul_sat r1.x, c12, c12
texldd r3.xyz, r5, s0, r4.zwzw, r4
dp3 r0.x, v3, v3
mad_pp r1.y, r1.x, r5.z, r2.w
texld r0.w, v3, s6
texld r0.x, r0.x, s5
mul r0.x, r0, r0.w
mul r0.y, r0.x, r0
mul_pp r0.x, r1.y, c4.w
mul_pp r0.x, r0, r0.y
dp3 r0.y, v6, c11
add r1.y, r0, c22.x
frc r1.z, r1.y
mul_pp_sat r0.w, r0.x, c20
mov r0.x, c9
add r0.xyz, c4, r0.x
add_sat r1.y, r1, -r1.z
mad_sat r0.xyz, r0, r0.w, c0
mul_pp r0.xyz, r0, r1.y
add_pp r3.xyz, r3, -r2
mul r4.xyz, r0, c10.x
mad_pp r1.xyz, r1.x, r3, r2
mad_pp r1.xyz, r1, c5, r4
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c13.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
Float 8 [_Albedo]
Vector 9 [_SunDir]
Float 10 [_PlanetOpacity]
Float 11 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_BumpMap] 2D
SetTexture 7 [_LightTexture0] 2D
"ps_3_0
; 173 ALU, 22 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_2d s7
def c12, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c13, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c14, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c15, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c16, 0.15915494, 0.50000000, 0.99000001, -0.50000000
def c17, 0.25000000, 0.50000000, 0.49999991, 0.99999982
def c18, 6.28318501, -3.14159298, -0.01000214, 4.03944778
def c19, -0.94999999, 32.00000000, 0.50000000, 4.00000000
def c20, 1.00999999, 0, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord5 v4.xyz
dcl_texcoord6 v5.xyz
mov r0.xyz, v5
dp3_sat r0.x, v2, -r0
add r0.w, r0.x, c19.x
mad_sat r1.w, r0, c19.y, c19.z
mul r0.xy, v5.zyzw, c5.x
mul r1.xy, v5.zyzw, c4.x
abs r4.zw, v5.xyxy
abs r0.w, v5.z
max r2.w, r4.z, r0
rcp r3.x, r2.w
min r2.w, r4.z, r0
mul r2.w, r2, r3.x
mul r3.x, r2.w, r2.w
mad r3.y, r3.x, c14, c14.z
mad r3.y, r3, r3.x, c14.w
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad r2.xyz, r1.w, r1, r0
mul r0.xy, v5, c4.x
mul r1.xy, v5, c5.x
mad r3.y, r3, r3.x, c15.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r1.w, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r4.z, r1, r0
mul r1.xy, v5.zxzw, c5.x
mul r0.xy, v5.zxzw, c4.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r1.w, r0, r1
add_pp r0.xyz, r0, -r2
mad_pp r2.xyz, r4.w, r0, r2
mad r1.x, r3.y, r3, c15.y
mad r1.x, r1, r3, c15.z
mul r0.y, r1.x, r2.w
add_pp r1.xyz, r2, c16.w
add r2.x, -r0.w, c12.y
mad r1.w, r0, c12.z, c12
rsq r2.x, r2.x
add r0.z, -r0.y, c15.w
add r0.x, r4.z, -r0.w
cmp r0.x, -r0, r0.y, r0.z
add r0.y, -r0.x, c13.w
cmp r0.x, v5.z, r0, r0.y
mad r1.w, r0, r1, c13.x
mul r0.z, v0.x, c6.x
cmp r0.x, v5, r0, -r0
mul r3.x, r0, c16
add r7.x, r3, c16.y
abs r0.x, v5.y
mul_sat r0.y, r0.z, c13.z
add r0.z, -r0.x, c12.y
mul_pp r1.xyz, r1, c17.x
mad_pp r1.xyz, r0.y, -r1, r1
mad r0.y, r0.x, c12.z, c12.w
mad r0.y, r0, r0.x, c13.x
rsq r0.z, r0.z
mad r0.w, r0, r1, c13.y
rcp r2.x, r2.x
mul r1.w, r0, r2.x
cmp r0.w, v5.z, c12.x, c12.y
mul r2.x, r0.w, r1.w
add r1.xyz, v1, r1
mad r0.x, r0.y, r0, c13.y
rcp r0.z, r0.z
mul r0.y, r0.x, r0.z
cmp r0.x, v5.y, c12, c12.y
mul r0.z, r0.x, r0.y
mad r0.y, -r0.z, c13.z, r0
mad r0.x, r0, c13.w, r0.y
mad r0.z, -r2.x, c13, r1.w
mul r4.x, r0, c14
mad r0.y, r0.w, c13.w, r0.z
mul r0.x, r0.y, c14
dsy r0.zw, v5.xyxy
mul r0.zw, r0, r0
mov r7.y, r4.x
dsx r6.w, r0.x
dsy r5.w, r0.x
dsx r0.xy, v5
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r0.y, r0.z, r0.w
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r6.z, r0.x, c16.x
mul r5.z, r0.y, c16.x
texldd r3.yw, r7, s6, r6.zwzw, r5.zwzw
add r3.zw, r3.xywy, c16.w
texldd r0.xyz, r7, s0, r6.zwzw, r5.zwzw
mov r3.y, r4.x
add_pp r0.xyz, r0, -r1
mul_sat r2.w, c10.x, c10.x
mad_pp r2.xyz, r2.w, r0, r1
mul r5.xy, v5.zyzw, c11.x
mul r6.xy, v5, c11.x
mul r4.xy, v5.zxzw, c11.x
texld r1, r6, s5
texld r0, r5, s5
add_pp r0, r0, -r1
mad_pp r1, r4.z, r0, r1
mul r0.xy, r3.zwzw, c17
add r3.xy, r3, r0
texld r0, r4, s5
add_pp r0, r0, -r1
mad_pp r1, r4.w, r0, r1
mad r3.y, r3, c17.z, c17
frc r0.x, r3.y
mad r0.y, r3.x, c17.w, c17
mad r0.x, r0, c18, c18.y
sincos r3.xy, r0.x
frc r0.y, r0
mad r3.y, r0, c18.x, c18
sincos r0.xy, r3.y
mov_pp r3.y, r3.x
mov_pp r3.xz, r0.yyxw
dp4 r0.z, c1, c1
rsq r0.x, r0.z
mul r0.xyz, r0.x, c1
dp3_sat r7.z, v4, r0
dp3_pp_sat r7.w, -r3, -c9
add r0.w, v1, c16.z
frc r0.x, r0.w
add_sat r3.x, r0.w, -r0
texldd r0, r7, s3, r6.zwzw, r5.zwzw
mul_pp r3.w, r0, r3.x
mov_pp r3.xyz, r0
mul_pp r1, r3, r1
add_pp r1.xyz, r1, -r2
add_pp r8.x, r7.w, -r7.z
mad_pp r0.y, r2.w, r8.x, r7.z
dp3 r0.x, v3, v3
dp3 r0.w, v5, c9
add r0.w, r0, c20.x
mad_pp r1.xyz, r1.w, r1, r2
frc r2.w, r0
texld r0.x, r0.x, s7
mul_pp r0.y, r0, c2.w
mul_pp r0.y, r0.x, r0
mul_pp_sat r0.z, r0.y, c19.w
mov r0.y, c7.x
add r7.xyz, c2, r0.y
add_sat r0.y, r0.w, -r2.w
mad_sat r7.xyz, r7, r0.z, c0
mul_pp r7.xyz, r7, r0.y
texld r2, r5, s4
mul r0.yzw, r7.xxyz, c8.x
mad_pp r0.yzw, r1.xxyz, c3.xxyz, r0
texld r1, r6, s4
add_pp r2, r2, -r1
mad_pp r1, r4.z, r2, r1
texld r2, r4, s4
add_pp r2, r2, -r1
mad_pp r1, r4.w, r2, r1
mul_pp r1, r3, r1
add_pp r5.x, r7.w, c18.z
mul_pp r4.x, r5, c2.w
mul_pp r0.x, r4, r0
mul_pp_sat r0.x, r0, c18.w
add_pp r0.x, -r0, c12.y
mad_pp r1.xyz, -r0.yzww, r7, r1
mul_pp r2.xyz, r0.yzww, r7
mul_pp r0.x, r1.w, r0
mad_pp oC0.xyz, r0.x, r1, r2
mov_pp oC0.w, c12.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
Float 8 [_Albedo]
Vector 9 [_SunDir]
Float 10 [_PlanetOpacity]
Float 11 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_BumpMap] 2D
"ps_3_0
; 169 ALU, 21 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
def c12, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c13, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c14, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c15, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c16, 0.15915494, 0.50000000, 0.99000001, -0.50000000
def c17, 0.25000000, 0.50000000, 0.49999991, 0.99999982
def c18, 6.28318501, -3.14159298, -0.01000214, 4.03944778
def c19, -0.94999999, 32.00000000, 0.50000000, 4.00000000
def c20, 1.00999999, 0, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1
dcl_texcoord2 v2.xyz
dcl_texcoord5 v3.xyz
dcl_texcoord6 v4.xyz
mov r0.xyz, v4
dp3_sat r0.x, v2, -r0
add r0.w, r0.x, c19.x
mad_sat r1.w, r0, c19.y, c19.z
mul r0.xy, v4.zyzw, c5.x
mul r1.xy, v4.zyzw, c4.x
abs r6.zw, v4.xyxy
abs r0.w, v4.z
max r2.w, r6.z, r0
rcp r3.x, r2.w
min r2.w, r6.z, r0
mul r2.w, r2, r3.x
mul r3.x, r2.w, r2.w
mad r3.y, r3.x, c14, c14.z
mad r3.y, r3, r3.x, c14.w
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad r2.xyz, r1.w, r1, r0
mul r0.xy, v4, c4.x
mul r1.xy, v4, c5.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r1.w, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r6.z, r1, r0
mul r1.xy, v4.zxzw, c5.x
mul r0.xy, v4.zxzw, c4.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r1.w, r0, r1
add_pp r0.xyz, r0, -r2
mad_pp r2.xyz, r6.w, r0, r2
mad r3.y, r3, r3.x, c15.x
mad r1.x, r3.y, r3, c15.y
mad r1.x, r1, r3, c15.z
mul r0.y, r1.x, r2.w
add_pp r1.xyz, r2, c16.w
add r0.z, -r0.y, c15.w
add r0.x, r6.z, -r0.w
cmp r0.x, -r0, r0.y, r0.z
add r0.y, -r0.x, c13.w
cmp r0.x, v4.z, r0, r0.y
mul r0.z, v0.x, c6.x
cmp r0.x, v4, r0, -r0
mul r4.x, r0, c16
add r5.z, r4.x, c16.y
abs r0.x, v4.y
mul_sat r0.y, r0.z, c13.z
add r0.z, -r0.x, c12.y
mul_pp r1.xyz, r1, c17.x
mad_pp r1.xyz, r0.y, -r1, r1
add r2.xyz, v1, r1
mad r0.y, r0.x, c12.z, c12.w
mad r0.y, r0, r0.x, c13.x
add r1.y, -r0.w, c12
mad r1.x, r0.w, c12.z, c12.w
mad r1.x, r0.w, r1, c13
rsq r0.z, r0.z
rsq r1.y, r1.y
mad r0.w, r0, r1.x, c13.y
rcp r1.y, r1.y
mul r1.x, r0.w, r1.y
cmp r0.w, v4.z, c12.x, c12.y
mad r0.x, r0.y, r0, c13.y
rcp r0.z, r0.z
mul r0.y, r0.x, r0.z
cmp r0.x, v4.y, c12, c12.y
mul r0.z, r0.x, r0.y
mad r0.y, -r0.z, c13.z, r0
mad r0.x, r0, c13.w, r0.y
mul r6.x, r0, c14
mul r1.y, r0.w, r1.x
mad r0.z, -r1.y, c13, r1.x
mad r0.y, r0.w, c13.w, r0.z
mul r0.x, r0.y, c14
dsy r1.xy, v4
dsx r5.y, r0.x
dsy r0.w, r0.x
dsx r0.xy, v4
mul r0.xy, r0, r0
add r0.x, r0, r0.y
mul r1.xy, r1, r1
add r0.y, r1.x, r1
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r5.x, r0, c16
mul r0.z, r0.y, c16.x
mov r5.w, r6.x
texldd r4.yw, r5.zwzw, s6, r5, r0.zwzw
texldd r1.xyz, r5.zwzw, s0, r5, r0.zwzw
add r4.zw, r4.xywy, c16.w
mov r4.y, r6.x
add_pp r1.xyz, r1, -r2
mul_sat r3.w, c10.x, c10.x
mad_pp r3.xyz, r3.w, r1, r2
mul r7.xy, v4, c11.x
mul r0.xy, v4.zyzw, c11.x
texld r2, r7, s5
texld r1, r0, s5
add_pp r1, r1, -r2
mad_pp r2, r6.z, r1, r2
mul r1.xy, r4.zwzw, c17
add r4.xy, r4, r1
mul r6.xy, v4.zxzw, c11.x
texld r1, r6, s5
add_pp r1, r1, -r2
mad_pp r1, r6.w, r1, r2
mad r4.y, r4, c17.z, c17
frc r2.x, r4.y
mad r2.y, r4.x, c17.w, c17
mad r2.x, r2, c18, c18.y
sincos r4.xy, r2.x
frc r2.y, r2
mad r4.y, r2, c18.x, c18
sincos r2.xy, r4.y
mov_pp r4.y, r4.x
mov_pp r4.xz, r2.yyxw
dp4_pp r2.z, c1, c1
rsq_pp r2.x, r2.z
dp3_pp_sat r4.w, -r4, -c9
mul_pp r2.xyz, r2.x, c1
dp3_sat r4.x, v3, r2
add r2.w, v1, c16.z
frc r2.x, r2.w
add_sat r4.z, r2.w, -r2.x
texldd r2, r5.zwzw, s3, r5, r0.zwzw
mul_pp r2.w, r2, r4.z
mul_pp r1, r2, r1
add_pp r1.xyz, r1, -r3
add_pp r4.y, r4.w, -r4.x
mad_pp r0.z, r3.w, r4.y, r4.x
dp3 r0.w, v4, c9
add r3.w, r0, c20.x
mov r0.w, c7.x
mad_pp r3.xyz, r1.w, r1, r3
mul_pp r0.z, r0, c2.w
frc r5.x, r3.w
add r4.xyz, c2, r0.w
add_sat r0.w, r3, -r5.x
mul_pp_sat r0.z, r0, c19.w
mad_sat r4.xyz, r4, r0.z, c0
mul_pp r4.xyz, r4, r0.w
mul r5.xyz, r4, c8.x
texld r1, r7, s4
texld r0, r0, s4
add_pp r0, r0, -r1
mad_pp r0, r6.z, r0, r1
texld r1, r6, s4
add_pp r1, r1, -r0
mad_pp r0, r6.w, r1, r0
add_pp r3.w, r4, c18.z
mul_pp r1.x, r3.w, c2.w
mul_pp_sat r1.x, r1, c18.w
mul_pp r0, r2, r0
mad_pp r3.xyz, r3, c3, r5
add_pp r1.x, -r1, c12.y
mad_pp r0.xyz, -r3, r4, r0
mul_pp r2.xyz, r3, r4
mul_pp r0.w, r0, r1.x
mad_pp oC0.xyz, r0.w, r0, r2
mov_pp oC0.w, c12.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
Float 8 [_Albedo]
Vector 9 [_SunDir]
Float 10 [_PlanetOpacity]
Float 11 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_BumpMap] 2D
SetTexture 7 [_LightTexture0] 2D
SetTexture 8 [_LightTextureB0] 2D
"ps_3_0
; 176 ALU, 23 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_2d s7
dcl_2d s8
def c12, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c13, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c14, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c15, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c16, 0.15915494, 0.50000000, 0.99000001, -0.50000000
def c17, 0.25000000, 0.50000000, 0.49999991, 0.99999982
def c18, 6.28318501, -3.14159298, -0.01000214, 4.03944778
def c19, -0.94999999, 32.00000000, 0.50000000, 4.00000000
def c20, 1.00999999, 0, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3
dcl_texcoord5 v4.xyz
dcl_texcoord6 v5.xyz
mov r0.xyz, v5
dp3_sat r0.x, v2, -r0
add r0.w, r0.x, c19.x
mul r1.xy, v5.zyzw, c5.x
mul r0.xy, v5.zyzw, c4.x
texld r0.xyz, r0, s2
texld r1.xyz, r1, s1
add r2.xyz, r0, -r1
mad_sat r0.y, r0.w, c19, c19.z
mad r3.xyz, r0.y, r2, r1
mul r2.xy, v5, c4.x
mul r1.xy, v5, c5.x
abs r0.zw, v5.xyxy
abs r0.x, v5.z
max r1.w, r0.z, r0.x
min r2.w, r0.z, r0.x
rcp r1.w, r1.w
mul r1.w, r2, r1
mul r2.w, r1, r1
mad r3.w, r2, c14.y, c14.z
mad r3.w, r3, r2, c14
mad r3.w, r3, r2, c15.x
texld r1.xyz, r1, s1
texld r2.xyz, r2, s2
add r2.xyz, r2, -r1
mad r1.xyz, r0.y, r2, r1
add_pp r2.xyz, r3, -r1
mad_pp r3.xyz, r0.z, r2, r1
mul r1.xy, v5.zxzw, c5.x
mul r2.xy, v5.zxzw, c4.x
texld r1.xyz, r1, s1
texld r2.xyz, r2, s2
add r2.xyz, r2, -r1
mad r1.xyz, r0.y, r2, r1
mad r0.y, r3.w, r2.w, c15
mad r0.y, r0, r2.w, c15.z
mul r1.w, r0.y, r1
add_pp r1.xyz, r1, -r3
mad_pp r1.xyz, r0.w, r1, r3
add_pp r1.xyz, r1, c16.w
add r0.y, -r1.w, c15.w
add r2.x, r0.z, -r0
cmp r2.x, -r2, r1.w, r0.y
add r1.w, -r2.x, c13
cmp r1.w, v5.z, r2.x, r1
mul r0.y, v0.x, c6.x
cmp r2.x, v5.y, c12, c12.y
mul_sat r3.w, c10.x, c10.x
mul_sat r0.y, r0, c13.z
mul_pp r1.xyz, r1, c17.x
mad_pp r1.xyz, r0.y, -r1, r1
add r3.xyz, v1, r1
abs r1.y, v5
cmp r0.y, v5.x, r1.w, -r1.w
mul r6.x, r0.y, c16
add r0.y, -r1, c12
mad r1.x, r1.y, c12.z, c12.w
mad r1.x, r1, r1.y, c13
rsq r0.y, r0.y
add r1.z, r6.x, c16.y
mad r1.x, r1, r1.y, c13.y
rcp r0.y, r0.y
mul r1.w, r1.x, r0.y
mul r1.y, r2.x, r1.w
add r0.y, -r0.x, c12
mad r1.x, r0, c12.z, c12.w
mad r1.x, r0, r1, c13
mad r0.x, r0, r1, c13.y
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r0.y, r0.x, r0
cmp r1.x, v5.z, c12, c12.y
mul r0.x, r1, r0.y
mad r0.x, -r0, c13.z, r0.y
mad r1.y, -r1, c13.z, r1.w
mad r0.y, r2.x, c13.w, r1
mad r0.x, r1, c13.w, r0
mul r0.x, r0, c14
mul r6.y, r0, c14.x
dsy r1.xy, v5
mov r1.w, r6.y
dsx r2.y, r0.x
dsy r2.w, r0.x
dsx r0.xy, v5
mul r0.xy, r0, r0
add r0.y, r0.x, r0
mul r1.xy, r1, r1
add r0.x, r1, r1.y
rsq r0.y, r0.y
rcp r0.y, r0.y
rsq r0.x, r0.x
rcp r0.x, r0.x
mul r2.x, r0.y, c16
mul r2.z, r0.x, c16.x
texldd r7.yw, r1.zwzw, s6, r2, r2.zwzw
texldd r4.xyz, r1.zwzw, s0, r2, r2.zwzw
texldd r2, r1.zwzw, s3, r2, r2.zwzw
add_pp r4.xyz, r4, -r3
mul r0.xy, v5.zyzw, c11.x
mad_pp r3.xyz, r3.w, r4, r3
mul r1.xy, v5, c11.x
texld r4, r1, s5
texld r5, r0, s5
add_pp r5, r5, -r4
mad_pp r5, r0.z, r5, r4
add r6.zw, r7.xywy, c16.w
mul r4.zw, r6, c17.xyxy
add r4.zw, r6.xyxy, r4
mul r4.xy, v5.zxzw, c11.x
texld r6, r4, s5
add_pp r6, r6, -r5
mad_pp r5, r0.w, r6, r5
mad r4.w, r4, c17.z, c17.y
frc r6.x, r4.w
mad r4.w, r4.z, c17, c17.y
mad r4.z, r6.x, c18.x, c18.y
sincos r6.xy, r4.z
frc r4.w, r4
mad r4.z, r4.w, c18.x, c18.y
sincos r7.xy, r4.z
dp4 r4.z, c1, c1
mov_pp r6.y, r6.x
mov_pp r6.xz, r7.yyxw
rsq r4.w, r4.z
dp3_pp_sat r4.z, -r6, -c9
mul r6.xyz, r4.w, c1
dp3_sat r7.x, v4, r6
add_pp r4.w, r4.z, -r7.x
mad_pp r1.z, r3.w, r4.w, r7.x
add r6.w, v1, c16.z
frc r6.x, r6.w
add_sat r6.x, r6.w, -r6
mul_pp r2.w, r2, r6.x
mul_pp r6, r2, r5
rcp r1.w, v3.w
mad r7.xy, v3, r1.w, c16.y
texld r1.w, r7, s7
cmp r3.w, -v3.z, c12.x, c12.y
add_pp r7.xyz, r6, -r3
dp3 r5.x, v3, v3
mul_pp r1.w, r3, r1
texld r5.x, r5.x, s8
mul_pp r3.w, r1, r5.x
mul_pp r1.z, r1, c2.w
mul_pp r1.w, r3, r1.z
dp3 r1.z, v5, c9
add r4.w, r1.z, c20.x
frc r1.z, r4.w
mov r5.x, c7
add_sat r1.z, r4.w, -r1
mul_pp_sat r1.w, r1, c19
add r5.xyz, c2, r5.x
mad_sat r5.xyz, r5, r1.w, c0
mul_pp r5.xyz, r5, r1.z
mul r6.xyz, r5, c8.x
mad_pp r3.xyz, r6.w, r7, r3
mad_pp r3.xyz, r3, c3, r6
texld r6, r0, s4
add_pp r0.x, r4.z, c18.z
texld r1, r1, s4
add_pp r6, r6, -r1
mad_pp r1, r0.z, r6, r1
texld r4, r4, s4
add_pp r4, r4, -r1
mul_pp r5.w, r0.x, c2
mad_pp r0, r0.w, r4, r1
mul_pp r0, r2, r0
mul_pp r1.x, r5.w, r3.w
mul_pp_sat r1.x, r1, c18.w
add_pp r1.w, -r1.x, c12.y
mad_pp r0.xyz, -r3, r5, r0
mul_pp r1.xyz, r3, r5
mul_pp r0.w, r0, r1
mad_pp oC0.xyz, r0.w, r0, r1
mov_pp oC0.w, c12.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
Float 8 [_Albedo]
Vector 9 [_SunDir]
Float 10 [_PlanetOpacity]
Float 11 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_BumpMap] 2D
SetTexture 7 [_LightTextureB0] 2D
SetTexture 8 [_LightTexture0] CUBE
"ps_3_0
; 173 ALU, 23 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_2d s7
dcl_cube s8
def c12, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c13, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c14, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c15, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c16, 0.15915494, 0.50000000, 0.99000001, -0.50000000
def c17, 0.25000000, 0.50000000, 0.49999991, 0.99999982
def c18, 6.28318501, -3.14159298, -0.01000214, 4.03944778
def c19, -0.94999999, 32.00000000, 0.50000000, 4.00000000
def c20, 1.00999999, 0, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord5 v4.xyz
dcl_texcoord6 v5.xyz
mov r0.xyz, v5
dp3_sat r0.x, v2, -r0
add r0.w, r0.x, c19.x
mad_sat r1.w, r0, c19.y, c19.z
mul r0.xy, v5.zyzw, c5.x
mul r1.xy, v5.zyzw, c4.x
abs r3.zw, v5.xyxy
abs r0.w, v5.z
max r2.w, r3.z, r0
rcp r3.x, r2.w
min r2.w, r3.z, r0
mul r2.w, r2, r3.x
mul r3.x, r2.w, r2.w
mad r3.y, r3.x, c14, c14.z
mad r3.y, r3, r3.x, c14.w
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad r2.xyz, r1.w, r1, r0
mul r0.xy, v5, c4.x
mul r1.xy, v5, c5.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r1.w, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r3.z, r1, r0
mul r1.xy, v5.zxzw, c5.x
mul r0.xy, v5.zxzw, c4.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r1.w, r0, r1
add_pp r0.xyz, r0, -r2
mad_pp r2.xyz, r3.w, r0, r2
mad r3.y, r3, r3.x, c15.x
mad r1.x, r3.y, r3, c15.y
mad r1.x, r1, r3, c15.z
mul r0.y, r1.x, r2.w
add_pp r1.xyz, r2, c16.w
add r2.x, -r0.w, c12.y
mad r1.w, r0, c12.z, c12
rsq r2.x, r2.x
add r0.z, -r0.y, c15.w
add r0.x, r3.z, -r0.w
cmp r0.x, -r0, r0.y, r0.z
add r0.y, -r0.x, c13.w
cmp r0.x, v5.z, r0, r0.y
mad r1.w, r0, r1, c13.x
mul r0.z, v0.x, c6.x
cmp r0.x, v5, r0, -r0
mul r6.z, r0.x, c16.x
add r6.x, r6.z, c16.y
abs r0.x, v5.y
mul_sat r0.y, r0.z, c13.z
add r0.z, -r0.x, c12.y
mul_pp r1.xyz, r1, c17.x
mad_pp r1.xyz, r0.y, -r1, r1
mad r0.y, r0.x, c12.z, c12.w
mad r0.y, r0, r0.x, c13.x
rsq r0.z, r0.z
mad r0.w, r0, r1, c13.y
rcp r2.x, r2.x
mul r1.w, r0, r2.x
cmp r0.w, v5.z, c12.x, c12.y
mul r2.x, r0.w, r1.w
add r1.xyz, v1, r1
mad r0.x, r0.y, r0, c13.y
rcp r0.z, r0.z
mul r0.y, r0.x, r0.z
cmp r0.x, v5.y, c12, c12.y
mul r0.z, r0.x, r0.y
mad r0.y, -r0.z, c13.z, r0
mad r0.x, r0, c13.w, r0.y
mad r0.z, -r2.x, c13, r1.w
mad r0.y, r0.w, c13.w, r0.z
mul r6.w, r0.x, c14.x
mul r0.x, r0.y, c14
dsy r0.zw, v5.xyxy
mul r0.zw, r0, r0
mov r6.y, r6.w
dsy r4.w, r0.x
dsx r5.w, r0.x
dsx r0.xy, v5
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r0.y, r0.z, r0.w
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r4.z, r0.y, c16.x
mul r5.z, r0.x, c16.x
texldd r7.yw, r6, s6, r5.zwzw, r4.zwzw
texldd r0.xyz, r6, s0, r5.zwzw, r4.zwzw
add_pp r0.xyz, r0, -r1
mul_sat r2.w, c10.x, c10.x
mad_pp r2.xyz, r2.w, r0, r1
mul r4.xy, v5.zyzw, c11.x
mul r5.xy, v5, c11.x
add r3.xy, r7.wyzw, c16.w
texld r1, r5, s5
texld r0, r4, s5
add_pp r0, r0, -r1
mad_pp r1, r3.z, r0, r1
mul r0.xy, r3, c17
add r6.zw, r6, r0.xyxy
mul r3.xy, v5.zxzw, c11.x
texld r0, r3, s5
add_pp r0, r0, -r1
mad r6.w, r6, c17.z, c17.y
frc r6.w, r6
mad_pp r1, r3.w, r0, r1
mad r6.w, r6, c18.x, c18.y
sincos r0.xy, r6.w
mad r6.z, r6, c17.w, c17.y
frc r0.y, r6.z
mad r6.z, r0.y, c18.x, c18.y
mov_pp r7.y, r0.x
sincos r0.xy, r6.z
dp4 r0.z, c1, c1
mov_pp r7.xz, r0.yyxw
rsq r0.z, r0.z
mul r0.xyz, r0.z, c1
dp3_sat r0.z, v4, r0
dp3_pp_sat r7.w, -r7, -c9
add r0.x, v1.w, c16.z
add_pp r0.w, r7, -r0.z
frc r0.y, r0.x
mad_pp r2.w, r2, r0, r0.z
add_sat r6.z, r0.x, -r0.y
texldd r0, r6, s3, r5.zwzw, r4.zwzw
mul_pp r6.w, r0, r6.z
mov_pp r6.xyz, r0
mul_pp r1, r6, r1
add_pp r1.xyz, r1, -r2
dp3 r0.x, v3, v3
mad_pp r1.xyz, r1.w, r1, r2
mul_pp r0.y, r2.w, c2.w
texld r0.x, r0.x, s7
texld r0.w, v3, s8
mul r0.w, r0.x, r0
mul_pp r0.x, r0.w, r0.y
dp3 r0.y, v5, c9
add r2.w, r0.y, c20.x
mul_pp_sat r4.z, r0.x, c19.w
mov r0.x, c7
frc r4.w, r2
add r0.xyz, c2, r0.x
add_sat r2.w, r2, -r4
mad_sat r0.xyz, r0, r4.z, c0
mul_pp r0.xyz, r0, r2.w
mul r7.xyz, r0, c8.x
mad_pp r7.xyz, r1, c3, r7
texld r2, r4, s4
texld r1, r5, s4
add_pp r2, r2, -r1
mad_pp r1, r3.z, r2, r1
texld r2, r3, s4
add_pp r2, r2, -r1
mad_pp r1, r3.w, r2, r1
mul_pp r1, r6, r1
add_pp r4.x, r7.w, c18.z
mul_pp r3.x, r4, c2.w
mul_pp r0.w, r3.x, r0
mul_pp_sat r0.w, r0, c18
mad_pp r1.xyz, -r7, r0, r1
mul_pp r2.xyz, r7, r0
add_pp r0.w, -r0, c12.y
mul_pp r0.x, r1.w, r0.w
mad_pp oC0.xyz, r0.x, r1, r2
mov_pp oC0.w, c12.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
Float 8 [_Albedo]
Vector 9 [_SunDir]
Float 10 [_PlanetOpacity]
Float 11 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_BumpMap] 2D
SetTexture 7 [_LightTexture0] 2D
"ps_3_0
; 170 ALU, 22 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_2d s7
def c12, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c13, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c14, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c15, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c16, 0.15915494, 0.50000000, 0.99000001, -0.50000000
def c17, 0.25000000, 0.50000000, 0.49999991, 0.99999982
def c18, 6.28318501, -3.14159298, -0.01000214, 4.03944778
def c19, -0.94999999, 32.00000000, 0.50000000, 4.00000000
def c20, 1.00999999, 0, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xy
dcl_texcoord5 v4.xyz
dcl_texcoord6 v5.xyz
mov r0.xyz, v5
dp3_sat r0.x, v2, -r0
add r0.w, r0.x, c19.x
mul r1.xy, v5.zyzw, c5.x
mul r0.xy, v5.zyzw, c4.x
texld r0.xyz, r0, s2
texld r1.xyz, r1, s1
add r2.xyz, r0, -r1
mad_sat r0.y, r0.w, c19, c19.z
mad r3.xyz, r0.y, r2, r1
mul r2.xy, v5, c4.x
mul r1.xy, v5, c5.x
abs r0.zw, v5.xyxy
abs r0.x, v5.z
max r1.w, r0.z, r0.x
min r2.w, r0.z, r0.x
rcp r1.w, r1.w
mul r1.w, r2, r1
mul r2.w, r1, r1
mad r3.w, r2, c14.y, c14.z
mad r3.w, r3, r2, c14
mad r3.w, r3, r2, c15.x
texld r1.xyz, r1, s1
texld r2.xyz, r2, s2
add r2.xyz, r2, -r1
mad r1.xyz, r0.y, r2, r1
add_pp r2.xyz, r3, -r1
mad_pp r3.xyz, r0.z, r2, r1
mul r1.xy, v5.zxzw, c5.x
mul r2.xy, v5.zxzw, c4.x
texld r1.xyz, r1, s1
texld r2.xyz, r2, s2
add r2.xyz, r2, -r1
mad r1.xyz, r0.y, r2, r1
mad r0.y, r3.w, r2.w, c15
mad r0.y, r0, r2.w, c15.z
mul r1.w, r0.y, r1
add_pp r1.xyz, r1, -r3
mad_pp r1.xyz, r0.w, r1, r3
add_pp r1.xyz, r1, c16.w
add r0.y, -r1.w, c15.w
add r2.x, r0.z, -r0
cmp r2.x, -r2, r1.w, r0.y
add r1.w, -r2.x, c13
cmp r1.w, v5.z, r2.x, r1
mul r0.y, v0.x, c6.x
cmp r2.x, v5.y, c12, c12.y
mul_sat r0.y, r0, c13.z
mul_pp r1.xyz, r1, c17.x
mad_pp r1.xyz, r0.y, -r1, r1
add r3.xyz, v1, r1
abs r1.y, v5
cmp r0.y, v5.x, r1.w, -r1.w
mul r6.x, r0.y, c16
add r0.y, -r1, c12
mad r1.x, r1.y, c12.z, c12.w
mad r1.x, r1, r1.y, c13
rsq r0.y, r0.y
add r1.z, r6.x, c16.y
mad r1.x, r1, r1.y, c13.y
rcp r0.y, r0.y
mul r1.w, r1.x, r0.y
mul r1.y, r2.x, r1.w
add r0.y, -r0.x, c12
mad r1.x, r0, c12.z, c12.w
mad r1.x, r0, r1, c13
mad r0.x, r0, r1, c13.y
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r0.y, r0.x, r0
cmp r1.x, v5.z, c12, c12.y
mul r0.x, r1, r0.y
mad r0.x, -r0, c13.z, r0.y
mad r1.y, -r1, c13.z, r1.w
mad r0.y, r2.x, c13.w, r1
mad r0.x, r1, c13.w, r0
mul r0.x, r0, c14
mul r6.y, r0, c14.x
dsy r1.xy, v5
mov r1.w, r6.y
dsx r2.y, r0.x
dsy r2.w, r0.x
dsx r0.xy, v5
mul r0.xy, r0, r0
add r0.y, r0.x, r0
mul r1.xy, r1, r1
add r0.x, r1, r1.y
rsq r0.y, r0.y
rcp r0.y, r0.y
rsq r0.x, r0.x
rcp r0.x, r0.x
mul r2.x, r0.y, c16
mul r2.z, r0.x, c16.x
texldd r7.yw, r1.zwzw, s6, r2, r2.zwzw
texldd r4.xyz, r1.zwzw, s0, r2, r2.zwzw
mul r0.xy, v5.zyzw, c11.x
texldd r2, r1.zwzw, s3, r2, r2.zwzw
add_pp r4.xyz, r4, -r3
mul_sat r3.w, c10.x, c10.x
mad_pp r3.xyz, r3.w, r4, r3
mul r1.xy, v5, c11.x
texld r4, r1, s5
texld r5, r0, s5
add_pp r5, r5, -r4
mad_pp r5, r0.z, r5, r4
add r6.zw, r7.xywy, c16.w
mul r4.xy, r6.zwzw, c17
add r4.zw, r6.xyxy, r4.xyxy
mul r4.xy, v5.zxzw, c11.x
texld r6, r4, s5
add_pp r6, r6, -r5
mad r4.w, r4, c17.z, c17.y
frc r4.w, r4
mad r4.z, r4, c17.w, c17.y
frc r4.z, r4
mad_pp r5, r0.w, r6, r5
mad r4.w, r4, c18.x, c18.y
sincos r6.xy, r4.w
mov_pp r7.y, r6.x
mad r4.z, r4, c18.x, c18.y
sincos r6.xy, r4.z
dp4_pp r4.z, c1, c1
mov_pp r7.xz, r6.yyxw
rsq_pp r4.z, r4.z
mul_pp r6.xyz, r4.z, c1
dp3_sat r6.x, v4, r6
dp3_pp_sat r4.z, -r7, -c9
add_pp r4.w, r4.z, -r6.x
mad_pp r3.w, r3, r4, r6.x
add r6.z, v1.w, c16
mul_pp r1.z, r3.w, c2.w
frc r6.y, r6.z
add_sat r4.w, r6.z, -r6.y
mul_pp r2.w, r2, r4
mul_pp r6, r2, r5
texld r3.w, v3, s7
mul_pp r1.w, r3, r1.z
dp3 r1.z, v5, c9
add r4.w, r1.z, c20.x
frc r1.z, r4.w
add_pp r7.xyz, r6, -r3
mov r5.x, c7
add_sat r1.z, r4.w, -r1
mul_pp_sat r1.w, r1, c19
add r5.xyz, c2, r5.x
mad_sat r5.xyz, r5, r1.w, c0
mul_pp r5.xyz, r5, r1.z
mul r6.xyz, r5, c8.x
mad_pp r3.xyz, r6.w, r7, r3
mad_pp r3.xyz, r3, c3, r6
texld r6, r0, s4
add_pp r0.x, r4.z, c18.z
texld r1, r1, s4
add_pp r6, r6, -r1
mad_pp r1, r0.z, r6, r1
texld r4, r4, s4
add_pp r4, r4, -r1
mul_pp r5.w, r0.x, c2
mad_pp r0, r0.w, r4, r1
mul_pp r0, r2, r0
mul_pp r1.x, r5.w, r3.w
mul_pp_sat r1.x, r1, c18.w
add_pp r1.w, -r1.x, c12.y
mad_pp r0.xyz, -r3, r5, r0
mul_pp r1.xyz, r3, r5
mul_pp r0.w, r0, r1
mad_pp oC0.xyz, r0.w, r0, r1
mov_pp oC0.w, c12.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightShadowData]
Vector 3 [_LightColor0]
Vector 4 [_Color]
Float 5 [_DetailScale]
Float 6 [_DetailVertScale]
Float 7 [_DetailDist]
Float 8 [_MinLight]
Float 9 [_Albedo]
Vector 10 [_SunDir]
Float 11 [_PlanetOpacity]
Float 12 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_BumpMap] 2D
SetTexture 7 [_LightTexture0] 2D
SetTexture 8 [_LightTextureB0] 2D
SetTexture 9 [_ShadowMapTexture] 2D
"ps_3_0
; 182 ALU, 24 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_2d s7
dcl_2d s8
dcl_2d s9
def c13, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c14, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c15, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c16, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c17, 0.15915494, 0.50000000, 0.99000001, -0.50000000
def c18, 0.25000000, 0.50000000, 0.49999991, 0.99999982
def c19, 6.28318501, -3.14159298, -0.01000214, 4.03944778
def c20, -0.94999999, 32.00000000, 0.50000000, 4.00000000
def c21, 1.00999999, 0, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3
dcl_texcoord4 v4
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
mov r0.xyz, v6
dp3_sat r0.x, v2, -r0
add r0.w, r0.x, c20.x
mad_sat r1.w, r0, c20.y, c20.z
mul r0.xy, v6.zyzw, c6.x
mul r1.xy, v6.zyzw, c5.x
abs r3.zw, v6.xyxy
abs r0.w, v6.z
max r2.w, r3.z, r0
rcp r3.x, r2.w
min r2.w, r3.z, r0
mul r2.w, r2, r3.x
mul r3.x, r2.w, r2.w
mad r3.y, r3.x, c15, c15.z
mad r3.y, r3, r3.x, c15.w
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad r2.xyz, r1.w, r1, r0
mul r0.xy, v6, c5.x
mul r1.xy, v6, c6.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r1.w, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r3.z, r1, r0
mul r1.xy, v6.zxzw, c6.x
mul r0.xy, v6.zxzw, c5.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r1.w, r0, r1
add_pp r0.xyz, r0, -r2
mad_pp r2.xyz, r3.w, r0, r2
mad r3.y, r3, r3.x, c16.x
mad r1.x, r3.y, r3, c16.y
mad r1.x, r1, r3, c16.z
mul r0.y, r1.x, r2.w
add_pp r1.xyz, r2, c17.w
add r2.x, -r0.w, c13.y
mad r1.w, r0, c13.z, c13
rsq r2.x, r2.x
add r0.z, -r0.y, c16.w
add r0.x, r3.z, -r0.w
cmp r0.x, -r0, r0.y, r0.z
add r0.y, -r0.x, c14.w
cmp r0.x, v6.z, r0, r0.y
mad r1.w, r0, r1, c14.x
mul r0.z, v0.x, c7.x
cmp r0.x, v6, r0, -r0
mul r6.z, r0.x, c17.x
add r6.x, r6.z, c17.y
abs r0.x, v6.y
mul_sat r0.y, r0.z, c14.z
add r0.z, -r0.x, c13.y
mul_pp r1.xyz, r1, c18.x
mad_pp r1.xyz, r0.y, -r1, r1
mad r0.y, r0.x, c13.z, c13.w
mad r0.y, r0, r0.x, c14.x
rsq r0.z, r0.z
mad r0.w, r0, r1, c14.y
rcp r2.x, r2.x
mul r1.w, r0, r2.x
cmp r0.w, v6.z, c13.x, c13.y
mul r2.x, r0.w, r1.w
mad r0.x, r0.y, r0, c14.y
rcp r0.z, r0.z
mul r0.y, r0.x, r0.z
cmp r0.x, v6.y, c13, c13.y
mul r0.z, r0.x, r0.y
mad r0.y, -r0.z, c14.z, r0
mad r0.z, -r2.x, c14, r1.w
mad r0.x, r0, c14.w, r0.y
mad r0.y, r0.w, c14.w, r0.z
mul r6.w, r0.x, c15.x
mul r0.x, r0.y, c15
mul r5.xy, v6, c12.x
dsy r0.zw, v6.xyxy
mul r0.zw, r0, r0
mov r6.y, r6.w
dsy r4.w, r0.x
dsx r5.w, r0.x
dsx r0.xy, v6
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r0.y, r0.z, r0.w
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r4.z, r0.y, c17.x
mul r5.z, r0.x, c17.x
texldd r7.yw, r6, s6, r5.zwzw, r4.zwzw
texldd r0.xyz, r6, s0, r5.zwzw, r4.zwzw
add r1.xyz, v1, r1
add_pp r0.xyz, r0, -r1
mul_sat r1.w, c11.x, c11.x
mad_pp r1.xyz, r1.w, r0, r1
mul r4.xy, v6.zyzw, c12.x
add r3.xy, r7.wyzw, c17.w
texld r2, r5, s5
texld r0, r4, s5
add_pp r0, r0, -r2
mad_pp r2, r3.z, r0, r2
mul r0.xy, r3, c18
add r6.zw, r6, r0.xyxy
mul r3.xy, v6.zxzw, c12.x
texld r0, r3, s5
add_pp r0, r0, -r2
mad r6.w, r6, c18.z, c18.y
frc r6.w, r6
mad_pp r2, r3.w, r0, r2
mad r6.w, r6, c19.x, c19.y
sincos r0.xy, r6.w
mad r6.z, r6, c18.w, c18.y
frc r0.y, r6.z
mad r6.z, r0.y, c19.x, c19.y
mov_pp r7.y, r0.x
sincos r0.xy, r6.z
dp4 r0.z, c1, c1
mov_pp r7.xz, r0.yyxw
rsq r0.z, r0.z
mul r0.xyz, r0.z, c1
dp3_sat r0.z, v5, r0
dp3_pp_sat r7.w, -r7, -c10
add r0.x, v1.w, c17.z
add_pp r0.w, r7, -r0.z
frc r0.y, r0.x
mad_pp r1.w, r1, r0, r0.z
add_sat r6.z, r0.x, -r0.y
texldd r0, r6, s3, r5.zwzw, r4.zwzw
mul_pp r6.w, r0, r6.z
mov_pp r6.xyz, r0
mul_pp r2, r6, r2
add_pp r2.xyz, r2, -r1
mul_pp r0.y, r1.w, c3.w
mad_pp r1.xyz, r2.w, r2, r1
texld r2, r4, s4
texldp r0.x, v4, s9
rcp r0.z, v4.w
mad r0.z, -v4, r0, r0.x
mov r0.w, c2.x
rcp r0.x, v3.w
mad r7.xy, v3, r0.x, c17.y
cmp r0.z, r0, c13.y, r0.w
dp3 r0.x, v3, v3
texld r0.w, r7, s7
cmp r1.w, -v3.z, c13.x, c13.y
mul_pp r0.w, r1, r0
texld r0.x, r0.x, s8
mul_pp r0.x, r0.w, r0
mul_pp r0.w, r0.x, r0.z
mul_pp r0.x, r0.w, r0.y
dp3 r0.y, v6, c10
add r1.w, r0.y, c21.x
mul_pp_sat r4.z, r0.x, c20.w
mov r0.x, c8
frc r4.w, r1
add r0.xyz, c3, r0.x
add_sat r1.w, r1, -r4
mad_sat r0.xyz, r0, r4.z, c0
mul_pp r0.xyz, r0, r1.w
mul r7.xyz, r0, c9.x
mad_pp r7.xyz, r1, c4, r7
texld r1, r5, s4
add_pp r2, r2, -r1
mad_pp r1, r3.z, r2, r1
texld r2, r3, s4
add_pp r2, r2, -r1
mad_pp r1, r3.w, r2, r1
mul_pp r1, r6, r1
add_pp r4.x, r7.w, c19.z
mul_pp r3.x, r4, c3.w
mul_pp r0.w, r3.x, r0
mul_pp_sat r0.w, r0, c19
mad_pp r1.xyz, -r7, r0, r1
mul_pp r2.xyz, r7, r0
add_pp r0.w, -r0, c13.y
mul_pp r0.x, r1.w, r0.w
mad_pp oC0.xyz, r0.x, r1, r2
mov_pp oC0.w, c13.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightShadowData]
Vector 3 [_LightColor0]
Vector 4 [_Color]
Float 5 [_DetailScale]
Float 6 [_DetailVertScale]
Float 7 [_DetailDist]
Float 8 [_MinLight]
Float 9 [_Albedo]
Vector 10 [_SunDir]
Float 11 [_PlanetOpacity]
Float 12 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_BumpMap] 2D
SetTexture 7 [_LightTexture0] 2D
SetTexture 8 [_LightTextureB0] 2D
SetTexture 9 [_ShadowMapTexture] 2D
"ps_3_0
; 181 ALU, 24 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_2d s7
dcl_2d s8
dcl_2d s9
def c13, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c14, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c15, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c16, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c17, 0.15915494, 0.50000000, 0.99000001, -0.50000000
def c18, 0.25000000, 0.50000000, 0.49999991, 0.99999982
def c19, 6.28318501, -3.14159298, -0.01000214, 4.03944778
def c20, -0.94999999, 32.00000000, 0.50000000, 4.00000000
def c21, 1.00999999, 0, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3
dcl_texcoord4 v4
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
mov r0.xyz, v6
dp3_sat r0.x, v2, -r0
add r0.w, r0.x, c20.x
mad_sat r1.w, r0, c20.y, c20.z
mul r0.xy, v6.zyzw, c6.x
mul r1.xy, v6.zyzw, c5.x
abs r3.zw, v6.xyxy
abs r0.w, v6.z
max r2.w, r3.z, r0
rcp r3.x, r2.w
min r2.w, r3.z, r0
mul r2.w, r2, r3.x
mul r3.x, r2.w, r2.w
mad r3.y, r3.x, c15, c15.z
mad r3.y, r3, r3.x, c15.w
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad r2.xyz, r1.w, r1, r0
mul r0.xy, v6, c5.x
mul r1.xy, v6, c6.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r1.w, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r3.z, r1, r0
mul r1.xy, v6.zxzw, c6.x
mul r0.xy, v6.zxzw, c5.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r1.w, r0, r1
add_pp r0.xyz, r0, -r2
mad_pp r2.xyz, r3.w, r0, r2
mad r3.y, r3, r3.x, c16.x
mad r1.x, r3.y, r3, c16.y
mad r1.x, r1, r3, c16.z
mul r0.y, r1.x, r2.w
add_pp r1.xyz, r2, c17.w
add r2.x, -r0.w, c13.y
mad r1.w, r0, c13.z, c13
rsq r2.x, r2.x
add r0.z, -r0.y, c16.w
add r0.x, r3.z, -r0.w
cmp r0.x, -r0, r0.y, r0.z
add r0.y, -r0.x, c14.w
cmp r0.x, v6.z, r0, r0.y
mad r1.w, r0, r1, c14.x
mul r0.z, v0.x, c7.x
cmp r0.x, v6, r0, -r0
mul r6.z, r0.x, c17.x
add r6.x, r6.z, c17.y
abs r0.x, v6.y
mul_sat r0.y, r0.z, c14.z
add r0.z, -r0.x, c13.y
mul_pp r1.xyz, r1, c18.x
mad_pp r1.xyz, r0.y, -r1, r1
mad r0.y, r0.x, c13.z, c13.w
mad r0.y, r0, r0.x, c14.x
rsq r0.z, r0.z
mad r0.w, r0, r1, c14.y
rcp r2.x, r2.x
mul r1.w, r0, r2.x
cmp r0.w, v6.z, c13.x, c13.y
mul r2.x, r0.w, r1.w
mad r0.x, r0.y, r0, c14.y
rcp r0.z, r0.z
mul r0.y, r0.x, r0.z
cmp r0.x, v6.y, c13, c13.y
mul r0.z, r0.x, r0.y
mad r0.y, -r0.z, c14.z, r0
mad r0.z, -r2.x, c14, r1.w
mad r0.x, r0, c14.w, r0.y
mad r0.y, r0.w, c14.w, r0.z
mul r6.w, r0.x, c15.x
mul r0.x, r0.y, c15
mul r5.xy, v6, c12.x
dsy r0.zw, v6.xyxy
mul r0.zw, r0, r0
mov r6.y, r6.w
dsy r4.w, r0.x
dsx r5.w, r0.x
dsx r0.xy, v6
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r0.y, r0.z, r0.w
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r4.z, r0.y, c17.x
mul r5.z, r0.x, c17.x
texldd r7.yw, r6, s6, r5.zwzw, r4.zwzw
texldd r0.xyz, r6, s0, r5.zwzw, r4.zwzw
add r1.xyz, v1, r1
add_pp r0.xyz, r0, -r1
mul_sat r1.w, c11.x, c11.x
mad_pp r1.xyz, r1.w, r0, r1
mul r4.xy, v6.zyzw, c12.x
add r3.xy, r7.wyzw, c17.w
texld r2, r5, s5
texld r0, r4, s5
add_pp r0, r0, -r2
mad_pp r2, r3.z, r0, r2
mul r0.xy, r3, c18
add r6.zw, r6, r0.xyxy
mul r3.xy, v6.zxzw, c12.x
texld r0, r3, s5
add_pp r0, r0, -r2
mad r6.w, r6, c18.z, c18.y
frc r6.w, r6
mad_pp r2, r3.w, r0, r2
mad r6.w, r6, c19.x, c19.y
sincos r0.xy, r6.w
mad r6.z, r6, c18.w, c18.y
frc r0.y, r6.z
mad r6.z, r0.y, c19.x, c19.y
mov_pp r7.y, r0.x
sincos r0.xy, r6.z
dp4 r0.z, c1, c1
mov_pp r7.xz, r0.yyxw
rsq r0.z, r0.z
mul r0.xyz, r0.z, c1
dp3_sat r0.z, v5, r0
dp3_pp_sat r7.w, -r7, -c10
add r0.x, v1.w, c17.z
add_pp r0.w, r7, -r0.z
frc r0.y, r0.x
mad_pp r1.w, r1, r0, r0.z
add_sat r6.z, r0.x, -r0.y
texldd r0, r6, s3, r5.zwzw, r4.zwzw
mul_pp r6.w, r0, r6.z
mov_pp r6.xyz, r0
mul_pp r2, r6, r2
add_pp r2.xyz, r2, -r1
mul_pp r0.y, r1.w, c3.w
mad_pp r1.xyz, r2.w, r2, r1
mov r0.x, c2
rcp r0.w, v3.w
mad r7.xy, v3, r0.w, c17.y
add r0.z, c13.y, -r0.x
texldp r0.x, v4, s9
mad r0.z, r0.x, r0, c2.x
texld r2, r4, s4
dp3 r0.x, v3, v3
texld r0.w, r7, s7
cmp r1.w, -v3.z, c13.x, c13.y
mul_pp r0.w, r1, r0
texld r0.x, r0.x, s8
mul_pp r0.x, r0.w, r0
mul_pp r0.w, r0.x, r0.z
mul_pp r0.x, r0.w, r0.y
dp3 r0.y, v6, c10
add r1.w, r0.y, c21.x
mul_pp_sat r4.z, r0.x, c20.w
mov r0.x, c8
frc r4.w, r1
add r0.xyz, c3, r0.x
add_sat r1.w, r1, -r4
mad_sat r0.xyz, r0, r4.z, c0
mul_pp r0.xyz, r0, r1.w
mul r7.xyz, r0, c9.x
mad_pp r7.xyz, r1, c4, r7
texld r1, r5, s4
add_pp r2, r2, -r1
mad_pp r1, r3.z, r2, r1
texld r2, r3, s4
add_pp r2, r2, -r1
mad_pp r1, r3.w, r2, r1
mul_pp r1, r6, r1
add_pp r4.x, r7.w, c19.z
mul_pp r3.x, r4, c3.w
mul_pp r0.w, r3.x, r0
mul_pp_sat r0.w, r0, c19
mad_pp r1.xyz, -r7, r0, r1
mul_pp r2.xyz, r7, r0
add_pp r0.w, -r0, c13.y
mul_pp r0.x, r1.w, r0.w
mad_pp oC0.xyz, r0.x, r1, r2
mov_pp oC0.w, c13.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
Float 8 [_Albedo]
Vector 9 [_SunDir]
Float 10 [_PlanetOpacity]
Float 11 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_BumpMap] 2D
SetTexture 7 [_ShadowMapTexture] 2D
"ps_3_0
; 170 ALU, 22 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_2d s7
def c12, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c13, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c14, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c15, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c16, 0.15915494, 0.50000000, 0.99000001, -0.50000000
def c17, 0.25000000, 0.50000000, 0.49999991, 0.99999982
def c18, 6.28318501, -3.14159298, -0.01000214, 4.03944778
def c19, -0.94999999, 32.00000000, 0.50000000, 4.00000000
def c20, 1.00999999, 0, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3
dcl_texcoord5 v4.xyz
dcl_texcoord6 v5.xyz
mov r0.xyz, v5
dp3_sat r0.x, v2, -r0
add r0.w, r0.x, c19.x
mul r1.xy, v5.zyzw, c5.x
mul r0.xy, v5.zyzw, c4.x
texld r0.xyz, r0, s2
texld r1.xyz, r1, s1
add r2.xyz, r0, -r1
mad_sat r0.y, r0.w, c19, c19.z
mad r3.xyz, r0.y, r2, r1
mul r2.xy, v5, c4.x
mul r1.xy, v5, c5.x
abs r0.zw, v5.xyxy
abs r0.x, v5.z
max r1.w, r0.z, r0.x
min r2.w, r0.z, r0.x
rcp r1.w, r1.w
mul r1.w, r2, r1
mul r2.w, r1, r1
mad r3.w, r2, c14.y, c14.z
mad r3.w, r3, r2, c14
mad r3.w, r3, r2, c15.x
texld r1.xyz, r1, s1
texld r2.xyz, r2, s2
add r2.xyz, r2, -r1
mad r1.xyz, r0.y, r2, r1
add_pp r2.xyz, r3, -r1
mad_pp r3.xyz, r0.z, r2, r1
mul r1.xy, v5.zxzw, c5.x
mul r2.xy, v5.zxzw, c4.x
texld r1.xyz, r1, s1
texld r2.xyz, r2, s2
add r2.xyz, r2, -r1
mad r1.xyz, r0.y, r2, r1
mad r0.y, r3.w, r2.w, c15
mad r0.y, r0, r2.w, c15.z
mul r1.w, r0.y, r1
add_pp r1.xyz, r1, -r3
mad_pp r1.xyz, r0.w, r1, r3
add_pp r1.xyz, r1, c16.w
add r0.y, -r1.w, c15.w
add r2.x, r0.z, -r0
cmp r2.x, -r2, r1.w, r0.y
add r1.w, -r2.x, c13
cmp r1.w, v5.z, r2.x, r1
mul r0.y, v0.x, c6.x
cmp r2.x, v5.y, c12, c12.y
mul_sat r0.y, r0, c13.z
mul_pp r1.xyz, r1, c17.x
mad_pp r1.xyz, r0.y, -r1, r1
add r3.xyz, v1, r1
abs r1.y, v5
cmp r0.y, v5.x, r1.w, -r1.w
mul r6.x, r0.y, c16
add r0.y, -r1, c12
mad r1.x, r1.y, c12.z, c12.w
mad r1.x, r1, r1.y, c13
rsq r0.y, r0.y
add r1.z, r6.x, c16.y
mad r1.x, r1, r1.y, c13.y
rcp r0.y, r0.y
mul r1.w, r1.x, r0.y
mul r1.y, r2.x, r1.w
add r0.y, -r0.x, c12
mad r1.x, r0, c12.z, c12.w
mad r1.x, r0, r1, c13
mad r0.x, r0, r1, c13.y
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r0.y, r0.x, r0
cmp r1.x, v5.z, c12, c12.y
mul r0.x, r1, r0.y
mad r0.x, -r0, c13.z, r0.y
mad r1.y, -r1, c13.z, r1.w
mad r0.y, r2.x, c13.w, r1
mad r0.x, r1, c13.w, r0
mul r0.x, r0, c14
mul r6.y, r0, c14.x
dsy r1.xy, v5
mov r1.w, r6.y
dsx r2.y, r0.x
dsy r2.w, r0.x
dsx r0.xy, v5
mul r0.xy, r0, r0
add r0.y, r0.x, r0
mul r1.xy, r1, r1
add r0.x, r1, r1.y
rsq r0.y, r0.y
rcp r0.y, r0.y
rsq r0.x, r0.x
rcp r0.x, r0.x
mul r2.x, r0.y, c16
mul r2.z, r0.x, c16.x
texldd r7.yw, r1.zwzw, s6, r2, r2.zwzw
texldd r4.xyz, r1.zwzw, s0, r2, r2.zwzw
mul r0.xy, v5.zyzw, c11.x
texldd r2, r1.zwzw, s3, r2, r2.zwzw
add_pp r4.xyz, r4, -r3
mul_sat r3.w, c10.x, c10.x
mad_pp r3.xyz, r3.w, r4, r3
mul r1.xy, v5, c11.x
texld r4, r1, s5
texld r5, r0, s5
add_pp r5, r5, -r4
mad_pp r5, r0.z, r5, r4
add r6.zw, r7.xywy, c16.w
mul r4.xy, r6.zwzw, c17
add r4.zw, r6.xyxy, r4.xyxy
mul r4.xy, v5.zxzw, c11.x
texld r6, r4, s5
add_pp r6, r6, -r5
mad r4.w, r4, c17.z, c17.y
frc r4.w, r4
mad r4.z, r4, c17.w, c17.y
frc r4.z, r4
mad_pp r5, r0.w, r6, r5
mad r4.w, r4, c18.x, c18.y
sincos r6.xy, r4.w
mov_pp r7.y, r6.x
mad r4.z, r4, c18.x, c18.y
sincos r6.xy, r4.z
dp4_pp r4.z, c1, c1
mov_pp r7.xz, r6.yyxw
rsq_pp r4.z, r4.z
mul_pp r6.xyz, r4.z, c1
dp3_pp_sat r4.z, -r7, -c9
dp3_sat r6.x, v4, r6
add_pp r4.w, r4.z, -r6.x
mad_pp r3.w, r3, r4, r6.x
add r6.z, v1.w, c16
frc r6.y, r6.z
add_sat r4.w, r6.z, -r6.y
mul_pp r2.w, r2, r4
mul_pp r6, r2, r5
mov r4.w, c7.x
add_pp r7.yzw, r6.xxyz, -r3.xxyz
mul_pp r1.z, r3.w, c2.w
texldp r7.x, v3, s7
mul_pp r1.w, r7.x, r1.z
dp3 r1.z, v5, c9
add r3.w, r1.z, c20.x
frc r1.z, r3.w
add_sat r1.z, r3.w, -r1
mul_pp_sat r1.w, r1, c19
add r5.xyz, c2, r4.w
mad_sat r5.xyz, r5, r1.w, c0
mul_pp r5.xyz, r5, r1.z
mul r6.xyz, r5, c8.x
mad_pp r3.xyz, r6.w, r7.yzww, r3
mad_pp r3.xyz, r3, c3, r6
texld r6, r0, s4
add_pp r0.x, r4.z, c18.z
texld r1, r1, s4
add_pp r6, r6, -r1
mad_pp r1, r0.z, r6, r1
texld r4, r4, s4
add_pp r4, r4, -r1
mul_pp r3.w, r0.x, c2
mad_pp r0, r0.w, r4, r1
mul_pp r0, r2, r0
mul_pp r1.x, r3.w, r7
mul_pp_sat r1.x, r1, c18.w
add_pp r1.w, -r1.x, c12.y
mad_pp r0.xyz, -r3, r5, r0
mul_pp r1.xyz, r3, r5
mul_pp r0.w, r0, r1
mad_pp oC0.xyz, r0.w, r0, r1
mov_pp oC0.w, c12.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
Float 8 [_Albedo]
Vector 9 [_SunDir]
Float 10 [_PlanetOpacity]
Float 11 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_BumpMap] 2D
SetTexture 7 [_ShadowMapTexture] 2D
SetTexture 8 [_LightTexture0] 2D
"ps_3_0
; 171 ALU, 23 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_2d s7
dcl_2d s8
def c12, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c13, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c14, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c15, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c16, 0.15915494, 0.50000000, 0.99000001, -0.50000000
def c17, 0.25000000, 0.50000000, 0.49999991, 0.99999982
def c18, 6.28318501, -3.14159298, -0.01000214, 4.03944778
def c19, -0.94999999, 32.00000000, 0.50000000, 4.00000000
def c20, 1.00999999, 0, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xy
dcl_texcoord4 v4
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
mov r0.xyz, v6
dp3_sat r0.x, v2, -r0
add r0.w, r0.x, c19.x
mul r1.xy, v6.zyzw, c5.x
mul r0.xy, v6.zyzw, c4.x
texld r0.xyz, r0, s2
texld r1.xyz, r1, s1
add r2.xyz, r0, -r1
mad_sat r0.y, r0.w, c19, c19.z
mad r3.xyz, r0.y, r2, r1
mul r2.xy, v6, c4.x
mul r1.xy, v6, c5.x
abs r0.zw, v6.xyxy
abs r0.x, v6.z
max r1.w, r0.z, r0.x
min r2.w, r0.z, r0.x
rcp r1.w, r1.w
mul r1.w, r2, r1
mul r2.w, r1, r1
mad r3.w, r2, c14.y, c14.z
mad r3.w, r3, r2, c14
mad r3.w, r3, r2, c15.x
texld r1.xyz, r1, s1
texld r2.xyz, r2, s2
add r2.xyz, r2, -r1
mad r1.xyz, r0.y, r2, r1
add_pp r2.xyz, r3, -r1
mad_pp r3.xyz, r0.z, r2, r1
mul r1.xy, v6.zxzw, c5.x
mul r2.xy, v6.zxzw, c4.x
texld r1.xyz, r1, s1
texld r2.xyz, r2, s2
add r2.xyz, r2, -r1
mad r1.xyz, r0.y, r2, r1
mad r0.y, r3.w, r2.w, c15
mad r0.y, r0, r2.w, c15.z
mul r1.w, r0.y, r1
add_pp r1.xyz, r1, -r3
mad_pp r1.xyz, r0.w, r1, r3
add_pp r1.xyz, r1, c16.w
add r0.y, -r1.w, c15.w
add r2.x, r0.z, -r0
cmp r2.x, -r2, r1.w, r0.y
add r1.w, -r2.x, c13
cmp r1.w, v6.z, r2.x, r1
mul r0.y, v0.x, c6.x
cmp r2.x, v6.y, c12, c12.y
mul_sat r0.y, r0, c13.z
mul_pp r1.xyz, r1, c17.x
mad_pp r1.xyz, r0.y, -r1, r1
add r3.xyz, v1, r1
abs r1.y, v6
cmp r0.y, v6.x, r1.w, -r1.w
mul r6.x, r0.y, c16
add r0.y, -r1, c12
mad r1.x, r1.y, c12.z, c12.w
mad r1.x, r1, r1.y, c13
rsq r0.y, r0.y
add r1.z, r6.x, c16.y
mad r1.x, r1, r1.y, c13.y
rcp r0.y, r0.y
mul r1.w, r1.x, r0.y
mul r1.y, r2.x, r1.w
add r0.y, -r0.x, c12
mad r1.x, r0, c12.z, c12.w
mad r1.x, r0, r1, c13
mad r0.x, r0, r1, c13.y
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r0.y, r0.x, r0
cmp r1.x, v6.z, c12, c12.y
mul r0.x, r1, r0.y
mad r0.x, -r0, c13.z, r0.y
mad r1.y, -r1, c13.z, r1.w
mad r0.y, r2.x, c13.w, r1
mad r0.x, r1, c13.w, r0
mul r0.x, r0, c14
mul r6.y, r0, c14.x
dsy r1.xy, v6
mov r1.w, r6.y
dsx r2.y, r0.x
dsy r2.w, r0.x
dsx r0.xy, v6
mul r0.xy, r0, r0
add r0.y, r0.x, r0
mul r1.xy, r1, r1
add r0.x, r1, r1.y
rsq r0.y, r0.y
rcp r0.y, r0.y
rsq r0.x, r0.x
rcp r0.x, r0.x
mul r2.x, r0.y, c16
mul r2.z, r0.x, c16.x
texldd r7.yw, r1.zwzw, s6, r2, r2.zwzw
texldd r4.xyz, r1.zwzw, s0, r2, r2.zwzw
texldd r2, r1.zwzw, s3, r2, r2.zwzw
mul r0.xy, v6.zyzw, c11.x
add_pp r4.xyz, r4, -r3
mul_sat r3.w, c10.x, c10.x
mad_pp r3.xyz, r3.w, r4, r3
mul r1.xy, v6, c11.x
texld r4, r1, s5
texld r5, r0, s5
add_pp r5, r5, -r4
mad_pp r5, r0.z, r5, r4
add r6.zw, r7.xywy, c16.w
mul r4.xy, r6.zwzw, c17
add r4.zw, r6.xyxy, r4.xyxy
mul r4.xy, v6.zxzw, c11.x
texld r6, r4, s5
add_pp r6, r6, -r5
mad r4.w, r4, c17.z, c17.y
frc r4.w, r4
mad r4.z, r4, c17.w, c17.y
frc r4.z, r4
mad_pp r5, r0.w, r6, r5
mad r4.w, r4, c18.x, c18.y
sincos r6.xy, r4.w
mov_pp r7.y, r6.x
mad r4.z, r4, c18.x, c18.y
sincos r6.xy, r4.z
dp4_pp r4.z, c1, c1
mov_pp r7.xz, r6.yyxw
rsq_pp r4.z, r4.z
mul_pp r6.xyz, r4.z, c1
dp3_sat r6.x, v5, r6
dp3_pp_sat r4.z, -r7, -c9
add_pp r4.w, r4.z, -r6.x
mad_pp r3.w, r3, r4, r6.x
add r6.z, v1.w, c16
frc r6.y, r6.z
add_sat r4.w, r6.z, -r6.y
mul_pp r2.w, r2, r4
mul_pp r6, r2, r5
add_pp r7.xyz, r6, -r3
mul_pp r1.z, r3.w, c2.w
texldp r5.x, v4, s7
texld r1.w, v3, s8
mul r3.w, r1, r5.x
mul_pp r1.w, r3, r1.z
dp3 r1.z, v6, c9
add r4.w, r1.z, c20.x
frc r1.z, r4.w
mov r5.x, c7
add_sat r1.z, r4.w, -r1
mul_pp_sat r1.w, r1, c19
add r5.xyz, c2, r5.x
mad_sat r5.xyz, r5, r1.w, c0
mul_pp r5.xyz, r5, r1.z
mul r6.xyz, r5, c8.x
mad_pp r3.xyz, r6.w, r7, r3
mad_pp r3.xyz, r3, c3, r6
texld r6, r0, s4
add_pp r0.x, r4.z, c18.z
texld r1, r1, s4
add_pp r6, r6, -r1
mad_pp r1, r0.z, r6, r1
texld r4, r4, s4
add_pp r4, r4, -r1
mul_pp r5.w, r0.x, c2
mad_pp r0, r0.w, r4, r1
mul_pp r0, r2, r0
mul_pp r1.x, r5.w, r3.w
mul_pp_sat r1.x, r1, c18.w
add_pp r1.w, -r1.x, c12.y
mad_pp r0.xyz, -r3, r5, r0
mul_pp r1.xyz, r3, r5
mul_pp r0.w, r0, r1
mad_pp oC0.xyz, r0.w, r0, r1
mov_pp oC0.w, c12.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightPositionRange]
Vector 3 [_LightShadowData]
Vector 4 [_LightColor0]
Vector 5 [_Color]
Float 6 [_DetailScale]
Float 7 [_DetailVertScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_Albedo]
Vector 11 [_SunDir]
Float 12 [_PlanetOpacity]
Float 13 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_BumpMap] 2D
SetTexture 7 [_ShadowMapTexture] CUBE
SetTexture 8 [_LightTexture0] 2D
"ps_3_0
; 180 ALU, 23 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_cube s7
dcl_2d s8
def c14, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c15, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c16, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c17, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c18, 0.15915494, 0.50000000, 0.99000001, -0.50000000
def c19, 0.25000000, 0.50000000, 0.49999991, 0.99999982
def c20, 6.28318501, -3.14159298, -0.01000214, 0.97000003
def c21, 1.00000000, 0.00392157, 0.00001538, 0.00000001
def c22, 4.03944778, -0.94999999, 32.00000000, 0.50000000
def c23, 4.00000000, 1.00999999, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
mov r0.xyz, v6
dp3_sat r0.x, v2, -r0
add r0.w, r0.x, c22.y
mul r1.xy, v6.zyzw, c7.x
mul r0.xy, v6.zyzw, c6.x
texld r0.xyz, r0, s2
texld r1.xyz, r1, s1
add r2.xyz, r0, -r1
mad_sat r0.y, r0.w, c22.z, c22.w
mad r3.xyz, r0.y, r2, r1
mul r2.xy, v6, c6.x
mul r1.xy, v6, c7.x
abs r0.zw, v6.xyxy
abs r0.x, v6.z
max r1.w, r0.z, r0.x
min r2.w, r0.z, r0.x
rcp r1.w, r1.w
mul r1.w, r2, r1
mul r2.w, r1, r1
mad r3.w, r2, c16.y, c16.z
mad r3.w, r3, r2, c16
mad r3.w, r3, r2, c17.x
texld r1.xyz, r1, s1
texld r2.xyz, r2, s2
add r2.xyz, r2, -r1
mad r1.xyz, r0.y, r2, r1
add_pp r2.xyz, r3, -r1
mad_pp r3.xyz, r0.z, r2, r1
mul r1.xy, v6.zxzw, c7.x
mul r2.xy, v6.zxzw, c6.x
texld r1.xyz, r1, s1
texld r2.xyz, r2, s2
add r2.xyz, r2, -r1
mad r1.xyz, r0.y, r2, r1
mad r0.y, r3.w, r2.w, c17
mad r0.y, r0, r2.w, c17.z
mul r1.w, r0.y, r1
add_pp r1.xyz, r1, -r3
mad_pp r1.xyz, r0.w, r1, r3
add_pp r1.xyz, r1, c18.w
add r0.y, -r1.w, c17.w
add r2.x, r0.z, -r0
cmp r2.x, -r2, r1.w, r0.y
add r1.w, -r2.x, c15
cmp r1.w, v6.z, r2.x, r1
mul r0.y, v0.x, c8.x
cmp r2.x, v6.y, c14, c14.y
mul_sat r3.w, c12.x, c12.x
mul_sat r0.y, r0, c15.z
mul_pp r1.xyz, r1, c19.x
mad_pp r1.xyz, r0.y, -r1, r1
add r3.xyz, v1, r1
abs r1.y, v6
cmp r0.y, v6.x, r1.w, -r1.w
mul r6.x, r0.y, c18
add r0.y, -r1, c14
mad r1.x, r1.y, c14.z, c14.w
mad r1.x, r1, r1.y, c15
rsq r0.y, r0.y
add r1.z, r6.x, c18.y
mad r1.x, r1, r1.y, c15.y
rcp r0.y, r0.y
mul r1.w, r1.x, r0.y
mul r1.y, r2.x, r1.w
add r0.y, -r0.x, c14
mad r1.x, r0, c14.z, c14.w
mad r1.x, r0, r1, c15
mad r0.x, r0, r1, c15.y
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r0.y, r0.x, r0
cmp r1.x, v6.z, c14, c14.y
mul r0.x, r1, r0.y
mad r0.x, -r0, c15.z, r0.y
mad r1.y, -r1, c15.z, r1.w
mad r0.y, r2.x, c15.w, r1
mad r0.x, r1, c15.w, r0
mul r0.x, r0, c16
mul r6.y, r0, c16.x
dsy r1.xy, v6
mov r1.w, r6.y
dsx r2.y, r0.x
dsy r2.w, r0.x
dsx r0.xy, v6
mul r0.xy, r0, r0
add r0.y, r0.x, r0
mul r1.xy, r1, r1
add r0.x, r1, r1.y
rsq r0.y, r0.y
rcp r0.y, r0.y
rsq r0.x, r0.x
rcp r0.x, r0.x
mul r2.x, r0.y, c18
mul r2.z, r0.x, c18.x
texldd r7.yw, r1.zwzw, s6, r2, r2.zwzw
texldd r4.xyz, r1.zwzw, s0, r2, r2.zwzw
texldd r2, r1.zwzw, s3, r2, r2.zwzw
add_pp r4.xyz, r4, -r3
mul r0.xy, v6.zyzw, c13.x
dp3 r1.w, v4, v4
mad_pp r3.xyz, r3.w, r4, r3
mul r1.xy, v6, c13.x
texld r4, r1, s5
texld r5, r0, s5
add_pp r5, r5, -r4
mad_pp r5, r0.z, r5, r4
add r6.zw, r7.xywy, c18.w
mul r4.zw, r6, c19.xyxy
add r4.zw, r6.xyxy, r4
mul r4.xy, v6.zxzw, c13.x
texld r6, r4, s5
add_pp r6, r6, -r5
mad_pp r5, r0.w, r6, r5
mad r4.w, r4, c19.z, c19.y
frc r6.x, r4.w
mad r4.w, r4.z, c19, c19.y
mad r4.z, r6.x, c20.x, c20.y
sincos r6.xy, r4.z
frc r4.w, r4
mad r4.z, r4.w, c20.x, c20.y
sincos r7.xy, r4.z
dp4 r4.z, c1, c1
mov_pp r6.y, r6.x
mov_pp r6.xz, r7.yyxw
rsq r4.w, r4.z
dp3_pp_sat r4.z, -r6, -c11
mul r6.xyz, r4.w, c1
dp3_sat r7.x, v5, r6
add_pp r4.w, r4.z, -r7.x
mad_pp r1.z, r3.w, r4.w, r7.x
add r6.w, v1, c18.z
frc r6.x, r6.w
add_sat r6.x, r6.w, -r6
mul_pp r2.w, r2, r6.x
mul_pp r6, r2, r5
rsq r1.w, r1.w
rcp r3.w, r1.w
texld r5, v4, s7
dp4 r1.w, r5, c21
add_pp r7.xyz, r6, -r3
mul r3.w, r3, c2
mad r3.w, -r3, c20, r1
mov r1.w, c3.x
dp3 r5.x, v3, v3
cmp r1.w, r3, c14.y, r1
texld r5.x, r5.x, s8
mul r3.w, r5.x, r1
mul_pp r1.z, r1, c4.w
mul_pp r1.w, r3, r1.z
dp3 r1.z, v6, c11
add r4.w, r1.z, c23.y
frc r1.z, r4.w
mov r5.x, c9
add_sat r1.z, r4.w, -r1
mul_pp_sat r1.w, r1, c23.x
add r5.xyz, c4, r5.x
mad_sat r5.xyz, r5, r1.w, c0
mul_pp r5.xyz, r5, r1.z
mul r6.xyz, r5, c10.x
mad_pp r3.xyz, r6.w, r7, r3
mad_pp r3.xyz, r3, c5, r6
texld r6, r0, s4
add_pp r0.x, r4.z, c20.z
texld r1, r1, s4
add_pp r6, r6, -r1
mad_pp r1, r0.z, r6, r1
texld r4, r4, s4
add_pp r4, r4, -r1
mul_pp r5.w, r0.x, c4
mad_pp r0, r0.w, r4, r1
mul_pp r0, r2, r0
mul_pp r1.x, r5.w, r3.w
mul_pp_sat r1.x, r1, c22
add_pp r1.w, -r1.x, c14.y
mad_pp r0.xyz, -r3, r5, r0
mul_pp r1.xyz, r3, r5
mul_pp r0.w, r0, r1
mad_pp oC0.xyz, r0.w, r0, r1
mov_pp oC0.w, c14.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightPositionRange]
Vector 3 [_LightShadowData]
Vector 4 [_LightColor0]
Vector 5 [_Color]
Float 6 [_DetailScale]
Float 7 [_DetailVertScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_Albedo]
Vector 11 [_SunDir]
Float 12 [_PlanetOpacity]
Float 13 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_BumpMap] 2D
SetTexture 7 [_ShadowMapTexture] CUBE
SetTexture 8 [_LightTextureB0] 2D
SetTexture 9 [_LightTexture0] CUBE
"ps_3_0
; 181 ALU, 24 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_cube s7
dcl_2d s8
dcl_cube s9
def c14, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c15, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c16, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c17, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c18, 0.15915494, 0.50000000, 0.99000001, -0.50000000
def c19, 0.25000000, 0.50000000, 0.49999991, 0.99999982
def c20, 6.28318501, -3.14159298, -0.01000214, 0.97000003
def c21, 1.00000000, 0.00392157, 0.00001538, 0.00000001
def c22, 4.03944778, -0.94999999, 32.00000000, 0.50000000
def c23, 4.00000000, 1.00999999, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
mov r0.xyz, v6
dp3_sat r0.x, v2, -r0
add r0.w, r0.x, c22.y
mad_sat r1.w, r0, c22.z, c22
mul r0.xy, v6.zyzw, c7.x
mul r1.xy, v6.zyzw, c6.x
abs r4.zw, v6.xyxy
abs r0.w, v6.z
max r2.w, r4.z, r0
rcp r3.x, r2.w
min r2.w, r4.z, r0
mul r2.w, r2, r3.x
mul r3.x, r2.w, r2.w
mad r3.y, r3.x, c16, c16.z
mad r3.y, r3, r3.x, c16.w
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad r2.xyz, r1.w, r1, r0
mul r0.xy, v6, c6.x
mul r1.xy, v6, c7.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r1.w, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r4.z, r1, r0
mul r1.xy, v6.zxzw, c7.x
mul r0.xy, v6.zxzw, c6.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r1.w, r0, r1
add_pp r0.xyz, r0, -r2
mad_pp r2.xyz, r4.w, r0, r2
mad r3.y, r3, r3.x, c17.x
mad r1.x, r3.y, r3, c17.y
mad r1.x, r1, r3, c17.z
mul r0.y, r1.x, r2.w
add_pp r1.xyz, r2, c18.w
add r2.x, -r0.w, c14.y
mad r1.w, r0, c14.z, c14
rsq r2.x, r2.x
add r0.z, -r0.y, c17.w
add r0.x, r4.z, -r0.w
cmp r0.x, -r0, r0.y, r0.z
add r0.y, -r0.x, c15.w
cmp r0.x, v6.z, r0, r0.y
mad r1.w, r0, r1, c15.x
mul r0.z, v0.x, c8.x
cmp r0.x, v6, r0, -r0
mul r6.z, r0.x, c18.x
add r5.z, r6, c18.y
abs r0.x, v6.y
mul_sat r0.y, r0.z, c15.z
add r0.z, -r0.x, c14.y
mul_pp r1.xyz, r1, c19.x
mad_pp r1.xyz, r0.y, -r1, r1
mad r0.y, r0.x, c14.z, c14.w
mad r0.y, r0, r0.x, c15.x
rsq r0.z, r0.z
mad r0.w, r0, r1, c15.y
rcp r2.x, r2.x
mul r1.w, r0, r2.x
cmp r0.w, v6.z, c14.x, c14.y
mul r2.x, r0.w, r1.w
add r1.xyz, v1, r1
mad r0.x, r0.y, r0, c15.y
rcp r0.z, r0.z
mul r0.y, r0.x, r0.z
cmp r0.x, v6.y, c14, c14.y
mul r0.z, r0.x, r0.y
mad r0.y, -r0.z, c15.z, r0
mad r0.x, r0, c15.w, r0.y
mad r0.z, -r2.x, c15, r1.w
mad r0.y, r0.w, c15.w, r0.z
mul r6.w, r0.x, c16.x
mul r0.x, r0.y, c16
dsy r0.zw, v6.xyxy
mul r0.zw, r0, r0
mov r5.w, r6
dsx r2.w, r0.x
dsy r2.y, r0.x
dsx r0.xy, v6
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r0.y, r0.z, r0.w
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r2.z, r0.x, c18.x
mul r2.x, r0.y, c18
texldd r7.yw, r5.zwzw, s6, r2.zwzw, r2
texldd r0.xyz, r5.zwzw, s0, r2.zwzw, r2
add_pp r0.xyz, r0, -r1
mul_sat r3.w, c12.x, c12.x
mad_pp r3.xyz, r3.w, r0, r1
mul r5.xy, v6.zyzw, c13.x
mul r6.xy, v6, c13.x
add r4.xy, r7.wyzw, c18.w
texld r1, r6, s5
texld r0, r5, s5
add_pp r0, r0, -r1
mad_pp r1, r4.z, r0, r1
mul r0.xy, r4, c19
add r6.zw, r6, r0.xyxy
mul r4.xy, v6.zxzw, c13.x
texld r0, r4, s5
add_pp r0, r0, -r1
mad r6.w, r6, c19.z, c19.y
frc r6.w, r6
mad_pp r0, r4.w, r0, r1
mad r6.w, r6, c20.x, c20.y
sincos r1.xy, r6.w
mad r6.z, r6, c19.w, c19.y
frc r1.y, r6.z
mad r6.z, r1.y, c20.x, c20.y
mov_pp r7.y, r1.x
sincos r1.xy, r6.z
dp4 r1.z, c1, c1
mov_pp r7.xz, r1.yyxw
rsq r1.z, r1.z
mul r1.xyz, r1.z, c1
dp3_sat r1.z, v5, r1
dp3_pp_sat r6.z, -r7, -c11
add r1.x, v1.w, c18.z
add_pp r1.w, r6.z, -r1.z
mad_pp r3.w, r3, r1, r1.z
frc r1.y, r1.x
add_sat r6.w, r1.x, -r1.y
texldd r1, r5.zwzw, s3, r2.zwzw, r2
mul_pp r1.w, r1, r6
mul_pp r2, r1, r0
texld r0, v4, s7
dp4 r0.y, r0, c21
add_pp r2.xyz, r2, -r3
dp3 r5.z, v4, v4
rsq r5.z, r5.z
rcp r0.x, r5.z
mul r0.x, r0, c2.w
mad r0.x, -r0, c20.w, r0.y
mov r0.z, c3.x
cmp r0.y, r0.x, c14, r0.z
dp3 r0.x, v3, v3
mad_pp r2.xyz, r2.w, r2, r3
mul_pp r3.w, r3, c4
texld r0.w, v3, s9
texld r0.x, r0.x, s8
mul r0.x, r0, r0.w
mul r0.w, r0.x, r0.y
mul_pp r0.x, r0.w, r3.w
dp3 r0.y, v6, c11
add r3.w, r0.y, c23.y
mul_pp_sat r5.z, r0.x, c23.x
mov r0.x, c9
frc r5.w, r3
add r0.xyz, c4, r0.x
add_sat r3.w, r3, -r5
mad_sat r0.xyz, r0, r5.z, c0
mul_pp r0.xyz, r0, r3.w
mul r7.xyz, r0, c10.x
mad_pp r7.xyz, r2, c5, r7
texld r3, r5, s4
texld r2, r6, s4
add_pp r3, r3, -r2
mad_pp r2, r4.z, r3, r2
texld r3, r4, s4
add_pp r5.x, r6.z, c20.z
add_pp r3, r3, -r2
mad_pp r2, r4.w, r3, r2
mul_pp r1, r1, r2
mul_pp r4.x, r5, c4.w
mul_pp r0.w, r4.x, r0
mul_pp_sat r0.w, r0, c22.x
mad_pp r1.xyz, -r7, r0, r1
mul_pp r2.xyz, r7, r0
add_pp r0.w, -r0, c14.y
mul_pp r0.x, r1.w, r0.w
mad_pp oC0.xyz, r0.x, r1, r2
mov_pp oC0.w, c14.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightShadowData]
Vector 3 [_ShadowOffsets0]
Vector 4 [_ShadowOffsets1]
Vector 5 [_ShadowOffsets2]
Vector 6 [_ShadowOffsets3]
Vector 7 [_LightColor0]
Vector 8 [_Color]
Float 9 [_DetailScale]
Float 10 [_DetailVertScale]
Float 11 [_DetailDist]
Float 12 [_MinLight]
Float 13 [_Albedo]
Vector 14 [_SunDir]
Float 15 [_PlanetOpacity]
Float 16 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_BumpMap] 2D
SetTexture 7 [_LightTexture0] 2D
SetTexture 8 [_LightTextureB0] 2D
SetTexture 9 [_ShadowMapTexture] 2D
"ps_3_0
; 189 ALU, 27 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_2d s7
dcl_2d s8
dcl_2d s9
def c17, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c18, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c19, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c20, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c21, 0.15915494, 0.50000000, 0.99000001, -0.50000000
def c22, 0.25000000, 0.50000000, 0.49999991, 0.99999982
def c23, 6.28318501, -3.14159298, -0.01000214, 4.03944778
def c24, -0.94999999, 32.00000000, 0.50000000, 4.00000000
def c25, 1.00999999, 0, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3
dcl_texcoord4 v4
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
mov r0.xyz, v6
dp3_sat r0.x, v2, -r0
add r0.w, r0.x, c24.x
mul r1.xy, v6.zyzw, c10.x
mul r0.xy, v6.zyzw, c9.x
abs r4.zw, v6.xyxy
abs r1.w, v6.z
max r2.w, r4.z, r1
rcp r3.x, r2.w
min r2.w, r4.z, r1
mul r2.w, r2, r3.x
mul r3.x, r2.w, r2.w
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad_sat r0.w, r0, c24.y, c24.z
mad r2.xyz, r0.w, r0, r1
mul r0.xy, v6, c9.x
mul r1.xy, v6, c10.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r0.w, r0, r1
add_pp r2.xyz, r2, -r0
mad_pp r2.xyz, r4.z, r2, r0
mad r1.x, r3, c19.y, c19.z
mad r3.y, r1.x, r3.x, c19.w
mul r1.xy, v6.zxzw, c10.x
mul r0.xy, v6.zxzw, c9.x
mul r5.xy, v6.zyzw, c16.x
mul_sat r3.w, c15.x, c15.x
mul r4.xy, v6.zxzw, c16.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r1.xyz, r0.w, r0, r1
add_pp r1.xyz, r1, -r2
mad_pp r1.xyz, r4.w, r1, r2
mad r3.y, r3, r3.x, c20.x
mad r0.x, r3.y, r3, c20.y
mad r0.x, r0, r3, c20.z
mul r0.y, r0.x, r2.w
mad r0.w, r1, c17.z, c17
mad r0.w, r1, r0, c18.x
add_pp r1.xyz, r1, c21.w
add r0.z, -r0.y, c20.w
add r0.x, r4.z, -r1.w
cmp r0.x, -r0, r0.y, r0.z
add r0.y, -r0.x, c18.w
cmp r0.x, v6.z, r0, r0.y
mul r0.z, v0.x, c11.x
cmp r0.x, v6, r0, -r0
mul r6.z, r0.x, c21.x
add r5.z, r6, c21.y
abs r0.x, v6.y
mul_sat r0.y, r0.z, c18.z
add r0.z, -r0.x, c17.y
mul_pp r1.xyz, r1, c22.x
mad_pp r1.xyz, r0.y, -r1, r1
add r3.xyz, v1, r1
mad r0.y, r0.x, c17.z, c17.w
mad r0.y, r0, r0.x, c18.x
add r1.x, -r1.w, c17.y
rsq r0.z, r0.z
rsq r1.x, r1.x
mad r0.x, r0.y, r0, c18.y
rcp r0.z, r0.z
mul r0.y, r0.x, r0.z
cmp r0.x, v6.y, c17, c17.y
mul r0.z, r0.x, r0.y
mad r0.y, -r0.z, c18.z, r0
mad r0.x, r0, c18.w, r0.y
mul r6.w, r0.x, c19.x
mov r5.w, r6
mad r0.w, r1, r0, c18.y
rcp r1.x, r1.x
mul r1.x, r0.w, r1
cmp r0.w, v6.z, c17.x, c17.y
mul r1.y, r0.w, r1.x
mad r0.z, -r1.y, c18, r1.x
mad r0.y, r0.w, c18.w, r0.z
mul r0.x, r0.y, c19
dsy r0.zw, v6.xyxy
mul r0.zw, r0, r0
dsx r2.w, r0.x
dsy r2.y, r0.x
dsx r0.xy, v6
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r0.y, r0.z, r0.w
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r2.z, r0.x, c21.x
mul r2.x, r0.y, c21
texldd r0.xyz, r5.zwzw, s0, r2.zwzw, r2
add_pp r7.xyz, r0, -r3
mul r6.xy, v6, c16.x
mad_pp r3.xyz, r3.w, r7, r3
texld r0, r6, s5
texld r1, r5, s5
add_pp r1, r1, -r0
mad_pp r1, r4.z, r1, r0
texldd r0.yw, r5.zwzw, s6, r2.zwzw, r2
add r7.xy, r0.wyzw, c21.w
mul r7.xy, r7, c22
texld r0, r4, s5
add_pp r0, r0, -r1
mad_pp r0, r4.w, r0, r1
add r6.zw, r6, r7.xyxy
mad r1.y, r6.w, c22.z, c22
frc r1.z, r1.y
add r1.x, v1.w, c21.z
frc r1.y, r1.x
add_sat r7.x, r1, -r1.y
mad r6.w, r1.z, c23.x, c23.y
texldd r1, r5.zwzw, s3, r2.zwzw, r2
mul_pp r1.w, r1, r7.x
mul_pp r2, r1, r0
sincos r0.xy, r6.w
mad r0.y, r6.z, c22.w, c22
add_pp r2.xyz, r2, -r3
frc r0.y, r0
mad_pp r2.xyz, r2.w, r2, r3
mad r5.z, r0.y, c23.x, c23.y
mov_pp r8.y, r0.x
sincos r0.xy, r5.z
dp4 r5.w, c1, c1
rsq r0.z, r5.w
mov_pp r8.xz, r0.yyxw
mul r7.xyz, r0.z, c1
rcp r5.w, v4.w
dp3_sat r0.x, v5, r7
dp3_pp_sat r5.z, -r8, -c14
add_pp r0.y, r5.z, -r0.x
mad_pp r0.z, r3.w, r0.y, r0.x
mad r0.xy, v4, r5.w, c6
texld r0.x, r0, s9
mul_pp r3.w, r0.z, c7
mad r7.xy, v4, r5.w, c5
mov r0.w, r0.x
texld r0.x, r7, s9
mad r7.xy, v4, r5.w, c4
mov r0.z, r0.x
texld r0.x, r7, s9
mad r7.xy, v4, r5.w, c3
mov r0.y, r0.x
texld r0.x, r7, s9
mad r0, -v4.z, r5.w, r0
mov r6.z, c2.x
cmp r0, r0, c17.y, r6.z
dp4_pp r0.z, r0, c22.x
rcp r5.w, v3.w
mad r7.xy, v3, r5.w, c21.y
dp3 r0.x, v3, v3
texld r0.w, r7, s7
cmp r0.y, -v3.z, c17.x, c17
mul_pp r0.y, r0, r0.w
texld r0.x, r0.x, s8
mul_pp r0.x, r0.y, r0
mul_pp r0.w, r0.x, r0.z
mul_pp r0.x, r0.w, r3.w
mul_pp_sat r3.w, r0.x, c24
dp3 r0.y, v6, c14
add r5.w, r0.y, c25.x
mov r0.x, c12
frc r6.z, r5.w
add r0.xyz, c7, r0.x
mad_sat r0.xyz, r0, r3.w, c0
texld r3, r5, s4
add_sat r5.w, r5, -r6.z
mul_pp r0.xyz, r0, r5.w
mul r7.xyz, r0, c13.x
mad_pp r7.xyz, r2, c8, r7
texld r2, r6, s4
add_pp r3, r3, -r2
mad_pp r2, r4.z, r3, r2
texld r3, r4, s4
add_pp r5.x, r5.z, c23.z
add_pp r3, r3, -r2
mad_pp r2, r4.w, r3, r2
mul_pp r1, r1, r2
mul_pp r4.x, r5, c7.w
mul_pp r0.w, r4.x, r0
mul_pp_sat r0.w, r0, c23
mad_pp r1.xyz, -r7, r0, r1
mul_pp r2.xyz, r7, r0
add_pp r0.w, -r0, c17.y
mul_pp r0.x, r1.w, r0.w
mad_pp oC0.xyz, r0.x, r1, r2
mov_pp oC0.w, c17.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightShadowData]
Vector 3 [_ShadowOffsets0]
Vector 4 [_ShadowOffsets1]
Vector 5 [_ShadowOffsets2]
Vector 6 [_ShadowOffsets3]
Vector 7 [_LightColor0]
Vector 8 [_Color]
Float 9 [_DetailScale]
Float 10 [_DetailVertScale]
Float 11 [_DetailDist]
Float 12 [_MinLight]
Float 13 [_Albedo]
Vector 14 [_SunDir]
Float 15 [_PlanetOpacity]
Float 16 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_BumpMap] 2D
SetTexture 7 [_LightTexture0] 2D
SetTexture 8 [_LightTextureB0] 2D
SetTexture 9 [_ShadowMapTexture] 2D
"ps_3_0
; 189 ALU, 27 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_2d s7
dcl_2d s8
dcl_2d s9
def c17, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c18, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c19, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c20, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c21, 0.15915494, 0.50000000, 0.99000001, -0.50000000
def c22, 0.25000000, 0.50000000, 0.49999991, 0.99999982
def c23, 6.28318501, -3.14159298, -0.01000214, 4.03944778
def c24, -0.94999999, 32.00000000, 0.50000000, 4.00000000
def c25, 1.00999999, 0, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3
dcl_texcoord4 v4
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
mov r0.xyz, v6
dp3_sat r0.x, v2, -r0
add r0.w, r0.x, c24.x
mul r1.xy, v6.zyzw, c10.x
mul r0.xy, v6.zyzw, c9.x
abs r2.w, v6.z
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad_sat r0.w, r0, c24.y, c24.z
mad r3.xyz, r0.w, r0, r1
mul r1.xy, v6, c10.x
mul r0.xy, v6, c9.x
abs r1.zw, v6.xyxy
texld r2.xyz, r1, s1
max r1.x, r1.z, r2.w
rcp r1.y, r1.x
min r1.x, r1.z, r2.w
mul r3.w, r1.x, r1.y
mul r4.x, r3.w, r3.w
mad r1.x, r4, c19.y, c19.z
mad r4.y, r1.x, r4.x, c19.w
texld r0.xyz, r0, s2
add r0.xyz, r0, -r2
mad r0.xyz, r0.w, r0, r2
add_pp r2.xyz, r3, -r0
mad_pp r3.xyz, r1.z, r2, r0
mul r1.xy, v6.zxzw, c10.x
texld r2.xyz, r1, s1
mul r0.xy, v6.zxzw, c9.x
texld r0.xyz, r0, s2
add r0.xyz, r0, -r2
mad r2.xyz, r0.w, r0, r2
add_pp r2.xyz, r2, -r3
mad_pp r2.xyz, r1.w, r2, r3
mad r1.x, r4.y, r4, c20
mad r0.x, r1, r4, c20.y
mad r0.x, r0, r4, c20.z
mul r0.y, r0.x, r3.w
add r1.x, -r2.w, c17.y
mad r0.w, r2, c17.z, c17
mad r0.w, r2, r0, c18.x
add_pp r2.xyz, r2, c21.w
rsq r1.x, r1.x
add r0.z, -r0.y, c20.w
add r0.x, r1.z, -r2.w
cmp r0.x, -r0, r0.y, r0.z
add r0.y, -r0.x, c18.w
cmp r0.x, v6.z, r0, r0.y
mul r0.z, v0.x, c11.x
cmp r0.x, v6, r0, -r0
mul r6.z, r0.x, c21.x
add r3.z, r6, c21.y
abs r0.x, v6.y
mul_sat r0.y, r0.z, c18.z
add r0.z, -r0.x, c17.y
mul_pp r2.xyz, r2, c22.x
mad_pp r2.xyz, r0.y, -r2, r2
mad r0.y, r0.x, c17.z, c17.w
mad r0.y, r0, r0.x, c18.x
rsq r0.z, r0.z
add r4.xyz, v1, r2
mad r0.x, r0.y, r0, c18.y
rcp r0.z, r0.z
mul r0.y, r0.x, r0.z
cmp r0.x, v6.y, c17, c17.y
mul r0.z, r0.x, r0.y
mad r0.y, -r0.z, c18.z, r0
mad r0.x, r0, c18.w, r0.y
mul r6.w, r0.x, c19.x
mov r3.w, r6
mad r0.w, r2, r0, c18.y
mul r6.xy, v6.zyzw, c16.x
rcp r1.x, r1.x
mul r1.x, r0.w, r1
cmp r0.w, v6.z, c17.x, c17.y
mul r1.y, r0.w, r1.x
mad r0.z, -r1.y, c18, r1.x
mad r0.y, r0.w, c18.w, r0.z
mul r0.x, r0.y, c19
dsy r0.zw, v6.xyxy
mul r0.zw, r0, r0
dsx r3.y, r0.x
dsy r1.y, r0.x
dsx r0.xy, v6
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r0.y, r0.z, r0.w
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r3.x, r0, c21
mul r1.x, r0.y, c21
texldd r0.xyz, r3.zwzw, s0, r3, r1
add_pp r5.xyz, r0, -r4
mul_sat r4.w, c15.x, c15.x
mad_pp r4.xyz, r4.w, r5, r4
texldd r8.yw, r3.zwzw, s6, r3, r1
mul r7.xy, v6, c16.x
texld r0, r7, s5
texld r2, r6, s5
add_pp r2, r2, -r0
mad_pp r2, r1.z, r2, r0
mul r5.xy, v6.zxzw, c16.x
texld r0, r5, s5
add_pp r0, r0, -r2
mad_pp r0, r1.w, r0, r2
add r5.zw, r8.xywy, c21.w
mul r2.xy, r5.zwzw, c22
add r5.zw, r6, r2.xyxy
add r2.x, v1.w, c21.z
mad r2.z, r5.w, c22, c22.y
frc r2.y, r2.x
frc r5.w, r2.z
add_sat r6.z, r2.x, -r2.y
texldd r2, r3.zwzw, s3, r3, r1
mad r1.y, r5.z, c22.w, c22
mul_pp r2.w, r2, r6.z
mul_pp r3, r2, r0
add_pp r3.xyz, r3, -r4
mad r1.x, r5.w, c23, c23.y
sincos r0.xy, r1.x
frc r0.y, r1
rcp r5.z, v4.w
mad_pp r3.xyz, r3.w, r3, r4
mad r1.x, r0.y, c23, c23.y
mov_pp r8.y, r0.x
sincos r0.xy, r1.x
dp4 r0.z, c1, c1
mov_pp r8.xz, r0.yyxw
dp3_pp_sat r1.y, -r8, -c14
rsq r0.z, r0.z
mul r0.xyz, r0.z, c1
dp3_sat r0.w, v5, r0
add_pp r1.x, r1.y, -r0.w
mad_pp r0.w, r4, r1.x, r0
mad r0.xyz, v4, r5.z, c6
mad r8.xyz, v4, r5.z, c4
texld r1.x, r8, s9
mad r8.xyz, v4, r5.z, c3
mul_pp r4.w, r0, c7
texld r0.x, r0, s9
mov_pp r0.w, r0.x
mad r0.xyz, v4, r5.z, c5
texld r0.x, r0, s9
mov_pp r0.z, r0.x
mov_pp r0.y, r1.x
mov r0.x, c2
add r1.x, c17.y, -r0
texld r0.x, r8, s9
mad r0, r0, r1.x, c2.x
dp4_pp r0.z, r0, c22.x
rcp r1.x, v3.w
mad r8.xy, v3, r1.x, c21.y
dp3 r0.x, v3, v3
texld r0.w, r8, s7
cmp r0.y, -v3.z, c17.x, c17
mul_pp r0.y, r0, r0.w
texld r0.x, r0.x, s8
mul_pp r0.x, r0.y, r0
mul_pp r0.w, r0.x, r0.z
mul_pp r0.x, r0.w, r4.w
mul_pp_sat r1.x, r0, c24.w
dp3 r0.y, v6, c14
add r4.w, r0.y, c25.x
mov r0.x, c12
frc r5.z, r4.w
add r0.xyz, c7, r0.x
mad_sat r0.xyz, r0, r1.x, c0
add_sat r4.w, r4, -r5.z
mul_pp r0.xyz, r0, r4.w
mul r8.xyz, r0, c13.x
mad_pp r8.xyz, r3, c8, r8
texld r3, r7, s4
texld r4, r6, s4
add_pp r4, r4, -r3
mad_pp r3, r1.z, r4, r3
texld r4, r5, s4
add_pp r1.x, r1.y, c23.z
mul_pp r5.x, r1, c7.w
add_pp r4, r4, -r3
mad_pp r1, r1.w, r4, r3
mul_pp r1, r2, r1
mul_pp r0.w, r5.x, r0
mul_pp_sat r0.w, r0, c23
mad_pp r1.xyz, -r8, r0, r1
mul_pp r2.xyz, r8, r0
add_pp r0.w, -r0, c17.y
mul_pp r0.x, r1.w, r0.w
mad_pp oC0.xyz, r0.x, r1, r2
mov_pp oC0.w, c17.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightPositionRange]
Vector 3 [_LightShadowData]
Vector 4 [_LightColor0]
Vector 5 [_Color]
Float 6 [_DetailScale]
Float 7 [_DetailVertScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_Albedo]
Vector 11 [_SunDir]
Float 12 [_PlanetOpacity]
Float 13 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_BumpMap] 2D
SetTexture 7 [_ShadowMapTexture] CUBE
SetTexture 8 [_LightTexture0] 2D
"ps_3_0
; 188 ALU, 26 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_cube s7
dcl_2d s8
def c14, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c15, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c16, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c17, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c18, 0.15915494, 0.50000000, 0.99000001, -0.50000000
def c19, 0.25000000, 0.50000000, 0.49999991, 0.99999982
def c20, 6.28318501, -3.14159298, -0.01000214, 0.00781250
def c21, 0.00781250, -0.00781250, 0.97000003, 4.03944778
def c22, 1.00000000, 0.00392157, 0.00001538, 0.00000001
def c23, -0.94999999, 32.00000000, 0.50000000, 4.00000000
def c24, 1.00999999, 0, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
mov r0.xyz, v6
dp3_sat r0.x, v2, -r0
add r0.w, r0.x, c23.x
mul r1.xy, v6.zyzw, c7.x
mul r0.xy, v6.zyzw, c6.x
abs r6.zw, v6.xyxy
abs r1.w, v6.z
max r2.w, r6.z, r1
rcp r3.x, r2.w
min r2.w, r6.z, r1
mul r2.w, r2, r3.x
mul r3.x, r2.w, r2.w
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad_sat r0.w, r0, c23.y, c23.z
mad r2.xyz, r0.w, r0, r1
mul r0.xy, v6, c6.x
mul r1.xy, v6, c7.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r0.w, r0, r1
add_pp r2.xyz, r2, -r0
mad_pp r2.xyz, r6.z, r2, r0
mad r1.x, r3, c16.y, c16.z
mad r3.y, r1.x, r3.x, c16.w
mul r1.xy, v6.zxzw, c7.x
mul r0.xy, v6.zxzw, c6.x
mad r3.y, r3, r3.x, c17.x
mul_sat r5.w, c12.x, c12.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r1.xyz, r0.w, r0, r1
add_pp r1.xyz, r1, -r2
mad_pp r1.xyz, r6.w, r1, r2
mad r0.x, r3.y, r3, c17.y
mad r0.x, r0, r3, c17.z
mul r0.y, r0.x, r2.w
mad r0.w, r1, c14.z, c14
mad r0.w, r1, r0, c15.x
add_pp r1.xyz, r1, c18.w
add r0.z, -r0.y, c17.w
add r0.x, r6.z, -r1.w
cmp r0.x, -r0, r0.y, r0.z
add r0.y, -r0.x, c15.w
cmp r0.x, v6.z, r0, r0.y
mul r0.z, v0.x, c8.x
cmp r0.x, v6, r0, -r0
mul r3.z, r0.x, c18.x
add r3.x, r3.z, c18.y
abs r0.x, v6.y
mul_sat r0.y, r0.z, c15.z
add r0.z, -r0.x, c14.y
mul_pp r1.xyz, r1, c19.x
mad_pp r1.xyz, r0.y, -r1, r1
add r4.xyz, v1, r1
mad r0.y, r0.x, c14.z, c14.w
mad r0.y, r0, r0.x, c15.x
add r1.x, -r1.w, c14.y
rsq r0.z, r0.z
rsq r1.x, r1.x
mad r0.x, r0.y, r0, c15.y
rcp r0.z, r0.z
mul r0.y, r0.x, r0.z
cmp r0.x, v6.y, c14, c14.y
mul r0.z, r0.x, r0.y
mad r0.y, -r0.z, c15.z, r0
mad r0.x, r0, c15.w, r0.y
mul r3.w, r0.x, c16.x
mov r3.y, r3.w
mad r0.w, r1, r0, c15.y
rcp r1.x, r1.x
mul r1.x, r0.w, r1
cmp r0.w, v6.z, c14.x, c14.y
mul r1.y, r0.w, r1.x
mad r0.z, -r1.y, c15, r1.x
mad r0.y, r0.w, c15.w, r0.z
mul r0.x, r0.y, c16
mul r7.xy, v6.zyzw, c13.x
dsy r0.zw, v6.xyxy
mul r0.zw, r0, r0
dsx r2.w, r0.x
dsy r2.y, r0.x
dsx r0.xy, v6
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r0.y, r0.z, r0.w
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r2.z, r0.x, c18.x
mul r2.x, r0.y, c18
texldd r0.xyz, r3, s0, r2.zwzw, r2
add_pp r5.xyz, r0, -r4
mul r8.xy, v6, c13.x
mad_pp r4.xyz, r5.w, r5, r4
texld r0, r8, s5
texld r1, r7, s5
add_pp r1, r1, -r0
mad_pp r1, r6.z, r1, r0
texldd r0.yw, r3, s6, r2.zwzw, r2
add r5.xy, r0.wyzw, c18.w
mul r5.xy, r5, c19
mul r6.xy, v6.zxzw, c13.x
texld r0, r6, s5
add_pp r0, r0, -r1
mad_pp r0, r6.w, r0, r1
add r3.zw, r3, r5.xyxy
mad r1.y, r3.w, c19.z, c19
frc r1.z, r1.y
add r1.x, v1.w, c18.z
frc r1.y, r1.x
mad r3.w, r1.z, c20.x, c20.y
add_sat r4.w, r1.x, -r1.y
texldd r1, r3, s3, r2.zwzw, r2
mul_pp r1.w, r1, r4
mul_pp r2, r1, r0
sincos r0.xy, r3.w
mad r0.y, r3.z, c19.w, c19
add_pp r2.xyz, r2, -r4
frc r0.y, r0
mad_pp r2.xyz, r2.w, r2, r4
mov_pp r5.y, r0.x
mad r3.x, r0.y, c20, c20.y
sincos r0.xy, r3.x
dp4 r3.y, c1, c1
rsq r0.z, r3.y
mul r3.xyz, r0.z, c1
mov_pp r5.xz, r0.yyxw
dp3_sat r0.w, v5, r3
dp3_pp_sat r4.w, -r5, -c11
add_pp r3.x, r4.w, -r0.w
mad_pp r3.x, r5.w, r3, r0.w
mul_pp r7.z, r3.x, c4.w
add r0.xyz, v4, c21.xyyw
texld r0, r0, s7
dp4 r5.w, r0, c22
add r0.xyz, v4, c21.yxyw
texld r0, r0, s7
dp4 r5.z, r0, c22
add r3.xyz, v4, c21.yyxw
texld r3, r3, s7
dp4 r5.y, r3, c22
add r0.xyz, v4, c20.w
texld r0, r0, s7
dp3 r3.x, v4, v4
add_pp r4.w, r4, c20.z
rsq r3.x, r3.x
dp4 r5.x, r0, c22
rcp r0.x, r3.x
mul r0.x, r0, c2.w
mad r0, -r0.x, c21.z, r5
mov r3.x, c3
cmp r3, r0, c14.y, r3.x
dp3 r0.x, v3, v3
dp4_pp r0.y, r3, c19.x
texld r0.x, r0.x, s8
mul r0.w, r0.x, r0.y
mul_pp r0.x, r0.w, r7.z
mul_pp_sat r3.x, r0, c23.w
dp3 r0.y, v6, c11
add r3.y, r0, c24.x
frc r3.z, r3.y
mov r0.x, c9
add r0.xyz, c4, r0.x
mul_pp r4.w, r4, c4
mul_pp r0.w, r4, r0
mul_pp_sat r0.w, r0, c21
mad_sat r0.xyz, r0, r3.x, c0
add_sat r3.y, r3, -r3.z
mul_pp r0.xyz, r0, r3.y
mul r3.xyz, r0, c10.x
mad_pp r4.xyz, r2, c5, r3
texld r2, r8, s4
texld r3, r7, s4
add_pp r3, r3, -r2
mad_pp r2, r6.z, r3, r2
texld r3, r6, s4
add_pp r3, r3, -r2
mad_pp r2, r6.w, r3, r2
mul_pp r1, r1, r2
mad_pp r1.xyz, -r4, r0, r1
mul_pp r2.xyz, r4, r0
add_pp r0.w, -r0, c14.y
mul_pp r0.x, r1.w, r0.w
mad_pp oC0.xyz, r0.x, r1, r2
mov_pp oC0.w, c14.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightPositionRange]
Vector 3 [_LightShadowData]
Vector 4 [_LightColor0]
Vector 5 [_Color]
Float 6 [_DetailScale]
Float 7 [_DetailVertScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_Albedo]
Vector 11 [_SunDir]
Float 12 [_PlanetOpacity]
Float 13 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_BumpMap] 2D
SetTexture 7 [_ShadowMapTexture] CUBE
SetTexture 8 [_LightTextureB0] 2D
SetTexture 9 [_LightTexture0] CUBE
"ps_3_0
; 189 ALU, 27 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_cube s7
dcl_2d s8
dcl_cube s9
def c14, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c15, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c16, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c17, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c18, 0.15915494, 0.50000000, 0.99000001, -0.50000000
def c19, 0.25000000, 0.50000000, 0.49999991, 0.99999982
def c20, 6.28318501, -3.14159298, -0.01000214, 0.00781250
def c21, 0.00781250, -0.00781250, 0.97000003, 4.03944778
def c22, 1.00000000, 0.00392157, 0.00001538, 0.00000001
def c23, -0.94999999, 32.00000000, 0.50000000, 4.00000000
def c24, 1.00999999, 0, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
mov r0.xyz, v6
dp3_sat r0.x, v2, -r0
add r0.w, r0.x, c23.x
mul r0.xy, v6.zyzw, c7.x
mul r1.xy, v6.zyzw, c6.x
abs r2.w, v6.z
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad_sat r1.w, r0, c23.y, c23.z
mad r3.xyz, r1.w, r1, r0
mul r1.xy, v6, c6.x
abs r0.zw, v6.xyxy
mul r0.xy, v6, c7.x
texld r2.xyz, r1, s2
texld r1.xyz, r0, s1
add r2.xyz, r2, -r1
mad r1.xyz, r1.w, r2, r1
add_pp r2.xyz, r3, -r1
mad_pp r3.xyz, r0.z, r2, r1
max r0.x, r0.z, r2.w
mul r1.xy, v6.zxzw, c7.x
min r0.y, r0.z, r2.w
rcp r0.x, r0.x
mul r3.w, r0.y, r0.x
mul r4.x, r3.w, r3.w
mad r0.x, r4, c16.y, c16.z
mad r4.y, r0.x, r4.x, c16.w
mul r0.xy, v6.zxzw, c6.x
texld r2.xyz, r0, s2
texld r1.xyz, r1, s1
add r2.xyz, r2, -r1
mad r1.xyz, r1.w, r2, r1
add_pp r1.xyz, r1, -r3
mad_pp r1.xyz, r0.w, r1, r3
mad r0.x, r4.y, r4, c17
mad r0.x, r0, r4, c17.y
mad r0.x, r0, r4, c17.z
mul r0.y, r0.x, r3.w
mul r4.xy, v6, c13.x
add_pp r1.xyz, r1, c18.w
texld r5, r4, s5
add r0.x, -r0.y, c17.w
add r1.w, r0.z, -r2
cmp r1.w, -r1, r0.y, r0.x
add r0.y, -r1.w, c15.w
cmp r0.y, v6.z, r1.w, r0
mul r0.x, v0, c8
abs r1.w, v6.y
cmp r3.x, v6.y, c14, c14.y
mul_sat r6.z, c12.x, c12.x
mul_sat r0.x, r0, c15.z
mul_pp r1.xyz, r1, c19.x
mad_pp r1.xyz, r0.x, -r1, r1
cmp r0.x, v6, r0.y, -r0.y
mul r6.x, r0, c18
add r0.x, -r1.w, c14.y
mad r0.y, r1.w, c14.z, c14.w
mad r0.y, r0, r1.w, c15.x
mad r0.y, r0, r1.w, c15
rsq r0.x, r0.x
rcp r0.x, r0.x
mul r2.z, r0.y, r0.x
mul r2.y, r3.x, r2.z
add r0.x, -r2.w, c14.y
mad r0.y, r2.w, c14.z, c14.w
mad r0.y, r2.w, r0, c15.x
rsq r0.x, r0.x
add r2.x, r6, c18.y
mad r2.y, -r2, c15.z, r2.z
add r1.xyz, v1, r1
cmp r1.w, v6.z, c14.x, c14.y
rcp r0.x, r0.x
mad r0.y, r2.w, r0, c15
mul r0.y, r0, r0.x
mul r0.x, r1.w, r0.y
mad r0.x, -r0, c15.z, r0.y
mad r0.y, r3.x, c15.w, r2
mul r6.y, r0, c16.x
mad r0.x, r1.w, c15.w, r0
mul r0.x, r0, c16
dsx r3.xy, v6
mul r3.xy, r3, r3
dsy r4.w, r0.x
dsx r2.w, r0.x
dsy r0.xy, v6
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r1.w, r3.x, r3.y
rsq r0.y, r1.w
rcp r0.y, r0.y
rsq r0.x, r0.x
rcp r0.x, r0.x
mul r4.z, r0.x, c18.x
mul r2.z, r0.y, c18.x
mov r2.y, r6
texldd r3.xyz, r2, s0, r2.zwzw, r4.zwzw
add_pp r8.xyz, r3, -r1
mul r0.xy, v6.zyzw, c13.x
texld r3, r0, s5
add_pp r7, r3, -r5
mad_pp r3.xyz, r6.z, r8, r1
mad_pp r1, r0.z, r7, r5
texldd r8.yw, r2, s6, r2.zwzw, r4.zwzw
add r5.zw, r8.xywy, c18.w
mul r5.xy, v6.zxzw, c13.x
texld r7, r5, s5
add_pp r7, r7, -r1
mul r5.zw, r5, c19.xyxy
add r5.zw, r6.xyxy, r5
mad r3.w, r5, c19.z, c19.y
add r6.x, v1.w, c18.z
frc r5.w, r6.x
texldd r2, r2, s3, r2.zwzw, r4.zwzw
add_sat r5.w, r6.x, -r5
frc r3.w, r3
mad r4.z, r3.w, c20.x, c20.y
mad_pp r1, r0.w, r7, r1
mul_pp r2.w, r2, r5
sincos r7.xy, r4.z
mad r3.w, r5.z, c19, c19.y
frc r3.w, r3
mul_pp r1, r2, r1
mov_pp r8.y, r7.x
mad r3.w, r3, c20.x, c20.y
sincos r7.xy, r3.w
dp4 r3.w, c1, c1
mov_pp r8.xz, r7.yyxw
rsq r3.w, r3.w
mul r7.xyz, r3.w, c1
dp3_sat r4.w, v5, r7
dp3_pp_sat r3.w, -r8, -c11
add_pp r4.z, r3.w, -r4.w
mad_pp r4.z, r6, r4, r4.w
add r6.xyz, v4, c21.yyxw
texld r8, r6, s7
add r7.xyz, v4, c21.xyyw
texld r7, r7, s7
dp4 r6.w, r7, c22
add r7.xyz, v4, c21.yxyw
texld r7, r7, s7
dp4 r6.z, r7, c22
add r7.xyz, v4, c20.w
texld r7, r7, s7
dp4 r6.x, r7, c22
add_pp r7.xyz, r1, -r3
mad_pp r3.xyz, r1.w, r7, r3
texld r7, r0, s4
add_pp r0.x, r3.w, c20.z
dp3 r4.w, v4, v4
rsq r4.w, r4.w
rcp r5.z, r4.w
mov r4.w, c3.x
mul r5.z, r5, c2.w
dp4 r6.y, r8, c22
mad r6, -r5.z, c21.z, r6
cmp r6, r6, c14.y, r4.w
dp4_pp r5.z, r6, c19.x
dp3 r6.x, v3, v3
mul_pp r4.z, r4, c4.w
texld r6.x, r6.x, s8
texld r4.w, v3, s9
mul r4.w, r6.x, r4
mul r5.z, r4.w, r5
mul_pp r4.w, r5.z, r4.z
mul_pp r1.w, r0.x, c4
mov r6.x, c9
mul_pp r1.w, r1, r5.z
mul_pp_sat r1.w, r1, c21
dp3 r4.z, v6, c11
mul_pp_sat r5.w, r4, c23
add r4.w, r4.z, c24.x
frc r4.z, r4.w
add r6.xyz, c4, r6.x
add_sat r4.z, r4.w, -r4
mad_sat r6.xyz, r6, r5.w, c0
mul_pp r6.xyz, r6, r4.z
texld r4, r4, s4
mul r1.xyz, r6, c10.x
mad_pp r1.xyz, r3, c5, r1
add_pp r7, r7, -r4
mad_pp r3, r0.z, r7, r4
texld r4, r5, s4
add_pp r4, r4, -r3
mad_pp r0, r0.w, r4, r3
mul_pp r0, r2, r0
mad_pp r0.xyz, -r1, r6, r0
add_pp r1.w, -r1, c14.y
mul_pp r1.xyz, r1, r6
mul_pp r0.w, r0, r1
mad_pp oC0.xyz, r0.w, r0, r1
mov_pp oC0.w, c14.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
Float 8 [_Albedo]
Vector 9 [_SunDir]
Float 10 [_PlanetOpacity]
Float 11 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_BumpMap] 2D
SetTexture 7 [_LightTexture0] 2D
"ps_3_0
; 173 ALU, 22 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_2d s7
def c12, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c13, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c14, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c15, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c16, 0.15915494, 0.50000000, 0.99000001, -0.50000000
def c17, 0.25000000, 0.50000000, 0.49999991, 0.99999982
def c18, 6.28318501, -3.14159298, -0.01000214, 4.03944778
def c19, -0.94999999, 32.00000000, 0.50000000, 4.00000000
def c20, 1.00999999, 0, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord5 v4.xyz
dcl_texcoord6 v5.xyz
mov r0.xyz, v5
dp3_sat r0.x, v2, -r0
add r0.w, r0.x, c19.x
mad_sat r1.w, r0, c19.y, c19.z
mul r0.xy, v5.zyzw, c5.x
mul r1.xy, v5.zyzw, c4.x
abs r4.zw, v5.xyxy
abs r0.w, v5.z
max r2.w, r4.z, r0
rcp r3.x, r2.w
min r2.w, r4.z, r0
mul r2.w, r2, r3.x
mul r3.x, r2.w, r2.w
mad r3.y, r3.x, c14, c14.z
mad r3.y, r3, r3.x, c14.w
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad r2.xyz, r1.w, r1, r0
mul r0.xy, v5, c4.x
mul r1.xy, v5, c5.x
mad r3.y, r3, r3.x, c15.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r1.w, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r4.z, r1, r0
mul r1.xy, v5.zxzw, c5.x
mul r0.xy, v5.zxzw, c4.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r1.w, r0, r1
add_pp r0.xyz, r0, -r2
mad_pp r2.xyz, r4.w, r0, r2
mad r1.x, r3.y, r3, c15.y
mad r1.x, r1, r3, c15.z
mul r0.y, r1.x, r2.w
add_pp r1.xyz, r2, c16.w
add r2.x, -r0.w, c12.y
mad r1.w, r0, c12.z, c12
rsq r2.x, r2.x
add r0.z, -r0.y, c15.w
add r0.x, r4.z, -r0.w
cmp r0.x, -r0, r0.y, r0.z
add r0.y, -r0.x, c13.w
cmp r0.x, v5.z, r0, r0.y
mad r1.w, r0, r1, c13.x
mul r0.z, v0.x, c6.x
cmp r0.x, v5, r0, -r0
mul r3.x, r0, c16
add r7.x, r3, c16.y
abs r0.x, v5.y
mul_sat r0.y, r0.z, c13.z
add r0.z, -r0.x, c12.y
mul_pp r1.xyz, r1, c17.x
mad_pp r1.xyz, r0.y, -r1, r1
mad r0.y, r0.x, c12.z, c12.w
mad r0.y, r0, r0.x, c13.x
rsq r0.z, r0.z
mad r0.w, r0, r1, c13.y
rcp r2.x, r2.x
mul r1.w, r0, r2.x
cmp r0.w, v5.z, c12.x, c12.y
mul r2.x, r0.w, r1.w
add r1.xyz, v1, r1
mad r0.x, r0.y, r0, c13.y
rcp r0.z, r0.z
mul r0.y, r0.x, r0.z
cmp r0.x, v5.y, c12, c12.y
mul r0.z, r0.x, r0.y
mad r0.y, -r0.z, c13.z, r0
mad r0.x, r0, c13.w, r0.y
mad r0.z, -r2.x, c13, r1.w
mul r4.x, r0, c14
mad r0.y, r0.w, c13.w, r0.z
mul r0.x, r0.y, c14
dsy r0.zw, v5.xyxy
mul r0.zw, r0, r0
mov r7.y, r4.x
dsx r6.w, r0.x
dsy r5.w, r0.x
dsx r0.xy, v5
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r0.y, r0.z, r0.w
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r6.z, r0.x, c16.x
mul r5.z, r0.y, c16.x
texldd r3.yw, r7, s6, r6.zwzw, r5.zwzw
add r3.zw, r3.xywy, c16.w
texldd r0.xyz, r7, s0, r6.zwzw, r5.zwzw
mov r3.y, r4.x
add_pp r0.xyz, r0, -r1
mul_sat r2.w, c10.x, c10.x
mad_pp r2.xyz, r2.w, r0, r1
mul r5.xy, v5.zyzw, c11.x
mul r6.xy, v5, c11.x
mul r4.xy, v5.zxzw, c11.x
texld r1, r6, s5
texld r0, r5, s5
add_pp r0, r0, -r1
mad_pp r1, r4.z, r0, r1
mul r0.xy, r3.zwzw, c17
add r3.xy, r3, r0
texld r0, r4, s5
add_pp r0, r0, -r1
mad_pp r1, r4.w, r0, r1
mad r3.y, r3, c17.z, c17
frc r0.x, r3.y
mad r0.y, r3.x, c17.w, c17
mad r0.x, r0, c18, c18.y
sincos r3.xy, r0.x
frc r0.y, r0
mad r3.y, r0, c18.x, c18
sincos r0.xy, r3.y
mov_pp r3.y, r3.x
mov_pp r3.xz, r0.yyxw
dp4 r0.z, c1, c1
rsq r0.x, r0.z
mul r0.xyz, r0.x, c1
dp3_sat r7.z, v4, r0
dp3_pp_sat r7.w, -r3, -c9
add r0.w, v1, c16.z
frc r0.x, r0.w
add_sat r3.x, r0.w, -r0
texldd r0, r7, s3, r6.zwzw, r5.zwzw
mul_pp r3.w, r0, r3.x
mov_pp r3.xyz, r0
mul_pp r1, r3, r1
add_pp r1.xyz, r1, -r2
add_pp r8.x, r7.w, -r7.z
mad_pp r0.y, r2.w, r8.x, r7.z
dp3 r0.x, v3, v3
dp3 r0.w, v5, c9
add r0.w, r0, c20.x
mad_pp r1.xyz, r1.w, r1, r2
frc r2.w, r0
texld r0.x, r0.x, s7
mul_pp r0.y, r0, c2.w
mul_pp r0.y, r0.x, r0
mul_pp_sat r0.z, r0.y, c19.w
mov r0.y, c7.x
add r7.xyz, c2, r0.y
add_sat r0.y, r0.w, -r2.w
mad_sat r7.xyz, r7, r0.z, c0
mul_pp r7.xyz, r7, r0.y
texld r2, r5, s4
mul r0.yzw, r7.xxyz, c8.x
mad_pp r0.yzw, r1.xxyz, c3.xxyz, r0
texld r1, r6, s4
add_pp r2, r2, -r1
mad_pp r1, r4.z, r2, r1
texld r2, r4, s4
add_pp r2, r2, -r1
mad_pp r1, r4.w, r2, r1
mul_pp r1, r3, r1
add_pp r5.x, r7.w, c18.z
mul_pp r4.x, r5, c2.w
mul_pp r0.x, r4, r0
mul_pp_sat r0.x, r0, c18.w
add_pp r0.x, -r0, c12.y
mad_pp r1.xyz, -r0.yzww, r7, r1
mul_pp r2.xyz, r0.yzww, r7
mul_pp r0.x, r1.w, r0
mad_pp oC0.xyz, r0.x, r1, r2
mov_pp oC0.w, c12.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
Float 8 [_Albedo]
Vector 9 [_SunDir]
Float 10 [_PlanetOpacity]
Float 11 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_BumpMap] 2D
"ps_3_0
; 169 ALU, 21 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
def c12, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c13, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c14, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c15, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c16, 0.15915494, 0.50000000, 0.99000001, -0.50000000
def c17, 0.25000000, 0.50000000, 0.49999991, 0.99999982
def c18, 6.28318501, -3.14159298, -0.01000214, 4.03944778
def c19, -0.94999999, 32.00000000, 0.50000000, 4.00000000
def c20, 1.00999999, 0, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1
dcl_texcoord2 v2.xyz
dcl_texcoord5 v3.xyz
dcl_texcoord6 v4.xyz
mov r0.xyz, v4
dp3_sat r0.x, v2, -r0
add r0.w, r0.x, c19.x
mad_sat r1.w, r0, c19.y, c19.z
mul r0.xy, v4.zyzw, c5.x
mul r1.xy, v4.zyzw, c4.x
abs r6.zw, v4.xyxy
abs r0.w, v4.z
max r2.w, r6.z, r0
rcp r3.x, r2.w
min r2.w, r6.z, r0
mul r2.w, r2, r3.x
mul r3.x, r2.w, r2.w
mad r3.y, r3.x, c14, c14.z
mad r3.y, r3, r3.x, c14.w
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad r2.xyz, r1.w, r1, r0
mul r0.xy, v4, c4.x
mul r1.xy, v4, c5.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r1.w, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r6.z, r1, r0
mul r1.xy, v4.zxzw, c5.x
mul r0.xy, v4.zxzw, c4.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r1.w, r0, r1
add_pp r0.xyz, r0, -r2
mad_pp r2.xyz, r6.w, r0, r2
mad r3.y, r3, r3.x, c15.x
mad r1.x, r3.y, r3, c15.y
mad r1.x, r1, r3, c15.z
mul r0.y, r1.x, r2.w
add_pp r1.xyz, r2, c16.w
add r0.z, -r0.y, c15.w
add r0.x, r6.z, -r0.w
cmp r0.x, -r0, r0.y, r0.z
add r0.y, -r0.x, c13.w
cmp r0.x, v4.z, r0, r0.y
mul r0.z, v0.x, c6.x
cmp r0.x, v4, r0, -r0
mul r4.x, r0, c16
add r5.z, r4.x, c16.y
abs r0.x, v4.y
mul_sat r0.y, r0.z, c13.z
add r0.z, -r0.x, c12.y
mul_pp r1.xyz, r1, c17.x
mad_pp r1.xyz, r0.y, -r1, r1
add r2.xyz, v1, r1
mad r0.y, r0.x, c12.z, c12.w
mad r0.y, r0, r0.x, c13.x
add r1.y, -r0.w, c12
mad r1.x, r0.w, c12.z, c12.w
mad r1.x, r0.w, r1, c13
rsq r0.z, r0.z
rsq r1.y, r1.y
mad r0.w, r0, r1.x, c13.y
rcp r1.y, r1.y
mul r1.x, r0.w, r1.y
cmp r0.w, v4.z, c12.x, c12.y
mad r0.x, r0.y, r0, c13.y
rcp r0.z, r0.z
mul r0.y, r0.x, r0.z
cmp r0.x, v4.y, c12, c12.y
mul r0.z, r0.x, r0.y
mad r0.y, -r0.z, c13.z, r0
mad r0.x, r0, c13.w, r0.y
mul r6.x, r0, c14
mul r1.y, r0.w, r1.x
mad r0.z, -r1.y, c13, r1.x
mad r0.y, r0.w, c13.w, r0.z
mul r0.x, r0.y, c14
dsy r1.xy, v4
dsx r5.y, r0.x
dsy r0.w, r0.x
dsx r0.xy, v4
mul r0.xy, r0, r0
add r0.x, r0, r0.y
mul r1.xy, r1, r1
add r0.y, r1.x, r1
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r5.x, r0, c16
mul r0.z, r0.y, c16.x
mov r5.w, r6.x
texldd r4.yw, r5.zwzw, s6, r5, r0.zwzw
texldd r1.xyz, r5.zwzw, s0, r5, r0.zwzw
add r4.zw, r4.xywy, c16.w
mov r4.y, r6.x
add_pp r1.xyz, r1, -r2
mul_sat r3.w, c10.x, c10.x
mad_pp r3.xyz, r3.w, r1, r2
mul r7.xy, v4, c11.x
mul r0.xy, v4.zyzw, c11.x
texld r2, r7, s5
texld r1, r0, s5
add_pp r1, r1, -r2
mad_pp r2, r6.z, r1, r2
mul r1.xy, r4.zwzw, c17
add r4.xy, r4, r1
mul r6.xy, v4.zxzw, c11.x
texld r1, r6, s5
add_pp r1, r1, -r2
mad_pp r1, r6.w, r1, r2
mad r4.y, r4, c17.z, c17
frc r2.x, r4.y
mad r2.y, r4.x, c17.w, c17
mad r2.x, r2, c18, c18.y
sincos r4.xy, r2.x
frc r2.y, r2
mad r4.y, r2, c18.x, c18
sincos r2.xy, r4.y
mov_pp r4.y, r4.x
mov_pp r4.xz, r2.yyxw
dp4_pp r2.z, c1, c1
rsq_pp r2.x, r2.z
dp3_pp_sat r4.w, -r4, -c9
mul_pp r2.xyz, r2.x, c1
dp3_sat r4.x, v3, r2
add r2.w, v1, c16.z
frc r2.x, r2.w
add_sat r4.z, r2.w, -r2.x
texldd r2, r5.zwzw, s3, r5, r0.zwzw
mul_pp r2.w, r2, r4.z
mul_pp r1, r2, r1
add_pp r1.xyz, r1, -r3
add_pp r4.y, r4.w, -r4.x
mad_pp r0.z, r3.w, r4.y, r4.x
dp3 r0.w, v4, c9
add r3.w, r0, c20.x
mov r0.w, c7.x
mad_pp r3.xyz, r1.w, r1, r3
mul_pp r0.z, r0, c2.w
frc r5.x, r3.w
add r4.xyz, c2, r0.w
add_sat r0.w, r3, -r5.x
mul_pp_sat r0.z, r0, c19.w
mad_sat r4.xyz, r4, r0.z, c0
mul_pp r4.xyz, r4, r0.w
mul r5.xyz, r4, c8.x
texld r1, r7, s4
texld r0, r0, s4
add_pp r0, r0, -r1
mad_pp r0, r6.z, r0, r1
texld r1, r6, s4
add_pp r1, r1, -r0
mad_pp r0, r6.w, r1, r0
add_pp r3.w, r4, c18.z
mul_pp r1.x, r3.w, c2.w
mul_pp_sat r1.x, r1, c18.w
mul_pp r0, r2, r0
mad_pp r3.xyz, r3, c3, r5
add_pp r1.x, -r1, c12.y
mad_pp r0.xyz, -r3, r4, r0
mul_pp r2.xyz, r3, r4
mul_pp r0.w, r0, r1.x
mad_pp oC0.xyz, r0.w, r0, r2
mov_pp oC0.w, c12.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
Float 8 [_Albedo]
Vector 9 [_SunDir]
Float 10 [_PlanetOpacity]
Float 11 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_BumpMap] 2D
SetTexture 7 [_LightTexture0] 2D
SetTexture 8 [_LightTextureB0] 2D
"ps_3_0
; 176 ALU, 23 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_2d s7
dcl_2d s8
def c12, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c13, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c14, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c15, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c16, 0.15915494, 0.50000000, 0.99000001, -0.50000000
def c17, 0.25000000, 0.50000000, 0.49999991, 0.99999982
def c18, 6.28318501, -3.14159298, -0.01000214, 4.03944778
def c19, -0.94999999, 32.00000000, 0.50000000, 4.00000000
def c20, 1.00999999, 0, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3
dcl_texcoord5 v4.xyz
dcl_texcoord6 v5.xyz
mov r0.xyz, v5
dp3_sat r0.x, v2, -r0
add r0.w, r0.x, c19.x
mul r1.xy, v5.zyzw, c5.x
mul r0.xy, v5.zyzw, c4.x
texld r0.xyz, r0, s2
texld r1.xyz, r1, s1
add r2.xyz, r0, -r1
mad_sat r0.y, r0.w, c19, c19.z
mad r3.xyz, r0.y, r2, r1
mul r2.xy, v5, c4.x
mul r1.xy, v5, c5.x
abs r0.zw, v5.xyxy
abs r0.x, v5.z
max r1.w, r0.z, r0.x
min r2.w, r0.z, r0.x
rcp r1.w, r1.w
mul r1.w, r2, r1
mul r2.w, r1, r1
mad r3.w, r2, c14.y, c14.z
mad r3.w, r3, r2, c14
mad r3.w, r3, r2, c15.x
texld r1.xyz, r1, s1
texld r2.xyz, r2, s2
add r2.xyz, r2, -r1
mad r1.xyz, r0.y, r2, r1
add_pp r2.xyz, r3, -r1
mad_pp r3.xyz, r0.z, r2, r1
mul r1.xy, v5.zxzw, c5.x
mul r2.xy, v5.zxzw, c4.x
texld r1.xyz, r1, s1
texld r2.xyz, r2, s2
add r2.xyz, r2, -r1
mad r1.xyz, r0.y, r2, r1
mad r0.y, r3.w, r2.w, c15
mad r0.y, r0, r2.w, c15.z
mul r1.w, r0.y, r1
add_pp r1.xyz, r1, -r3
mad_pp r1.xyz, r0.w, r1, r3
add_pp r1.xyz, r1, c16.w
add r0.y, -r1.w, c15.w
add r2.x, r0.z, -r0
cmp r2.x, -r2, r1.w, r0.y
add r1.w, -r2.x, c13
cmp r1.w, v5.z, r2.x, r1
mul r0.y, v0.x, c6.x
cmp r2.x, v5.y, c12, c12.y
mul_sat r3.w, c10.x, c10.x
mul_sat r0.y, r0, c13.z
mul_pp r1.xyz, r1, c17.x
mad_pp r1.xyz, r0.y, -r1, r1
add r3.xyz, v1, r1
abs r1.y, v5
cmp r0.y, v5.x, r1.w, -r1.w
mul r6.x, r0.y, c16
add r0.y, -r1, c12
mad r1.x, r1.y, c12.z, c12.w
mad r1.x, r1, r1.y, c13
rsq r0.y, r0.y
add r1.z, r6.x, c16.y
mad r1.x, r1, r1.y, c13.y
rcp r0.y, r0.y
mul r1.w, r1.x, r0.y
mul r1.y, r2.x, r1.w
add r0.y, -r0.x, c12
mad r1.x, r0, c12.z, c12.w
mad r1.x, r0, r1, c13
mad r0.x, r0, r1, c13.y
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r0.y, r0.x, r0
cmp r1.x, v5.z, c12, c12.y
mul r0.x, r1, r0.y
mad r0.x, -r0, c13.z, r0.y
mad r1.y, -r1, c13.z, r1.w
mad r0.y, r2.x, c13.w, r1
mad r0.x, r1, c13.w, r0
mul r0.x, r0, c14
mul r6.y, r0, c14.x
dsy r1.xy, v5
mov r1.w, r6.y
dsx r2.y, r0.x
dsy r2.w, r0.x
dsx r0.xy, v5
mul r0.xy, r0, r0
add r0.y, r0.x, r0
mul r1.xy, r1, r1
add r0.x, r1, r1.y
rsq r0.y, r0.y
rcp r0.y, r0.y
rsq r0.x, r0.x
rcp r0.x, r0.x
mul r2.x, r0.y, c16
mul r2.z, r0.x, c16.x
texldd r7.yw, r1.zwzw, s6, r2, r2.zwzw
texldd r4.xyz, r1.zwzw, s0, r2, r2.zwzw
texldd r2, r1.zwzw, s3, r2, r2.zwzw
add_pp r4.xyz, r4, -r3
mul r0.xy, v5.zyzw, c11.x
mad_pp r3.xyz, r3.w, r4, r3
mul r1.xy, v5, c11.x
texld r4, r1, s5
texld r5, r0, s5
add_pp r5, r5, -r4
mad_pp r5, r0.z, r5, r4
add r6.zw, r7.xywy, c16.w
mul r4.zw, r6, c17.xyxy
add r4.zw, r6.xyxy, r4
mul r4.xy, v5.zxzw, c11.x
texld r6, r4, s5
add_pp r6, r6, -r5
mad_pp r5, r0.w, r6, r5
mad r4.w, r4, c17.z, c17.y
frc r6.x, r4.w
mad r4.w, r4.z, c17, c17.y
mad r4.z, r6.x, c18.x, c18.y
sincos r6.xy, r4.z
frc r4.w, r4
mad r4.z, r4.w, c18.x, c18.y
sincos r7.xy, r4.z
dp4 r4.z, c1, c1
mov_pp r6.y, r6.x
mov_pp r6.xz, r7.yyxw
rsq r4.w, r4.z
dp3_pp_sat r4.z, -r6, -c9
mul r6.xyz, r4.w, c1
dp3_sat r7.x, v4, r6
add_pp r4.w, r4.z, -r7.x
mad_pp r1.z, r3.w, r4.w, r7.x
add r6.w, v1, c16.z
frc r6.x, r6.w
add_sat r6.x, r6.w, -r6
mul_pp r2.w, r2, r6.x
mul_pp r6, r2, r5
rcp r1.w, v3.w
mad r7.xy, v3, r1.w, c16.y
texld r1.w, r7, s7
cmp r3.w, -v3.z, c12.x, c12.y
add_pp r7.xyz, r6, -r3
dp3 r5.x, v3, v3
mul_pp r1.w, r3, r1
texld r5.x, r5.x, s8
mul_pp r3.w, r1, r5.x
mul_pp r1.z, r1, c2.w
mul_pp r1.w, r3, r1.z
dp3 r1.z, v5, c9
add r4.w, r1.z, c20.x
frc r1.z, r4.w
mov r5.x, c7
add_sat r1.z, r4.w, -r1
mul_pp_sat r1.w, r1, c19
add r5.xyz, c2, r5.x
mad_sat r5.xyz, r5, r1.w, c0
mul_pp r5.xyz, r5, r1.z
mul r6.xyz, r5, c8.x
mad_pp r3.xyz, r6.w, r7, r3
mad_pp r3.xyz, r3, c3, r6
texld r6, r0, s4
add_pp r0.x, r4.z, c18.z
texld r1, r1, s4
add_pp r6, r6, -r1
mad_pp r1, r0.z, r6, r1
texld r4, r4, s4
add_pp r4, r4, -r1
mul_pp r5.w, r0.x, c2
mad_pp r0, r0.w, r4, r1
mul_pp r0, r2, r0
mul_pp r1.x, r5.w, r3.w
mul_pp_sat r1.x, r1, c18.w
add_pp r1.w, -r1.x, c12.y
mad_pp r0.xyz, -r3, r5, r0
mul_pp r1.xyz, r3, r5
mul_pp r0.w, r0, r1
mad_pp oC0.xyz, r0.w, r0, r1
mov_pp oC0.w, c12.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
Float 8 [_Albedo]
Vector 9 [_SunDir]
Float 10 [_PlanetOpacity]
Float 11 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_BumpMap] 2D
SetTexture 7 [_LightTextureB0] 2D
SetTexture 8 [_LightTexture0] CUBE
"ps_3_0
; 173 ALU, 23 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_2d s7
dcl_cube s8
def c12, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c13, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c14, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c15, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c16, 0.15915494, 0.50000000, 0.99000001, -0.50000000
def c17, 0.25000000, 0.50000000, 0.49999991, 0.99999982
def c18, 6.28318501, -3.14159298, -0.01000214, 4.03944778
def c19, -0.94999999, 32.00000000, 0.50000000, 4.00000000
def c20, 1.00999999, 0, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord5 v4.xyz
dcl_texcoord6 v5.xyz
mov r0.xyz, v5
dp3_sat r0.x, v2, -r0
add r0.w, r0.x, c19.x
mad_sat r1.w, r0, c19.y, c19.z
mul r0.xy, v5.zyzw, c5.x
mul r1.xy, v5.zyzw, c4.x
abs r3.zw, v5.xyxy
abs r0.w, v5.z
max r2.w, r3.z, r0
rcp r3.x, r2.w
min r2.w, r3.z, r0
mul r2.w, r2, r3.x
mul r3.x, r2.w, r2.w
mad r3.y, r3.x, c14, c14.z
mad r3.y, r3, r3.x, c14.w
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad r2.xyz, r1.w, r1, r0
mul r0.xy, v5, c4.x
mul r1.xy, v5, c5.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r1.w, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r3.z, r1, r0
mul r1.xy, v5.zxzw, c5.x
mul r0.xy, v5.zxzw, c4.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r1.w, r0, r1
add_pp r0.xyz, r0, -r2
mad_pp r2.xyz, r3.w, r0, r2
mad r3.y, r3, r3.x, c15.x
mad r1.x, r3.y, r3, c15.y
mad r1.x, r1, r3, c15.z
mul r0.y, r1.x, r2.w
add_pp r1.xyz, r2, c16.w
add r2.x, -r0.w, c12.y
mad r1.w, r0, c12.z, c12
rsq r2.x, r2.x
add r0.z, -r0.y, c15.w
add r0.x, r3.z, -r0.w
cmp r0.x, -r0, r0.y, r0.z
add r0.y, -r0.x, c13.w
cmp r0.x, v5.z, r0, r0.y
mad r1.w, r0, r1, c13.x
mul r0.z, v0.x, c6.x
cmp r0.x, v5, r0, -r0
mul r6.z, r0.x, c16.x
add r6.x, r6.z, c16.y
abs r0.x, v5.y
mul_sat r0.y, r0.z, c13.z
add r0.z, -r0.x, c12.y
mul_pp r1.xyz, r1, c17.x
mad_pp r1.xyz, r0.y, -r1, r1
mad r0.y, r0.x, c12.z, c12.w
mad r0.y, r0, r0.x, c13.x
rsq r0.z, r0.z
mad r0.w, r0, r1, c13.y
rcp r2.x, r2.x
mul r1.w, r0, r2.x
cmp r0.w, v5.z, c12.x, c12.y
mul r2.x, r0.w, r1.w
add r1.xyz, v1, r1
mad r0.x, r0.y, r0, c13.y
rcp r0.z, r0.z
mul r0.y, r0.x, r0.z
cmp r0.x, v5.y, c12, c12.y
mul r0.z, r0.x, r0.y
mad r0.y, -r0.z, c13.z, r0
mad r0.x, r0, c13.w, r0.y
mad r0.z, -r2.x, c13, r1.w
mad r0.y, r0.w, c13.w, r0.z
mul r6.w, r0.x, c14.x
mul r0.x, r0.y, c14
dsy r0.zw, v5.xyxy
mul r0.zw, r0, r0
mov r6.y, r6.w
dsy r4.w, r0.x
dsx r5.w, r0.x
dsx r0.xy, v5
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r0.y, r0.z, r0.w
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r4.z, r0.y, c16.x
mul r5.z, r0.x, c16.x
texldd r7.yw, r6, s6, r5.zwzw, r4.zwzw
texldd r0.xyz, r6, s0, r5.zwzw, r4.zwzw
add_pp r0.xyz, r0, -r1
mul_sat r2.w, c10.x, c10.x
mad_pp r2.xyz, r2.w, r0, r1
mul r4.xy, v5.zyzw, c11.x
mul r5.xy, v5, c11.x
add r3.xy, r7.wyzw, c16.w
texld r1, r5, s5
texld r0, r4, s5
add_pp r0, r0, -r1
mad_pp r1, r3.z, r0, r1
mul r0.xy, r3, c17
add r6.zw, r6, r0.xyxy
mul r3.xy, v5.zxzw, c11.x
texld r0, r3, s5
add_pp r0, r0, -r1
mad r6.w, r6, c17.z, c17.y
frc r6.w, r6
mad_pp r1, r3.w, r0, r1
mad r6.w, r6, c18.x, c18.y
sincos r0.xy, r6.w
mad r6.z, r6, c17.w, c17.y
frc r0.y, r6.z
mad r6.z, r0.y, c18.x, c18.y
mov_pp r7.y, r0.x
sincos r0.xy, r6.z
dp4 r0.z, c1, c1
mov_pp r7.xz, r0.yyxw
rsq r0.z, r0.z
mul r0.xyz, r0.z, c1
dp3_sat r0.z, v4, r0
dp3_pp_sat r7.w, -r7, -c9
add r0.x, v1.w, c16.z
add_pp r0.w, r7, -r0.z
frc r0.y, r0.x
mad_pp r2.w, r2, r0, r0.z
add_sat r6.z, r0.x, -r0.y
texldd r0, r6, s3, r5.zwzw, r4.zwzw
mul_pp r6.w, r0, r6.z
mov_pp r6.xyz, r0
mul_pp r1, r6, r1
add_pp r1.xyz, r1, -r2
dp3 r0.x, v3, v3
mad_pp r1.xyz, r1.w, r1, r2
mul_pp r0.y, r2.w, c2.w
texld r0.x, r0.x, s7
texld r0.w, v3, s8
mul r0.w, r0.x, r0
mul_pp r0.x, r0.w, r0.y
dp3 r0.y, v5, c9
add r2.w, r0.y, c20.x
mul_pp_sat r4.z, r0.x, c19.w
mov r0.x, c7
frc r4.w, r2
add r0.xyz, c2, r0.x
add_sat r2.w, r2, -r4
mad_sat r0.xyz, r0, r4.z, c0
mul_pp r0.xyz, r0, r2.w
mul r7.xyz, r0, c8.x
mad_pp r7.xyz, r1, c3, r7
texld r2, r4, s4
texld r1, r5, s4
add_pp r2, r2, -r1
mad_pp r1, r3.z, r2, r1
texld r2, r3, s4
add_pp r2, r2, -r1
mad_pp r1, r3.w, r2, r1
mul_pp r1, r6, r1
add_pp r4.x, r7.w, c18.z
mul_pp r3.x, r4, c2.w
mul_pp r0.w, r3.x, r0
mul_pp_sat r0.w, r0, c18
mad_pp r1.xyz, -r7, r0, r1
mul_pp r2.xyz, r7, r0
add_pp r0.w, -r0, c12.y
mul_pp r0.x, r1.w, r0.w
mad_pp oC0.xyz, r0.x, r1, r2
mov_pp oC0.w, c12.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
Float 8 [_Albedo]
Vector 9 [_SunDir]
Float 10 [_PlanetOpacity]
Float 11 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_BumpMap] 2D
SetTexture 7 [_LightTexture0] 2D
"ps_3_0
; 170 ALU, 22 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_2d s7
def c12, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c13, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c14, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c15, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c16, 0.15915494, 0.50000000, 0.99000001, -0.50000000
def c17, 0.25000000, 0.50000000, 0.49999991, 0.99999982
def c18, 6.28318501, -3.14159298, -0.01000214, 4.03944778
def c19, -0.94999999, 32.00000000, 0.50000000, 4.00000000
def c20, 1.00999999, 0, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xy
dcl_texcoord5 v4.xyz
dcl_texcoord6 v5.xyz
mov r0.xyz, v5
dp3_sat r0.x, v2, -r0
add r0.w, r0.x, c19.x
mul r1.xy, v5.zyzw, c5.x
mul r0.xy, v5.zyzw, c4.x
texld r0.xyz, r0, s2
texld r1.xyz, r1, s1
add r2.xyz, r0, -r1
mad_sat r0.y, r0.w, c19, c19.z
mad r3.xyz, r0.y, r2, r1
mul r2.xy, v5, c4.x
mul r1.xy, v5, c5.x
abs r0.zw, v5.xyxy
abs r0.x, v5.z
max r1.w, r0.z, r0.x
min r2.w, r0.z, r0.x
rcp r1.w, r1.w
mul r1.w, r2, r1
mul r2.w, r1, r1
mad r3.w, r2, c14.y, c14.z
mad r3.w, r3, r2, c14
mad r3.w, r3, r2, c15.x
texld r1.xyz, r1, s1
texld r2.xyz, r2, s2
add r2.xyz, r2, -r1
mad r1.xyz, r0.y, r2, r1
add_pp r2.xyz, r3, -r1
mad_pp r3.xyz, r0.z, r2, r1
mul r1.xy, v5.zxzw, c5.x
mul r2.xy, v5.zxzw, c4.x
texld r1.xyz, r1, s1
texld r2.xyz, r2, s2
add r2.xyz, r2, -r1
mad r1.xyz, r0.y, r2, r1
mad r0.y, r3.w, r2.w, c15
mad r0.y, r0, r2.w, c15.z
mul r1.w, r0.y, r1
add_pp r1.xyz, r1, -r3
mad_pp r1.xyz, r0.w, r1, r3
add_pp r1.xyz, r1, c16.w
add r0.y, -r1.w, c15.w
add r2.x, r0.z, -r0
cmp r2.x, -r2, r1.w, r0.y
add r1.w, -r2.x, c13
cmp r1.w, v5.z, r2.x, r1
mul r0.y, v0.x, c6.x
cmp r2.x, v5.y, c12, c12.y
mul_sat r0.y, r0, c13.z
mul_pp r1.xyz, r1, c17.x
mad_pp r1.xyz, r0.y, -r1, r1
add r3.xyz, v1, r1
abs r1.y, v5
cmp r0.y, v5.x, r1.w, -r1.w
mul r6.x, r0.y, c16
add r0.y, -r1, c12
mad r1.x, r1.y, c12.z, c12.w
mad r1.x, r1, r1.y, c13
rsq r0.y, r0.y
add r1.z, r6.x, c16.y
mad r1.x, r1, r1.y, c13.y
rcp r0.y, r0.y
mul r1.w, r1.x, r0.y
mul r1.y, r2.x, r1.w
add r0.y, -r0.x, c12
mad r1.x, r0, c12.z, c12.w
mad r1.x, r0, r1, c13
mad r0.x, r0, r1, c13.y
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r0.y, r0.x, r0
cmp r1.x, v5.z, c12, c12.y
mul r0.x, r1, r0.y
mad r0.x, -r0, c13.z, r0.y
mad r1.y, -r1, c13.z, r1.w
mad r0.y, r2.x, c13.w, r1
mad r0.x, r1, c13.w, r0
mul r0.x, r0, c14
mul r6.y, r0, c14.x
dsy r1.xy, v5
mov r1.w, r6.y
dsx r2.y, r0.x
dsy r2.w, r0.x
dsx r0.xy, v5
mul r0.xy, r0, r0
add r0.y, r0.x, r0
mul r1.xy, r1, r1
add r0.x, r1, r1.y
rsq r0.y, r0.y
rcp r0.y, r0.y
rsq r0.x, r0.x
rcp r0.x, r0.x
mul r2.x, r0.y, c16
mul r2.z, r0.x, c16.x
texldd r7.yw, r1.zwzw, s6, r2, r2.zwzw
texldd r4.xyz, r1.zwzw, s0, r2, r2.zwzw
mul r0.xy, v5.zyzw, c11.x
texldd r2, r1.zwzw, s3, r2, r2.zwzw
add_pp r4.xyz, r4, -r3
mul_sat r3.w, c10.x, c10.x
mad_pp r3.xyz, r3.w, r4, r3
mul r1.xy, v5, c11.x
texld r4, r1, s5
texld r5, r0, s5
add_pp r5, r5, -r4
mad_pp r5, r0.z, r5, r4
add r6.zw, r7.xywy, c16.w
mul r4.xy, r6.zwzw, c17
add r4.zw, r6.xyxy, r4.xyxy
mul r4.xy, v5.zxzw, c11.x
texld r6, r4, s5
add_pp r6, r6, -r5
mad r4.w, r4, c17.z, c17.y
frc r4.w, r4
mad r4.z, r4, c17.w, c17.y
frc r4.z, r4
mad_pp r5, r0.w, r6, r5
mad r4.w, r4, c18.x, c18.y
sincos r6.xy, r4.w
mov_pp r7.y, r6.x
mad r4.z, r4, c18.x, c18.y
sincos r6.xy, r4.z
dp4_pp r4.z, c1, c1
mov_pp r7.xz, r6.yyxw
rsq_pp r4.z, r4.z
mul_pp r6.xyz, r4.z, c1
dp3_sat r6.x, v4, r6
dp3_pp_sat r4.z, -r7, -c9
add_pp r4.w, r4.z, -r6.x
mad_pp r3.w, r3, r4, r6.x
add r6.z, v1.w, c16
mul_pp r1.z, r3.w, c2.w
frc r6.y, r6.z
add_sat r4.w, r6.z, -r6.y
mul_pp r2.w, r2, r4
mul_pp r6, r2, r5
texld r3.w, v3, s7
mul_pp r1.w, r3, r1.z
dp3 r1.z, v5, c9
add r4.w, r1.z, c20.x
frc r1.z, r4.w
add_pp r7.xyz, r6, -r3
mov r5.x, c7
add_sat r1.z, r4.w, -r1
mul_pp_sat r1.w, r1, c19
add r5.xyz, c2, r5.x
mad_sat r5.xyz, r5, r1.w, c0
mul_pp r5.xyz, r5, r1.z
mul r6.xyz, r5, c8.x
mad_pp r3.xyz, r6.w, r7, r3
mad_pp r3.xyz, r3, c3, r6
texld r6, r0, s4
add_pp r0.x, r4.z, c18.z
texld r1, r1, s4
add_pp r6, r6, -r1
mad_pp r1, r0.z, r6, r1
texld r4, r4, s4
add_pp r4, r4, -r1
mul_pp r5.w, r0.x, c2
mad_pp r0, r0.w, r4, r1
mul_pp r0, r2, r0
mul_pp r1.x, r5.w, r3.w
mul_pp_sat r1.x, r1, c18.w
add_pp r1.w, -r1.x, c12.y
mad_pp r0.xyz, -r3, r5, r0
mul_pp r1.xyz, r3, r5
mul_pp r0.w, r0, r1
mad_pp oC0.xyz, r0.w, r0, r1
mov_pp oC0.w, c12.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightShadowData]
Vector 3 [_LightColor0]
Vector 4 [_Color]
Float 5 [_DetailScale]
Float 6 [_DetailVertScale]
Float 7 [_DetailDist]
Float 8 [_MinLight]
Float 9 [_Albedo]
Vector 10 [_SunDir]
Float 11 [_PlanetOpacity]
Float 12 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_BumpMap] 2D
SetTexture 7 [_LightTexture0] 2D
SetTexture 8 [_LightTextureB0] 2D
SetTexture 9 [_ShadowMapTexture] 2D
"ps_3_0
; 182 ALU, 24 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_2d s7
dcl_2d s8
dcl_2d s9
def c13, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c14, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c15, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c16, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c17, 0.15915494, 0.50000000, 0.99000001, -0.50000000
def c18, 0.25000000, 0.50000000, 0.49999991, 0.99999982
def c19, 6.28318501, -3.14159298, -0.01000214, 4.03944778
def c20, -0.94999999, 32.00000000, 0.50000000, 4.00000000
def c21, 1.00999999, 0, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3
dcl_texcoord4 v4
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
mov r0.xyz, v6
dp3_sat r0.x, v2, -r0
add r0.w, r0.x, c20.x
mad_sat r1.w, r0, c20.y, c20.z
mul r0.xy, v6.zyzw, c6.x
mul r1.xy, v6.zyzw, c5.x
abs r3.zw, v6.xyxy
abs r0.w, v6.z
max r2.w, r3.z, r0
rcp r3.x, r2.w
min r2.w, r3.z, r0
mul r2.w, r2, r3.x
mul r3.x, r2.w, r2.w
mad r3.y, r3.x, c15, c15.z
mad r3.y, r3, r3.x, c15.w
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad r2.xyz, r1.w, r1, r0
mul r0.xy, v6, c5.x
mul r1.xy, v6, c6.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r1.w, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r3.z, r1, r0
mul r1.xy, v6.zxzw, c6.x
mul r0.xy, v6.zxzw, c5.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r1.w, r0, r1
add_pp r0.xyz, r0, -r2
mad_pp r2.xyz, r3.w, r0, r2
mad r3.y, r3, r3.x, c16.x
mad r1.x, r3.y, r3, c16.y
mad r1.x, r1, r3, c16.z
mul r0.y, r1.x, r2.w
add_pp r1.xyz, r2, c17.w
add r2.x, -r0.w, c13.y
mad r1.w, r0, c13.z, c13
rsq r2.x, r2.x
add r0.z, -r0.y, c16.w
add r0.x, r3.z, -r0.w
cmp r0.x, -r0, r0.y, r0.z
add r0.y, -r0.x, c14.w
cmp r0.x, v6.z, r0, r0.y
mad r1.w, r0, r1, c14.x
mul r0.z, v0.x, c7.x
cmp r0.x, v6, r0, -r0
mul r6.z, r0.x, c17.x
add r6.x, r6.z, c17.y
abs r0.x, v6.y
mul_sat r0.y, r0.z, c14.z
add r0.z, -r0.x, c13.y
mul_pp r1.xyz, r1, c18.x
mad_pp r1.xyz, r0.y, -r1, r1
mad r0.y, r0.x, c13.z, c13.w
mad r0.y, r0, r0.x, c14.x
rsq r0.z, r0.z
mad r0.w, r0, r1, c14.y
rcp r2.x, r2.x
mul r1.w, r0, r2.x
cmp r0.w, v6.z, c13.x, c13.y
mul r2.x, r0.w, r1.w
mad r0.x, r0.y, r0, c14.y
rcp r0.z, r0.z
mul r0.y, r0.x, r0.z
cmp r0.x, v6.y, c13, c13.y
mul r0.z, r0.x, r0.y
mad r0.y, -r0.z, c14.z, r0
mad r0.z, -r2.x, c14, r1.w
mad r0.x, r0, c14.w, r0.y
mad r0.y, r0.w, c14.w, r0.z
mul r6.w, r0.x, c15.x
mul r0.x, r0.y, c15
mul r5.xy, v6, c12.x
dsy r0.zw, v6.xyxy
mul r0.zw, r0, r0
mov r6.y, r6.w
dsy r4.w, r0.x
dsx r5.w, r0.x
dsx r0.xy, v6
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r0.y, r0.z, r0.w
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r4.z, r0.y, c17.x
mul r5.z, r0.x, c17.x
texldd r7.yw, r6, s6, r5.zwzw, r4.zwzw
texldd r0.xyz, r6, s0, r5.zwzw, r4.zwzw
add r1.xyz, v1, r1
add_pp r0.xyz, r0, -r1
mul_sat r1.w, c11.x, c11.x
mad_pp r1.xyz, r1.w, r0, r1
mul r4.xy, v6.zyzw, c12.x
add r3.xy, r7.wyzw, c17.w
texld r2, r5, s5
texld r0, r4, s5
add_pp r0, r0, -r2
mad_pp r2, r3.z, r0, r2
mul r0.xy, r3, c18
add r6.zw, r6, r0.xyxy
mul r3.xy, v6.zxzw, c12.x
texld r0, r3, s5
add_pp r0, r0, -r2
mad r6.w, r6, c18.z, c18.y
frc r6.w, r6
mad_pp r2, r3.w, r0, r2
mad r6.w, r6, c19.x, c19.y
sincos r0.xy, r6.w
mad r6.z, r6, c18.w, c18.y
frc r0.y, r6.z
mad r6.z, r0.y, c19.x, c19.y
mov_pp r7.y, r0.x
sincos r0.xy, r6.z
dp4 r0.z, c1, c1
mov_pp r7.xz, r0.yyxw
rsq r0.z, r0.z
mul r0.xyz, r0.z, c1
dp3_sat r0.z, v5, r0
dp3_pp_sat r7.w, -r7, -c10
add r0.x, v1.w, c17.z
add_pp r0.w, r7, -r0.z
frc r0.y, r0.x
mad_pp r1.w, r1, r0, r0.z
add_sat r6.z, r0.x, -r0.y
texldd r0, r6, s3, r5.zwzw, r4.zwzw
mul_pp r6.w, r0, r6.z
mov_pp r6.xyz, r0
mul_pp r2, r6, r2
add_pp r2.xyz, r2, -r1
mul_pp r0.y, r1.w, c3.w
mad_pp r1.xyz, r2.w, r2, r1
texld r2, r4, s4
texldp r0.x, v4, s9
rcp r0.z, v4.w
mad r0.z, -v4, r0, r0.x
mov r0.w, c2.x
rcp r0.x, v3.w
mad r7.xy, v3, r0.x, c17.y
cmp r0.z, r0, c13.y, r0.w
dp3 r0.x, v3, v3
texld r0.w, r7, s7
cmp r1.w, -v3.z, c13.x, c13.y
mul_pp r0.w, r1, r0
texld r0.x, r0.x, s8
mul_pp r0.x, r0.w, r0
mul_pp r0.w, r0.x, r0.z
mul_pp r0.x, r0.w, r0.y
dp3 r0.y, v6, c10
add r1.w, r0.y, c21.x
mul_pp_sat r4.z, r0.x, c20.w
mov r0.x, c8
frc r4.w, r1
add r0.xyz, c3, r0.x
add_sat r1.w, r1, -r4
mad_sat r0.xyz, r0, r4.z, c0
mul_pp r0.xyz, r0, r1.w
mul r7.xyz, r0, c9.x
mad_pp r7.xyz, r1, c4, r7
texld r1, r5, s4
add_pp r2, r2, -r1
mad_pp r1, r3.z, r2, r1
texld r2, r3, s4
add_pp r2, r2, -r1
mad_pp r1, r3.w, r2, r1
mul_pp r1, r6, r1
add_pp r4.x, r7.w, c19.z
mul_pp r3.x, r4, c3.w
mul_pp r0.w, r3.x, r0
mul_pp_sat r0.w, r0, c19
mad_pp r1.xyz, -r7, r0, r1
mul_pp r2.xyz, r7, r0
add_pp r0.w, -r0, c13.y
mul_pp r0.x, r1.w, r0.w
mad_pp oC0.xyz, r0.x, r1, r2
mov_pp oC0.w, c13.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightShadowData]
Vector 3 [_LightColor0]
Vector 4 [_Color]
Float 5 [_DetailScale]
Float 6 [_DetailVertScale]
Float 7 [_DetailDist]
Float 8 [_MinLight]
Float 9 [_Albedo]
Vector 10 [_SunDir]
Float 11 [_PlanetOpacity]
Float 12 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_BumpMap] 2D
SetTexture 7 [_LightTexture0] 2D
SetTexture 8 [_LightTextureB0] 2D
SetTexture 9 [_ShadowMapTexture] 2D
"ps_3_0
; 181 ALU, 24 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_2d s7
dcl_2d s8
dcl_2d s9
def c13, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c14, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c15, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c16, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c17, 0.15915494, 0.50000000, 0.99000001, -0.50000000
def c18, 0.25000000, 0.50000000, 0.49999991, 0.99999982
def c19, 6.28318501, -3.14159298, -0.01000214, 4.03944778
def c20, -0.94999999, 32.00000000, 0.50000000, 4.00000000
def c21, 1.00999999, 0, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3
dcl_texcoord4 v4
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
mov r0.xyz, v6
dp3_sat r0.x, v2, -r0
add r0.w, r0.x, c20.x
mad_sat r1.w, r0, c20.y, c20.z
mul r0.xy, v6.zyzw, c6.x
mul r1.xy, v6.zyzw, c5.x
abs r3.zw, v6.xyxy
abs r0.w, v6.z
max r2.w, r3.z, r0
rcp r3.x, r2.w
min r2.w, r3.z, r0
mul r2.w, r2, r3.x
mul r3.x, r2.w, r2.w
mad r3.y, r3.x, c15, c15.z
mad r3.y, r3, r3.x, c15.w
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad r2.xyz, r1.w, r1, r0
mul r0.xy, v6, c5.x
mul r1.xy, v6, c6.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r1.w, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r3.z, r1, r0
mul r1.xy, v6.zxzw, c6.x
mul r0.xy, v6.zxzw, c5.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r1.w, r0, r1
add_pp r0.xyz, r0, -r2
mad_pp r2.xyz, r3.w, r0, r2
mad r3.y, r3, r3.x, c16.x
mad r1.x, r3.y, r3, c16.y
mad r1.x, r1, r3, c16.z
mul r0.y, r1.x, r2.w
add_pp r1.xyz, r2, c17.w
add r2.x, -r0.w, c13.y
mad r1.w, r0, c13.z, c13
rsq r2.x, r2.x
add r0.z, -r0.y, c16.w
add r0.x, r3.z, -r0.w
cmp r0.x, -r0, r0.y, r0.z
add r0.y, -r0.x, c14.w
cmp r0.x, v6.z, r0, r0.y
mad r1.w, r0, r1, c14.x
mul r0.z, v0.x, c7.x
cmp r0.x, v6, r0, -r0
mul r6.z, r0.x, c17.x
add r6.x, r6.z, c17.y
abs r0.x, v6.y
mul_sat r0.y, r0.z, c14.z
add r0.z, -r0.x, c13.y
mul_pp r1.xyz, r1, c18.x
mad_pp r1.xyz, r0.y, -r1, r1
mad r0.y, r0.x, c13.z, c13.w
mad r0.y, r0, r0.x, c14.x
rsq r0.z, r0.z
mad r0.w, r0, r1, c14.y
rcp r2.x, r2.x
mul r1.w, r0, r2.x
cmp r0.w, v6.z, c13.x, c13.y
mul r2.x, r0.w, r1.w
mad r0.x, r0.y, r0, c14.y
rcp r0.z, r0.z
mul r0.y, r0.x, r0.z
cmp r0.x, v6.y, c13, c13.y
mul r0.z, r0.x, r0.y
mad r0.y, -r0.z, c14.z, r0
mad r0.z, -r2.x, c14, r1.w
mad r0.x, r0, c14.w, r0.y
mad r0.y, r0.w, c14.w, r0.z
mul r6.w, r0.x, c15.x
mul r0.x, r0.y, c15
mul r5.xy, v6, c12.x
dsy r0.zw, v6.xyxy
mul r0.zw, r0, r0
mov r6.y, r6.w
dsy r4.w, r0.x
dsx r5.w, r0.x
dsx r0.xy, v6
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r0.y, r0.z, r0.w
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r4.z, r0.y, c17.x
mul r5.z, r0.x, c17.x
texldd r7.yw, r6, s6, r5.zwzw, r4.zwzw
texldd r0.xyz, r6, s0, r5.zwzw, r4.zwzw
add r1.xyz, v1, r1
add_pp r0.xyz, r0, -r1
mul_sat r1.w, c11.x, c11.x
mad_pp r1.xyz, r1.w, r0, r1
mul r4.xy, v6.zyzw, c12.x
add r3.xy, r7.wyzw, c17.w
texld r2, r5, s5
texld r0, r4, s5
add_pp r0, r0, -r2
mad_pp r2, r3.z, r0, r2
mul r0.xy, r3, c18
add r6.zw, r6, r0.xyxy
mul r3.xy, v6.zxzw, c12.x
texld r0, r3, s5
add_pp r0, r0, -r2
mad r6.w, r6, c18.z, c18.y
frc r6.w, r6
mad_pp r2, r3.w, r0, r2
mad r6.w, r6, c19.x, c19.y
sincos r0.xy, r6.w
mad r6.z, r6, c18.w, c18.y
frc r0.y, r6.z
mad r6.z, r0.y, c19.x, c19.y
mov_pp r7.y, r0.x
sincos r0.xy, r6.z
dp4 r0.z, c1, c1
mov_pp r7.xz, r0.yyxw
rsq r0.z, r0.z
mul r0.xyz, r0.z, c1
dp3_sat r0.z, v5, r0
dp3_pp_sat r7.w, -r7, -c10
add r0.x, v1.w, c17.z
add_pp r0.w, r7, -r0.z
frc r0.y, r0.x
mad_pp r1.w, r1, r0, r0.z
add_sat r6.z, r0.x, -r0.y
texldd r0, r6, s3, r5.zwzw, r4.zwzw
mul_pp r6.w, r0, r6.z
mov_pp r6.xyz, r0
mul_pp r2, r6, r2
add_pp r2.xyz, r2, -r1
mul_pp r0.y, r1.w, c3.w
mad_pp r1.xyz, r2.w, r2, r1
mov r0.x, c2
rcp r0.w, v3.w
mad r7.xy, v3, r0.w, c17.y
add r0.z, c13.y, -r0.x
texldp r0.x, v4, s9
mad r0.z, r0.x, r0, c2.x
texld r2, r4, s4
dp3 r0.x, v3, v3
texld r0.w, r7, s7
cmp r1.w, -v3.z, c13.x, c13.y
mul_pp r0.w, r1, r0
texld r0.x, r0.x, s8
mul_pp r0.x, r0.w, r0
mul_pp r0.w, r0.x, r0.z
mul_pp r0.x, r0.w, r0.y
dp3 r0.y, v6, c10
add r1.w, r0.y, c21.x
mul_pp_sat r4.z, r0.x, c20.w
mov r0.x, c8
frc r4.w, r1
add r0.xyz, c3, r0.x
add_sat r1.w, r1, -r4
mad_sat r0.xyz, r0, r4.z, c0
mul_pp r0.xyz, r0, r1.w
mul r7.xyz, r0, c9.x
mad_pp r7.xyz, r1, c4, r7
texld r1, r5, s4
add_pp r2, r2, -r1
mad_pp r1, r3.z, r2, r1
texld r2, r3, s4
add_pp r2, r2, -r1
mad_pp r1, r3.w, r2, r1
mul_pp r1, r6, r1
add_pp r4.x, r7.w, c19.z
mul_pp r3.x, r4, c3.w
mul_pp r0.w, r3.x, r0
mul_pp_sat r0.w, r0, c19
mad_pp r1.xyz, -r7, r0, r1
mul_pp r2.xyz, r7, r0
add_pp r0.w, -r0, c13.y
mul_pp r0.x, r1.w, r0.w
mad_pp oC0.xyz, r0.x, r1, r2
mov_pp oC0.w, c13.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
Float 8 [_Albedo]
Vector 9 [_SunDir]
Float 10 [_PlanetOpacity]
Float 11 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_BumpMap] 2D
SetTexture 7 [_ShadowMapTexture] 2D
"ps_3_0
; 170 ALU, 22 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_2d s7
def c12, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c13, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c14, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c15, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c16, 0.15915494, 0.50000000, 0.99000001, -0.50000000
def c17, 0.25000000, 0.50000000, 0.49999991, 0.99999982
def c18, 6.28318501, -3.14159298, -0.01000214, 4.03944778
def c19, -0.94999999, 32.00000000, 0.50000000, 4.00000000
def c20, 1.00999999, 0, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3
dcl_texcoord5 v4.xyz
dcl_texcoord6 v5.xyz
mov r0.xyz, v5
dp3_sat r0.x, v2, -r0
add r0.w, r0.x, c19.x
mul r1.xy, v5.zyzw, c5.x
mul r0.xy, v5.zyzw, c4.x
texld r0.xyz, r0, s2
texld r1.xyz, r1, s1
add r2.xyz, r0, -r1
mad_sat r0.y, r0.w, c19, c19.z
mad r3.xyz, r0.y, r2, r1
mul r2.xy, v5, c4.x
mul r1.xy, v5, c5.x
abs r0.zw, v5.xyxy
abs r0.x, v5.z
max r1.w, r0.z, r0.x
min r2.w, r0.z, r0.x
rcp r1.w, r1.w
mul r1.w, r2, r1
mul r2.w, r1, r1
mad r3.w, r2, c14.y, c14.z
mad r3.w, r3, r2, c14
mad r3.w, r3, r2, c15.x
texld r1.xyz, r1, s1
texld r2.xyz, r2, s2
add r2.xyz, r2, -r1
mad r1.xyz, r0.y, r2, r1
add_pp r2.xyz, r3, -r1
mad_pp r3.xyz, r0.z, r2, r1
mul r1.xy, v5.zxzw, c5.x
mul r2.xy, v5.zxzw, c4.x
texld r1.xyz, r1, s1
texld r2.xyz, r2, s2
add r2.xyz, r2, -r1
mad r1.xyz, r0.y, r2, r1
mad r0.y, r3.w, r2.w, c15
mad r0.y, r0, r2.w, c15.z
mul r1.w, r0.y, r1
add_pp r1.xyz, r1, -r3
mad_pp r1.xyz, r0.w, r1, r3
add_pp r1.xyz, r1, c16.w
add r0.y, -r1.w, c15.w
add r2.x, r0.z, -r0
cmp r2.x, -r2, r1.w, r0.y
add r1.w, -r2.x, c13
cmp r1.w, v5.z, r2.x, r1
mul r0.y, v0.x, c6.x
cmp r2.x, v5.y, c12, c12.y
mul_sat r0.y, r0, c13.z
mul_pp r1.xyz, r1, c17.x
mad_pp r1.xyz, r0.y, -r1, r1
add r3.xyz, v1, r1
abs r1.y, v5
cmp r0.y, v5.x, r1.w, -r1.w
mul r6.x, r0.y, c16
add r0.y, -r1, c12
mad r1.x, r1.y, c12.z, c12.w
mad r1.x, r1, r1.y, c13
rsq r0.y, r0.y
add r1.z, r6.x, c16.y
mad r1.x, r1, r1.y, c13.y
rcp r0.y, r0.y
mul r1.w, r1.x, r0.y
mul r1.y, r2.x, r1.w
add r0.y, -r0.x, c12
mad r1.x, r0, c12.z, c12.w
mad r1.x, r0, r1, c13
mad r0.x, r0, r1, c13.y
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r0.y, r0.x, r0
cmp r1.x, v5.z, c12, c12.y
mul r0.x, r1, r0.y
mad r0.x, -r0, c13.z, r0.y
mad r1.y, -r1, c13.z, r1.w
mad r0.y, r2.x, c13.w, r1
mad r0.x, r1, c13.w, r0
mul r0.x, r0, c14
mul r6.y, r0, c14.x
dsy r1.xy, v5
mov r1.w, r6.y
dsx r2.y, r0.x
dsy r2.w, r0.x
dsx r0.xy, v5
mul r0.xy, r0, r0
add r0.y, r0.x, r0
mul r1.xy, r1, r1
add r0.x, r1, r1.y
rsq r0.y, r0.y
rcp r0.y, r0.y
rsq r0.x, r0.x
rcp r0.x, r0.x
mul r2.x, r0.y, c16
mul r2.z, r0.x, c16.x
texldd r7.yw, r1.zwzw, s6, r2, r2.zwzw
texldd r4.xyz, r1.zwzw, s0, r2, r2.zwzw
mul r0.xy, v5.zyzw, c11.x
texldd r2, r1.zwzw, s3, r2, r2.zwzw
add_pp r4.xyz, r4, -r3
mul_sat r3.w, c10.x, c10.x
mad_pp r3.xyz, r3.w, r4, r3
mul r1.xy, v5, c11.x
texld r4, r1, s5
texld r5, r0, s5
add_pp r5, r5, -r4
mad_pp r5, r0.z, r5, r4
add r6.zw, r7.xywy, c16.w
mul r4.xy, r6.zwzw, c17
add r4.zw, r6.xyxy, r4.xyxy
mul r4.xy, v5.zxzw, c11.x
texld r6, r4, s5
add_pp r6, r6, -r5
mad r4.w, r4, c17.z, c17.y
frc r4.w, r4
mad r4.z, r4, c17.w, c17.y
frc r4.z, r4
mad_pp r5, r0.w, r6, r5
mad r4.w, r4, c18.x, c18.y
sincos r6.xy, r4.w
mov_pp r7.y, r6.x
mad r4.z, r4, c18.x, c18.y
sincos r6.xy, r4.z
dp4_pp r4.z, c1, c1
mov_pp r7.xz, r6.yyxw
rsq_pp r4.z, r4.z
mul_pp r6.xyz, r4.z, c1
dp3_pp_sat r4.z, -r7, -c9
dp3_sat r6.x, v4, r6
add_pp r4.w, r4.z, -r6.x
mad_pp r3.w, r3, r4, r6.x
add r6.z, v1.w, c16
frc r6.y, r6.z
add_sat r4.w, r6.z, -r6.y
mul_pp r2.w, r2, r4
mul_pp r6, r2, r5
mov r4.w, c7.x
add_pp r7.yzw, r6.xxyz, -r3.xxyz
mul_pp r1.z, r3.w, c2.w
texldp r7.x, v3, s7
mul_pp r1.w, r7.x, r1.z
dp3 r1.z, v5, c9
add r3.w, r1.z, c20.x
frc r1.z, r3.w
add_sat r1.z, r3.w, -r1
mul_pp_sat r1.w, r1, c19
add r5.xyz, c2, r4.w
mad_sat r5.xyz, r5, r1.w, c0
mul_pp r5.xyz, r5, r1.z
mul r6.xyz, r5, c8.x
mad_pp r3.xyz, r6.w, r7.yzww, r3
mad_pp r3.xyz, r3, c3, r6
texld r6, r0, s4
add_pp r0.x, r4.z, c18.z
texld r1, r1, s4
add_pp r6, r6, -r1
mad_pp r1, r0.z, r6, r1
texld r4, r4, s4
add_pp r4, r4, -r1
mul_pp r3.w, r0.x, c2
mad_pp r0, r0.w, r4, r1
mul_pp r0, r2, r0
mul_pp r1.x, r3.w, r7
mul_pp_sat r1.x, r1, c18.w
add_pp r1.w, -r1.x, c12.y
mad_pp r0.xyz, -r3, r5, r0
mul_pp r1.xyz, r3, r5
mul_pp r0.w, r0, r1
mad_pp oC0.xyz, r0.w, r0, r1
mov_pp oC0.w, c12.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
Float 8 [_Albedo]
Vector 9 [_SunDir]
Float 10 [_PlanetOpacity]
Float 11 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_BumpMap] 2D
SetTexture 7 [_ShadowMapTexture] 2D
SetTexture 8 [_LightTexture0] 2D
"ps_3_0
; 171 ALU, 23 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_2d s7
dcl_2d s8
def c12, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c13, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c14, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c15, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c16, 0.15915494, 0.50000000, 0.99000001, -0.50000000
def c17, 0.25000000, 0.50000000, 0.49999991, 0.99999982
def c18, 6.28318501, -3.14159298, -0.01000214, 4.03944778
def c19, -0.94999999, 32.00000000, 0.50000000, 4.00000000
def c20, 1.00999999, 0, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xy
dcl_texcoord4 v4
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
mov r0.xyz, v6
dp3_sat r0.x, v2, -r0
add r0.w, r0.x, c19.x
mul r1.xy, v6.zyzw, c5.x
mul r0.xy, v6.zyzw, c4.x
texld r0.xyz, r0, s2
texld r1.xyz, r1, s1
add r2.xyz, r0, -r1
mad_sat r0.y, r0.w, c19, c19.z
mad r3.xyz, r0.y, r2, r1
mul r2.xy, v6, c4.x
mul r1.xy, v6, c5.x
abs r0.zw, v6.xyxy
abs r0.x, v6.z
max r1.w, r0.z, r0.x
min r2.w, r0.z, r0.x
rcp r1.w, r1.w
mul r1.w, r2, r1
mul r2.w, r1, r1
mad r3.w, r2, c14.y, c14.z
mad r3.w, r3, r2, c14
mad r3.w, r3, r2, c15.x
texld r1.xyz, r1, s1
texld r2.xyz, r2, s2
add r2.xyz, r2, -r1
mad r1.xyz, r0.y, r2, r1
add_pp r2.xyz, r3, -r1
mad_pp r3.xyz, r0.z, r2, r1
mul r1.xy, v6.zxzw, c5.x
mul r2.xy, v6.zxzw, c4.x
texld r1.xyz, r1, s1
texld r2.xyz, r2, s2
add r2.xyz, r2, -r1
mad r1.xyz, r0.y, r2, r1
mad r0.y, r3.w, r2.w, c15
mad r0.y, r0, r2.w, c15.z
mul r1.w, r0.y, r1
add_pp r1.xyz, r1, -r3
mad_pp r1.xyz, r0.w, r1, r3
add_pp r1.xyz, r1, c16.w
add r0.y, -r1.w, c15.w
add r2.x, r0.z, -r0
cmp r2.x, -r2, r1.w, r0.y
add r1.w, -r2.x, c13
cmp r1.w, v6.z, r2.x, r1
mul r0.y, v0.x, c6.x
cmp r2.x, v6.y, c12, c12.y
mul_sat r0.y, r0, c13.z
mul_pp r1.xyz, r1, c17.x
mad_pp r1.xyz, r0.y, -r1, r1
add r3.xyz, v1, r1
abs r1.y, v6
cmp r0.y, v6.x, r1.w, -r1.w
mul r6.x, r0.y, c16
add r0.y, -r1, c12
mad r1.x, r1.y, c12.z, c12.w
mad r1.x, r1, r1.y, c13
rsq r0.y, r0.y
add r1.z, r6.x, c16.y
mad r1.x, r1, r1.y, c13.y
rcp r0.y, r0.y
mul r1.w, r1.x, r0.y
mul r1.y, r2.x, r1.w
add r0.y, -r0.x, c12
mad r1.x, r0, c12.z, c12.w
mad r1.x, r0, r1, c13
mad r0.x, r0, r1, c13.y
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r0.y, r0.x, r0
cmp r1.x, v6.z, c12, c12.y
mul r0.x, r1, r0.y
mad r0.x, -r0, c13.z, r0.y
mad r1.y, -r1, c13.z, r1.w
mad r0.y, r2.x, c13.w, r1
mad r0.x, r1, c13.w, r0
mul r0.x, r0, c14
mul r6.y, r0, c14.x
dsy r1.xy, v6
mov r1.w, r6.y
dsx r2.y, r0.x
dsy r2.w, r0.x
dsx r0.xy, v6
mul r0.xy, r0, r0
add r0.y, r0.x, r0
mul r1.xy, r1, r1
add r0.x, r1, r1.y
rsq r0.y, r0.y
rcp r0.y, r0.y
rsq r0.x, r0.x
rcp r0.x, r0.x
mul r2.x, r0.y, c16
mul r2.z, r0.x, c16.x
texldd r7.yw, r1.zwzw, s6, r2, r2.zwzw
texldd r4.xyz, r1.zwzw, s0, r2, r2.zwzw
texldd r2, r1.zwzw, s3, r2, r2.zwzw
mul r0.xy, v6.zyzw, c11.x
add_pp r4.xyz, r4, -r3
mul_sat r3.w, c10.x, c10.x
mad_pp r3.xyz, r3.w, r4, r3
mul r1.xy, v6, c11.x
texld r4, r1, s5
texld r5, r0, s5
add_pp r5, r5, -r4
mad_pp r5, r0.z, r5, r4
add r6.zw, r7.xywy, c16.w
mul r4.xy, r6.zwzw, c17
add r4.zw, r6.xyxy, r4.xyxy
mul r4.xy, v6.zxzw, c11.x
texld r6, r4, s5
add_pp r6, r6, -r5
mad r4.w, r4, c17.z, c17.y
frc r4.w, r4
mad r4.z, r4, c17.w, c17.y
frc r4.z, r4
mad_pp r5, r0.w, r6, r5
mad r4.w, r4, c18.x, c18.y
sincos r6.xy, r4.w
mov_pp r7.y, r6.x
mad r4.z, r4, c18.x, c18.y
sincos r6.xy, r4.z
dp4_pp r4.z, c1, c1
mov_pp r7.xz, r6.yyxw
rsq_pp r4.z, r4.z
mul_pp r6.xyz, r4.z, c1
dp3_sat r6.x, v5, r6
dp3_pp_sat r4.z, -r7, -c9
add_pp r4.w, r4.z, -r6.x
mad_pp r3.w, r3, r4, r6.x
add r6.z, v1.w, c16
frc r6.y, r6.z
add_sat r4.w, r6.z, -r6.y
mul_pp r2.w, r2, r4
mul_pp r6, r2, r5
add_pp r7.xyz, r6, -r3
mul_pp r1.z, r3.w, c2.w
texldp r5.x, v4, s7
texld r1.w, v3, s8
mul r3.w, r1, r5.x
mul_pp r1.w, r3, r1.z
dp3 r1.z, v6, c9
add r4.w, r1.z, c20.x
frc r1.z, r4.w
mov r5.x, c7
add_sat r1.z, r4.w, -r1
mul_pp_sat r1.w, r1, c19
add r5.xyz, c2, r5.x
mad_sat r5.xyz, r5, r1.w, c0
mul_pp r5.xyz, r5, r1.z
mul r6.xyz, r5, c8.x
mad_pp r3.xyz, r6.w, r7, r3
mad_pp r3.xyz, r3, c3, r6
texld r6, r0, s4
add_pp r0.x, r4.z, c18.z
texld r1, r1, s4
add_pp r6, r6, -r1
mad_pp r1, r0.z, r6, r1
texld r4, r4, s4
add_pp r4, r4, -r1
mul_pp r5.w, r0.x, c2
mad_pp r0, r0.w, r4, r1
mul_pp r0, r2, r0
mul_pp r1.x, r5.w, r3.w
mul_pp_sat r1.x, r1, c18.w
add_pp r1.w, -r1.x, c12.y
mad_pp r0.xyz, -r3, r5, r0
mul_pp r1.xyz, r3, r5
mul_pp r0.w, r0, r1
mad_pp oC0.xyz, r0.w, r0, r1
mov_pp oC0.w, c12.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightPositionRange]
Vector 3 [_LightShadowData]
Vector 4 [_LightColor0]
Vector 5 [_Color]
Float 6 [_DetailScale]
Float 7 [_DetailVertScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_Albedo]
Vector 11 [_SunDir]
Float 12 [_PlanetOpacity]
Float 13 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_BumpMap] 2D
SetTexture 7 [_ShadowMapTexture] CUBE
SetTexture 8 [_LightTexture0] 2D
"ps_3_0
; 180 ALU, 23 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_cube s7
dcl_2d s8
def c14, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c15, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c16, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c17, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c18, 0.15915494, 0.50000000, 0.99000001, -0.50000000
def c19, 0.25000000, 0.50000000, 0.49999991, 0.99999982
def c20, 6.28318501, -3.14159298, -0.01000214, 0.97000003
def c21, 1.00000000, 0.00392157, 0.00001538, 0.00000001
def c22, 4.03944778, -0.94999999, 32.00000000, 0.50000000
def c23, 4.00000000, 1.00999999, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
mov r0.xyz, v6
dp3_sat r0.x, v2, -r0
add r0.w, r0.x, c22.y
mul r1.xy, v6.zyzw, c7.x
mul r0.xy, v6.zyzw, c6.x
texld r0.xyz, r0, s2
texld r1.xyz, r1, s1
add r2.xyz, r0, -r1
mad_sat r0.y, r0.w, c22.z, c22.w
mad r3.xyz, r0.y, r2, r1
mul r2.xy, v6, c6.x
mul r1.xy, v6, c7.x
abs r0.zw, v6.xyxy
abs r0.x, v6.z
max r1.w, r0.z, r0.x
min r2.w, r0.z, r0.x
rcp r1.w, r1.w
mul r1.w, r2, r1
mul r2.w, r1, r1
mad r3.w, r2, c16.y, c16.z
mad r3.w, r3, r2, c16
mad r3.w, r3, r2, c17.x
texld r1.xyz, r1, s1
texld r2.xyz, r2, s2
add r2.xyz, r2, -r1
mad r1.xyz, r0.y, r2, r1
add_pp r2.xyz, r3, -r1
mad_pp r3.xyz, r0.z, r2, r1
mul r1.xy, v6.zxzw, c7.x
mul r2.xy, v6.zxzw, c6.x
texld r1.xyz, r1, s1
texld r2.xyz, r2, s2
add r2.xyz, r2, -r1
mad r1.xyz, r0.y, r2, r1
mad r0.y, r3.w, r2.w, c17
mad r0.y, r0, r2.w, c17.z
mul r1.w, r0.y, r1
add_pp r1.xyz, r1, -r3
mad_pp r1.xyz, r0.w, r1, r3
add_pp r1.xyz, r1, c18.w
add r0.y, -r1.w, c17.w
add r2.x, r0.z, -r0
cmp r2.x, -r2, r1.w, r0.y
add r1.w, -r2.x, c15
cmp r1.w, v6.z, r2.x, r1
mul r0.y, v0.x, c8.x
cmp r2.x, v6.y, c14, c14.y
mul_sat r3.w, c12.x, c12.x
mul_sat r0.y, r0, c15.z
mul_pp r1.xyz, r1, c19.x
mad_pp r1.xyz, r0.y, -r1, r1
add r3.xyz, v1, r1
abs r1.y, v6
cmp r0.y, v6.x, r1.w, -r1.w
mul r6.x, r0.y, c18
add r0.y, -r1, c14
mad r1.x, r1.y, c14.z, c14.w
mad r1.x, r1, r1.y, c15
rsq r0.y, r0.y
add r1.z, r6.x, c18.y
mad r1.x, r1, r1.y, c15.y
rcp r0.y, r0.y
mul r1.w, r1.x, r0.y
mul r1.y, r2.x, r1.w
add r0.y, -r0.x, c14
mad r1.x, r0, c14.z, c14.w
mad r1.x, r0, r1, c15
mad r0.x, r0, r1, c15.y
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r0.y, r0.x, r0
cmp r1.x, v6.z, c14, c14.y
mul r0.x, r1, r0.y
mad r0.x, -r0, c15.z, r0.y
mad r1.y, -r1, c15.z, r1.w
mad r0.y, r2.x, c15.w, r1
mad r0.x, r1, c15.w, r0
mul r0.x, r0, c16
mul r6.y, r0, c16.x
dsy r1.xy, v6
mov r1.w, r6.y
dsx r2.y, r0.x
dsy r2.w, r0.x
dsx r0.xy, v6
mul r0.xy, r0, r0
add r0.y, r0.x, r0
mul r1.xy, r1, r1
add r0.x, r1, r1.y
rsq r0.y, r0.y
rcp r0.y, r0.y
rsq r0.x, r0.x
rcp r0.x, r0.x
mul r2.x, r0.y, c18
mul r2.z, r0.x, c18.x
texldd r7.yw, r1.zwzw, s6, r2, r2.zwzw
texldd r4.xyz, r1.zwzw, s0, r2, r2.zwzw
texldd r2, r1.zwzw, s3, r2, r2.zwzw
add_pp r4.xyz, r4, -r3
mul r0.xy, v6.zyzw, c13.x
dp3 r1.w, v4, v4
mad_pp r3.xyz, r3.w, r4, r3
mul r1.xy, v6, c13.x
texld r4, r1, s5
texld r5, r0, s5
add_pp r5, r5, -r4
mad_pp r5, r0.z, r5, r4
add r6.zw, r7.xywy, c18.w
mul r4.zw, r6, c19.xyxy
add r4.zw, r6.xyxy, r4
mul r4.xy, v6.zxzw, c13.x
texld r6, r4, s5
add_pp r6, r6, -r5
mad_pp r5, r0.w, r6, r5
mad r4.w, r4, c19.z, c19.y
frc r6.x, r4.w
mad r4.w, r4.z, c19, c19.y
mad r4.z, r6.x, c20.x, c20.y
sincos r6.xy, r4.z
frc r4.w, r4
mad r4.z, r4.w, c20.x, c20.y
sincos r7.xy, r4.z
dp4 r4.z, c1, c1
mov_pp r6.y, r6.x
mov_pp r6.xz, r7.yyxw
rsq r4.w, r4.z
dp3_pp_sat r4.z, -r6, -c11
mul r6.xyz, r4.w, c1
dp3_sat r7.x, v5, r6
add_pp r4.w, r4.z, -r7.x
mad_pp r1.z, r3.w, r4.w, r7.x
add r6.w, v1, c18.z
frc r6.x, r6.w
add_sat r6.x, r6.w, -r6
mul_pp r2.w, r2, r6.x
mul_pp r6, r2, r5
rsq r1.w, r1.w
rcp r3.w, r1.w
texld r5, v4, s7
dp4 r1.w, r5, c21
add_pp r7.xyz, r6, -r3
mul r3.w, r3, c2
mad r3.w, -r3, c20, r1
mov r1.w, c3.x
dp3 r5.x, v3, v3
cmp r1.w, r3, c14.y, r1
texld r5.x, r5.x, s8
mul r3.w, r5.x, r1
mul_pp r1.z, r1, c4.w
mul_pp r1.w, r3, r1.z
dp3 r1.z, v6, c11
add r4.w, r1.z, c23.y
frc r1.z, r4.w
mov r5.x, c9
add_sat r1.z, r4.w, -r1
mul_pp_sat r1.w, r1, c23.x
add r5.xyz, c4, r5.x
mad_sat r5.xyz, r5, r1.w, c0
mul_pp r5.xyz, r5, r1.z
mul r6.xyz, r5, c10.x
mad_pp r3.xyz, r6.w, r7, r3
mad_pp r3.xyz, r3, c5, r6
texld r6, r0, s4
add_pp r0.x, r4.z, c20.z
texld r1, r1, s4
add_pp r6, r6, -r1
mad_pp r1, r0.z, r6, r1
texld r4, r4, s4
add_pp r4, r4, -r1
mul_pp r5.w, r0.x, c4
mad_pp r0, r0.w, r4, r1
mul_pp r0, r2, r0
mul_pp r1.x, r5.w, r3.w
mul_pp_sat r1.x, r1, c22
add_pp r1.w, -r1.x, c14.y
mad_pp r0.xyz, -r3, r5, r0
mul_pp r1.xyz, r3, r5
mul_pp r0.w, r0, r1
mad_pp oC0.xyz, r0.w, r0, r1
mov_pp oC0.w, c14.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightPositionRange]
Vector 3 [_LightShadowData]
Vector 4 [_LightColor0]
Vector 5 [_Color]
Float 6 [_DetailScale]
Float 7 [_DetailVertScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_Albedo]
Vector 11 [_SunDir]
Float 12 [_PlanetOpacity]
Float 13 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_BumpMap] 2D
SetTexture 7 [_ShadowMapTexture] CUBE
SetTexture 8 [_LightTextureB0] 2D
SetTexture 9 [_LightTexture0] CUBE
"ps_3_0
; 181 ALU, 24 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_cube s7
dcl_2d s8
dcl_cube s9
def c14, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c15, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c16, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c17, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c18, 0.15915494, 0.50000000, 0.99000001, -0.50000000
def c19, 0.25000000, 0.50000000, 0.49999991, 0.99999982
def c20, 6.28318501, -3.14159298, -0.01000214, 0.97000003
def c21, 1.00000000, 0.00392157, 0.00001538, 0.00000001
def c22, 4.03944778, -0.94999999, 32.00000000, 0.50000000
def c23, 4.00000000, 1.00999999, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
mov r0.xyz, v6
dp3_sat r0.x, v2, -r0
add r0.w, r0.x, c22.y
mad_sat r1.w, r0, c22.z, c22
mul r0.xy, v6.zyzw, c7.x
mul r1.xy, v6.zyzw, c6.x
abs r4.zw, v6.xyxy
abs r0.w, v6.z
max r2.w, r4.z, r0
rcp r3.x, r2.w
min r2.w, r4.z, r0
mul r2.w, r2, r3.x
mul r3.x, r2.w, r2.w
mad r3.y, r3.x, c16, c16.z
mad r3.y, r3, r3.x, c16.w
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad r2.xyz, r1.w, r1, r0
mul r0.xy, v6, c6.x
mul r1.xy, v6, c7.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r1.w, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r4.z, r1, r0
mul r1.xy, v6.zxzw, c7.x
mul r0.xy, v6.zxzw, c6.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r1.w, r0, r1
add_pp r0.xyz, r0, -r2
mad_pp r2.xyz, r4.w, r0, r2
mad r3.y, r3, r3.x, c17.x
mad r1.x, r3.y, r3, c17.y
mad r1.x, r1, r3, c17.z
mul r0.y, r1.x, r2.w
add_pp r1.xyz, r2, c18.w
add r2.x, -r0.w, c14.y
mad r1.w, r0, c14.z, c14
rsq r2.x, r2.x
add r0.z, -r0.y, c17.w
add r0.x, r4.z, -r0.w
cmp r0.x, -r0, r0.y, r0.z
add r0.y, -r0.x, c15.w
cmp r0.x, v6.z, r0, r0.y
mad r1.w, r0, r1, c15.x
mul r0.z, v0.x, c8.x
cmp r0.x, v6, r0, -r0
mul r6.z, r0.x, c18.x
add r5.z, r6, c18.y
abs r0.x, v6.y
mul_sat r0.y, r0.z, c15.z
add r0.z, -r0.x, c14.y
mul_pp r1.xyz, r1, c19.x
mad_pp r1.xyz, r0.y, -r1, r1
mad r0.y, r0.x, c14.z, c14.w
mad r0.y, r0, r0.x, c15.x
rsq r0.z, r0.z
mad r0.w, r0, r1, c15.y
rcp r2.x, r2.x
mul r1.w, r0, r2.x
cmp r0.w, v6.z, c14.x, c14.y
mul r2.x, r0.w, r1.w
add r1.xyz, v1, r1
mad r0.x, r0.y, r0, c15.y
rcp r0.z, r0.z
mul r0.y, r0.x, r0.z
cmp r0.x, v6.y, c14, c14.y
mul r0.z, r0.x, r0.y
mad r0.y, -r0.z, c15.z, r0
mad r0.x, r0, c15.w, r0.y
mad r0.z, -r2.x, c15, r1.w
mad r0.y, r0.w, c15.w, r0.z
mul r6.w, r0.x, c16.x
mul r0.x, r0.y, c16
dsy r0.zw, v6.xyxy
mul r0.zw, r0, r0
mov r5.w, r6
dsx r2.w, r0.x
dsy r2.y, r0.x
dsx r0.xy, v6
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r0.y, r0.z, r0.w
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r2.z, r0.x, c18.x
mul r2.x, r0.y, c18
texldd r7.yw, r5.zwzw, s6, r2.zwzw, r2
texldd r0.xyz, r5.zwzw, s0, r2.zwzw, r2
add_pp r0.xyz, r0, -r1
mul_sat r3.w, c12.x, c12.x
mad_pp r3.xyz, r3.w, r0, r1
mul r5.xy, v6.zyzw, c13.x
mul r6.xy, v6, c13.x
add r4.xy, r7.wyzw, c18.w
texld r1, r6, s5
texld r0, r5, s5
add_pp r0, r0, -r1
mad_pp r1, r4.z, r0, r1
mul r0.xy, r4, c19
add r6.zw, r6, r0.xyxy
mul r4.xy, v6.zxzw, c13.x
texld r0, r4, s5
add_pp r0, r0, -r1
mad r6.w, r6, c19.z, c19.y
frc r6.w, r6
mad_pp r0, r4.w, r0, r1
mad r6.w, r6, c20.x, c20.y
sincos r1.xy, r6.w
mad r6.z, r6, c19.w, c19.y
frc r1.y, r6.z
mad r6.z, r1.y, c20.x, c20.y
mov_pp r7.y, r1.x
sincos r1.xy, r6.z
dp4 r1.z, c1, c1
mov_pp r7.xz, r1.yyxw
rsq r1.z, r1.z
mul r1.xyz, r1.z, c1
dp3_sat r1.z, v5, r1
dp3_pp_sat r6.z, -r7, -c11
add r1.x, v1.w, c18.z
add_pp r1.w, r6.z, -r1.z
mad_pp r3.w, r3, r1, r1.z
frc r1.y, r1.x
add_sat r6.w, r1.x, -r1.y
texldd r1, r5.zwzw, s3, r2.zwzw, r2
mul_pp r1.w, r1, r6
mul_pp r2, r1, r0
texld r0, v4, s7
dp4 r0.y, r0, c21
add_pp r2.xyz, r2, -r3
dp3 r5.z, v4, v4
rsq r5.z, r5.z
rcp r0.x, r5.z
mul r0.x, r0, c2.w
mad r0.x, -r0, c20.w, r0.y
mov r0.z, c3.x
cmp r0.y, r0.x, c14, r0.z
dp3 r0.x, v3, v3
mad_pp r2.xyz, r2.w, r2, r3
mul_pp r3.w, r3, c4
texld r0.w, v3, s9
texld r0.x, r0.x, s8
mul r0.x, r0, r0.w
mul r0.w, r0.x, r0.y
mul_pp r0.x, r0.w, r3.w
dp3 r0.y, v6, c11
add r3.w, r0.y, c23.y
mul_pp_sat r5.z, r0.x, c23.x
mov r0.x, c9
frc r5.w, r3
add r0.xyz, c4, r0.x
add_sat r3.w, r3, -r5
mad_sat r0.xyz, r0, r5.z, c0
mul_pp r0.xyz, r0, r3.w
mul r7.xyz, r0, c10.x
mad_pp r7.xyz, r2, c5, r7
texld r3, r5, s4
texld r2, r6, s4
add_pp r3, r3, -r2
mad_pp r2, r4.z, r3, r2
texld r3, r4, s4
add_pp r5.x, r6.z, c20.z
add_pp r3, r3, -r2
mad_pp r2, r4.w, r3, r2
mul_pp r1, r1, r2
mul_pp r4.x, r5, c4.w
mul_pp r0.w, r4.x, r0
mul_pp_sat r0.w, r0, c22.x
mad_pp r1.xyz, -r7, r0, r1
mul_pp r2.xyz, r7, r0
add_pp r0.w, -r0, c14.y
mul_pp r0.x, r1.w, r0.w
mad_pp oC0.xyz, r0.x, r1, r2
mov_pp oC0.w, c14.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightShadowData]
Vector 3 [_ShadowOffsets0]
Vector 4 [_ShadowOffsets1]
Vector 5 [_ShadowOffsets2]
Vector 6 [_ShadowOffsets3]
Vector 7 [_LightColor0]
Vector 8 [_Color]
Float 9 [_DetailScale]
Float 10 [_DetailVertScale]
Float 11 [_DetailDist]
Float 12 [_MinLight]
Float 13 [_Albedo]
Vector 14 [_SunDir]
Float 15 [_PlanetOpacity]
Float 16 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_BumpMap] 2D
SetTexture 7 [_LightTexture0] 2D
SetTexture 8 [_LightTextureB0] 2D
SetTexture 9 [_ShadowMapTexture] 2D
"ps_3_0
; 189 ALU, 27 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_2d s7
dcl_2d s8
dcl_2d s9
def c17, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c18, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c19, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c20, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c21, 0.15915494, 0.50000000, 0.99000001, -0.50000000
def c22, 0.25000000, 0.50000000, 0.49999991, 0.99999982
def c23, 6.28318501, -3.14159298, -0.01000214, 4.03944778
def c24, -0.94999999, 32.00000000, 0.50000000, 4.00000000
def c25, 1.00999999, 0, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3
dcl_texcoord4 v4
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
mov r0.xyz, v6
dp3_sat r0.x, v2, -r0
add r0.w, r0.x, c24.x
mul r1.xy, v6.zyzw, c10.x
mul r0.xy, v6.zyzw, c9.x
abs r4.zw, v6.xyxy
abs r1.w, v6.z
max r2.w, r4.z, r1
rcp r3.x, r2.w
min r2.w, r4.z, r1
mul r2.w, r2, r3.x
mul r3.x, r2.w, r2.w
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad_sat r0.w, r0, c24.y, c24.z
mad r2.xyz, r0.w, r0, r1
mul r0.xy, v6, c9.x
mul r1.xy, v6, c10.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r0.w, r0, r1
add_pp r2.xyz, r2, -r0
mad_pp r2.xyz, r4.z, r2, r0
mad r1.x, r3, c19.y, c19.z
mad r3.y, r1.x, r3.x, c19.w
mul r1.xy, v6.zxzw, c10.x
mul r0.xy, v6.zxzw, c9.x
mul r5.xy, v6.zyzw, c16.x
mul_sat r3.w, c15.x, c15.x
mul r4.xy, v6.zxzw, c16.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r1.xyz, r0.w, r0, r1
add_pp r1.xyz, r1, -r2
mad_pp r1.xyz, r4.w, r1, r2
mad r3.y, r3, r3.x, c20.x
mad r0.x, r3.y, r3, c20.y
mad r0.x, r0, r3, c20.z
mul r0.y, r0.x, r2.w
mad r0.w, r1, c17.z, c17
mad r0.w, r1, r0, c18.x
add_pp r1.xyz, r1, c21.w
add r0.z, -r0.y, c20.w
add r0.x, r4.z, -r1.w
cmp r0.x, -r0, r0.y, r0.z
add r0.y, -r0.x, c18.w
cmp r0.x, v6.z, r0, r0.y
mul r0.z, v0.x, c11.x
cmp r0.x, v6, r0, -r0
mul r6.z, r0.x, c21.x
add r5.z, r6, c21.y
abs r0.x, v6.y
mul_sat r0.y, r0.z, c18.z
add r0.z, -r0.x, c17.y
mul_pp r1.xyz, r1, c22.x
mad_pp r1.xyz, r0.y, -r1, r1
add r3.xyz, v1, r1
mad r0.y, r0.x, c17.z, c17.w
mad r0.y, r0, r0.x, c18.x
add r1.x, -r1.w, c17.y
rsq r0.z, r0.z
rsq r1.x, r1.x
mad r0.x, r0.y, r0, c18.y
rcp r0.z, r0.z
mul r0.y, r0.x, r0.z
cmp r0.x, v6.y, c17, c17.y
mul r0.z, r0.x, r0.y
mad r0.y, -r0.z, c18.z, r0
mad r0.x, r0, c18.w, r0.y
mul r6.w, r0.x, c19.x
mov r5.w, r6
mad r0.w, r1, r0, c18.y
rcp r1.x, r1.x
mul r1.x, r0.w, r1
cmp r0.w, v6.z, c17.x, c17.y
mul r1.y, r0.w, r1.x
mad r0.z, -r1.y, c18, r1.x
mad r0.y, r0.w, c18.w, r0.z
mul r0.x, r0.y, c19
dsy r0.zw, v6.xyxy
mul r0.zw, r0, r0
dsx r2.w, r0.x
dsy r2.y, r0.x
dsx r0.xy, v6
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r0.y, r0.z, r0.w
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r2.z, r0.x, c21.x
mul r2.x, r0.y, c21
texldd r0.xyz, r5.zwzw, s0, r2.zwzw, r2
add_pp r7.xyz, r0, -r3
mul r6.xy, v6, c16.x
mad_pp r3.xyz, r3.w, r7, r3
texld r0, r6, s5
texld r1, r5, s5
add_pp r1, r1, -r0
mad_pp r1, r4.z, r1, r0
texldd r0.yw, r5.zwzw, s6, r2.zwzw, r2
add r7.xy, r0.wyzw, c21.w
mul r7.xy, r7, c22
texld r0, r4, s5
add_pp r0, r0, -r1
mad_pp r0, r4.w, r0, r1
add r6.zw, r6, r7.xyxy
mad r1.y, r6.w, c22.z, c22
frc r1.z, r1.y
add r1.x, v1.w, c21.z
frc r1.y, r1.x
add_sat r7.x, r1, -r1.y
mad r6.w, r1.z, c23.x, c23.y
texldd r1, r5.zwzw, s3, r2.zwzw, r2
mul_pp r1.w, r1, r7.x
mul_pp r2, r1, r0
sincos r0.xy, r6.w
mad r0.y, r6.z, c22.w, c22
add_pp r2.xyz, r2, -r3
frc r0.y, r0
mad_pp r2.xyz, r2.w, r2, r3
mad r5.z, r0.y, c23.x, c23.y
mov_pp r8.y, r0.x
sincos r0.xy, r5.z
dp4 r5.w, c1, c1
rsq r0.z, r5.w
mov_pp r8.xz, r0.yyxw
mul r7.xyz, r0.z, c1
rcp r5.w, v4.w
dp3_sat r0.x, v5, r7
dp3_pp_sat r5.z, -r8, -c14
add_pp r0.y, r5.z, -r0.x
mad_pp r0.z, r3.w, r0.y, r0.x
mad r0.xy, v4, r5.w, c6
texld r0.x, r0, s9
mul_pp r3.w, r0.z, c7
mad r7.xy, v4, r5.w, c5
mov r0.w, r0.x
texld r0.x, r7, s9
mad r7.xy, v4, r5.w, c4
mov r0.z, r0.x
texld r0.x, r7, s9
mad r7.xy, v4, r5.w, c3
mov r0.y, r0.x
texld r0.x, r7, s9
mad r0, -v4.z, r5.w, r0
mov r6.z, c2.x
cmp r0, r0, c17.y, r6.z
dp4_pp r0.z, r0, c22.x
rcp r5.w, v3.w
mad r7.xy, v3, r5.w, c21.y
dp3 r0.x, v3, v3
texld r0.w, r7, s7
cmp r0.y, -v3.z, c17.x, c17
mul_pp r0.y, r0, r0.w
texld r0.x, r0.x, s8
mul_pp r0.x, r0.y, r0
mul_pp r0.w, r0.x, r0.z
mul_pp r0.x, r0.w, r3.w
mul_pp_sat r3.w, r0.x, c24
dp3 r0.y, v6, c14
add r5.w, r0.y, c25.x
mov r0.x, c12
frc r6.z, r5.w
add r0.xyz, c7, r0.x
mad_sat r0.xyz, r0, r3.w, c0
texld r3, r5, s4
add_sat r5.w, r5, -r6.z
mul_pp r0.xyz, r0, r5.w
mul r7.xyz, r0, c13.x
mad_pp r7.xyz, r2, c8, r7
texld r2, r6, s4
add_pp r3, r3, -r2
mad_pp r2, r4.z, r3, r2
texld r3, r4, s4
add_pp r5.x, r5.z, c23.z
add_pp r3, r3, -r2
mad_pp r2, r4.w, r3, r2
mul_pp r1, r1, r2
mul_pp r4.x, r5, c7.w
mul_pp r0.w, r4.x, r0
mul_pp_sat r0.w, r0, c23
mad_pp r1.xyz, -r7, r0, r1
mul_pp r2.xyz, r7, r0
add_pp r0.w, -r0, c17.y
mul_pp r0.x, r1.w, r0.w
mad_pp oC0.xyz, r0.x, r1, r2
mov_pp oC0.w, c17.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightShadowData]
Vector 3 [_ShadowOffsets0]
Vector 4 [_ShadowOffsets1]
Vector 5 [_ShadowOffsets2]
Vector 6 [_ShadowOffsets3]
Vector 7 [_LightColor0]
Vector 8 [_Color]
Float 9 [_DetailScale]
Float 10 [_DetailVertScale]
Float 11 [_DetailDist]
Float 12 [_MinLight]
Float 13 [_Albedo]
Vector 14 [_SunDir]
Float 15 [_PlanetOpacity]
Float 16 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_BumpMap] 2D
SetTexture 7 [_LightTexture0] 2D
SetTexture 8 [_LightTextureB0] 2D
SetTexture 9 [_ShadowMapTexture] 2D
"ps_3_0
; 189 ALU, 27 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_2d s7
dcl_2d s8
dcl_2d s9
def c17, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c18, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c19, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c20, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c21, 0.15915494, 0.50000000, 0.99000001, -0.50000000
def c22, 0.25000000, 0.50000000, 0.49999991, 0.99999982
def c23, 6.28318501, -3.14159298, -0.01000214, 4.03944778
def c24, -0.94999999, 32.00000000, 0.50000000, 4.00000000
def c25, 1.00999999, 0, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3
dcl_texcoord4 v4
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
mov r0.xyz, v6
dp3_sat r0.x, v2, -r0
add r0.w, r0.x, c24.x
mul r1.xy, v6.zyzw, c10.x
mul r0.xy, v6.zyzw, c9.x
abs r2.w, v6.z
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad_sat r0.w, r0, c24.y, c24.z
mad r3.xyz, r0.w, r0, r1
mul r1.xy, v6, c10.x
mul r0.xy, v6, c9.x
abs r1.zw, v6.xyxy
texld r2.xyz, r1, s1
max r1.x, r1.z, r2.w
rcp r1.y, r1.x
min r1.x, r1.z, r2.w
mul r3.w, r1.x, r1.y
mul r4.x, r3.w, r3.w
mad r1.x, r4, c19.y, c19.z
mad r4.y, r1.x, r4.x, c19.w
texld r0.xyz, r0, s2
add r0.xyz, r0, -r2
mad r0.xyz, r0.w, r0, r2
add_pp r2.xyz, r3, -r0
mad_pp r3.xyz, r1.z, r2, r0
mul r1.xy, v6.zxzw, c10.x
texld r2.xyz, r1, s1
mul r0.xy, v6.zxzw, c9.x
texld r0.xyz, r0, s2
add r0.xyz, r0, -r2
mad r2.xyz, r0.w, r0, r2
add_pp r2.xyz, r2, -r3
mad_pp r2.xyz, r1.w, r2, r3
mad r1.x, r4.y, r4, c20
mad r0.x, r1, r4, c20.y
mad r0.x, r0, r4, c20.z
mul r0.y, r0.x, r3.w
add r1.x, -r2.w, c17.y
mad r0.w, r2, c17.z, c17
mad r0.w, r2, r0, c18.x
add_pp r2.xyz, r2, c21.w
rsq r1.x, r1.x
add r0.z, -r0.y, c20.w
add r0.x, r1.z, -r2.w
cmp r0.x, -r0, r0.y, r0.z
add r0.y, -r0.x, c18.w
cmp r0.x, v6.z, r0, r0.y
mul r0.z, v0.x, c11.x
cmp r0.x, v6, r0, -r0
mul r6.z, r0.x, c21.x
add r3.z, r6, c21.y
abs r0.x, v6.y
mul_sat r0.y, r0.z, c18.z
add r0.z, -r0.x, c17.y
mul_pp r2.xyz, r2, c22.x
mad_pp r2.xyz, r0.y, -r2, r2
mad r0.y, r0.x, c17.z, c17.w
mad r0.y, r0, r0.x, c18.x
rsq r0.z, r0.z
add r4.xyz, v1, r2
mad r0.x, r0.y, r0, c18.y
rcp r0.z, r0.z
mul r0.y, r0.x, r0.z
cmp r0.x, v6.y, c17, c17.y
mul r0.z, r0.x, r0.y
mad r0.y, -r0.z, c18.z, r0
mad r0.x, r0, c18.w, r0.y
mul r6.w, r0.x, c19.x
mov r3.w, r6
mad r0.w, r2, r0, c18.y
mul r6.xy, v6.zyzw, c16.x
rcp r1.x, r1.x
mul r1.x, r0.w, r1
cmp r0.w, v6.z, c17.x, c17.y
mul r1.y, r0.w, r1.x
mad r0.z, -r1.y, c18, r1.x
mad r0.y, r0.w, c18.w, r0.z
mul r0.x, r0.y, c19
dsy r0.zw, v6.xyxy
mul r0.zw, r0, r0
dsx r3.y, r0.x
dsy r1.y, r0.x
dsx r0.xy, v6
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r0.y, r0.z, r0.w
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r3.x, r0, c21
mul r1.x, r0.y, c21
texldd r0.xyz, r3.zwzw, s0, r3, r1
add_pp r5.xyz, r0, -r4
mul_sat r4.w, c15.x, c15.x
mad_pp r4.xyz, r4.w, r5, r4
texldd r8.yw, r3.zwzw, s6, r3, r1
mul r7.xy, v6, c16.x
texld r0, r7, s5
texld r2, r6, s5
add_pp r2, r2, -r0
mad_pp r2, r1.z, r2, r0
mul r5.xy, v6.zxzw, c16.x
texld r0, r5, s5
add_pp r0, r0, -r2
mad_pp r0, r1.w, r0, r2
add r5.zw, r8.xywy, c21.w
mul r2.xy, r5.zwzw, c22
add r5.zw, r6, r2.xyxy
add r2.x, v1.w, c21.z
mad r2.z, r5.w, c22, c22.y
frc r2.y, r2.x
frc r5.w, r2.z
add_sat r6.z, r2.x, -r2.y
texldd r2, r3.zwzw, s3, r3, r1
mad r1.y, r5.z, c22.w, c22
mul_pp r2.w, r2, r6.z
mul_pp r3, r2, r0
add_pp r3.xyz, r3, -r4
mad r1.x, r5.w, c23, c23.y
sincos r0.xy, r1.x
frc r0.y, r1
rcp r5.z, v4.w
mad_pp r3.xyz, r3.w, r3, r4
mad r1.x, r0.y, c23, c23.y
mov_pp r8.y, r0.x
sincos r0.xy, r1.x
dp4 r0.z, c1, c1
mov_pp r8.xz, r0.yyxw
dp3_pp_sat r1.y, -r8, -c14
rsq r0.z, r0.z
mul r0.xyz, r0.z, c1
dp3_sat r0.w, v5, r0
add_pp r1.x, r1.y, -r0.w
mad_pp r0.w, r4, r1.x, r0
mad r0.xyz, v4, r5.z, c6
mad r8.xyz, v4, r5.z, c4
texld r1.x, r8, s9
mad r8.xyz, v4, r5.z, c3
mul_pp r4.w, r0, c7
texld r0.x, r0, s9
mov_pp r0.w, r0.x
mad r0.xyz, v4, r5.z, c5
texld r0.x, r0, s9
mov_pp r0.z, r0.x
mov_pp r0.y, r1.x
mov r0.x, c2
add r1.x, c17.y, -r0
texld r0.x, r8, s9
mad r0, r0, r1.x, c2.x
dp4_pp r0.z, r0, c22.x
rcp r1.x, v3.w
mad r8.xy, v3, r1.x, c21.y
dp3 r0.x, v3, v3
texld r0.w, r8, s7
cmp r0.y, -v3.z, c17.x, c17
mul_pp r0.y, r0, r0.w
texld r0.x, r0.x, s8
mul_pp r0.x, r0.y, r0
mul_pp r0.w, r0.x, r0.z
mul_pp r0.x, r0.w, r4.w
mul_pp_sat r1.x, r0, c24.w
dp3 r0.y, v6, c14
add r4.w, r0.y, c25.x
mov r0.x, c12
frc r5.z, r4.w
add r0.xyz, c7, r0.x
mad_sat r0.xyz, r0, r1.x, c0
add_sat r4.w, r4, -r5.z
mul_pp r0.xyz, r0, r4.w
mul r8.xyz, r0, c13.x
mad_pp r8.xyz, r3, c8, r8
texld r3, r7, s4
texld r4, r6, s4
add_pp r4, r4, -r3
mad_pp r3, r1.z, r4, r3
texld r4, r5, s4
add_pp r1.x, r1.y, c23.z
mul_pp r5.x, r1, c7.w
add_pp r4, r4, -r3
mad_pp r1, r1.w, r4, r3
mul_pp r1, r2, r1
mul_pp r0.w, r5.x, r0
mul_pp_sat r0.w, r0, c23
mad_pp r1.xyz, -r8, r0, r1
mul_pp r2.xyz, r8, r0
add_pp r0.w, -r0, c17.y
mul_pp r0.x, r1.w, r0.w
mad_pp oC0.xyz, r0.x, r1, r2
mov_pp oC0.w, c17.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightPositionRange]
Vector 3 [_LightShadowData]
Vector 4 [_LightColor0]
Vector 5 [_Color]
Float 6 [_DetailScale]
Float 7 [_DetailVertScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_Albedo]
Vector 11 [_SunDir]
Float 12 [_PlanetOpacity]
Float 13 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_BumpMap] 2D
SetTexture 7 [_ShadowMapTexture] CUBE
SetTexture 8 [_LightTexture0] 2D
"ps_3_0
; 188 ALU, 26 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_cube s7
dcl_2d s8
def c14, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c15, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c16, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c17, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c18, 0.15915494, 0.50000000, 0.99000001, -0.50000000
def c19, 0.25000000, 0.50000000, 0.49999991, 0.99999982
def c20, 6.28318501, -3.14159298, -0.01000214, 0.00781250
def c21, 0.00781250, -0.00781250, 0.97000003, 4.03944778
def c22, 1.00000000, 0.00392157, 0.00001538, 0.00000001
def c23, -0.94999999, 32.00000000, 0.50000000, 4.00000000
def c24, 1.00999999, 0, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
mov r0.xyz, v6
dp3_sat r0.x, v2, -r0
add r0.w, r0.x, c23.x
mul r1.xy, v6.zyzw, c7.x
mul r0.xy, v6.zyzw, c6.x
abs r6.zw, v6.xyxy
abs r1.w, v6.z
max r2.w, r6.z, r1
rcp r3.x, r2.w
min r2.w, r6.z, r1
mul r2.w, r2, r3.x
mul r3.x, r2.w, r2.w
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad_sat r0.w, r0, c23.y, c23.z
mad r2.xyz, r0.w, r0, r1
mul r0.xy, v6, c6.x
mul r1.xy, v6, c7.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r0.w, r0, r1
add_pp r2.xyz, r2, -r0
mad_pp r2.xyz, r6.z, r2, r0
mad r1.x, r3, c16.y, c16.z
mad r3.y, r1.x, r3.x, c16.w
mul r1.xy, v6.zxzw, c7.x
mul r0.xy, v6.zxzw, c6.x
mad r3.y, r3, r3.x, c17.x
mul_sat r5.w, c12.x, c12.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r1.xyz, r0.w, r0, r1
add_pp r1.xyz, r1, -r2
mad_pp r1.xyz, r6.w, r1, r2
mad r0.x, r3.y, r3, c17.y
mad r0.x, r0, r3, c17.z
mul r0.y, r0.x, r2.w
mad r0.w, r1, c14.z, c14
mad r0.w, r1, r0, c15.x
add_pp r1.xyz, r1, c18.w
add r0.z, -r0.y, c17.w
add r0.x, r6.z, -r1.w
cmp r0.x, -r0, r0.y, r0.z
add r0.y, -r0.x, c15.w
cmp r0.x, v6.z, r0, r0.y
mul r0.z, v0.x, c8.x
cmp r0.x, v6, r0, -r0
mul r3.z, r0.x, c18.x
add r3.x, r3.z, c18.y
abs r0.x, v6.y
mul_sat r0.y, r0.z, c15.z
add r0.z, -r0.x, c14.y
mul_pp r1.xyz, r1, c19.x
mad_pp r1.xyz, r0.y, -r1, r1
add r4.xyz, v1, r1
mad r0.y, r0.x, c14.z, c14.w
mad r0.y, r0, r0.x, c15.x
add r1.x, -r1.w, c14.y
rsq r0.z, r0.z
rsq r1.x, r1.x
mad r0.x, r0.y, r0, c15.y
rcp r0.z, r0.z
mul r0.y, r0.x, r0.z
cmp r0.x, v6.y, c14, c14.y
mul r0.z, r0.x, r0.y
mad r0.y, -r0.z, c15.z, r0
mad r0.x, r0, c15.w, r0.y
mul r3.w, r0.x, c16.x
mov r3.y, r3.w
mad r0.w, r1, r0, c15.y
rcp r1.x, r1.x
mul r1.x, r0.w, r1
cmp r0.w, v6.z, c14.x, c14.y
mul r1.y, r0.w, r1.x
mad r0.z, -r1.y, c15, r1.x
mad r0.y, r0.w, c15.w, r0.z
mul r0.x, r0.y, c16
mul r7.xy, v6.zyzw, c13.x
dsy r0.zw, v6.xyxy
mul r0.zw, r0, r0
dsx r2.w, r0.x
dsy r2.y, r0.x
dsx r0.xy, v6
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r0.y, r0.z, r0.w
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r2.z, r0.x, c18.x
mul r2.x, r0.y, c18
texldd r0.xyz, r3, s0, r2.zwzw, r2
add_pp r5.xyz, r0, -r4
mul r8.xy, v6, c13.x
mad_pp r4.xyz, r5.w, r5, r4
texld r0, r8, s5
texld r1, r7, s5
add_pp r1, r1, -r0
mad_pp r1, r6.z, r1, r0
texldd r0.yw, r3, s6, r2.zwzw, r2
add r5.xy, r0.wyzw, c18.w
mul r5.xy, r5, c19
mul r6.xy, v6.zxzw, c13.x
texld r0, r6, s5
add_pp r0, r0, -r1
mad_pp r0, r6.w, r0, r1
add r3.zw, r3, r5.xyxy
mad r1.y, r3.w, c19.z, c19
frc r1.z, r1.y
add r1.x, v1.w, c18.z
frc r1.y, r1.x
mad r3.w, r1.z, c20.x, c20.y
add_sat r4.w, r1.x, -r1.y
texldd r1, r3, s3, r2.zwzw, r2
mul_pp r1.w, r1, r4
mul_pp r2, r1, r0
sincos r0.xy, r3.w
mad r0.y, r3.z, c19.w, c19
add_pp r2.xyz, r2, -r4
frc r0.y, r0
mad_pp r2.xyz, r2.w, r2, r4
mov_pp r5.y, r0.x
mad r3.x, r0.y, c20, c20.y
sincos r0.xy, r3.x
dp4 r3.y, c1, c1
rsq r0.z, r3.y
mul r3.xyz, r0.z, c1
mov_pp r5.xz, r0.yyxw
dp3_sat r0.w, v5, r3
dp3_pp_sat r4.w, -r5, -c11
add_pp r3.x, r4.w, -r0.w
mad_pp r3.x, r5.w, r3, r0.w
mul_pp r7.z, r3.x, c4.w
add r0.xyz, v4, c21.xyyw
texld r0, r0, s7
dp4 r5.w, r0, c22
add r0.xyz, v4, c21.yxyw
texld r0, r0, s7
dp4 r5.z, r0, c22
add r3.xyz, v4, c21.yyxw
texld r3, r3, s7
dp4 r5.y, r3, c22
add r0.xyz, v4, c20.w
texld r0, r0, s7
dp3 r3.x, v4, v4
add_pp r4.w, r4, c20.z
rsq r3.x, r3.x
dp4 r5.x, r0, c22
rcp r0.x, r3.x
mul r0.x, r0, c2.w
mad r0, -r0.x, c21.z, r5
mov r3.x, c3
cmp r3, r0, c14.y, r3.x
dp3 r0.x, v3, v3
dp4_pp r0.y, r3, c19.x
texld r0.x, r0.x, s8
mul r0.w, r0.x, r0.y
mul_pp r0.x, r0.w, r7.z
mul_pp_sat r3.x, r0, c23.w
dp3 r0.y, v6, c11
add r3.y, r0, c24.x
frc r3.z, r3.y
mov r0.x, c9
add r0.xyz, c4, r0.x
mul_pp r4.w, r4, c4
mul_pp r0.w, r4, r0
mul_pp_sat r0.w, r0, c21
mad_sat r0.xyz, r0, r3.x, c0
add_sat r3.y, r3, -r3.z
mul_pp r0.xyz, r0, r3.y
mul r3.xyz, r0, c10.x
mad_pp r4.xyz, r2, c5, r3
texld r2, r8, s4
texld r3, r7, s4
add_pp r3, r3, -r2
mad_pp r2, r6.z, r3, r2
texld r3, r6, s4
add_pp r3, r3, -r2
mad_pp r2, r6.w, r3, r2
mul_pp r1, r1, r2
mad_pp r1.xyz, -r4, r0, r1
mul_pp r2.xyz, r4, r0
add_pp r0.w, -r0, c14.y
mul_pp r0.x, r1.w, r0.w
mad_pp oC0.xyz, r0.x, r1, r2
mov_pp oC0.w, c14.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightPositionRange]
Vector 3 [_LightShadowData]
Vector 4 [_LightColor0]
Vector 5 [_Color]
Float 6 [_DetailScale]
Float 7 [_DetailVertScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_Albedo]
Vector 11 [_SunDir]
Float 12 [_PlanetOpacity]
Float 13 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_BumpMap] 2D
SetTexture 7 [_ShadowMapTexture] CUBE
SetTexture 8 [_LightTextureB0] 2D
SetTexture 9 [_LightTexture0] CUBE
"ps_3_0
; 189 ALU, 27 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_cube s7
dcl_2d s8
dcl_cube s9
def c14, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c15, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c16, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c17, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c18, 0.15915494, 0.50000000, 0.99000001, -0.50000000
def c19, 0.25000000, 0.50000000, 0.49999991, 0.99999982
def c20, 6.28318501, -3.14159298, -0.01000214, 0.00781250
def c21, 0.00781250, -0.00781250, 0.97000003, 4.03944778
def c22, 1.00000000, 0.00392157, 0.00001538, 0.00000001
def c23, -0.94999999, 32.00000000, 0.50000000, 4.00000000
def c24, 1.00999999, 0, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
mov r0.xyz, v6
dp3_sat r0.x, v2, -r0
add r0.w, r0.x, c23.x
mul r0.xy, v6.zyzw, c7.x
mul r1.xy, v6.zyzw, c6.x
abs r2.w, v6.z
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad_sat r1.w, r0, c23.y, c23.z
mad r3.xyz, r1.w, r1, r0
mul r1.xy, v6, c6.x
abs r0.zw, v6.xyxy
mul r0.xy, v6, c7.x
texld r2.xyz, r1, s2
texld r1.xyz, r0, s1
add r2.xyz, r2, -r1
mad r1.xyz, r1.w, r2, r1
add_pp r2.xyz, r3, -r1
mad_pp r3.xyz, r0.z, r2, r1
max r0.x, r0.z, r2.w
mul r1.xy, v6.zxzw, c7.x
min r0.y, r0.z, r2.w
rcp r0.x, r0.x
mul r3.w, r0.y, r0.x
mul r4.x, r3.w, r3.w
mad r0.x, r4, c16.y, c16.z
mad r4.y, r0.x, r4.x, c16.w
mul r0.xy, v6.zxzw, c6.x
texld r2.xyz, r0, s2
texld r1.xyz, r1, s1
add r2.xyz, r2, -r1
mad r1.xyz, r1.w, r2, r1
add_pp r1.xyz, r1, -r3
mad_pp r1.xyz, r0.w, r1, r3
mad r0.x, r4.y, r4, c17
mad r0.x, r0, r4, c17.y
mad r0.x, r0, r4, c17.z
mul r0.y, r0.x, r3.w
mul r4.xy, v6, c13.x
add_pp r1.xyz, r1, c18.w
texld r5, r4, s5
add r0.x, -r0.y, c17.w
add r1.w, r0.z, -r2
cmp r1.w, -r1, r0.y, r0.x
add r0.y, -r1.w, c15.w
cmp r0.y, v6.z, r1.w, r0
mul r0.x, v0, c8
abs r1.w, v6.y
cmp r3.x, v6.y, c14, c14.y
mul_sat r6.z, c12.x, c12.x
mul_sat r0.x, r0, c15.z
mul_pp r1.xyz, r1, c19.x
mad_pp r1.xyz, r0.x, -r1, r1
cmp r0.x, v6, r0.y, -r0.y
mul r6.x, r0, c18
add r0.x, -r1.w, c14.y
mad r0.y, r1.w, c14.z, c14.w
mad r0.y, r0, r1.w, c15.x
mad r0.y, r0, r1.w, c15
rsq r0.x, r0.x
rcp r0.x, r0.x
mul r2.z, r0.y, r0.x
mul r2.y, r3.x, r2.z
add r0.x, -r2.w, c14.y
mad r0.y, r2.w, c14.z, c14.w
mad r0.y, r2.w, r0, c15.x
rsq r0.x, r0.x
add r2.x, r6, c18.y
mad r2.y, -r2, c15.z, r2.z
add r1.xyz, v1, r1
cmp r1.w, v6.z, c14.x, c14.y
rcp r0.x, r0.x
mad r0.y, r2.w, r0, c15
mul r0.y, r0, r0.x
mul r0.x, r1.w, r0.y
mad r0.x, -r0, c15.z, r0.y
mad r0.y, r3.x, c15.w, r2
mul r6.y, r0, c16.x
mad r0.x, r1.w, c15.w, r0
mul r0.x, r0, c16
dsx r3.xy, v6
mul r3.xy, r3, r3
dsy r4.w, r0.x
dsx r2.w, r0.x
dsy r0.xy, v6
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r1.w, r3.x, r3.y
rsq r0.y, r1.w
rcp r0.y, r0.y
rsq r0.x, r0.x
rcp r0.x, r0.x
mul r4.z, r0.x, c18.x
mul r2.z, r0.y, c18.x
mov r2.y, r6
texldd r3.xyz, r2, s0, r2.zwzw, r4.zwzw
add_pp r8.xyz, r3, -r1
mul r0.xy, v6.zyzw, c13.x
texld r3, r0, s5
add_pp r7, r3, -r5
mad_pp r3.xyz, r6.z, r8, r1
mad_pp r1, r0.z, r7, r5
texldd r8.yw, r2, s6, r2.zwzw, r4.zwzw
add r5.zw, r8.xywy, c18.w
mul r5.xy, v6.zxzw, c13.x
texld r7, r5, s5
add_pp r7, r7, -r1
mul r5.zw, r5, c19.xyxy
add r5.zw, r6.xyxy, r5
mad r3.w, r5, c19.z, c19.y
add r6.x, v1.w, c18.z
frc r5.w, r6.x
texldd r2, r2, s3, r2.zwzw, r4.zwzw
add_sat r5.w, r6.x, -r5
frc r3.w, r3
mad r4.z, r3.w, c20.x, c20.y
mad_pp r1, r0.w, r7, r1
mul_pp r2.w, r2, r5
sincos r7.xy, r4.z
mad r3.w, r5.z, c19, c19.y
frc r3.w, r3
mul_pp r1, r2, r1
mov_pp r8.y, r7.x
mad r3.w, r3, c20.x, c20.y
sincos r7.xy, r3.w
dp4 r3.w, c1, c1
mov_pp r8.xz, r7.yyxw
rsq r3.w, r3.w
mul r7.xyz, r3.w, c1
dp3_sat r4.w, v5, r7
dp3_pp_sat r3.w, -r8, -c11
add_pp r4.z, r3.w, -r4.w
mad_pp r4.z, r6, r4, r4.w
add r6.xyz, v4, c21.yyxw
texld r8, r6, s7
add r7.xyz, v4, c21.xyyw
texld r7, r7, s7
dp4 r6.w, r7, c22
add r7.xyz, v4, c21.yxyw
texld r7, r7, s7
dp4 r6.z, r7, c22
add r7.xyz, v4, c20.w
texld r7, r7, s7
dp4 r6.x, r7, c22
add_pp r7.xyz, r1, -r3
mad_pp r3.xyz, r1.w, r7, r3
texld r7, r0, s4
add_pp r0.x, r3.w, c20.z
dp3 r4.w, v4, v4
rsq r4.w, r4.w
rcp r5.z, r4.w
mov r4.w, c3.x
mul r5.z, r5, c2.w
dp4 r6.y, r8, c22
mad r6, -r5.z, c21.z, r6
cmp r6, r6, c14.y, r4.w
dp4_pp r5.z, r6, c19.x
dp3 r6.x, v3, v3
mul_pp r4.z, r4, c4.w
texld r6.x, r6.x, s8
texld r4.w, v3, s9
mul r4.w, r6.x, r4
mul r5.z, r4.w, r5
mul_pp r4.w, r5.z, r4.z
mul_pp r1.w, r0.x, c4
mov r6.x, c9
mul_pp r1.w, r1, r5.z
mul_pp_sat r1.w, r1, c21
dp3 r4.z, v6, c11
mul_pp_sat r5.w, r4, c23
add r4.w, r4.z, c24.x
frc r4.z, r4.w
add r6.xyz, c4, r6.x
add_sat r4.z, r4.w, -r4
mad_sat r6.xyz, r6, r5.w, c0
mul_pp r6.xyz, r6, r4.z
texld r4, r4, s4
mul r1.xyz, r6, c10.x
mad_pp r1.xyz, r3, c5, r1
add_pp r7, r7, -r4
mad_pp r3, r0.z, r7, r4
texld r4, r5, s4
add_pp r4, r4, -r3
mad_pp r0, r0.w, r4, r3
mul_pp r0, r2, r0
mad_pp r0.xyz, -r1, r6, r0
add_pp r1.w, -r1, c14.y
mul_pp r1.xyz, r1, r6
mul_pp r0.w, r0, r1
mad_pp oC0.xyz, r0.w, r0, r1
mov_pp oC0.w, c14.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3"
}

}

#LINE 220

	
		}
		
		Pass {
            Tags {"LightMode" = "ForwardAdd"} 
            Blend One One                                      
            Program "vp" {
// Vertex combos: 5
//   opengl - ALU: 10 to 19
//   d3d9 - ALU: 12 to 21
//   d3d11 - ALU: 8 to 17, TEX: 0 to 0, FLOW: 1 to 1
//   d3d11_9x - ALU: 8 to 17, TEX: 0 to 0, FLOW: 1 to 1
SubProgram "opengl " {
Keywords { "POINT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Vector 17 [_WorldSpaceLightPos0]
Matrix 5 [_Object2World]
Matrix 9 [_World2Object]
Vector 18 [unity_Scale]
Matrix 13 [_LightMatrix0]
"!!ARBvp1.0
# 18 ALU
PARAM c[19] = { program.local[0],
		state.matrix.mvp,
		program.local[5..18] };
TEMP R0;
TEMP R1;
MOV R1, c[17];
DP4 R0.w, vertex.position, c[8];
DP4 R0.z, R1, c[11];
DP4 R0.x, R1, c[9];
DP4 R0.y, R1, c[10];
MAD result.texcoord[2].xyz, R0, c[18].w, -vertex.position;
DP4 R0.z, vertex.position, c[7];
DP4 R0.x, vertex.position, c[5];
DP4 R0.y, vertex.position, c[6];
DP4 result.texcoord[3].z, R0, c[15];
DP4 result.texcoord[3].y, R0, c[14];
DP4 result.texcoord[3].x, R0, c[13];
MOV result.texcoord[5], vertex.color;
MOV result.texcoord[1].xyz, vertex.normal;
DP4 result.position.w, vertex.position, c[4];
DP4 result.position.z, vertex.position, c[3];
DP4 result.position.y, vertex.position, c[2];
DP4 result.position.x, vertex.position, c[1];
END
# 18 instructions, 2 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "POINT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceLightPos0]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
Vector 17 [unity_Scale]
Matrix 12 [_LightMatrix0]
"vs_2_0
; 20 ALU
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
mov r0, c10
dp4 r2.z, c16, r0
mov r0, c9
dp4 r2.y, c16, r0
mov r1, c8
dp4 r2.x, c16, r1
dp4 r0.w, v0, c7
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
mad oT2.xyz, r2, c17.w, -v0
dp4 oT3.z, r0, c14
dp4 oT3.y, r0, c13
dp4 oT3.x, r0, c12
mov oT5, v1
mov oT1.xyz, v2
dp4 oPos.w, v0, c3
dp4 oPos.z, v0, c2
dp4 oPos.y, v0, c1
dp4 oPos.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "POINT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
ConstBuffer "$Globals" 112 // 80 used size, 4 vars
Matrix 16 [_LightMatrix0] 4
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerDraw" 336 // 336 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
Matrix 256 [_World2Object] 4
Vector 320 [unity_Scale] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityPerDraw" 2
// 20 instructions, 2 temp regs, 0 temp arrays:
// ALU 17 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedmjjpegplcgemohadockdciemelndpjpbabaaaaaaoiaeaaaaadaaaaaa
cmaaaaaalmaaaaaaheabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahaaaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
laaaaaaaagaaaaaaaiaaaaaajiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaakeaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaadapaaaakeaaaaaa
acaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaakeaaaaaaabaaaaaaaaaaaaaa
adaaaaaaadaaaaaaahaiaaaakeaaaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
ahaiaaaakeaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaaapaaaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcgmadaaaaeaaaabaa
nlaaaaaafjaaaaaeegiocaaaaaaaaaaaafaaaaaafjaaaaaeegiocaaaabaaaaaa
abaaaaaafjaaaaaeegiocaaaacaaaaaabfaaaaaafpaaaaadpcbabaaaaaaaaaaa
fpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaaghaaaaaepccabaaa
aaaaaaaaabaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaa
gfaaaaadhccabaaaaeaaaaaagfaaaaadpccabaaaafaaaaaagiaaaaacacaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaa
acaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaajhcaabaaa
aaaaaaaafgifcaaaabaaaaaaaaaaaaaaegiccaaaacaaaaaabbaaaaaadcaaaaal
hcaabaaaaaaaaaaaegiccaaaacaaaaaabaaaaaaaagiacaaaabaaaaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaalhcaabaaaaaaaaaaaegiccaaaacaaaaaabcaaaaaa
kgikcaaaabaaaaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaalhcaabaaaaaaaaaaa
egiccaaaacaaaaaabdaaaaaapgipcaaaabaaaaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaalhccabaaaacaaaaaaegacbaaaaaaaaaaapgipcaaaacaaaaaabeaaaaaa
egbcbaiaebaaaaaaaaaaaaaadgaaaaafhccabaaaadaaaaaaegbcbaaaacaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaanaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaoaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaapaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaa
abaaaaaafgafbaaaaaaaaaaaegiccaaaaaaaaaaaacaaaaaadcaaaaakhcaabaaa
abaaaaaaegiccaaaaaaaaaaaabaaaaaaagaabaaaaaaaaaaaegacbaaaabaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaaaaaaaaaadaaaaaakgakbaaaaaaaaaaa
egacbaaaabaaaaaadcaaaaakhccabaaaaeaaaaaaegiccaaaaaaaaaaaaeaaaaaa
pgapbaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaafpccabaaaafaaaaaaegbobaaa
abaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "POINT" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _WorldSpaceLightPos0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  highp vec2 tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD2 = (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz);
  xlv_TEXCOORD1 = normalize(_glesNormal);
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD5 = _glesColor;
}



#endif
#ifdef FRAGMENT

varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
void main ()
{
  lowp vec4 c_1;
  lowp float diff_2;
  lowp vec3 normal_3;
  highp float tmpvar_4;
  tmpvar_4 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp float tmpvar_5;
  tmpvar_5 = texture2D (_LightTexture0, vec2(tmpvar_4)).w;
  normal_3 = xlv_TEXCOORD1;
  highp float tmpvar_6;
  tmpvar_6 = clamp (dot (normal_3, normalize(xlv_TEXCOORD2)), 0.0, 1.0);
  diff_2 = tmpvar_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = (((xlv_TEXCOORD5.xyz * _LightColor0.xyz) * diff_2) * (tmpvar_5 * 2.0));
  c_1.xyz = tmpvar_7;
  highp float tmpvar_8;
  tmpvar_8 = xlv_TEXCOORD5.w;
  c_1.w = tmpvar_8;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "POINT" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _WorldSpaceLightPos0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  highp vec2 tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD2 = (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz);
  xlv_TEXCOORD1 = normalize(_glesNormal);
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD5 = _glesColor;
}



#endif
#ifdef FRAGMENT

varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
void main ()
{
  lowp vec4 c_1;
  lowp float diff_2;
  lowp vec3 normal_3;
  highp float tmpvar_4;
  tmpvar_4 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp float tmpvar_5;
  tmpvar_5 = texture2D (_LightTexture0, vec2(tmpvar_4)).w;
  normal_3 = xlv_TEXCOORD1;
  highp float tmpvar_6;
  tmpvar_6 = clamp (dot (normal_3, normalize(xlv_TEXCOORD2)), 0.0, 1.0);
  diff_2 = tmpvar_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = (((xlv_TEXCOORD5.xyz * _LightColor0.xyz) * diff_2) * (tmpvar_5 * 2.0));
  c_1.xyz = tmpvar_7;
  highp float tmpvar_8;
  tmpvar_8 = xlv_TEXCOORD5.w;
  c_1.w = tmpvar_8;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "flash " {
Keywords { "POINT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceLightPos0]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
Vector 17 [unity_Scale]
Matrix 12 [_LightMatrix0]
"agal_vs
[bc]
aaaaaaaaaaaaapacakaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov r0, c10
bdaaaaaaacaaaeacbaaaaaoeabaaaaaaaaaaaaoeacaaaaaa dp4 r2.z, c16, r0
aaaaaaaaaaaaapacajaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov r0, c9
bdaaaaaaacaaacacbaaaaaoeabaaaaaaaaaaaaoeacaaaaaa dp4 r2.y, c16, r0
aaaaaaaaabaaapacaiaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov r1, c8
bdaaaaaaacaaabacbaaaaaoeabaaaaaaabaaaaoeacaaaaaa dp4 r2.x, c16, r1
bdaaaaaaaaaaaiacaaaaaaoeaaaaaaaaahaaaaoeabaaaaaa dp4 r0.w, a0, c7
bdaaaaaaaaaaaeacaaaaaaoeaaaaaaaaagaaaaoeabaaaaaa dp4 r0.z, a0, c6
bdaaaaaaaaaaabacaaaaaaoeaaaaaaaaaeaaaaoeabaaaaaa dp4 r0.x, a0, c4
bdaaaaaaaaaaacacaaaaaaoeaaaaaaaaafaaaaoeabaaaaaa dp4 r0.y, a0, c5
adaaaaaaabaaahacacaaaakeacaaaaaabbaaaappabaaaaaa mul r1.xyz, r2.xyzz, c17.w
acaaaaaaacaaahaeabaaaakeacaaaaaaaaaaaaoeaaaaaaaa sub v2.xyz, r1.xyzz, a0
bdaaaaaaadaaaeaeaaaaaaoeacaaaaaaaoaaaaoeabaaaaaa dp4 v3.z, r0, c14
bdaaaaaaadaaacaeaaaaaaoeacaaaaaaanaaaaoeabaaaaaa dp4 v3.y, r0, c13
bdaaaaaaadaaabaeaaaaaaoeacaaaaaaamaaaaoeabaaaaaa dp4 v3.x, r0, c12
aaaaaaaaafaaapaeacaaaaoeaaaaaaaaaaaaaaaaaaaaaaaa mov v5, a2
aaaaaaaaabaaahaeabaaaaoeaaaaaaaaaaaaaaaaaaaaaaaa mov v1.xyz, a1
bdaaaaaaaaaaaiadaaaaaaoeaaaaaaaaadaaaaoeabaaaaaa dp4 o0.w, a0, c3
bdaaaaaaaaaaaeadaaaaaaoeaaaaaaaaacaaaaoeabaaaaaa dp4 o0.z, a0, c2
bdaaaaaaaaaaacadaaaaaaoeaaaaaaaaabaaaaoeabaaaaaa dp4 o0.y, a0, c1
bdaaaaaaaaaaabadaaaaaaoeaaaaaaaaaaaaaaoeabaaaaaa dp4 o0.x, a0, c0
aaaaaaaaabaaaiaeaaaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov v1.w, c0
aaaaaaaaacaaaiaeaaaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov v2.w, c0
aaaaaaaaadaaaiaeaaaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov v3.w, c0
"
}

SubProgram "d3d11_9x " {
Keywords { "POINT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
ConstBuffer "$Globals" 112 // 80 used size, 4 vars
Matrix 16 [_LightMatrix0] 4
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerDraw" 336 // 336 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
Matrix 256 [_World2Object] 4
Vector 320 [unity_Scale] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityPerDraw" 2
// 20 instructions, 2 temp regs, 0 temp arrays:
// ALU 17 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0_level_9_1
eefiecedakhailhlejdgcnafjjmlpemddlfdopddabaaaaaaaaahaaaaaeaaaaaa
daaaaaaaeeacaaaaliafaaaaeiagaaaaebgpgodjamacaaaaamacaaaaaaacpopp
leabaaaafiaaaaaaaeaaceaaaaaafeaaaaaafeaaaaaaceaaabaafeaaaaaaabaa
aeaaabaaaaaaaaaaabaaaaaaabaaafaaaaaaaaaaacaaaaaaaeaaagaaaaaaaaaa
acaaamaaajaaakaaaaaaaaaaaaaaaaaaaaacpoppbpaaaaacafaaaaiaaaaaapja
bpaaaaacafaaabiaabaaapjabpaaaaacafaaaciaacaaapjaabaaaaacaaaaapia
afaaoekaafaaaaadabaaahiaaaaaffiaapaaoekaaeaaaaaeabaaahiaaoaaoeka
aaaaaaiaabaaoeiaaeaaaaaeaaaaahiabaaaoekaaaaakkiaabaaoeiaaeaaaaae
aaaaahiabbaaoekaaaaappiaaaaaoeiaaeaaaaaeabaaahoaaaaaoeiabcaappka
aaaaoejbafaaaaadaaaaapiaaaaaffjaalaaoekaaeaaaaaeaaaaapiaakaaoeka
aaaaaajaaaaaoeiaaeaaaaaeaaaaapiaamaaoekaaaaakkjaaaaaoeiaaeaaaaae
aaaaapiaanaaoekaaaaappjaaaaaoeiaafaaaaadabaaahiaaaaaffiaacaaoeka
aeaaaaaeabaaahiaabaaoekaaaaaaaiaabaaoeiaaeaaaaaeaaaaahiaadaaoeka
aaaakkiaabaaoeiaaeaaaaaeadaaahoaaeaaoekaaaaappiaaaaaoeiaafaaaaad
aaaaapiaaaaaffjaahaaoekaaeaaaaaeaaaaapiaagaaoekaaaaaaajaaaaaoeia
aeaaaaaeaaaaapiaaiaaoekaaaaakkjaaaaaoeiaaeaaaaaeaaaaapiaajaaoeka
aaaappjaaaaaoeiaaeaaaaaeaaaaadmaaaaappiaaaaaoekaaaaaoeiaabaaaaac
aaaaammaaaaaoeiaabaaaaacacaaahoaacaaoejaabaaaaacaeaaapoaabaaoeja
ppppaaaafdeieefcgmadaaaaeaaaabaanlaaaaaafjaaaaaeegiocaaaaaaaaaaa
afaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaafjaaaaaeegiocaaaacaaaaaa
bfaaaaaafpaaaaadpcbabaaaaaaaaaaafpaaaaadpcbabaaaabaaaaaafpaaaaad
hcbabaaaacaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaa
acaaaaaagfaaaaadhccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaad
pccabaaaafaaaaaagiaaaaacacaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiocaaaacaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaacaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpccabaaaaaaaaaaaegiocaaaacaaaaaaadaaaaaapgbpbaaaaaaaaaaa
egaobaaaaaaaaaaadiaaaaajhcaabaaaaaaaaaaafgifcaaaabaaaaaaaaaaaaaa
egiccaaaacaaaaaabbaaaaaadcaaaaalhcaabaaaaaaaaaaaegiccaaaacaaaaaa
baaaaaaaagiacaaaabaaaaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaalhcaabaaa
aaaaaaaaegiccaaaacaaaaaabcaaaaaakgikcaaaabaaaaaaaaaaaaaaegacbaaa
aaaaaaaadcaaaaalhcaabaaaaaaaaaaaegiccaaaacaaaaaabdaaaaaapgipcaaa
abaaaaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaalhccabaaaacaaaaaaegacbaaa
aaaaaaaapgipcaaaacaaaaaabeaaaaaaegbcbaiaebaaaaaaaaaaaaaadgaaaaaf
hccabaaaadaaaaaaegbcbaaaacaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiocaaaacaaaaaaanaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaapaaaaaapgbpbaaaaaaaaaaa
egaobaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaafgafbaaaaaaaaaaaegiccaaa
aaaaaaaaacaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaaaaaaaaaabaaaaaa
agaabaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
aaaaaaaaadaaaaaakgakbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhccabaaa
aeaaaaaaegiccaaaaaaaaaaaaeaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaa
dgaaaaafpccabaaaafaaaaaaegbobaaaabaaaaaadoaaaaabejfdeheoiiaaaaaa
aeaaaaaaaiaaaaaagiaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaa
hbaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaa
aaaaaaaaadaaaaaaacaaaaaaahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaa
adaaaaaaahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaafeeb
eoehefeofeaaklklepfdeheolaaaaaaaagaaaaaaaiaaaaaajiaaaaaaaaaaaaaa
abaaaaaaadaaaaaaaaaaaaaaapaaaaaakeaaaaaaaaaaaaaaaaaaaaaaadaaaaaa
abaaaaaaadapaaaakeaaaaaaacaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaa
keaaaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaaahaiaaaakeaaaaaaadaaaaaa
aaaaaaaaadaaaaaaaeaaaaaaahaiaaaakeaaaaaaafaaaaaaaaaaaaaaadaaaaaa
afaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklkl
"
}

SubProgram "gles3 " {
Keywords { "POINT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 325
struct v2f {
    highp vec4 pos;
    highp vec2 uv;
    highp vec3 lightDir;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec4 color;
};
#line 317
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 335
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
#line 348
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return ((objSpaceLightPos.xyz * unity_Scale.w) - v.xyz);
}
#line 335
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 339
    o.lightDir = ObjSpaceLightDir( v.vertex);
    o.color = v.color;
    o.normal = v.normal;
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    #line 344
    return o;
}

out highp vec2 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD5;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec2(xl_retval.uv);
    xlv_TEXCOORD2 = vec3(xl_retval.lightDir);
    xlv_TEXCOORD1 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD5 = vec4(xl_retval.color);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 325
struct v2f {
    highp vec4 pos;
    highp vec2 uv;
    highp vec3 lightDir;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec4 color;
};
#line 317
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 335
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
#line 348
#line 348
lowp vec4 frag( in v2f IN ) {
    IN.lightDir = normalize(IN.lightDir);
    lowp float atten = (texture( _LightTexture0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * 1.0);
    #line 352
    lowp vec3 normal = IN.normal;
    lowp float diff = xll_saturate_f(dot( normal, IN.lightDir));
    lowp vec4 c;
    c.xyz = (((IN.color.xyz * _LightColor0.xyz) * diff) * (atten * 2.0));
    #line 356
    c.w = IN.color.w;
    return c;
}
in highp vec2 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD5;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.uv = vec2(xlv_TEXCOORD0);
    xlt_IN.lightDir = vec3(xlv_TEXCOORD2);
    xlt_IN.normal = vec3(xlv_TEXCOORD1);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD3);
    xlt_IN.color = vec4(xlv_TEXCOORD5);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "DIRECTIONAL" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Vector 9 [_WorldSpaceLightPos0]
Matrix 5 [_World2Object]
"!!ARBvp1.0
# 10 ALU
PARAM c[10] = { program.local[0],
		state.matrix.mvp,
		program.local[5..9] };
TEMP R0;
MOV R0, c[9];
DP4 result.texcoord[2].z, R0, c[7];
DP4 result.texcoord[2].y, R0, c[6];
DP4 result.texcoord[2].x, R0, c[5];
MOV result.texcoord[5], vertex.color;
MOV result.texcoord[1].xyz, vertex.normal;
DP4 result.position.w, vertex.position, c[4];
DP4 result.position.z, vertex.position, c[3];
DP4 result.position.y, vertex.position, c[2];
DP4 result.position.x, vertex.position, c[1];
END
# 10 instructions, 1 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_WorldSpaceLightPos0]
Matrix 4 [_World2Object]
"vs_2_0
; 12 ALU
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
mov r0, c6
dp4 oT2.z, c8, r0
mov r0, c5
mov r1, c4
dp4 oT2.y, c8, r0
dp4 oT2.x, c8, r1
mov oT5, v1
mov oT1.xyz, v2
dp4 oPos.w, v0, c3
dp4 oPos.z, v0, c2
dp4 oPos.y, v0, c1
dp4 oPos.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerDraw" 336 // 320 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 256 [_World2Object] 4
BindCB "UnityLighting" 0
BindCB "UnityPerDraw" 1
// 11 instructions, 1 temp regs, 0 temp arrays:
// ALU 8 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedhlffamgibkghgdhcndobnoaidcnlmladabaaaaaafiadaaaaadaaaaaa
cmaaaaaalmaaaaaafmabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahaaaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
jiaaaaaaafaaaaaaaiaaaaaaiaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaimaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaadapaaaaimaaaaaa
acaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaimaaaaaaabaaaaaaaaaaaaaa
adaaaaaaadaaaaaaahaiaaaaimaaaaaaafaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
apaaaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefc
peabaaaaeaaaabaahnaaaaaafjaaaaaeegiocaaaaaaaaaaaabaaaaaafjaaaaae
egiocaaaabaaaaaabeaaaaaafpaaaaadpcbabaaaaaaaaaaafpaaaaadpcbabaaa
abaaaaaafpaaaaadhcbabaaaacaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaa
gfaaaaadhccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaagfaaaaadpccabaaa
aeaaaaaagiaaaaacabaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaa
egiocaaaabaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaa
aaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaabaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaak
pccabaaaaaaaaaaaegiocaaaabaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaa
aaaaaaaadiaaaaajhcaabaaaaaaaaaaafgifcaaaaaaaaaaaaaaaaaaaegiccaaa
abaaaaaabbaaaaaadcaaaaalhcaabaaaaaaaaaaaegiccaaaabaaaaaabaaaaaaa
agiacaaaaaaaaaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaalhcaabaaaaaaaaaaa
egiccaaaabaaaaaabcaaaaaakgikcaaaaaaaaaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaalhccabaaaacaaaaaaegiccaaaabaaaaaabdaaaaaapgipcaaaaaaaaaaa
aaaaaaaaegacbaaaaaaaaaaadgaaaaafhccabaaaadaaaaaaegbcbaaaacaaaaaa
dgaaaaafpccabaaaaeaaaaaaegbobaaaabaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "DIRECTIONAL" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD0;
uniform highp mat4 _World2Object;
uniform highp mat4 glstate_matrix_mvp;
uniform lowp vec4 _WorldSpaceLightPos0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  highp vec2 tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD2 = (_World2Object * _WorldSpaceLightPos0).xyz;
  xlv_TEXCOORD1 = normalize(_glesNormal);
  xlv_TEXCOORD5 = _glesColor;
}



#endif
#ifdef FRAGMENT

varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
uniform lowp vec4 _LightColor0;
void main ()
{
  lowp vec4 c_1;
  lowp float diff_2;
  lowp vec3 normal_3;
  normal_3 = xlv_TEXCOORD1;
  highp float tmpvar_4;
  tmpvar_4 = clamp (dot (normal_3, normalize(xlv_TEXCOORD2)), 0.0, 1.0);
  diff_2 = tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (((xlv_TEXCOORD5.xyz * _LightColor0.xyz) * diff_2) * 2.0);
  c_1.xyz = tmpvar_5;
  highp float tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD5.w;
  c_1.w = tmpvar_6;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "DIRECTIONAL" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD0;
uniform highp mat4 _World2Object;
uniform highp mat4 glstate_matrix_mvp;
uniform lowp vec4 _WorldSpaceLightPos0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  highp vec2 tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD2 = (_World2Object * _WorldSpaceLightPos0).xyz;
  xlv_TEXCOORD1 = normalize(_glesNormal);
  xlv_TEXCOORD5 = _glesColor;
}



#endif
#ifdef FRAGMENT

varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
uniform lowp vec4 _LightColor0;
void main ()
{
  lowp vec4 c_1;
  lowp float diff_2;
  lowp vec3 normal_3;
  normal_3 = xlv_TEXCOORD1;
  highp float tmpvar_4;
  tmpvar_4 = clamp (dot (normal_3, normalize(xlv_TEXCOORD2)), 0.0, 1.0);
  diff_2 = tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (((xlv_TEXCOORD5.xyz * _LightColor0.xyz) * diff_2) * 2.0);
  c_1.xyz = tmpvar_5;
  highp float tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD5.w;
  c_1.w = tmpvar_6;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "flash " {
Keywords { "DIRECTIONAL" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_WorldSpaceLightPos0]
Matrix 4 [_World2Object]
"agal_vs
[bc]
aaaaaaaaaaaaapacagaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov r0, c6
bdaaaaaaacaaaeaeaiaaaaoeabaaaaaaaaaaaaoeacaaaaaa dp4 v2.z, c8, r0
aaaaaaaaaaaaapacafaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov r0, c5
aaaaaaaaabaaapacaeaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov r1, c4
bdaaaaaaacaaacaeaiaaaaoeabaaaaaaaaaaaaoeacaaaaaa dp4 v2.y, c8, r0
bdaaaaaaacaaabaeaiaaaaoeabaaaaaaabaaaaoeacaaaaaa dp4 v2.x, c8, r1
aaaaaaaaafaaapaeacaaaaoeaaaaaaaaaaaaaaaaaaaaaaaa mov v5, a2
aaaaaaaaabaaahaeabaaaaoeaaaaaaaaaaaaaaaaaaaaaaaa mov v1.xyz, a1
bdaaaaaaaaaaaiadaaaaaaoeaaaaaaaaadaaaaoeabaaaaaa dp4 o0.w, a0, c3
bdaaaaaaaaaaaeadaaaaaaoeaaaaaaaaacaaaaoeabaaaaaa dp4 o0.z, a0, c2
bdaaaaaaaaaaacadaaaaaaoeaaaaaaaaabaaaaoeabaaaaaa dp4 o0.y, a0, c1
bdaaaaaaaaaaabadaaaaaaoeaaaaaaaaaaaaaaoeabaaaaaa dp4 o0.x, a0, c0
aaaaaaaaabaaaiaeaaaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov v1.w, c0
aaaaaaaaacaaaiaeaaaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov v2.w, c0
"
}

SubProgram "d3d11_9x " {
Keywords { "DIRECTIONAL" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerDraw" 336 // 320 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 256 [_World2Object] 4
BindCB "UnityLighting" 0
BindCB "UnityPerDraw" 1
// 11 instructions, 1 temp regs, 0 temp arrays:
// ALU 8 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0_level_9_1
eefiecedjnmaggkionlfmiffnkeilonkceebjlmlabaaaaaaliaeaaaaaeaaaaaa
daaaaaaaimabaaaaiiadaaaabiaeaaaaebgpgodjfeabaaaafeabaaaaaaacpopp
aiabaaaaemaaaaaaadaaceaaaaaaeiaaaaaaeiaaaaaaceaaabaaeiaaaaaaaaaa
abaaabaaaaaaaaaaabaaaaaaaeaaacaaaaaaaaaaabaabaaaaeaaagaaaaaaaaaa
aaaaaaaaaaacpoppbpaaaaacafaaaaiaaaaaapjabpaaaaacafaaabiaabaaapja
bpaaaaacafaaaciaacaaapjaabaaaaacaaaaapiaabaaoekaafaaaaadabaaahia
aaaaffiaahaaoekaaeaaaaaeabaaahiaagaaoekaaaaaaaiaabaaoeiaaeaaaaae
aaaaahiaaiaaoekaaaaakkiaabaaoeiaaeaaaaaeabaaahoaajaaoekaaaaappia
aaaaoeiaafaaaaadaaaaapiaaaaaffjaadaaoekaaeaaaaaeaaaaapiaacaaoeka
aaaaaajaaaaaoeiaaeaaaaaeaaaaapiaaeaaoekaaaaakkjaaaaaoeiaaeaaaaae
aaaaapiaafaaoekaaaaappjaaaaaoeiaaeaaaaaeaaaaadmaaaaappiaaaaaoeka
aaaaoeiaabaaaaacaaaaammaaaaaoeiaabaaaaacacaaahoaacaaoejaabaaaaac
adaaapoaabaaoejappppaaaafdeieefcpeabaaaaeaaaabaahnaaaaaafjaaaaae
egiocaaaaaaaaaaaabaaaaaafjaaaaaeegiocaaaabaaaaaabeaaaaaafpaaaaad
pcbabaaaaaaaaaaafpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaa
ghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaad
hccabaaaadaaaaaagfaaaaadpccabaaaaeaaaaaagiaaaaacabaaaaaadiaaaaai
pcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaabaaaaaaabaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaacaaaaaakgbkbaaa
aaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaaabaaaaaa
adaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaajhcaabaaaaaaaaaaa
fgifcaaaaaaaaaaaaaaaaaaaegiccaaaabaaaaaabbaaaaaadcaaaaalhcaabaaa
aaaaaaaaegiccaaaabaaaaaabaaaaaaaagiacaaaaaaaaaaaaaaaaaaaegacbaaa
aaaaaaaadcaaaaalhcaabaaaaaaaaaaaegiccaaaabaaaaaabcaaaaaakgikcaaa
aaaaaaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaalhccabaaaacaaaaaaegiccaaa
abaaaaaabdaaaaaapgipcaaaaaaaaaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaaf
hccabaaaadaaaaaaegbcbaaaacaaaaaadgaaaaafpccabaaaaeaaaaaaegbobaaa
abaaaaaadoaaaaabejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaaaaaaaaaa
aaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaaadaaaaaa
abaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaaahahaaaa
hoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahaaaaaafaepfdejfeejepeo
aaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheojiaaaaaa
afaaaaaaaiaaaaaaiaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaa
imaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaadapaaaaimaaaaaaacaaaaaa
aaaaaaaaadaaaaaaacaaaaaaahaiaaaaimaaaaaaabaaaaaaaaaaaaaaadaaaaaa
adaaaaaaahaiaaaaimaaaaaaafaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapaaaaaa
fdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklkl"
}

SubProgram "gles3 " {
Keywords { "DIRECTIONAL" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 323
struct v2f {
    highp vec4 pos;
    highp vec2 uv;
    highp vec3 lightDir;
    highp vec3 normal;
    highp vec4 color;
};
#line 315
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 332
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
#line 344
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return objSpaceLightPos.xyz;
}
#line 332
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 336
    o.lightDir = ObjSpaceLightDir( v.vertex);
    o.color = v.color;
    o.normal = v.normal;
    #line 340
    return o;
}

out highp vec2 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD5;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec2(xl_retval.uv);
    xlv_TEXCOORD2 = vec3(xl_retval.lightDir);
    xlv_TEXCOORD1 = vec3(xl_retval.normal);
    xlv_TEXCOORD5 = vec4(xl_retval.color);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 323
struct v2f {
    highp vec4 pos;
    highp vec2 uv;
    highp vec3 lightDir;
    highp vec3 normal;
    highp vec4 color;
};
#line 315
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 332
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
#line 344
#line 344
lowp vec4 frag( in v2f IN ) {
    IN.lightDir = normalize(IN.lightDir);
    lowp float atten = 1.0;
    #line 348
    lowp vec3 normal = IN.normal;
    lowp float diff = xll_saturate_f(dot( normal, IN.lightDir));
    lowp vec4 c;
    c.xyz = (((IN.color.xyz * _LightColor0.xyz) * diff) * (atten * 2.0));
    #line 352
    c.w = IN.color.w;
    return c;
}
in highp vec2 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD5;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.uv = vec2(xlv_TEXCOORD0);
    xlt_IN.lightDir = vec3(xlv_TEXCOORD2);
    xlt_IN.normal = vec3(xlv_TEXCOORD1);
    xlt_IN.color = vec4(xlv_TEXCOORD5);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "SPOT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Vector 17 [_WorldSpaceLightPos0]
Matrix 5 [_Object2World]
Matrix 9 [_World2Object]
Vector 18 [unity_Scale]
Matrix 13 [_LightMatrix0]
"!!ARBvp1.0
# 19 ALU
PARAM c[19] = { program.local[0],
		state.matrix.mvp,
		program.local[5..18] };
TEMP R0;
TEMP R1;
MOV R1, c[17];
DP4 R0.w, vertex.position, c[8];
DP4 R0.z, R1, c[11];
DP4 R0.x, R1, c[9];
DP4 R0.y, R1, c[10];
MAD result.texcoord[2].xyz, R0, c[18].w, -vertex.position;
DP4 R0.z, vertex.position, c[7];
DP4 R0.x, vertex.position, c[5];
DP4 R0.y, vertex.position, c[6];
DP4 result.texcoord[3].w, R0, c[16];
DP4 result.texcoord[3].z, R0, c[15];
DP4 result.texcoord[3].y, R0, c[14];
DP4 result.texcoord[3].x, R0, c[13];
MOV result.texcoord[5], vertex.color;
MOV result.texcoord[1].xyz, vertex.normal;
DP4 result.position.w, vertex.position, c[4];
DP4 result.position.z, vertex.position, c[3];
DP4 result.position.y, vertex.position, c[2];
DP4 result.position.x, vertex.position, c[1];
END
# 19 instructions, 2 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "SPOT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceLightPos0]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
Vector 17 [unity_Scale]
Matrix 12 [_LightMatrix0]
"vs_2_0
; 21 ALU
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
mov r0, c10
dp4 r2.z, c16, r0
mov r0, c9
dp4 r2.y, c16, r0
mov r1, c8
dp4 r2.x, c16, r1
dp4 r0.w, v0, c7
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
mad oT2.xyz, r2, c17.w, -v0
dp4 oT3.w, r0, c15
dp4 oT3.z, r0, c14
dp4 oT3.y, r0, c13
dp4 oT3.x, r0, c12
mov oT5, v1
mov oT1.xyz, v2
dp4 oPos.w, v0, c3
dp4 oPos.z, v0, c2
dp4 oPos.y, v0, c1
dp4 oPos.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "SPOT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
ConstBuffer "$Globals" 112 // 80 used size, 4 vars
Matrix 16 [_LightMatrix0] 4
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerDraw" 336 // 336 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
Matrix 256 [_World2Object] 4
Vector 320 [unity_Scale] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityPerDraw" 2
// 20 instructions, 2 temp regs, 0 temp arrays:
// ALU 17 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefieceddiemkimndippbbnjeipihbehkfmhcbkpabaaaaaaoiaeaaaaadaaaaaa
cmaaaaaalmaaaaaaheabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahaaaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
laaaaaaaagaaaaaaaiaaaaaajiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaakeaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaadapaaaakeaaaaaa
acaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaakeaaaaaaabaaaaaaaaaaaaaa
adaaaaaaadaaaaaaahaiaaaakeaaaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
apaaaaaakeaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaaapaaaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcgmadaaaaeaaaabaa
nlaaaaaafjaaaaaeegiocaaaaaaaaaaaafaaaaaafjaaaaaeegiocaaaabaaaaaa
abaaaaaafjaaaaaeegiocaaaacaaaaaabfaaaaaafpaaaaadpcbabaaaaaaaaaaa
fpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaaghaaaaaepccabaaa
aaaaaaaaabaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaa
gfaaaaadpccabaaaaeaaaaaagfaaaaadpccabaaaafaaaaaagiaaaaacacaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaa
acaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaajhcaabaaa
aaaaaaaafgifcaaaabaaaaaaaaaaaaaaegiccaaaacaaaaaabbaaaaaadcaaaaal
hcaabaaaaaaaaaaaegiccaaaacaaaaaabaaaaaaaagiacaaaabaaaaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaalhcaabaaaaaaaaaaaegiccaaaacaaaaaabcaaaaaa
kgikcaaaabaaaaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaalhcaabaaaaaaaaaaa
egiccaaaacaaaaaabdaaaaaapgipcaaaabaaaaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaalhccabaaaacaaaaaaegacbaaaaaaaaaaapgipcaaaacaaaaaabeaaaaaa
egbcbaiaebaaaaaaaaaaaaaadgaaaaafhccabaaaadaaaaaaegbcbaaaacaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaanaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaoaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaapaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaipcaabaaa
abaaaaaafgafbaaaaaaaaaaaegiocaaaaaaaaaaaacaaaaaadcaaaaakpcaabaaa
abaaaaaaegiocaaaaaaaaaaaabaaaaaaagaabaaaaaaaaaaaegaobaaaabaaaaaa
dcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaaadaaaaaakgakbaaaaaaaaaaa
egaobaaaabaaaaaadcaaaaakpccabaaaaeaaaaaaegiocaaaaaaaaaaaaeaaaaaa
pgapbaaaaaaaaaaaegaobaaaabaaaaaadgaaaaafpccabaaaafaaaaaaegbobaaa
abaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SPOT" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _WorldSpaceLightPos0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  highp vec2 tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD2 = (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz);
  xlv_TEXCOORD1 = normalize(_glesNormal);
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = _glesColor;
}



#endif
#ifdef FRAGMENT

varying highp vec4 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
void main ()
{
  lowp vec4 c_1;
  lowp float diff_2;
  lowp vec3 normal_3;
  lowp float atten_4;
  lowp vec4 tmpvar_5;
  highp vec2 P_6;
  P_6 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_5 = texture2D (_LightTexture0, P_6);
  highp float tmpvar_7;
  tmpvar_7 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_LightTextureB0, vec2(tmpvar_7));
  highp float tmpvar_9;
  tmpvar_9 = ((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_5.w) * tmpvar_8.w);
  atten_4 = tmpvar_9;
  normal_3 = xlv_TEXCOORD1;
  highp float tmpvar_10;
  tmpvar_10 = clamp (dot (normal_3, normalize(xlv_TEXCOORD2)), 0.0, 1.0);
  diff_2 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = (((xlv_TEXCOORD5.xyz * _LightColor0.xyz) * diff_2) * (atten_4 * 2.0));
  c_1.xyz = tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = xlv_TEXCOORD5.w;
  c_1.w = tmpvar_12;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "SPOT" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _WorldSpaceLightPos0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  highp vec2 tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD2 = (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz);
  xlv_TEXCOORD1 = normalize(_glesNormal);
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = _glesColor;
}



#endif
#ifdef FRAGMENT

varying highp vec4 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
void main ()
{
  lowp vec4 c_1;
  lowp float diff_2;
  lowp vec3 normal_3;
  lowp float atten_4;
  lowp vec4 tmpvar_5;
  highp vec2 P_6;
  P_6 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_5 = texture2D (_LightTexture0, P_6);
  highp float tmpvar_7;
  tmpvar_7 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_LightTextureB0, vec2(tmpvar_7));
  highp float tmpvar_9;
  tmpvar_9 = ((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_5.w) * tmpvar_8.w);
  atten_4 = tmpvar_9;
  normal_3 = xlv_TEXCOORD1;
  highp float tmpvar_10;
  tmpvar_10 = clamp (dot (normal_3, normalize(xlv_TEXCOORD2)), 0.0, 1.0);
  diff_2 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = (((xlv_TEXCOORD5.xyz * _LightColor0.xyz) * diff_2) * (atten_4 * 2.0));
  c_1.xyz = tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = xlv_TEXCOORD5.w;
  c_1.w = tmpvar_12;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "flash " {
Keywords { "SPOT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceLightPos0]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
Vector 17 [unity_Scale]
Matrix 12 [_LightMatrix0]
"agal_vs
[bc]
aaaaaaaaaaaaapacakaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov r0, c10
bdaaaaaaacaaaeacbaaaaaoeabaaaaaaaaaaaaoeacaaaaaa dp4 r2.z, c16, r0
aaaaaaaaaaaaapacajaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov r0, c9
bdaaaaaaacaaacacbaaaaaoeabaaaaaaaaaaaaoeacaaaaaa dp4 r2.y, c16, r0
aaaaaaaaabaaapacaiaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov r1, c8
bdaaaaaaacaaabacbaaaaaoeabaaaaaaabaaaaoeacaaaaaa dp4 r2.x, c16, r1
bdaaaaaaaaaaaiacaaaaaaoeaaaaaaaaahaaaaoeabaaaaaa dp4 r0.w, a0, c7
bdaaaaaaaaaaaeacaaaaaaoeaaaaaaaaagaaaaoeabaaaaaa dp4 r0.z, a0, c6
bdaaaaaaaaaaabacaaaaaaoeaaaaaaaaaeaaaaoeabaaaaaa dp4 r0.x, a0, c4
bdaaaaaaaaaaacacaaaaaaoeaaaaaaaaafaaaaoeabaaaaaa dp4 r0.y, a0, c5
adaaaaaaabaaahacacaaaakeacaaaaaabbaaaappabaaaaaa mul r1.xyz, r2.xyzz, c17.w
acaaaaaaacaaahaeabaaaakeacaaaaaaaaaaaaoeaaaaaaaa sub v2.xyz, r1.xyzz, a0
bdaaaaaaadaaaiaeaaaaaaoeacaaaaaaapaaaaoeabaaaaaa dp4 v3.w, r0, c15
bdaaaaaaadaaaeaeaaaaaaoeacaaaaaaaoaaaaoeabaaaaaa dp4 v3.z, r0, c14
bdaaaaaaadaaacaeaaaaaaoeacaaaaaaanaaaaoeabaaaaaa dp4 v3.y, r0, c13
bdaaaaaaadaaabaeaaaaaaoeacaaaaaaamaaaaoeabaaaaaa dp4 v3.x, r0, c12
aaaaaaaaafaaapaeacaaaaoeaaaaaaaaaaaaaaaaaaaaaaaa mov v5, a2
aaaaaaaaabaaahaeabaaaaoeaaaaaaaaaaaaaaaaaaaaaaaa mov v1.xyz, a1
bdaaaaaaaaaaaiadaaaaaaoeaaaaaaaaadaaaaoeabaaaaaa dp4 o0.w, a0, c3
bdaaaaaaaaaaaeadaaaaaaoeaaaaaaaaacaaaaoeabaaaaaa dp4 o0.z, a0, c2
bdaaaaaaaaaaacadaaaaaaoeaaaaaaaaabaaaaoeabaaaaaa dp4 o0.y, a0, c1
bdaaaaaaaaaaabadaaaaaaoeaaaaaaaaaaaaaaoeabaaaaaa dp4 o0.x, a0, c0
aaaaaaaaabaaaiaeaaaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov v1.w, c0
aaaaaaaaacaaaiaeaaaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov v2.w, c0
"
}

SubProgram "d3d11_9x " {
Keywords { "SPOT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
ConstBuffer "$Globals" 112 // 80 used size, 4 vars
Matrix 16 [_LightMatrix0] 4
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerDraw" 336 // 336 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
Matrix 256 [_World2Object] 4
Vector 320 [unity_Scale] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityPerDraw" 2
// 20 instructions, 2 temp regs, 0 temp arrays:
// ALU 17 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0_level_9_1
eefiecedeikidmidnabnlgbjbikkomfoibegjdckabaaaaaaaaahaaaaaeaaaaaa
daaaaaaaeeacaaaaliafaaaaeiagaaaaebgpgodjamacaaaaamacaaaaaaacpopp
leabaaaafiaaaaaaaeaaceaaaaaafeaaaaaafeaaaaaaceaaabaafeaaaaaaabaa
aeaaabaaaaaaaaaaabaaaaaaabaaafaaaaaaaaaaacaaaaaaaeaaagaaaaaaaaaa
acaaamaaajaaakaaaaaaaaaaaaaaaaaaaaacpoppbpaaaaacafaaaaiaaaaaapja
bpaaaaacafaaabiaabaaapjabpaaaaacafaaaciaacaaapjaabaaaaacaaaaapia
afaaoekaafaaaaadabaaahiaaaaaffiaapaaoekaaeaaaaaeabaaahiaaoaaoeka
aaaaaaiaabaaoeiaaeaaaaaeaaaaahiabaaaoekaaaaakkiaabaaoeiaaeaaaaae
aaaaahiabbaaoekaaaaappiaaaaaoeiaaeaaaaaeabaaahoaaaaaoeiabcaappka
aaaaoejbafaaaaadaaaaapiaaaaaffjaalaaoekaaeaaaaaeaaaaapiaakaaoeka
aaaaaajaaaaaoeiaaeaaaaaeaaaaapiaamaaoekaaaaakkjaaaaaoeiaaeaaaaae
aaaaapiaanaaoekaaaaappjaaaaaoeiaafaaaaadabaaapiaaaaaffiaacaaoeka
aeaaaaaeabaaapiaabaaoekaaaaaaaiaabaaoeiaaeaaaaaeabaaapiaadaaoeka
aaaakkiaabaaoeiaaeaaaaaeadaaapoaaeaaoekaaaaappiaabaaoeiaafaaaaad
aaaaapiaaaaaffjaahaaoekaaeaaaaaeaaaaapiaagaaoekaaaaaaajaaaaaoeia
aeaaaaaeaaaaapiaaiaaoekaaaaakkjaaaaaoeiaaeaaaaaeaaaaapiaajaaoeka
aaaappjaaaaaoeiaaeaaaaaeaaaaadmaaaaappiaaaaaoekaaaaaoeiaabaaaaac
aaaaammaaaaaoeiaabaaaaacacaaahoaacaaoejaabaaaaacaeaaapoaabaaoeja
ppppaaaafdeieefcgmadaaaaeaaaabaanlaaaaaafjaaaaaeegiocaaaaaaaaaaa
afaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaafjaaaaaeegiocaaaacaaaaaa
bfaaaaaafpaaaaadpcbabaaaaaaaaaaafpaaaaadpcbabaaaabaaaaaafpaaaaad
hcbabaaaacaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaa
acaaaaaagfaaaaadhccabaaaadaaaaaagfaaaaadpccabaaaaeaaaaaagfaaaaad
pccabaaaafaaaaaagiaaaaacacaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiocaaaacaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaacaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpccabaaaaaaaaaaaegiocaaaacaaaaaaadaaaaaapgbpbaaaaaaaaaaa
egaobaaaaaaaaaaadiaaaaajhcaabaaaaaaaaaaafgifcaaaabaaaaaaaaaaaaaa
egiccaaaacaaaaaabbaaaaaadcaaaaalhcaabaaaaaaaaaaaegiccaaaacaaaaaa
baaaaaaaagiacaaaabaaaaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaalhcaabaaa
aaaaaaaaegiccaaaacaaaaaabcaaaaaakgikcaaaabaaaaaaaaaaaaaaegacbaaa
aaaaaaaadcaaaaalhcaabaaaaaaaaaaaegiccaaaacaaaaaabdaaaaaapgipcaaa
abaaaaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaalhccabaaaacaaaaaaegacbaaa
aaaaaaaapgipcaaaacaaaaaabeaaaaaaegbcbaiaebaaaaaaaaaaaaaadgaaaaaf
hccabaaaadaaaaaaegbcbaaaacaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiocaaaacaaaaaaanaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaapaaaaaapgbpbaaaaaaaaaaa
egaobaaaaaaaaaaadiaaaaaipcaabaaaabaaaaaafgafbaaaaaaaaaaaegiocaaa
aaaaaaaaacaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaaabaaaaaa
agaabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaa
aaaaaaaaadaaaaaakgakbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpccabaaa
aeaaaaaaegiocaaaaaaaaaaaaeaaaaaapgapbaaaaaaaaaaaegaobaaaabaaaaaa
dgaaaaafpccabaaaafaaaaaaegbobaaaabaaaaaadoaaaaabejfdeheoiiaaaaaa
aeaaaaaaaiaaaaaagiaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaa
hbaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaa
aaaaaaaaadaaaaaaacaaaaaaahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaa
adaaaaaaahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaafeeb
eoehefeofeaaklklepfdeheolaaaaaaaagaaaaaaaiaaaaaajiaaaaaaaaaaaaaa
abaaaaaaadaaaaaaaaaaaaaaapaaaaaakeaaaaaaaaaaaaaaaaaaaaaaadaaaaaa
abaaaaaaadapaaaakeaaaaaaacaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaa
keaaaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaaahaiaaaakeaaaaaaadaaaaaa
aaaaaaaaadaaaaaaaeaaaaaaapaaaaaakeaaaaaaafaaaaaaaaaaaaaaadaaaaaa
afaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklkl
"
}

SubProgram "gles3 " {
Keywords { "SPOT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 334
struct v2f {
    highp vec4 pos;
    highp vec2 uv;
    highp vec3 lightDir;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec4 color;
};
#line 326
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 344
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
#line 357
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return ((objSpaceLightPos.xyz * unity_Scale.w) - v.xyz);
}
#line 344
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 348
    o.lightDir = ObjSpaceLightDir( v.vertex);
    o.color = v.color;
    o.normal = v.normal;
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    #line 353
    return o;
}

out highp vec2 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD5;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec2(xl_retval.uv);
    xlv_TEXCOORD2 = vec3(xl_retval.lightDir);
    xlv_TEXCOORD1 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD5 = vec4(xl_retval.color);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 334
struct v2f {
    highp vec4 pos;
    highp vec2 uv;
    highp vec3 lightDir;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec4 color;
};
#line 326
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 344
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
#line 357
#line 322
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    #line 324
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 318
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    #line 320
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 357
lowp vec4 frag( in v2f IN ) {
    IN.lightDir = normalize(IN.lightDir);
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * 1.0);
    #line 361
    lowp vec3 normal = IN.normal;
    lowp float diff = xll_saturate_f(dot( normal, IN.lightDir));
    lowp vec4 c;
    c.xyz = (((IN.color.xyz * _LightColor0.xyz) * diff) * (atten * 2.0));
    #line 365
    c.w = IN.color.w;
    return c;
}
in highp vec2 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD5;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.uv = vec2(xlv_TEXCOORD0);
    xlt_IN.lightDir = vec3(xlv_TEXCOORD2);
    xlt_IN.normal = vec3(xlv_TEXCOORD1);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD3);
    xlt_IN.color = vec4(xlv_TEXCOORD5);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "POINT_COOKIE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Vector 17 [_WorldSpaceLightPos0]
Matrix 5 [_Object2World]
Matrix 9 [_World2Object]
Vector 18 [unity_Scale]
Matrix 13 [_LightMatrix0]
"!!ARBvp1.0
# 18 ALU
PARAM c[19] = { program.local[0],
		state.matrix.mvp,
		program.local[5..18] };
TEMP R0;
TEMP R1;
MOV R1, c[17];
DP4 R0.w, vertex.position, c[8];
DP4 R0.z, R1, c[11];
DP4 R0.x, R1, c[9];
DP4 R0.y, R1, c[10];
MAD result.texcoord[2].xyz, R0, c[18].w, -vertex.position;
DP4 R0.z, vertex.position, c[7];
DP4 R0.x, vertex.position, c[5];
DP4 R0.y, vertex.position, c[6];
DP4 result.texcoord[3].z, R0, c[15];
DP4 result.texcoord[3].y, R0, c[14];
DP4 result.texcoord[3].x, R0, c[13];
MOV result.texcoord[5], vertex.color;
MOV result.texcoord[1].xyz, vertex.normal;
DP4 result.position.w, vertex.position, c[4];
DP4 result.position.z, vertex.position, c[3];
DP4 result.position.y, vertex.position, c[2];
DP4 result.position.x, vertex.position, c[1];
END
# 18 instructions, 2 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "POINT_COOKIE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceLightPos0]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
Vector 17 [unity_Scale]
Matrix 12 [_LightMatrix0]
"vs_2_0
; 20 ALU
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
mov r0, c10
dp4 r2.z, c16, r0
mov r0, c9
dp4 r2.y, c16, r0
mov r1, c8
dp4 r2.x, c16, r1
dp4 r0.w, v0, c7
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
mad oT2.xyz, r2, c17.w, -v0
dp4 oT3.z, r0, c14
dp4 oT3.y, r0, c13
dp4 oT3.x, r0, c12
mov oT5, v1
mov oT1.xyz, v2
dp4 oPos.w, v0, c3
dp4 oPos.z, v0, c2
dp4 oPos.y, v0, c1
dp4 oPos.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
ConstBuffer "$Globals" 112 // 80 used size, 4 vars
Matrix 16 [_LightMatrix0] 4
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerDraw" 336 // 336 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
Matrix 256 [_World2Object] 4
Vector 320 [unity_Scale] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityPerDraw" 2
// 20 instructions, 2 temp regs, 0 temp arrays:
// ALU 17 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedmjjpegplcgemohadockdciemelndpjpbabaaaaaaoiaeaaaaadaaaaaa
cmaaaaaalmaaaaaaheabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahaaaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
laaaaaaaagaaaaaaaiaaaaaajiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaakeaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaadapaaaakeaaaaaa
acaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaakeaaaaaaabaaaaaaaaaaaaaa
adaaaaaaadaaaaaaahaiaaaakeaaaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
ahaiaaaakeaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaaapaaaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcgmadaaaaeaaaabaa
nlaaaaaafjaaaaaeegiocaaaaaaaaaaaafaaaaaafjaaaaaeegiocaaaabaaaaaa
abaaaaaafjaaaaaeegiocaaaacaaaaaabfaaaaaafpaaaaadpcbabaaaaaaaaaaa
fpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaaghaaaaaepccabaaa
aaaaaaaaabaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaa
gfaaaaadhccabaaaaeaaaaaagfaaaaadpccabaaaafaaaaaagiaaaaacacaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaa
acaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaajhcaabaaa
aaaaaaaafgifcaaaabaaaaaaaaaaaaaaegiccaaaacaaaaaabbaaaaaadcaaaaal
hcaabaaaaaaaaaaaegiccaaaacaaaaaabaaaaaaaagiacaaaabaaaaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaalhcaabaaaaaaaaaaaegiccaaaacaaaaaabcaaaaaa
kgikcaaaabaaaaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaalhcaabaaaaaaaaaaa
egiccaaaacaaaaaabdaaaaaapgipcaaaabaaaaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaalhccabaaaacaaaaaaegacbaaaaaaaaaaapgipcaaaacaaaaaabeaaaaaa
egbcbaiaebaaaaaaaaaaaaaadgaaaaafhccabaaaadaaaaaaegbcbaaaacaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaanaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaoaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaapaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaa
abaaaaaafgafbaaaaaaaaaaaegiccaaaaaaaaaaaacaaaaaadcaaaaakhcaabaaa
abaaaaaaegiccaaaaaaaaaaaabaaaaaaagaabaaaaaaaaaaaegacbaaaabaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaaaaaaaaaadaaaaaakgakbaaaaaaaaaaa
egacbaaaabaaaaaadcaaaaakhccabaaaaeaaaaaaegiccaaaaaaaaaaaaeaaaaaa
pgapbaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaafpccabaaaafaaaaaaegbobaaa
abaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "POINT_COOKIE" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _WorldSpaceLightPos0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  highp vec2 tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD2 = (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz);
  xlv_TEXCOORD1 = normalize(_glesNormal);
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD5 = _glesColor;
}



#endif
#ifdef FRAGMENT

varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
void main ()
{
  lowp vec4 c_1;
  lowp float diff_2;
  lowp vec3 normal_3;
  highp float tmpvar_4;
  tmpvar_4 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp float tmpvar_5;
  tmpvar_5 = (texture2D (_LightTextureB0, vec2(tmpvar_4)).w * textureCube (_LightTexture0, xlv_TEXCOORD3).w);
  normal_3 = xlv_TEXCOORD1;
  highp float tmpvar_6;
  tmpvar_6 = clamp (dot (normal_3, normalize(xlv_TEXCOORD2)), 0.0, 1.0);
  diff_2 = tmpvar_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = (((xlv_TEXCOORD5.xyz * _LightColor0.xyz) * diff_2) * (tmpvar_5 * 2.0));
  c_1.xyz = tmpvar_7;
  highp float tmpvar_8;
  tmpvar_8 = xlv_TEXCOORD5.w;
  c_1.w = tmpvar_8;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "POINT_COOKIE" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _WorldSpaceLightPos0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  highp vec2 tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD2 = (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz);
  xlv_TEXCOORD1 = normalize(_glesNormal);
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD5 = _glesColor;
}



#endif
#ifdef FRAGMENT

varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
void main ()
{
  lowp vec4 c_1;
  lowp float diff_2;
  lowp vec3 normal_3;
  highp float tmpvar_4;
  tmpvar_4 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp float tmpvar_5;
  tmpvar_5 = (texture2D (_LightTextureB0, vec2(tmpvar_4)).w * textureCube (_LightTexture0, xlv_TEXCOORD3).w);
  normal_3 = xlv_TEXCOORD1;
  highp float tmpvar_6;
  tmpvar_6 = clamp (dot (normal_3, normalize(xlv_TEXCOORD2)), 0.0, 1.0);
  diff_2 = tmpvar_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = (((xlv_TEXCOORD5.xyz * _LightColor0.xyz) * diff_2) * (tmpvar_5 * 2.0));
  c_1.xyz = tmpvar_7;
  highp float tmpvar_8;
  tmpvar_8 = xlv_TEXCOORD5.w;
  c_1.w = tmpvar_8;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "flash " {
Keywords { "POINT_COOKIE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceLightPos0]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
Vector 17 [unity_Scale]
Matrix 12 [_LightMatrix0]
"agal_vs
[bc]
aaaaaaaaaaaaapacakaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov r0, c10
bdaaaaaaacaaaeacbaaaaaoeabaaaaaaaaaaaaoeacaaaaaa dp4 r2.z, c16, r0
aaaaaaaaaaaaapacajaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov r0, c9
bdaaaaaaacaaacacbaaaaaoeabaaaaaaaaaaaaoeacaaaaaa dp4 r2.y, c16, r0
aaaaaaaaabaaapacaiaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov r1, c8
bdaaaaaaacaaabacbaaaaaoeabaaaaaaabaaaaoeacaaaaaa dp4 r2.x, c16, r1
bdaaaaaaaaaaaiacaaaaaaoeaaaaaaaaahaaaaoeabaaaaaa dp4 r0.w, a0, c7
bdaaaaaaaaaaaeacaaaaaaoeaaaaaaaaagaaaaoeabaaaaaa dp4 r0.z, a0, c6
bdaaaaaaaaaaabacaaaaaaoeaaaaaaaaaeaaaaoeabaaaaaa dp4 r0.x, a0, c4
bdaaaaaaaaaaacacaaaaaaoeaaaaaaaaafaaaaoeabaaaaaa dp4 r0.y, a0, c5
adaaaaaaabaaahacacaaaakeacaaaaaabbaaaappabaaaaaa mul r1.xyz, r2.xyzz, c17.w
acaaaaaaacaaahaeabaaaakeacaaaaaaaaaaaaoeaaaaaaaa sub v2.xyz, r1.xyzz, a0
bdaaaaaaadaaaeaeaaaaaaoeacaaaaaaaoaaaaoeabaaaaaa dp4 v3.z, r0, c14
bdaaaaaaadaaacaeaaaaaaoeacaaaaaaanaaaaoeabaaaaaa dp4 v3.y, r0, c13
bdaaaaaaadaaabaeaaaaaaoeacaaaaaaamaaaaoeabaaaaaa dp4 v3.x, r0, c12
aaaaaaaaafaaapaeacaaaaoeaaaaaaaaaaaaaaaaaaaaaaaa mov v5, a2
aaaaaaaaabaaahaeabaaaaoeaaaaaaaaaaaaaaaaaaaaaaaa mov v1.xyz, a1
bdaaaaaaaaaaaiadaaaaaaoeaaaaaaaaadaaaaoeabaaaaaa dp4 o0.w, a0, c3
bdaaaaaaaaaaaeadaaaaaaoeaaaaaaaaacaaaaoeabaaaaaa dp4 o0.z, a0, c2
bdaaaaaaaaaaacadaaaaaaoeaaaaaaaaabaaaaoeabaaaaaa dp4 o0.y, a0, c1
bdaaaaaaaaaaabadaaaaaaoeaaaaaaaaaaaaaaoeabaaaaaa dp4 o0.x, a0, c0
aaaaaaaaabaaaiaeaaaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov v1.w, c0
aaaaaaaaacaaaiaeaaaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov v2.w, c0
aaaaaaaaadaaaiaeaaaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov v3.w, c0
"
}

SubProgram "d3d11_9x " {
Keywords { "POINT_COOKIE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
ConstBuffer "$Globals" 112 // 80 used size, 4 vars
Matrix 16 [_LightMatrix0] 4
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerDraw" 336 // 336 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
Matrix 256 [_World2Object] 4
Vector 320 [unity_Scale] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityPerDraw" 2
// 20 instructions, 2 temp regs, 0 temp arrays:
// ALU 17 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0_level_9_1
eefiecedakhailhlejdgcnafjjmlpemddlfdopddabaaaaaaaaahaaaaaeaaaaaa
daaaaaaaeeacaaaaliafaaaaeiagaaaaebgpgodjamacaaaaamacaaaaaaacpopp
leabaaaafiaaaaaaaeaaceaaaaaafeaaaaaafeaaaaaaceaaabaafeaaaaaaabaa
aeaaabaaaaaaaaaaabaaaaaaabaaafaaaaaaaaaaacaaaaaaaeaaagaaaaaaaaaa
acaaamaaajaaakaaaaaaaaaaaaaaaaaaaaacpoppbpaaaaacafaaaaiaaaaaapja
bpaaaaacafaaabiaabaaapjabpaaaaacafaaaciaacaaapjaabaaaaacaaaaapia
afaaoekaafaaaaadabaaahiaaaaaffiaapaaoekaaeaaaaaeabaaahiaaoaaoeka
aaaaaaiaabaaoeiaaeaaaaaeaaaaahiabaaaoekaaaaakkiaabaaoeiaaeaaaaae
aaaaahiabbaaoekaaaaappiaaaaaoeiaaeaaaaaeabaaahoaaaaaoeiabcaappka
aaaaoejbafaaaaadaaaaapiaaaaaffjaalaaoekaaeaaaaaeaaaaapiaakaaoeka
aaaaaajaaaaaoeiaaeaaaaaeaaaaapiaamaaoekaaaaakkjaaaaaoeiaaeaaaaae
aaaaapiaanaaoekaaaaappjaaaaaoeiaafaaaaadabaaahiaaaaaffiaacaaoeka
aeaaaaaeabaaahiaabaaoekaaaaaaaiaabaaoeiaaeaaaaaeaaaaahiaadaaoeka
aaaakkiaabaaoeiaaeaaaaaeadaaahoaaeaaoekaaaaappiaaaaaoeiaafaaaaad
aaaaapiaaaaaffjaahaaoekaaeaaaaaeaaaaapiaagaaoekaaaaaaajaaaaaoeia
aeaaaaaeaaaaapiaaiaaoekaaaaakkjaaaaaoeiaaeaaaaaeaaaaapiaajaaoeka
aaaappjaaaaaoeiaaeaaaaaeaaaaadmaaaaappiaaaaaoekaaaaaoeiaabaaaaac
aaaaammaaaaaoeiaabaaaaacacaaahoaacaaoejaabaaaaacaeaaapoaabaaoeja
ppppaaaafdeieefcgmadaaaaeaaaabaanlaaaaaafjaaaaaeegiocaaaaaaaaaaa
afaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaafjaaaaaeegiocaaaacaaaaaa
bfaaaaaafpaaaaadpcbabaaaaaaaaaaafpaaaaadpcbabaaaabaaaaaafpaaaaad
hcbabaaaacaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaa
acaaaaaagfaaaaadhccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaad
pccabaaaafaaaaaagiaaaaacacaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiocaaaacaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaacaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpccabaaaaaaaaaaaegiocaaaacaaaaaaadaaaaaapgbpbaaaaaaaaaaa
egaobaaaaaaaaaaadiaaaaajhcaabaaaaaaaaaaafgifcaaaabaaaaaaaaaaaaaa
egiccaaaacaaaaaabbaaaaaadcaaaaalhcaabaaaaaaaaaaaegiccaaaacaaaaaa
baaaaaaaagiacaaaabaaaaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaalhcaabaaa
aaaaaaaaegiccaaaacaaaaaabcaaaaaakgikcaaaabaaaaaaaaaaaaaaegacbaaa
aaaaaaaadcaaaaalhcaabaaaaaaaaaaaegiccaaaacaaaaaabdaaaaaapgipcaaa
abaaaaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaalhccabaaaacaaaaaaegacbaaa
aaaaaaaapgipcaaaacaaaaaabeaaaaaaegbcbaiaebaaaaaaaaaaaaaadgaaaaaf
hccabaaaadaaaaaaegbcbaaaacaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiocaaaacaaaaaaanaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaapaaaaaapgbpbaaaaaaaaaaa
egaobaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaafgafbaaaaaaaaaaaegiccaaa
aaaaaaaaacaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaaaaaaaaaabaaaaaa
agaabaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
aaaaaaaaadaaaaaakgakbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhccabaaa
aeaaaaaaegiccaaaaaaaaaaaaeaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaa
dgaaaaafpccabaaaafaaaaaaegbobaaaabaaaaaadoaaaaabejfdeheoiiaaaaaa
aeaaaaaaaiaaaaaagiaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaa
hbaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaa
aaaaaaaaadaaaaaaacaaaaaaahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaa
adaaaaaaahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaafeeb
eoehefeofeaaklklepfdeheolaaaaaaaagaaaaaaaiaaaaaajiaaaaaaaaaaaaaa
abaaaaaaadaaaaaaaaaaaaaaapaaaaaakeaaaaaaaaaaaaaaaaaaaaaaadaaaaaa
abaaaaaaadapaaaakeaaaaaaacaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaa
keaaaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaaahaiaaaakeaaaaaaadaaaaaa
aaaaaaaaadaaaaaaaeaaaaaaahaiaaaakeaaaaaaafaaaaaaaaaaaaaaadaaaaaa
afaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklkl
"
}

SubProgram "gles3 " {
Keywords { "POINT_COOKIE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 326
struct v2f {
    highp vec4 pos;
    highp vec2 uv;
    highp vec3 lightDir;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec4 color;
};
#line 318
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 336
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
#line 349
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return ((objSpaceLightPos.xyz * unity_Scale.w) - v.xyz);
}
#line 336
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 340
    o.lightDir = ObjSpaceLightDir( v.vertex);
    o.color = v.color;
    o.normal = v.normal;
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    #line 345
    return o;
}

out highp vec2 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD5;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec2(xl_retval.uv);
    xlv_TEXCOORD2 = vec3(xl_retval.lightDir);
    xlv_TEXCOORD1 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD5 = vec4(xl_retval.color);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 326
struct v2f {
    highp vec4 pos;
    highp vec2 uv;
    highp vec3 lightDir;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec4 color;
};
#line 318
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 336
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
#line 349
#line 349
lowp vec4 frag( in v2f IN ) {
    IN.lightDir = normalize(IN.lightDir);
    lowp float atten = ((texture( _LightTextureB0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * texture( _LightTexture0, IN._LightCoord).w) * 1.0);
    #line 353
    lowp vec3 normal = IN.normal;
    lowp float diff = xll_saturate_f(dot( normal, IN.lightDir));
    lowp vec4 c;
    c.xyz = (((IN.color.xyz * _LightColor0.xyz) * diff) * (atten * 2.0));
    #line 357
    c.w = IN.color.w;
    return c;
}
in highp vec2 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD5;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.uv = vec2(xlv_TEXCOORD0);
    xlt_IN.lightDir = vec3(xlv_TEXCOORD2);
    xlt_IN.normal = vec3(xlv_TEXCOORD1);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD3);
    xlt_IN.color = vec4(xlv_TEXCOORD5);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "DIRECTIONAL_COOKIE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Vector 17 [_WorldSpaceLightPos0]
Matrix 5 [_Object2World]
Matrix 9 [_World2Object]
Matrix 13 [_LightMatrix0]
"!!ARBvp1.0
# 16 ALU
PARAM c[18] = { program.local[0],
		state.matrix.mvp,
		program.local[5..17] };
TEMP R0;
MOV R0, c[17];
DP4 result.texcoord[2].z, R0, c[11];
DP4 result.texcoord[2].y, R0, c[10];
DP4 result.texcoord[2].x, R0, c[9];
DP4 R0.w, vertex.position, c[8];
DP4 R0.z, vertex.position, c[7];
DP4 R0.x, vertex.position, c[5];
DP4 R0.y, vertex.position, c[6];
DP4 result.texcoord[3].y, R0, c[14];
DP4 result.texcoord[3].x, R0, c[13];
MOV result.texcoord[5], vertex.color;
MOV result.texcoord[1].xyz, vertex.normal;
DP4 result.position.w, vertex.position, c[4];
DP4 result.position.z, vertex.position, c[3];
DP4 result.position.y, vertex.position, c[2];
DP4 result.position.x, vertex.position, c[1];
END
# 16 instructions, 1 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "DIRECTIONAL_COOKIE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceLightPos0]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
Matrix 12 [_LightMatrix0]
"vs_2_0
; 18 ALU
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
mov r0, c10
dp4 oT2.z, c16, r0
mov r0, c9
dp4 oT2.y, c16, r0
mov r1, c8
dp4 r0.w, v0, c7
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
dp4 oT2.x, c16, r1
dp4 oT3.y, r0, c13
dp4 oT3.x, r0, c12
mov oT5, v1
mov oT1.xyz, v2
dp4 oPos.w, v0, c3
dp4 oPos.z, v0, c2
dp4 oPos.y, v0, c1
dp4 oPos.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
ConstBuffer "$Globals" 112 // 80 used size, 4 vars
Matrix 16 [_LightMatrix0] 4
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerDraw" 336 // 320 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
Matrix 256 [_World2Object] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityPerDraw" 2
// 19 instructions, 2 temp regs, 0 temp arrays:
// ALU 16 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefieceddmhacdconjpjameeinopjabeejblfbnhabaaaaaalmaeaaaaadaaaaaa
cmaaaaaalmaaaaaaheabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahaaaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
laaaaaaaagaaaaaaaiaaaaaajiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaakeaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaadapaaaakeaaaaaa
adaaaaaaaaaaaaaaadaaaaaaabaaaaaaamadaaaakeaaaaaaacaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaakeaaaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaakeaaaaaaafaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapaaaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefceaadaaaaeaaaabaa
naaaaaaafjaaaaaeegiocaaaaaaaaaaaafaaaaaafjaaaaaeegiocaaaabaaaaaa
abaaaaaafjaaaaaeegiocaaaacaaaaaabeaaaaaafpaaaaadpcbabaaaaaaaaaaa
fpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaaghaaaaaepccabaaa
aaaaaaaaabaaaaaagfaaaaadmccabaaaabaaaaaagfaaaaadhccabaaaacaaaaaa
gfaaaaadhccabaaaadaaaaaagfaaaaadpccabaaaaeaaaaaagiaaaaacacaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaa
acaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaajhcaabaaa
aaaaaaaafgifcaaaabaaaaaaaaaaaaaaegiccaaaacaaaaaabbaaaaaadcaaaaal
hcaabaaaaaaaaaaaegiccaaaacaaaaaabaaaaaaaagiacaaaabaaaaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaalhcaabaaaaaaaaaaaegiccaaaacaaaaaabcaaaaaa
kgikcaaaabaaaaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaalhccabaaaacaaaaaa
egiccaaaacaaaaaabdaaaaaapgipcaaaabaaaaaaaaaaaaaaegacbaaaaaaaaaaa
dgaaaaafhccabaaaadaaaaaaegbcbaaaacaaaaaadiaaaaaipcaabaaaaaaaaaaa
fgbfbaaaaaaaaaaaegiocaaaacaaaaaaanaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaapaaaaaapgbpbaaa
aaaaaaaaegaobaaaaaaaaaaadiaaaaaidcaabaaaabaaaaaafgafbaaaaaaaaaaa
egiacaaaaaaaaaaaacaaaaaadcaaaaakdcaabaaaaaaaaaaaegiacaaaaaaaaaaa
abaaaaaaagaabaaaaaaaaaaaegaabaaaabaaaaaadcaaaaakdcaabaaaaaaaaaaa
egiacaaaaaaaaaaaadaaaaaakgakbaaaaaaaaaaaegaabaaaaaaaaaaadcaaaaak
mccabaaaabaaaaaaagiecaaaaaaaaaaaaeaaaaaapgapbaaaaaaaaaaaagaebaaa
aaaaaaaadgaaaaafpccabaaaaeaaaaaaegbobaaaabaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform lowp vec4 _WorldSpaceLightPos0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  highp vec2 tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD2 = (_World2Object * _WorldSpaceLightPos0).xyz;
  xlv_TEXCOORD1 = normalize(_glesNormal);
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD5 = _glesColor;
}



#endif
#ifdef FRAGMENT

varying highp vec4 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
void main ()
{
  lowp vec4 c_1;
  lowp float diff_2;
  lowp vec3 normal_3;
  lowp float tmpvar_4;
  tmpvar_4 = texture2D (_LightTexture0, xlv_TEXCOORD3).w;
  normal_3 = xlv_TEXCOORD1;
  highp float tmpvar_5;
  tmpvar_5 = clamp (dot (normal_3, normalize(xlv_TEXCOORD2)), 0.0, 1.0);
  diff_2 = tmpvar_5;
  highp vec3 tmpvar_6;
  tmpvar_6 = (((xlv_TEXCOORD5.xyz * _LightColor0.xyz) * diff_2) * (tmpvar_4 * 2.0));
  c_1.xyz = tmpvar_6;
  highp float tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD5.w;
  c_1.w = tmpvar_7;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "DIRECTIONAL_COOKIE" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform lowp vec4 _WorldSpaceLightPos0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  highp vec2 tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD2 = (_World2Object * _WorldSpaceLightPos0).xyz;
  xlv_TEXCOORD1 = normalize(_glesNormal);
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD5 = _glesColor;
}



#endif
#ifdef FRAGMENT

varying highp vec4 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
void main ()
{
  lowp vec4 c_1;
  lowp float diff_2;
  lowp vec3 normal_3;
  lowp float tmpvar_4;
  tmpvar_4 = texture2D (_LightTexture0, xlv_TEXCOORD3).w;
  normal_3 = xlv_TEXCOORD1;
  highp float tmpvar_5;
  tmpvar_5 = clamp (dot (normal_3, normalize(xlv_TEXCOORD2)), 0.0, 1.0);
  diff_2 = tmpvar_5;
  highp vec3 tmpvar_6;
  tmpvar_6 = (((xlv_TEXCOORD5.xyz * _LightColor0.xyz) * diff_2) * (tmpvar_4 * 2.0));
  c_1.xyz = tmpvar_6;
  highp float tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD5.w;
  c_1.w = tmpvar_7;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "flash " {
Keywords { "DIRECTIONAL_COOKIE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceLightPos0]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
Matrix 12 [_LightMatrix0]
"agal_vs
[bc]
aaaaaaaaaaaaapacakaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov r0, c10
bdaaaaaaacaaaeaebaaaaaoeabaaaaaaaaaaaaoeacaaaaaa dp4 v2.z, c16, r0
aaaaaaaaaaaaapacajaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov r0, c9
bdaaaaaaacaaacaebaaaaaoeabaaaaaaaaaaaaoeacaaaaaa dp4 v2.y, c16, r0
aaaaaaaaabaaapacaiaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov r1, c8
bdaaaaaaaaaaaiacaaaaaaoeaaaaaaaaahaaaaoeabaaaaaa dp4 r0.w, a0, c7
bdaaaaaaaaaaaeacaaaaaaoeaaaaaaaaagaaaaoeabaaaaaa dp4 r0.z, a0, c6
bdaaaaaaaaaaabacaaaaaaoeaaaaaaaaaeaaaaoeabaaaaaa dp4 r0.x, a0, c4
bdaaaaaaaaaaacacaaaaaaoeaaaaaaaaafaaaaoeabaaaaaa dp4 r0.y, a0, c5
bdaaaaaaacaaabaebaaaaaoeabaaaaaaabaaaaoeacaaaaaa dp4 v2.x, c16, r1
bdaaaaaaadaaacaeaaaaaaoeacaaaaaaanaaaaoeabaaaaaa dp4 v3.y, r0, c13
bdaaaaaaadaaabaeaaaaaaoeacaaaaaaamaaaaoeabaaaaaa dp4 v3.x, r0, c12
aaaaaaaaafaaapaeacaaaaoeaaaaaaaaaaaaaaaaaaaaaaaa mov v5, a2
aaaaaaaaabaaahaeabaaaaoeaaaaaaaaaaaaaaaaaaaaaaaa mov v1.xyz, a1
bdaaaaaaaaaaaiadaaaaaaoeaaaaaaaaadaaaaoeabaaaaaa dp4 o0.w, a0, c3
bdaaaaaaaaaaaeadaaaaaaoeaaaaaaaaacaaaaoeabaaaaaa dp4 o0.z, a0, c2
bdaaaaaaaaaaacadaaaaaaoeaaaaaaaaabaaaaoeabaaaaaa dp4 o0.y, a0, c1
bdaaaaaaaaaaabadaaaaaaoeaaaaaaaaaaaaaaoeabaaaaaa dp4 o0.x, a0, c0
aaaaaaaaabaaaiaeaaaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov v1.w, c0
aaaaaaaaacaaaiaeaaaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov v2.w, c0
aaaaaaaaadaaamaeaaaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov v3.zw, c0
"
}

SubProgram "d3d11_9x " {
Keywords { "DIRECTIONAL_COOKIE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
ConstBuffer "$Globals" 112 // 80 used size, 4 vars
Matrix 16 [_LightMatrix0] 4
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerDraw" 336 // 320 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
Matrix 256 [_World2Object] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityPerDraw" 2
// 19 instructions, 2 temp regs, 0 temp arrays:
// ALU 16 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0_level_9_1
eefiecedfdghapkdldpokkagfeafamaifeehnmmfabaaaaaamaagaaaaaeaaaaaa
daaaaaaadaacaaaahiafaaaaaiagaaaaebgpgodjpiabaaaapiabaaaaaaacpopp
kaabaaaafiaaaaaaaeaaceaaaaaafeaaaaaafeaaaaaaceaaabaafeaaaaaaabaa
aeaaabaaaaaaaaaaabaaaaaaabaaafaaaaaaaaaaacaaaaaaaeaaagaaaaaaaaaa
acaaamaaaiaaakaaaaaaaaaaaaaaaaaaaaacpoppbpaaaaacafaaaaiaaaaaapja
bpaaaaacafaaabiaabaaapjabpaaaaacafaaaciaacaaapjaabaaaaacaaaaapia
afaaoekaafaaaaadabaaahiaaaaaffiaapaaoekaaeaaaaaeabaaahiaaoaaoeka
aaaaaaiaabaaoeiaaeaaaaaeaaaaahiabaaaoekaaaaakkiaabaaoeiaaeaaaaae
abaaahoabbaaoekaaaaappiaaaaaoeiaafaaaaadaaaaapiaaaaaffjaalaaoeka
aeaaaaaeaaaaapiaakaaoekaaaaaaajaaaaaoeiaaeaaaaaeaaaaapiaamaaoeka
aaaakkjaaaaaoeiaaeaaaaaeaaaaapiaanaaoekaaaaappjaaaaaoeiaafaaaaad
abaaadiaaaaaffiaacaaobkaaeaaaaaeaaaaadiaabaaobkaaaaaaaiaabaaoeia
aeaaaaaeaaaaadiaadaaobkaaaaakkiaaaaaoeiaaeaaaaaeaaaaamoaaeaabeka
aaaappiaaaaaeeiaafaaaaadaaaaapiaaaaaffjaahaaoekaaeaaaaaeaaaaapia
agaaoekaaaaaaajaaaaaoeiaaeaaaaaeaaaaapiaaiaaoekaaaaakkjaaaaaoeia
aeaaaaaeaaaaapiaajaaoekaaaaappjaaaaaoeiaaeaaaaaeaaaaadmaaaaappia
aaaaoekaaaaaoeiaabaaaaacaaaaammaaaaaoeiaabaaaaacacaaahoaacaaoeja
abaaaaacadaaapoaabaaoejappppaaaafdeieefceaadaaaaeaaaabaanaaaaaaa
fjaaaaaeegiocaaaaaaaaaaaafaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaa
fjaaaaaeegiocaaaacaaaaaabeaaaaaafpaaaaadpcbabaaaaaaaaaaafpaaaaad
pcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaaghaaaaaepccabaaaaaaaaaaa
abaaaaaagfaaaaadmccabaaaabaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaad
hccabaaaadaaaaaagfaaaaadpccabaaaaeaaaaaagiaaaaacacaaaaaadiaaaaai
pcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaabaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaacaaaaaakgbkbaaa
aaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaaacaaaaaa
adaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaajhcaabaaaaaaaaaaa
fgifcaaaabaaaaaaaaaaaaaaegiccaaaacaaaaaabbaaaaaadcaaaaalhcaabaaa
aaaaaaaaegiccaaaacaaaaaabaaaaaaaagiacaaaabaaaaaaaaaaaaaaegacbaaa
aaaaaaaadcaaaaalhcaabaaaaaaaaaaaegiccaaaacaaaaaabcaaaaaakgikcaaa
abaaaaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaalhccabaaaacaaaaaaegiccaaa
acaaaaaabdaaaaaapgipcaaaabaaaaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaaf
hccabaaaadaaaaaaegbcbaaaacaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiocaaaacaaaaaaanaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaapaaaaaapgbpbaaaaaaaaaaa
egaobaaaaaaaaaaadiaaaaaidcaabaaaabaaaaaafgafbaaaaaaaaaaaegiacaaa
aaaaaaaaacaaaaaadcaaaaakdcaabaaaaaaaaaaaegiacaaaaaaaaaaaabaaaaaa
agaabaaaaaaaaaaaegaabaaaabaaaaaadcaaaaakdcaabaaaaaaaaaaaegiacaaa
aaaaaaaaadaaaaaakgakbaaaaaaaaaaaegaabaaaaaaaaaaadcaaaaakmccabaaa
abaaaaaaagiecaaaaaaaaaaaaeaaaaaapgapbaaaaaaaaaaaagaebaaaaaaaaaaa
dgaaaaafpccabaaaaeaaaaaaegbobaaaabaaaaaadoaaaaabejfdeheoiiaaaaaa
aeaaaaaaaiaaaaaagiaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaa
hbaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaa
aaaaaaaaadaaaaaaacaaaaaaahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaa
adaaaaaaahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaafeeb
eoehefeofeaaklklepfdeheolaaaaaaaagaaaaaaaiaaaaaajiaaaaaaaaaaaaaa
abaaaaaaadaaaaaaaaaaaaaaapaaaaaakeaaaaaaaaaaaaaaaaaaaaaaadaaaaaa
abaaaaaaadapaaaakeaaaaaaadaaaaaaaaaaaaaaadaaaaaaabaaaaaaamadaaaa
keaaaaaaacaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaakeaaaaaaabaaaaaa
aaaaaaaaadaaaaaaadaaaaaaahaiaaaakeaaaaaaafaaaaaaaaaaaaaaadaaaaaa
aeaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklkl
"
}

SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 325
struct v2f {
    highp vec4 pos;
    highp vec2 uv;
    highp vec3 lightDir;
    highp vec3 normal;
    highp vec2 _LightCoord;
    highp vec4 color;
};
#line 317
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 335
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
#line 348
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return objSpaceLightPos.xyz;
}
#line 335
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 339
    o.lightDir = ObjSpaceLightDir( v.vertex);
    o.color = v.color;
    o.normal = v.normal;
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xy;
    #line 344
    return o;
}

out highp vec2 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD1;
out highp vec2 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD5;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec2(xl_retval.uv);
    xlv_TEXCOORD2 = vec3(xl_retval.lightDir);
    xlv_TEXCOORD1 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec2(xl_retval._LightCoord);
    xlv_TEXCOORD5 = vec4(xl_retval.color);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 325
struct v2f {
    highp vec4 pos;
    highp vec2 uv;
    highp vec3 lightDir;
    highp vec3 normal;
    highp vec2 _LightCoord;
    highp vec4 color;
};
#line 317
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 335
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
#line 348
#line 348
lowp vec4 frag( in v2f IN ) {
    IN.lightDir = normalize(IN.lightDir);
    lowp float atten = (texture( _LightTexture0, IN._LightCoord).w * 1.0);
    #line 352
    lowp vec3 normal = IN.normal;
    lowp float diff = xll_saturate_f(dot( normal, IN.lightDir));
    lowp vec4 c;
    c.xyz = (((IN.color.xyz * _LightColor0.xyz) * diff) * (atten * 2.0));
    #line 356
    c.w = IN.color.w;
    return c;
}
in highp vec2 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD1;
in highp vec2 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD5;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.uv = vec2(xlv_TEXCOORD0);
    xlt_IN.lightDir = vec3(xlv_TEXCOORD2);
    xlt_IN.normal = vec3(xlv_TEXCOORD1);
    xlt_IN._LightCoord = vec2(xlv_TEXCOORD3);
    xlt_IN.color = vec4(xlv_TEXCOORD5);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

}
Program "fp" {
// Fragment combos: 5
//   opengl - ALU: 8 to 17, TEX: 0 to 2
//   d3d9 - ALU: 9 to 17, TEX: 1 to 2
//   d3d11 - ALU: 7 to 14, TEX: 0 to 2, FLOW: 1 to 1
//   d3d11_9x - ALU: 7 to 14, TEX: 0 to 2, FLOW: 1 to 1
SubProgram "opengl " {
Keywords { "POINT" }
Vector 0 [_LightColor0]
SetTexture 0 [_LightTexture0] 2D
"!!ARBfp1.0
# 11 ALU, 1 TEX
PARAM c[2] = { program.local[0],
		{ 2 } };
TEMP R0;
TEMP R1;
DP3 R0.x, fragment.texcoord[3], fragment.texcoord[3];
MOV result.color.w, fragment.texcoord[5];
TEX R0.w, R0.x, texture[0], 2D;
DP3 R0.x, fragment.texcoord[2], fragment.texcoord[2];
RSQ R0.x, R0.x;
MUL R1.xyz, R0.x, fragment.texcoord[2];
MUL R0.xyz, fragment.texcoord[5], c[0];
DP3_SAT R1.x, fragment.texcoord[1], R1;
MUL R0.w, R0, c[1].x;
MUL R0.xyz, R0, R1.x;
MUL result.color.xyz, R0, R0.w;
END
# 11 instructions, 2 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "POINT" }
Vector 0 [_LightColor0]
SetTexture 0 [_LightTexture0] 2D
"ps_2_0
; 12 ALU, 1 TEX
dcl_2d s0
def c1, 2.00000000, 0, 0, 0
dcl t2.xyz
dcl t1.xyz
dcl t3.xyz
dcl t5
dp3 r0.x, t3, t3
mov r0.xy, r0.x
dp3 r1.x, t2, t2
rsq r1.x, r1.x
mul r1.xyz, r1.x, t2
dp3_pp_sat r1.x, t1, r1
mul r2.xyz, t5, c0
mul r1.xyz, r2, r1.x
texld r0, r0, s0
mul_pp r0.x, r0, c1
mul r0.xyz, r1, r0.x
mov_pp r0.w, t5
mov_pp oC0, r0
"
}

SubProgram "d3d11 " {
Keywords { "POINT" }
ConstBuffer "$Globals" 112 // 112 used size, 4 vars
Vector 96 [_LightColor0] 4
BindCB "$Globals" 0
SetTexture 0 [_LightTexture0] 2D 0
// 12 instructions, 2 temp regs, 0 temp arrays:
// ALU 9 float, 0 int, 0 uint
// TEX 1 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedbioionpndiclbpbkjhaodjppefcaogpfabaaaaaammacaaaaadaaaaaa
cmaaaaaaoeaaaaaabiabaaaaejfdeheolaaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaakeaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaadaaaaaakeaaaaaaacaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaakeaaaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaakeaaaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahahaaaakeaaaaaaafaaaaaaaaaaaaaa
adaaaaaaafaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefckmabaaaa
eaaaaaaaglaaaaaafjaaaaaeegiocaaaaaaaaaaaahaaaaaafkaaaaadaagabaaa
aaaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaagcbaaaadhcbabaaaacaaaaaa
gcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadpcbabaaa
afaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacacaaaaaabaaaaaahbcaabaaa
aaaaaaaaegbcbaaaacaaaaaaegbcbaaaacaaaaaaeeaaaaafbcaabaaaaaaaaaaa
akaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaaegbcbaaa
acaaaaaabacaaaahbcaabaaaaaaaaaaaegbcbaaaadaaaaaaegacbaaaaaaaaaaa
diaaaaaiocaabaaaaaaaaaaaagbjbaaaafaaaaaaagijcaaaaaaaaaaaagaaaaaa
diaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaajgahbaaaaaaaaaaabaaaaaah
icaabaaaaaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaaefaaaaajpcaabaaa
abaaaaaapgapbaaaaaaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaaaaaaaaah
icaabaaaaaaaaaaaakaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahhccabaaa
aaaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaaficcabaaaaaaaaaaa
dkbabaaaafaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "POINT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "POINT" }
"!!GLES"
}

SubProgram "flash " {
Keywords { "POINT" }
Vector 0 [_LightColor0]
SetTexture 0 [_LightTexture0] 2D
"agal_ps
c1 2.0 0.0 0.0 0.0
[bc]
bcaaaaaaaaaaabacadaaaaoeaeaaaaaaadaaaaoeaeaaaaaa dp3 r0.x, v3, v3
aaaaaaaaaaaaadacaaaaaaaaacaaaaaaaaaaaaaaaaaaaaaa mov r0.xy, r0.x
adaaaaaaacaaahacafaaaaoeaeaaaaaaaaaaaaoeabaaaaaa mul r2.xyz, v5, c0
ciaaaaaaaaaaapacaaaaaafeacaaaaaaaaaaaaaaafaababb tex r0, r0.xyyy, s0 <2d wrap linear point>
bcaaaaaaaaaaabacacaaaaoeaeaaaaaaacaaaaoeaeaaaaaa dp3 r0.x, v2, v2
akaaaaaaaaaaabacaaaaaaaaacaaaaaaaaaaaaaaaaaaaaaa rsq r0.x, r0.x
adaaaaaaabaaahacaaaaaaaaacaaaaaaacaaaaoeaeaaaaaa mul r1.xyz, r0.x, v2
adaaaaaaaaaaabacaaaaaappacaaaaaaabaaaaoeabaaaaaa mul r0.x, r0.w, c1
bcaaaaaaabaaabacabaaaaoeaeaaaaaaabaaaakeacaaaaaa dp3 r1.x, v1, r1.xyzz
bgaaaaaaabaaabacabaaaaaaacaaaaaaaaaaaaaaaaaaaaaa sat r1.x, r1.x
adaaaaaaabaaahacacaaaakeacaaaaaaabaaaaaaacaaaaaa mul r1.xyz, r2.xyzz, r1.x
adaaaaaaaaaaahacabaaaakeacaaaaaaaaaaaaaaacaaaaaa mul r0.xyz, r1.xyzz, r0.x
aaaaaaaaaaaaaiacafaaaaoeaeaaaaaaaaaaaaaaaaaaaaaa mov r0.w, v5
aaaaaaaaaaaaapadaaaaaaoeacaaaaaaaaaaaaaaaaaaaaaa mov o0, r0
"
}

SubProgram "d3d11_9x " {
Keywords { "POINT" }
ConstBuffer "$Globals" 112 // 112 used size, 4 vars
Vector 96 [_LightColor0] 4
BindCB "$Globals" 0
SetTexture 0 [_LightTexture0] 2D 0
// 12 instructions, 2 temp regs, 0 temp arrays:
// ALU 9 float, 0 int, 0 uint
// TEX 1 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0_level_9_1
eefiecedalemgnichmemlepajpfbeadidmiehekdabaaaaaapaadaaaaaeaaaaaa
daaaaaaafaabaaaaaeadaaaalmadaaaaebgpgodjbiabaaaabiabaaaaaaacpppp
oeaaaaaadeaaaaaaabaaciaaaaaadeaaaaaadeaaabaaceaaaaaadeaaaaaaaaaa
aaaaagaaabaaaaaaaaaaaaaaaaacppppbpaaaaacaaaaaaiaabaaahlabpaaaaac
aaaaaaiaacaachlabpaaaaacaaaaaaiaadaaahlabpaaaaacaaaaaaiaaeaacpla
bpaaaaacaaaaaajaaaaiapkaceaaaaacaaaaahiaabaaoelaaiaaaaadaaaadbia
acaaoelaaaaaoeiaafaaaaadaaaaaoiaaeaabllaaaaablkaafaaaaadaaaaahia
aaaaaaiaaaaabliaaiaaaaadaaaaaiiaadaaoelaadaaoelaabaaaaacabaaadia
aaaappiaecaaaaadabaacpiaabaaoeiaaaaioekaacaaaaadaaaaaiiaabaaaaia
abaaaaiaafaaaaadaaaachiaaaaappiaaaaaoeiaabaaaaacaaaaciiaaeaappla
abaaaaacaaaicpiaaaaaoeiappppaaaafdeieefckmabaaaaeaaaaaaaglaaaaaa
fjaaaaaeegiocaaaaaaaaaaaahaaaaaafkaaaaadaagabaaaaaaaaaaafibiaaae
aahabaaaaaaaaaaaffffaaaagcbaaaadhcbabaaaacaaaaaagcbaaaadhcbabaaa
adaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadpcbabaaaafaaaaaagfaaaaad
pccabaaaaaaaaaaagiaaaaacacaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaa
acaaaaaaegbcbaaaacaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
diaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaaegbcbaaaacaaaaaabacaaaah
bcaabaaaaaaaaaaaegbcbaaaadaaaaaaegacbaaaaaaaaaaadiaaaaaiocaabaaa
aaaaaaaaagbjbaaaafaaaaaaagijcaaaaaaaaaaaagaaaaaadiaaaaahhcaabaaa
aaaaaaaaagaabaaaaaaaaaaajgahbaaaaaaaaaaabaaaaaahicaabaaaaaaaaaaa
egbcbaaaaeaaaaaaegbcbaaaaeaaaaaaefaaaaajpcaabaaaabaaaaaapgapbaaa
aaaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaaaaaaaaahicaabaaaaaaaaaaa
akaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahhccabaaaaaaaaaaapgapbaaa
aaaaaaaaegacbaaaaaaaaaaadgaaaaaficcabaaaaaaaaaaadkbabaaaafaaaaaa
doaaaaabejfdeheolaaaaaaaagaaaaaaaiaaaaaajiaaaaaaaaaaaaaaabaaaaaa
adaaaaaaaaaaaaaaapaaaaaakeaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaa
adaaaaaakeaaaaaaacaaaaaaaaaaaaaaadaaaaaaacaaaaaaahahaaaakeaaaaaa
abaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaakeaaaaaaadaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaakeaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaa
apapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheo
cmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaa
apaaaaaafdfgfpfegbhcghgfheaaklkl"
}

SubProgram "gles3 " {
Keywords { "POINT" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "DIRECTIONAL" }
Vector 0 [_LightColor0]
"!!ARBfp1.0
# 8 ALU, 0 TEX
PARAM c[2] = { program.local[0],
		{ 2 } };
TEMP R0;
DP3 R0.x, fragment.texcoord[2], fragment.texcoord[2];
RSQ R0.x, R0.x;
MUL R0.xyz, R0.x, fragment.texcoord[2];
DP3_SAT R0.w, fragment.texcoord[1], R0;
MUL R0.xyz, fragment.texcoord[5], c[0];
MUL R0.xyz, R0, R0.w;
MUL result.color.xyz, R0, c[1].x;
MOV result.color.w, fragment.texcoord[5];
END
# 8 instructions, 1 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" }
Vector 0 [_LightColor0]
"ps_2_0
; 9 ALU
def c1, 2.00000000, 0, 0, 0
dcl t2.xyz
dcl t1.xyz
dcl t5
dp3 r0.x, t2, t2
rsq r0.x, r0.x
mul r0.xyz, r0.x, t2
dp3_pp_sat r0.x, t1, r0
mul r1.xyz, t5, c0
mul r0.xyz, r1, r0.x
mul r0.xyz, r0, c1.x
mov_pp r0.w, t5
mov_pp oC0, r0
"
}

SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" }
ConstBuffer "$Globals" 48 // 48 used size, 3 vars
Vector 32 [_LightColor0] 4
BindCB "$Globals" 0
// 9 instructions, 1 temp regs, 0 temp arrays:
// ALU 7 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedloieipnbkbffnjnmagdbeekmebefinkdabaaaaaadaacaaaaadaaaaaa
cmaaaaaammaaaaaaaaabaaaaejfdeheojiaaaaaaafaaaaaaaiaaaaaaiaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaimaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaadaaaaaaimaaaaaaacaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaimaaaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaaimaaaaaa
afaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklkl
fdeieefcciabaaaaeaaaaaaaekaaaaaafjaaaaaeegiocaaaaaaaaaaaadaaaaaa
gcbaaaadhcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaadpcbabaaa
aeaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacabaaaaaabaaaaaahbcaabaaa
aaaaaaaaegbcbaaaacaaaaaaegbcbaaaacaaaaaaeeaaaaafbcaabaaaaaaaaaaa
akaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaaegbcbaaa
acaaaaaabacaaaahbcaabaaaaaaaaaaaegbcbaaaadaaaaaaegacbaaaaaaaaaaa
diaaaaaiocaabaaaaaaaaaaaagbjbaaaaeaaaaaaagijcaaaaaaaaaaaacaaaaaa
diaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaajgahbaaaaaaaaaaaaaaaaaah
hccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaaficcabaaa
aaaaaaaadkbabaaaaeaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "DIRECTIONAL" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "DIRECTIONAL" }
"!!GLES"
}

SubProgram "flash " {
Keywords { "DIRECTIONAL" }
Vector 0 [_LightColor0]
"agal_ps
c1 2.0 0.0 0.0 0.0
[bc]
bcaaaaaaaaaaabacacaaaaoeaeaaaaaaacaaaaoeaeaaaaaa dp3 r0.x, v2, v2
akaaaaaaaaaaabacaaaaaaaaacaaaaaaaaaaaaaaaaaaaaaa rsq r0.x, r0.x
adaaaaaaaaaaahacaaaaaaaaacaaaaaaacaaaaoeaeaaaaaa mul r0.xyz, r0.x, v2
bcaaaaaaaaaaabacabaaaaoeaeaaaaaaaaaaaakeacaaaaaa dp3 r0.x, v1, r0.xyzz
bgaaaaaaaaaaabacaaaaaaaaacaaaaaaaaaaaaaaaaaaaaaa sat r0.x, r0.x
adaaaaaaabaaahacafaaaaoeaeaaaaaaaaaaaaoeabaaaaaa mul r1.xyz, v5, c0
adaaaaaaaaaaahacabaaaakeacaaaaaaaaaaaaaaacaaaaaa mul r0.xyz, r1.xyzz, r0.x
adaaaaaaaaaaahacaaaaaakeacaaaaaaabaaaaaaabaaaaaa mul r0.xyz, r0.xyzz, c1.x
aaaaaaaaaaaaaiacafaaaaoeaeaaaaaaaaaaaaaaaaaaaaaa mov r0.w, v5
aaaaaaaaaaaaapadaaaaaaoeacaaaaaaaaaaaaaaaaaaaaaa mov o0, r0
"
}

SubProgram "d3d11_9x " {
Keywords { "DIRECTIONAL" }
ConstBuffer "$Globals" 48 // 48 used size, 3 vars
Vector 32 [_LightColor0] 4
BindCB "$Globals" 0
// 9 instructions, 1 temp regs, 0 temp arrays:
// ALU 7 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0_level_9_1
eefiecedhmbgndkhekjafmbnlllfoeplpaliaonaabaaaaaapmacaaaaaeaaaaaa
daaaaaaapiaaaaaaciacaaaamiacaaaaebgpgodjmaaaaaaamaaaaaaaaaacpppp
jaaaaaaadaaaaaaaabaaceaaaaaadaaaaaaadaaaaaaaceaaaaaadaaaaaaaacaa
abaaaaaaaaaaaaaaaaacppppbpaaaaacaaaaaaiaabaaahlabpaaaaacaaaaaaia
acaachlabpaaaaacaaaaaaiaadaacplaceaaaaacaaaaahiaabaaoelaaiaaaaad
aaaadbiaacaaoelaaaaaoeiaafaaaaadaaaaaoiaadaabllaaaaablkaafaaaaad
aaaaahiaaaaaaaiaaaaabliaacaaaaadaaaachiaaaaaoeiaaaaaoeiaabaaaaac
aaaaciiaadaapplaabaaaaacaaaicpiaaaaaoeiappppaaaafdeieefcciabaaaa
eaaaaaaaekaaaaaafjaaaaaeegiocaaaaaaaaaaaadaaaaaagcbaaaadhcbabaaa
acaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaadpcbabaaaaeaaaaaagfaaaaad
pccabaaaaaaaaaaagiaaaaacabaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaa
acaaaaaaegbcbaaaacaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
diaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaaegbcbaaaacaaaaaabacaaaah
bcaabaaaaaaaaaaaegbcbaaaadaaaaaaegacbaaaaaaaaaaadiaaaaaiocaabaaa
aaaaaaaaagbjbaaaaeaaaaaaagijcaaaaaaaaaaaacaaaaaadiaaaaahhcaabaaa
aaaaaaaaagaabaaaaaaaaaaajgahbaaaaaaaaaaaaaaaaaahhccabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaaficcabaaaaaaaaaaadkbabaaa
aeaaaaaadoaaaaabejfdeheojiaaaaaaafaaaaaaaiaaaaaaiaaaaaaaaaaaaaaa
abaaaaaaadaaaaaaaaaaaaaaapaaaaaaimaaaaaaaaaaaaaaaaaaaaaaadaaaaaa
abaaaaaaadaaaaaaimaaaaaaacaaaaaaaaaaaaaaadaaaaaaacaaaaaaahahaaaa
imaaaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaaimaaaaaaafaaaaaa
aaaaaaaaadaaaaaaaeaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaafeeffied
epepfceeaaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaa
aaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklkl"
}

SubProgram "gles3 " {
Keywords { "DIRECTIONAL" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "SPOT" }
Vector 0 [_LightColor0]
SetTexture 0 [_LightTexture0] 2D
SetTexture 1 [_LightTextureB0] 2D
"!!ARBfp1.0
# 17 ALU, 2 TEX
PARAM c[2] = { program.local[0],
		{ 0, 0.5, 2 } };
TEMP R0;
TEMP R1;
TEMP R2;
DP3 R0.z, fragment.texcoord[3], fragment.texcoord[3];
RCP R0.x, fragment.texcoord[3].w;
MAD R0.xy, fragment.texcoord[3], R0.x, c[1].y;
SLT R2.x, c[1], fragment.texcoord[3].z;
MOV result.color.w, fragment.texcoord[5];
TEX R0.w, R0, texture[0], 2D;
TEX R1.w, R0.z, texture[1], 2D;
DP3 R0.x, fragment.texcoord[2], fragment.texcoord[2];
RSQ R1.x, R0.x;
MUL R0.w, R2.x, R0;
MUL R1.xyz, R1.x, fragment.texcoord[2];
MUL R1.w, R0, R1;
DP3_SAT R0.w, fragment.texcoord[1], R1;
MUL R0.xyz, fragment.texcoord[5], c[0];
MUL R1.x, R1.w, c[1].z;
MUL R0.xyz, R0, R0.w;
MUL result.color.xyz, R0, R1.x;
END
# 17 instructions, 3 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "SPOT" }
Vector 0 [_LightColor0]
SetTexture 0 [_LightTexture0] 2D
SetTexture 1 [_LightTextureB0] 2D
"ps_2_0
; 17 ALU, 2 TEX
dcl_2d s0
dcl_2d s1
def c1, 0.50000000, 0.00000000, 1.00000000, 2.00000000
dcl t2.xyz
dcl t1.xyz
dcl t3
dcl t5
rcp r1.x, t3.w
mad r2.xy, t3, r1.x, c1.x
dp3 r0.x, t3, t3
mov r1.xy, r0.x
texld r0, r2, s0
texld r2, r1, s1
cmp r0.x, -t3.z, c1.y, c1.z
mul_pp r0.x, r0, r0.w
mul_pp r0.x, r0, r2
dp3 r1.x, t2, t2
rsq r1.x, r1.x
mul r1.xyz, r1.x, t2
mul_pp r0.x, r0, c1.w
dp3_pp_sat r1.x, t1, r1
mul r2.xyz, t5, c0
mul r1.xyz, r2, r1.x
mul r0.xyz, r1, r0.x
mov_pp r0.w, t5
mov_pp oC0, r0
"
}

SubProgram "d3d11 " {
Keywords { "SPOT" }
ConstBuffer "$Globals" 112 // 112 used size, 4 vars
Vector 96 [_LightColor0] 4
BindCB "$Globals" 0
SetTexture 0 [_LightTexture0] 2D 0
SetTexture 1 [_LightTextureB0] 2D 1
// 18 instructions, 2 temp regs, 0 temp arrays:
// ALU 13 float, 0 int, 1 uint
// TEX 2 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecednbeijpebpeecdfmohlgldkeeefgcibieabaaaaaakeadaaaaadaaaaaa
cmaaaaaaoeaaaaaabiabaaaaejfdeheolaaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaakeaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaadaaaaaakeaaaaaaacaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaakeaaaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaakeaaaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapapaaaakeaaaaaaafaaaaaaaaaaaaaa
adaaaaaaafaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcieacaaaa
eaaaaaaakbaaaaaafjaaaaaeegiocaaaaaaaaaaaahaaaaaafkaaaaadaagabaaa
aaaaaaaafkaaaaadaagabaaaabaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaa
fibiaaaeaahabaaaabaaaaaaffffaaaagcbaaaadhcbabaaaacaaaaaagcbaaaad
hcbabaaaadaaaaaagcbaaaadpcbabaaaaeaaaaaagcbaaaadpcbabaaaafaaaaaa
gfaaaaadpccabaaaaaaaaaaagiaaaaacacaaaaaaaoaaaaahdcaabaaaaaaaaaaa
egbabaaaaeaaaaaapgbpbaaaaeaaaaaaaaaaaaakdcaabaaaaaaaaaaaegaabaaa
aaaaaaaaaceaaaaaaaaaaadpaaaaaadpaaaaaaaaaaaaaaaaefaaaaajpcaabaaa
aaaaaaaaegaabaaaaaaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaadbaaaaah
bcaabaaaaaaaaaaaabeaaaaaaaaaaaaackbabaaaaeaaaaaaabaaaaahbcaabaaa
aaaaaaaaakaabaaaaaaaaaaaabeaaaaaaaaaiadpdiaaaaahbcaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaaaaaaaaabaaaaaahccaabaaaaaaaaaaaegbcbaaa
aeaaaaaaegbcbaaaaeaaaaaaefaaaaajpcaabaaaabaaaaaafgafbaaaaaaaaaaa
eghobaaaabaaaaaaaagabaaaabaaaaaaapaaaaahbcaabaaaaaaaaaaaagaabaaa
aaaaaaaaagaabaaaabaaaaaabaaaaaahccaabaaaaaaaaaaaegbcbaaaacaaaaaa
egbcbaaaacaaaaaaeeaaaaafccaabaaaaaaaaaaabkaabaaaaaaaaaaadiaaaaah
ocaabaaaaaaaaaaafgafbaaaaaaaaaaaagbjbaaaacaaaaaabacaaaahccaabaaa
aaaaaaaaegbcbaaaadaaaaaajgahbaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaa
egbcbaaaafaaaaaaegiccaaaaaaaaaaaagaaaaaadiaaaaahocaabaaaaaaaaaaa
fgafbaaaaaaaaaaaagajbaaaabaaaaaadiaaaaahhccabaaaaaaaaaaaagaabaaa
aaaaaaaajgahbaaaaaaaaaaadgaaaaaficcabaaaaaaaaaaadkbabaaaafaaaaaa
doaaaaab"
}

SubProgram "gles " {
Keywords { "SPOT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "SPOT" }
"!!GLES"
}

SubProgram "flash " {
Keywords { "SPOT" }
Vector 0 [_LightColor0]
SetTexture 0 [_LightTexture0] 2D
SetTexture 1 [_LightTextureB0] 2D
"agal_ps
c1 0.5 0.0 1.0 2.0
[bc]
afaaaaaaabaaabacadaaaappaeaaaaaaaaaaaaaaaaaaaaaa rcp r1.x, v3.w
bcaaaaaaaaaaabacadaaaaoeaeaaaaaaadaaaaoeaeaaaaaa dp3 r0.x, v3, v3
adaaaaaaabaaadacadaaaaoeaeaaaaaaabaaaaaaacaaaaaa mul r1.xy, v3, r1.x
abaaaaaaabaaadacabaaaafeacaaaaaaabaaaaaaabaaaaaa add r1.xy, r1.xyyy, c1.x
aaaaaaaaaaaaadacaaaaaaaaacaaaaaaaaaaaaaaaaaaaaaa mov r0.xy, r0.x
adaaaaaaacaaahacafaaaaoeaeaaaaaaaaaaaaoeabaaaaaa mul r2.xyz, v5, c0
ciaaaaaaabaaapacabaaaafeacaaaaaaaaaaaaaaafaababb tex r1, r1.xyyy, s0 <2d wrap linear point>
ciaaaaaaaaaaapacaaaaaafeacaaaaaaabaaaaaaafaababb tex r0, r0.xyyy, s1 <2d wrap linear point>
bfaaaaaaacaaaiacadaaaakkaeaaaaaaaaaaaaaaaaaaaaaa neg r2.w, v3.z
ckaaaaaaaaaaabacacaaaappacaaaaaaabaaaaffabaaaaaa slt r0.x, r2.w, c1.y
adaaaaaaaaaaabacaaaaaaaaacaaaaaaabaaaappacaaaaaa mul r0.x, r0.x, r1.w
adaaaaaaaaaaabacaaaaaaaaacaaaaaaaaaaaappacaaaaaa mul r0.x, r0.x, r0.w
bcaaaaaaabaaabacacaaaaoeaeaaaaaaacaaaaoeaeaaaaaa dp3 r1.x, v2, v2
akaaaaaaabaaabacabaaaaaaacaaaaaaaaaaaaaaaaaaaaaa rsq r1.x, r1.x
adaaaaaaabaaahacabaaaaaaacaaaaaaacaaaaoeaeaaaaaa mul r1.xyz, r1.x, v2
bcaaaaaaabaaabacabaaaaoeaeaaaaaaabaaaakeacaaaaaa dp3 r1.x, v1, r1.xyzz
bgaaaaaaabaaabacabaaaaaaacaaaaaaaaaaaaaaaaaaaaaa sat r1.x, r1.x
adaaaaaaaaaaabacaaaaaaaaacaaaaaaabaaaappabaaaaaa mul r0.x, r0.x, c1.w
adaaaaaaabaaahacacaaaakeacaaaaaaabaaaaaaacaaaaaa mul r1.xyz, r2.xyzz, r1.x
adaaaaaaaaaaahacabaaaakeacaaaaaaaaaaaaaaacaaaaaa mul r0.xyz, r1.xyzz, r0.x
aaaaaaaaaaaaaiacafaaaaoeaeaaaaaaaaaaaaaaaaaaaaaa mov r0.w, v5
aaaaaaaaaaaaapadaaaaaaoeacaaaaaaaaaaaaaaaaaaaaaa mov o0, r0
"
}

SubProgram "d3d11_9x " {
Keywords { "SPOT" }
ConstBuffer "$Globals" 112 // 112 used size, 4 vars
Vector 96 [_LightColor0] 4
BindCB "$Globals" 0
SetTexture 0 [_LightTexture0] 2D 0
SetTexture 1 [_LightTextureB0] 2D 1
// 18 instructions, 2 temp regs, 0 temp arrays:
// ALU 13 float, 0 int, 1 uint
// TEX 2 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0_level_9_1
eefiecediebbibeaffknnoffjkdbkppjakhalgobabaaaaaaeeafaaaaaeaaaaaa
daaaaaaammabaaaafiaeaaaabaafaaaaebgpgodjjeabaaaajeabaaaaaaacpppp
fmabaaaadiaaaaaaabaacmaaaaaadiaaaaaadiaaacaaceaaaaaadiaaaaaaaaaa
abababaaaaaaagaaabaaaaaaaaaaaaaaaaacppppfbaaaaafabaaapkaaaaaaadp
aaaaaaaaaaaaaaaaaaaaaaaabpaaaaacaaaaaaiaabaaahlabpaaaaacaaaaaaia
acaachlabpaaaaacaaaaaaiaadaaaplabpaaaaacaaaaaaiaaeaacplabpaaaaac
aaaaaajaaaaiapkabpaaaaacaaaaaajaabaiapkaagaaaaacaaaaaiiaadaappla
aeaaaaaeaaaaadiaadaaoelaaaaappiaabaaaakaaiaaaaadabaaaiiaadaaoela
adaaoelaabaaaaacabaaadiaabaappiaecaaaaadaaaacpiaaaaaoeiaaaaioeka
ecaaaaadabaacpiaabaaoeiaabaioekaafaaaaadaaaacbiaaaaappiaabaaaaia
fiaaaaaeaaaacbiaadaakklbabaaffkaaaaaaaiaacaaaaadaaaaabiaaaaaaaia
aaaaaaiaceaaaaacabaaahiaabaaoelaaiaaaaadaaaadciaacaaoelaabaaoeia
afaaaaadabaaahiaaeaaoelaaaaaoekaafaaaaadaaaaaoiaaaaaffiaabaablia
afaaaaadaaaachiaaaaaaaiaaaaabliaabaaaaacaaaaciiaaeaapplaabaaaaac
aaaicpiaaaaaoeiappppaaaafdeieefcieacaaaaeaaaaaaakbaaaaaafjaaaaae
egiocaaaaaaaaaaaahaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaa
abaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaa
ffffaaaagcbaaaadhcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaad
pcbabaaaaeaaaaaagcbaaaadpcbabaaaafaaaaaagfaaaaadpccabaaaaaaaaaaa
giaaaaacacaaaaaaaoaaaaahdcaabaaaaaaaaaaaegbabaaaaeaaaaaapgbpbaaa
aeaaaaaaaaaaaaakdcaabaaaaaaaaaaaegaabaaaaaaaaaaaaceaaaaaaaaaaadp
aaaaaadpaaaaaaaaaaaaaaaaefaaaaajpcaabaaaaaaaaaaaegaabaaaaaaaaaaa
eghobaaaaaaaaaaaaagabaaaaaaaaaaadbaaaaahbcaabaaaaaaaaaaaabeaaaaa
aaaaaaaackbabaaaaeaaaaaaabaaaaahbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
abeaaaaaaaaaiadpdiaaaaahbcaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
aaaaaaaabaaaaaahccaabaaaaaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaa
efaaaaajpcaabaaaabaaaaaafgafbaaaaaaaaaaaeghobaaaabaaaaaaaagabaaa
abaaaaaaapaaaaahbcaabaaaaaaaaaaaagaabaaaaaaaaaaaagaabaaaabaaaaaa
baaaaaahccaabaaaaaaaaaaaegbcbaaaacaaaaaaegbcbaaaacaaaaaaeeaaaaaf
ccaabaaaaaaaaaaabkaabaaaaaaaaaaadiaaaaahocaabaaaaaaaaaaafgafbaaa
aaaaaaaaagbjbaaaacaaaaaabacaaaahccaabaaaaaaaaaaaegbcbaaaadaaaaaa
jgahbaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaaegbcbaaaafaaaaaaegiccaaa
aaaaaaaaagaaaaaadiaaaaahocaabaaaaaaaaaaafgafbaaaaaaaaaaaagajbaaa
abaaaaaadiaaaaahhccabaaaaaaaaaaaagaabaaaaaaaaaaajgahbaaaaaaaaaaa
dgaaaaaficcabaaaaaaaaaaadkbabaaaafaaaaaadoaaaaabejfdeheolaaaaaaa
agaaaaaaaiaaaaaajiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaa
keaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaadaaaaaakeaaaaaaacaaaaaa
aaaaaaaaadaaaaaaacaaaaaaahahaaaakeaaaaaaabaaaaaaaaaaaaaaadaaaaaa
adaaaaaaahahaaaakeaaaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapapaaaa
keaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaaapapaaaafdfgfpfaepfdejfe
ejepeoaafeeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaa
caaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgf
heaaklkl"
}

SubProgram "gles3 " {
Keywords { "SPOT" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "POINT_COOKIE" }
Vector 0 [_LightColor0]
SetTexture 0 [_LightTextureB0] 2D
SetTexture 1 [_LightTexture0] CUBE
"!!ARBfp1.0
# 13 ALU, 2 TEX
PARAM c[2] = { program.local[0],
		{ 2 } };
TEMP R0;
TEMP R1;
TEX R1.w, fragment.texcoord[3], texture[1], CUBE;
DP3 R0.x, fragment.texcoord[3], fragment.texcoord[3];
MOV result.color.w, fragment.texcoord[5];
TEX R0.w, R0.x, texture[0], 2D;
DP3 R0.x, fragment.texcoord[2], fragment.texcoord[2];
RSQ R1.x, R0.x;
MUL R1.xyz, R1.x, fragment.texcoord[2];
MUL R1.w, R0, R1;
DP3_SAT R0.w, fragment.texcoord[1], R1;
MUL R0.xyz, fragment.texcoord[5], c[0];
MUL R1.x, R1.w, c[1];
MUL R0.xyz, R0, R0.w;
MUL result.color.xyz, R0, R1.x;
END
# 13 instructions, 2 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "POINT_COOKIE" }
Vector 0 [_LightColor0]
SetTexture 0 [_LightTextureB0] 2D
SetTexture 1 [_LightTexture0] CUBE
"ps_2_0
; 13 ALU, 2 TEX
dcl_2d s0
dcl_cube s1
def c1, 2.00000000, 0, 0, 0
dcl t2.xyz
dcl t1.xyz
dcl t3.xyz
dcl t5
dp3 r0.x, t3, t3
mov r0.xy, r0.x
texld r2, r0, s0
texld r0, t3, s1
dp3 r0.x, t2, t2
rsq r1.x, r0.x
mul r1.xyz, r1.x, t2
mul r0.x, r2, r0.w
mul_pp r0.x, r0, c1
dp3_pp_sat r1.x, t1, r1
mul r2.xyz, t5, c0
mul r1.xyz, r2, r1.x
mul r0.xyz, r1, r0.x
mov_pp r0.w, t5
mov_pp oC0, r0
"
}

SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" }
ConstBuffer "$Globals" 112 // 112 used size, 4 vars
Vector 96 [_LightColor0] 4
BindCB "$Globals" 0
SetTexture 0 [_LightTextureB0] 2D 1
SetTexture 1 [_LightTexture0] CUBE 0
// 13 instructions, 3 temp regs, 0 temp arrays:
// ALU 9 float, 0 int, 0 uint
// TEX 2 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedmibmaanhegfhgebjgfckekinpiclngbeabaaaaaaamadaaaaadaaaaaa
cmaaaaaaoeaaaaaabiabaaaaejfdeheolaaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaakeaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaadaaaaaakeaaaaaaacaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaakeaaaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaakeaaaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahahaaaakeaaaaaaafaaaaaaaaaaaaaa
adaaaaaaafaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcomabaaaa
eaaaaaaahlaaaaaafjaaaaaeegiocaaaaaaaaaaaahaaaaaafkaaaaadaagabaaa
aaaaaaaafkaaaaadaagabaaaabaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaa
fidaaaaeaahabaaaabaaaaaaffffaaaagcbaaaadhcbabaaaacaaaaaagcbaaaad
hcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadpcbabaaaafaaaaaa
gfaaaaadpccabaaaaaaaaaaagiaaaaacadaaaaaabaaaaaahbcaabaaaaaaaaaaa
egbcbaaaacaaaaaaegbcbaaaacaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaaegbcbaaaacaaaaaa
bacaaaahbcaabaaaaaaaaaaaegbcbaaaadaaaaaaegacbaaaaaaaaaaadiaaaaai
ocaabaaaaaaaaaaaagbjbaaaafaaaaaaagijcaaaaaaaaaaaagaaaaaadiaaaaah
hcaabaaaaaaaaaaaagaabaaaaaaaaaaajgahbaaaaaaaaaaabaaaaaahicaabaaa
aaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaaefaaaaajpcaabaaaabaaaaaa
pgapbaaaaaaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaaefaaaaajpcaabaaa
acaaaaaaegbcbaaaaeaaaaaaeghobaaaabaaaaaaaagabaaaaaaaaaaaapaaaaah
icaabaaaaaaaaaaaagaabaaaabaaaaaapgapbaaaacaaaaaadiaaaaahhccabaaa
aaaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaaficcabaaaaaaaaaaa
dkbabaaaafaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "POINT_COOKIE" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "POINT_COOKIE" }
"!!GLES"
}

SubProgram "flash " {
Keywords { "POINT_COOKIE" }
Vector 0 [_LightColor0]
SetTexture 0 [_LightTextureB0] 2D
SetTexture 1 [_LightTexture0] CUBE
"agal_ps
c1 2.0 0.0 0.0 0.0
[bc]
bcaaaaaaaaaaabacadaaaaoeaeaaaaaaadaaaaoeaeaaaaaa dp3 r0.x, v3, v3
aaaaaaaaaaaaadacaaaaaaaaacaaaaaaaaaaaaaaaaaaaaaa mov r0.xy, r0.x
adaaaaaaacaaahacafaaaaoeaeaaaaaaaaaaaaoeabaaaaaa mul r2.xyz, v5, c0
ciaaaaaaabaaapacaaaaaafeacaaaaaaaaaaaaaaafaababb tex r1, r0.xyyy, s0 <2d wrap linear point>
ciaaaaaaaaaaapacadaaaaoeaeaaaaaaabaaaaaaafbababb tex r0, v3, s1 <cube wrap linear point>
bcaaaaaaaaaaabacacaaaaoeaeaaaaaaacaaaaoeaeaaaaaa dp3 r0.x, v2, v2
akaaaaaaabaaabacaaaaaaaaacaaaaaaaaaaaaaaaaaaaaaa rsq r1.x, r0.x
adaaaaaaaaaaabacabaaaappacaaaaaaaaaaaappacaaaaaa mul r0.x, r1.w, r0.w
adaaaaaaabaaahacabaaaaaaacaaaaaaacaaaaoeaeaaaaaa mul r1.xyz, r1.x, v2
bcaaaaaaabaaabacabaaaaoeaeaaaaaaabaaaakeacaaaaaa dp3 r1.x, v1, r1.xyzz
bgaaaaaaabaaabacabaaaaaaacaaaaaaaaaaaaaaaaaaaaaa sat r1.x, r1.x
adaaaaaaaaaaabacaaaaaaaaacaaaaaaabaaaaoeabaaaaaa mul r0.x, r0.x, c1
adaaaaaaabaaahacacaaaakeacaaaaaaabaaaaaaacaaaaaa mul r1.xyz, r2.xyzz, r1.x
adaaaaaaaaaaahacabaaaakeacaaaaaaaaaaaaaaacaaaaaa mul r0.xyz, r1.xyzz, r0.x
aaaaaaaaaaaaaiacafaaaaoeaeaaaaaaaaaaaaaaaaaaaaaa mov r0.w, v5
aaaaaaaaaaaaapadaaaaaaoeacaaaaaaaaaaaaaaaaaaaaaa mov o0, r0
"
}

SubProgram "d3d11_9x " {
Keywords { "POINT_COOKIE" }
ConstBuffer "$Globals" 112 // 112 used size, 4 vars
Vector 96 [_LightColor0] 4
BindCB "$Globals" 0
SetTexture 0 [_LightTextureB0] 2D 1
SetTexture 1 [_LightTexture0] CUBE 0
// 13 instructions, 3 temp regs, 0 temp arrays:
// ALU 9 float, 0 int, 0 uint
// TEX 2 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0_level_9_1
eefiecedllanjeideokngnjhhgonjfkkfphknfmoabaaaaaagaaeaaaaaeaaaaaa
daaaaaaaiaabaaaaheadaaaacmaeaaaaebgpgodjeiabaaaaeiabaaaaaaacpppp
baabaaaadiaaaaaaabaacmaaaaaadiaaaaaadiaaacaaceaaaaaadiaaabaaaaaa
aaababaaaaaaagaaabaaaaaaaaaaaaaaaaacppppbpaaaaacaaaaaaiaabaaahla
bpaaaaacaaaaaaiaacaachlabpaaaaacaaaaaaiaadaaahlabpaaaaacaaaaaaia
aeaacplabpaaaaacaaaaaajiaaaiapkabpaaaaacaaaaaajaabaiapkaaiaaaaad
aaaaaiiaadaaoelaadaaoelaabaaaaacaaaaadiaaaaappiaecaaaaadaaaaapia
aaaaoeiaabaioekaecaaaaadabaaapiaadaaoelaaaaioekaafaaaaadaaaacbia
aaaaaaiaabaappiaacaaaaadaaaaabiaaaaaaaiaaaaaaaiaceaaaaacabaaahia
abaaoelaaiaaaaadaaaadciaacaaoelaabaaoeiaafaaaaadabaaahiaaeaaoela
aaaaoekaafaaaaadaaaaaoiaaaaaffiaabaabliaafaaaaadaaaachiaaaaaaaia
aaaabliaabaaaaacaaaaciiaaeaapplaabaaaaacaaaicpiaaaaaoeiappppaaaa
fdeieefcomabaaaaeaaaaaaahlaaaaaafjaaaaaeegiocaaaaaaaaaaaahaaaaaa
fkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaafibiaaaeaahabaaa
aaaaaaaaffffaaaafidaaaaeaahabaaaabaaaaaaffffaaaagcbaaaadhcbabaaa
acaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaad
pcbabaaaafaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacadaaaaaabaaaaaah
bcaabaaaaaaaaaaaegbcbaaaacaaaaaaegbcbaaaacaaaaaaeeaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaa
egbcbaaaacaaaaaabacaaaahbcaabaaaaaaaaaaaegbcbaaaadaaaaaaegacbaaa
aaaaaaaadiaaaaaiocaabaaaaaaaaaaaagbjbaaaafaaaaaaagijcaaaaaaaaaaa
agaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaajgahbaaaaaaaaaaa
baaaaaahicaabaaaaaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaaefaaaaaj
pcaabaaaabaaaaaapgapbaaaaaaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaa
efaaaaajpcaabaaaacaaaaaaegbcbaaaaeaaaaaaeghobaaaabaaaaaaaagabaaa
aaaaaaaaapaaaaahicaabaaaaaaaaaaaagaabaaaabaaaaaapgapbaaaacaaaaaa
diaaaaahhccabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaaf
iccabaaaaaaaaaaadkbabaaaafaaaaaadoaaaaabejfdeheolaaaaaaaagaaaaaa
aiaaaaaajiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaakeaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaabaaaaaaadaaaaaakeaaaaaaacaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahahaaaakeaaaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahahaaaakeaaaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahahaaaakeaaaaaa
afaaaaaaaaaaaaaaadaaaaaaafaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklkl
"
}

SubProgram "gles3 " {
Keywords { "POINT_COOKIE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "DIRECTIONAL_COOKIE" }
Vector 0 [_LightColor0]
SetTexture 0 [_LightTexture0] 2D
"!!ARBfp1.0
# 10 ALU, 1 TEX
PARAM c[2] = { program.local[0],
		{ 2 } };
TEMP R0;
TEMP R1;
TEX R0.w, fragment.texcoord[3], texture[0], 2D;
DP3 R0.x, fragment.texcoord[2], fragment.texcoord[2];
RSQ R0.x, R0.x;
MUL R1.xyz, R0.x, fragment.texcoord[2];
MUL R0.xyz, fragment.texcoord[5], c[0];
DP3_SAT R1.x, fragment.texcoord[1], R1;
MUL R0.w, R0, c[1].x;
MUL R0.xyz, R0, R1.x;
MUL result.color.xyz, R0, R0.w;
MOV result.color.w, fragment.texcoord[5];
END
# 10 instructions, 2 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "DIRECTIONAL_COOKIE" }
Vector 0 [_LightColor0]
SetTexture 0 [_LightTexture0] 2D
"ps_2_0
; 10 ALU, 1 TEX
dcl_2d s0
def c1, 2.00000000, 0, 0, 0
dcl t2.xyz
dcl t1.xyz
dcl t3.xy
dcl t5
texld r0, t3, s0
dp3 r0.x, t2, t2
rsq r0.x, r0.x
mul r1.xyz, r0.x, t2
mul_pp r0.x, r0.w, c1
dp3_pp_sat r1.x, t1, r1
mul r2.xyz, t5, c0
mul r1.xyz, r2, r1.x
mul r0.xyz, r1, r0.x
mov_pp r0.w, t5
mov_pp oC0, r0
"
}

SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" }
ConstBuffer "$Globals" 112 // 112 used size, 4 vars
Vector 96 [_LightColor0] 4
BindCB "$Globals" 0
SetTexture 0 [_LightTexture0] 2D 0
// 11 instructions, 2 temp regs, 0 temp arrays:
// ALU 8 float, 0 int, 0 uint
// TEX 1 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefieceddlagaeffgggjojnblaiknbdlaooljhknabaaaaaalaacaaaaadaaaaaa
cmaaaaaaoeaaaaaabiabaaaaejfdeheolaaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaakeaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaadaaaaaakeaaaaaaadaaaaaaaaaaaaaaadaaaaaaabaaaaaa
amamaaaakeaaaaaaacaaaaaaaaaaaaaaadaaaaaaacaaaaaaahahaaaakeaaaaaa
abaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaakeaaaaaaafaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcjaabaaaa
eaaaaaaageaaaaaafjaaaaaeegiocaaaaaaaaaaaahaaaaaafkaaaaadaagabaaa
aaaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaagcbaaaadmcbabaaaabaaaaaa
gcbaaaadhcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaadpcbabaaa
aeaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacacaaaaaabaaaaaahbcaabaaa
aaaaaaaaegbcbaaaacaaaaaaegbcbaaaacaaaaaaeeaaaaafbcaabaaaaaaaaaaa
akaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaaegbcbaaa
acaaaaaabacaaaahbcaabaaaaaaaaaaaegbcbaaaadaaaaaaegacbaaaaaaaaaaa
diaaaaaiocaabaaaaaaaaaaaagbjbaaaaeaaaaaaagijcaaaaaaaaaaaagaaaaaa
diaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaajgahbaaaaaaaaaaaefaaaaaj
pcaabaaaabaaaaaaogbkbaaaabaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaa
aaaaaaahicaabaaaaaaaaaaadkaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaah
hccabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaaficcabaaa
aaaaaaaadkbabaaaaeaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "DIRECTIONAL_COOKIE" }
"!!GLES"
}

SubProgram "flash " {
Keywords { "DIRECTIONAL_COOKIE" }
Vector 0 [_LightColor0]
SetTexture 0 [_LightTexture0] 2D
"agal_ps
c1 2.0 0.0 0.0 0.0
[bc]
ciaaaaaaaaaaapacadaaaaoeaeaaaaaaaaaaaaaaafaababb tex r0, v3, s0 <2d wrap linear point>
bcaaaaaaaaaaabacacaaaaoeaeaaaaaaacaaaaoeaeaaaaaa dp3 r0.x, v2, v2
akaaaaaaaaaaabacaaaaaaaaacaaaaaaaaaaaaaaaaaaaaaa rsq r0.x, r0.x
adaaaaaaabaaahacaaaaaaaaacaaaaaaacaaaaoeaeaaaaaa mul r1.xyz, r0.x, v2
adaaaaaaaaaaabacaaaaaappacaaaaaaabaaaaoeabaaaaaa mul r0.x, r0.w, c1
bcaaaaaaabaaabacabaaaaoeaeaaaaaaabaaaakeacaaaaaa dp3 r1.x, v1, r1.xyzz
bgaaaaaaabaaabacabaaaaaaacaaaaaaaaaaaaaaaaaaaaaa sat r1.x, r1.x
adaaaaaaacaaahacafaaaaoeaeaaaaaaaaaaaaoeabaaaaaa mul r2.xyz, v5, c0
adaaaaaaabaaahacacaaaakeacaaaaaaabaaaaaaacaaaaaa mul r1.xyz, r2.xyzz, r1.x
adaaaaaaaaaaahacabaaaakeacaaaaaaaaaaaaaaacaaaaaa mul r0.xyz, r1.xyzz, r0.x
aaaaaaaaaaaaaiacafaaaaoeaeaaaaaaaaaaaaaaaaaaaaaa mov r0.w, v5
aaaaaaaaaaaaapadaaaaaaoeacaaaaaaaaaaaaaaaaaaaaaa mov o0, r0
"
}

SubProgram "d3d11_9x " {
Keywords { "DIRECTIONAL_COOKIE" }
ConstBuffer "$Globals" 112 // 112 used size, 4 vars
Vector 96 [_LightColor0] 4
BindCB "$Globals" 0
SetTexture 0 [_LightTexture0] 2D 0
// 11 instructions, 2 temp regs, 0 temp arrays:
// ALU 8 float, 0 int, 0 uint
// TEX 1 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0_level_9_1
eefieceddjfbacnndndbchhbkadbfkdckhdefnbcabaaaaaameadaaaaaeaaaaaa
daaaaaaaeaabaaaaniacaaaajaadaaaaebgpgodjaiabaaaaaiabaaaaaaacpppp
neaaaaaadeaaaaaaabaaciaaaaaadeaaaaaadeaaabaaceaaaaaadeaaaaaaaaaa
aaaaagaaabaaaaaaaaaaaaaaaaacppppbpaaaaacaaaaaaiaaaaaaplabpaaaaac
aaaaaaiaabaaahlabpaaaaacaaaaaaiaacaachlabpaaaaacaaaaaaiaadaacpla
bpaaaaacaaaaaajaaaaiapkaceaaaaacaaaaahiaabaaoelaaiaaaaadaaaadbia
acaaoelaaaaaoeiaafaaaaadaaaaaoiaadaabllaaaaablkaafaaaaadaaaaahia
aaaaaaiaaaaabliaabaaaaacabaaadiaaaaabllaecaaaaadabaacpiaabaaoeia
aaaioekaacaaaaadaaaaaiiaabaappiaabaappiaafaaaaadaaaachiaaaaappia
aaaaoeiaabaaaaacaaaaciiaadaapplaabaaaaacaaaicpiaaaaaoeiappppaaaa
fdeieefcjaabaaaaeaaaaaaageaaaaaafjaaaaaeegiocaaaaaaaaaaaahaaaaaa
fkaaaaadaagabaaaaaaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaagcbaaaad
mcbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaa
gcbaaaadpcbabaaaaeaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacacaaaaaa
baaaaaahbcaabaaaaaaaaaaaegbcbaaaacaaaaaaegbcbaaaacaaaaaaeeaaaaaf
bcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaa
aaaaaaaaegbcbaaaacaaaaaabacaaaahbcaabaaaaaaaaaaaegbcbaaaadaaaaaa
egacbaaaaaaaaaaadiaaaaaiocaabaaaaaaaaaaaagbjbaaaaeaaaaaaagijcaaa
aaaaaaaaagaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaajgahbaaa
aaaaaaaaefaaaaajpcaabaaaabaaaaaaogbkbaaaabaaaaaaeghobaaaaaaaaaaa
aagabaaaaaaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaabaaaaaadkaabaaa
abaaaaaadiaaaaahhccabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaa
dgaaaaaficcabaaaaaaaaaaadkbabaaaaeaaaaaadoaaaaabejfdeheolaaaaaaa
agaaaaaaaiaaaaaajiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaa
keaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaadaaaaaakeaaaaaaadaaaaaa
aaaaaaaaadaaaaaaabaaaaaaamamaaaakeaaaaaaacaaaaaaaaaaaaaaadaaaaaa
acaaaaaaahahaaaakeaaaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaa
keaaaaaaafaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapapaaaafdfgfpfaepfdejfe
ejepeoaafeeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaa
caaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgf
heaaklkl"
}

SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" }
"!!GLES3"
}

}

#LINE 281

        }
	} 
	
	FallBack "VertexLit"
}
